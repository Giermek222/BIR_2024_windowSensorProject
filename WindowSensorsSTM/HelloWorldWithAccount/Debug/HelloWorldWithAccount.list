
HelloWorldWithAccount.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000befc  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800c134  0800c134  0000d134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c558  0800c558  0000d558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c560  0800c560  0000d560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c564  0800c564  0000d564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000009c  20000000  0800c568  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000710  2000009c  0800c604  0000e09c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200007ac  0800c604  0000e7ac  2**0
                  ALLOC
  9 .ARM.attributes 0000003a  00000000  00000000  0000e09c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e11b  00000000  00000000  0000e0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004832  00000000  00000000  0002c1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001898  00000000  00000000  00030a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001291  00000000  00000000  000322c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00017c85  00000000  00000000  00033551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0000851f  00000000  00000000  0004b1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000536f5  2**0
                  CONTENTS, READONLY
 17 .iar_vfe_header 00000004  00000000  00000000  00053738  2**2
                  CONTENTS, READONLY
 18 .debug_frame  00006fe8  00000000  00000000  0005373c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000086  00000000  00000000  0005a724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000009c 	.word	0x2000009c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800c11c 	.word	0x0800c11c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000a0 	.word	0x200000a0
 8000274:	0800c11c 	.word	0x0800c11c

08000278 <cmox_initialize>:
 8000278:	2800      	cmp	r0, #0
 800027a:	4a1a      	ldr	r2, [pc, #104]	@ (80002e4 <cmox_initialize+0x6c>)
 800027c:	b570      	push	{r4, r5, r6, lr}
 800027e:	bf1c      	itt	ne
 8000280:	6801      	ldrne	r1, [r0, #0]
 8000282:	2900      	cmpne	r1, #0
 8000284:	d123      	bne.n	80002ce <cmox_initialize+0x56>
 8000286:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <cmox_initialize+0x70>)
 8000288:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 800028c:	681c      	ldr	r4, [r3, #0]
 800028e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8000292:	400c      	ands	r4, r1
 8000294:	42ac      	cmp	r4, r5
 8000296:	bf1f      	itttt	ne
 8000298:	681b      	ldrne	r3, [r3, #0]
 800029a:	4019      	andne	r1, r3
 800029c:	f24c 2670 	movwne	r6, #49776	@ 0xc270
 80002a0:	42b1      	cmpne	r1, r6
 80002a2:	d112      	bne.n	80002ca <cmox_initialize+0x52>
 80002a4:	4c11      	ldr	r4, [pc, #68]	@ (80002ec <cmox_initialize+0x74>)
 80002a6:	6821      	ldr	r1, [r4, #0]
 80002a8:	b979      	cbnz	r1, 80002ca <cmox_initialize+0x52>
 80002aa:	4911      	ldr	r1, [pc, #68]	@ (80002f0 <cmox_initialize+0x78>)
 80002ac:	680b      	ldr	r3, [r1, #0]
 80002ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002b2:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80002b6:	bf1f      	itttt	ne
 80002b8:	6809      	ldrne	r1, [r1, #0]
 80002ba:	f3c1 010b 	ubfxne	r1, r1, #0, #12
 80002be:	f240 4383 	movwne	r3, #1155	@ 0x483
 80002c2:	4299      	cmpne	r1, r3
 80002c4:	bf04      	itt	eq
 80002c6:	2401      	moveq	r4, #1
 80002c8:	7014      	strbeq	r4, [r2, #0]
 80002ca:	b928      	cbnz	r0, 80002d8 <cmox_initialize+0x60>
 80002cc:	e005      	b.n	80002da <cmox_initialize+0x62>
 80002ce:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <cmox_initialize+0x7c>)
 80002d0:	4299      	cmp	r1, r3
 80002d2:	bf04      	itt	eq
 80002d4:	2101      	moveq	r1, #1
 80002d6:	7011      	strbeq	r1, [r2, #0]
 80002d8:	6840      	ldr	r0, [r0, #4]
 80002da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80002de:	f001 b9df 	b.w	80016a0 <cmox_ll_init>
 80002e2:	bf00      	nop
 80002e4:	200000b8 	.word	0x200000b8
 80002e8:	e000ed00 	.word	0xe000ed00
 80002ec:	e0042000 	.word	0xe0042000
 80002f0:	5c001000 	.word	0x5c001000
 80002f4:	48370000 	.word	0x48370000

080002f8 <strlen>:
 80002f8:	4603      	mov	r3, r0
 80002fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d1fb      	bne.n	80002fa <strlen+0x2>
 8000302:	1a18      	subs	r0, r3, r0
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr

08000308 <__aeabi_drsub>:
 8000308:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800030c:	e002      	b.n	8000314 <__adddf3>
 800030e:	bf00      	nop

08000310 <__aeabi_dsub>:
 8000310:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000314 <__adddf3>:
 8000314:	b530      	push	{r4, r5, lr}
 8000316:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800031a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800031e:	ea94 0f05 	teq	r4, r5
 8000322:	bf08      	it	eq
 8000324:	ea90 0f02 	teqeq	r0, r2
 8000328:	bf1f      	itttt	ne
 800032a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800032e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000332:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000336:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800033a:	f000 80e2 	beq.w	8000502 <__adddf3+0x1ee>
 800033e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000342:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000346:	bfb8      	it	lt
 8000348:	426d      	neglt	r5, r5
 800034a:	dd0c      	ble.n	8000366 <__adddf3+0x52>
 800034c:	442c      	add	r4, r5
 800034e:	ea80 0202 	eor.w	r2, r0, r2
 8000352:	ea81 0303 	eor.w	r3, r1, r3
 8000356:	ea82 0000 	eor.w	r0, r2, r0
 800035a:	ea83 0101 	eor.w	r1, r3, r1
 800035e:	ea80 0202 	eor.w	r2, r0, r2
 8000362:	ea81 0303 	eor.w	r3, r1, r3
 8000366:	2d36      	cmp	r5, #54	@ 0x36
 8000368:	bf88      	it	hi
 800036a:	bd30      	pophi	{r4, r5, pc}
 800036c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000370:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000374:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000378:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800037c:	d002      	beq.n	8000384 <__adddf3+0x70>
 800037e:	4240      	negs	r0, r0
 8000380:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000384:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000388:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800038c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000390:	d002      	beq.n	8000398 <__adddf3+0x84>
 8000392:	4252      	negs	r2, r2
 8000394:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000398:	ea94 0f05 	teq	r4, r5
 800039c:	f000 80a7 	beq.w	80004ee <__adddf3+0x1da>
 80003a0:	f1a4 0401 	sub.w	r4, r4, #1
 80003a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a8:	db0d      	blt.n	80003c6 <__adddf3+0xb2>
 80003aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003ae:	fa22 f205 	lsr.w	r2, r2, r5
 80003b2:	1880      	adds	r0, r0, r2
 80003b4:	f141 0100 	adc.w	r1, r1, #0
 80003b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80003bc:	1880      	adds	r0, r0, r2
 80003be:	fa43 f305 	asr.w	r3, r3, r5
 80003c2:	4159      	adcs	r1, r3
 80003c4:	e00e      	b.n	80003e4 <__adddf3+0xd0>
 80003c6:	f1a5 0520 	sub.w	r5, r5, #32
 80003ca:	f10e 0e20 	add.w	lr, lr, #32
 80003ce:	2a01      	cmp	r2, #1
 80003d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003d4:	bf28      	it	cs
 80003d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003da:	fa43 f305 	asr.w	r3, r3, r5
 80003de:	18c0      	adds	r0, r0, r3
 80003e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003e8:	d507      	bpl.n	80003fa <__adddf3+0xe6>
 80003ea:	f04f 0e00 	mov.w	lr, #0
 80003ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80003f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003fe:	d31b      	bcc.n	8000438 <__adddf3+0x124>
 8000400:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000404:	d30c      	bcc.n	8000420 <__adddf3+0x10c>
 8000406:	0849      	lsrs	r1, r1, #1
 8000408:	ea5f 0030 	movs.w	r0, r0, rrx
 800040c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000410:	f104 0401 	add.w	r4, r4, #1
 8000414:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000418:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800041c:	f080 809a 	bcs.w	8000554 <__adddf3+0x240>
 8000420:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000424:	bf08      	it	eq
 8000426:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800042a:	f150 0000 	adcs.w	r0, r0, #0
 800042e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000432:	ea41 0105 	orr.w	r1, r1, r5
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800043c:	4140      	adcs	r0, r0
 800043e:	eb41 0101 	adc.w	r1, r1, r1
 8000442:	3c01      	subs	r4, #1
 8000444:	bf28      	it	cs
 8000446:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800044a:	d2e9      	bcs.n	8000420 <__adddf3+0x10c>
 800044c:	f091 0f00 	teq	r1, #0
 8000450:	bf04      	itt	eq
 8000452:	4601      	moveq	r1, r0
 8000454:	2000      	moveq	r0, #0
 8000456:	fab1 f381 	clz	r3, r1
 800045a:	bf08      	it	eq
 800045c:	3320      	addeq	r3, #32
 800045e:	f1a3 030b 	sub.w	r3, r3, #11
 8000462:	f1b3 0220 	subs.w	r2, r3, #32
 8000466:	da0c      	bge.n	8000482 <__adddf3+0x16e>
 8000468:	320c      	adds	r2, #12
 800046a:	dd08      	ble.n	800047e <__adddf3+0x16a>
 800046c:	f102 0c14 	add.w	ip, r2, #20
 8000470:	f1c2 020c 	rsb	r2, r2, #12
 8000474:	fa01 f00c 	lsl.w	r0, r1, ip
 8000478:	fa21 f102 	lsr.w	r1, r1, r2
 800047c:	e00c      	b.n	8000498 <__adddf3+0x184>
 800047e:	f102 0214 	add.w	r2, r2, #20
 8000482:	bfd8      	it	le
 8000484:	f1c2 0c20 	rsble	ip, r2, #32
 8000488:	fa01 f102 	lsl.w	r1, r1, r2
 800048c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000490:	bfdc      	itt	le
 8000492:	ea41 010c 	orrle.w	r1, r1, ip
 8000496:	4090      	lslle	r0, r2
 8000498:	1ae4      	subs	r4, r4, r3
 800049a:	bfa2      	ittt	ge
 800049c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a0:	4329      	orrge	r1, r5
 80004a2:	bd30      	popge	{r4, r5, pc}
 80004a4:	ea6f 0404 	mvn.w	r4, r4
 80004a8:	3c1f      	subs	r4, #31
 80004aa:	da1c      	bge.n	80004e6 <__adddf3+0x1d2>
 80004ac:	340c      	adds	r4, #12
 80004ae:	dc0e      	bgt.n	80004ce <__adddf3+0x1ba>
 80004b0:	f104 0414 	add.w	r4, r4, #20
 80004b4:	f1c4 0220 	rsb	r2, r4, #32
 80004b8:	fa20 f004 	lsr.w	r0, r0, r4
 80004bc:	fa01 f302 	lsl.w	r3, r1, r2
 80004c0:	ea40 0003 	orr.w	r0, r0, r3
 80004c4:	fa21 f304 	lsr.w	r3, r1, r4
 80004c8:	ea45 0103 	orr.w	r1, r5, r3
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f1c4 040c 	rsb	r4, r4, #12
 80004d2:	f1c4 0220 	rsb	r2, r4, #32
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 f304 	lsl.w	r3, r1, r4
 80004de:	ea40 0003 	orr.w	r0, r0, r3
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	f094 0f00 	teq	r4, #0
 80004f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004f6:	bf06      	itte	eq
 80004f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004fc:	3401      	addeq	r4, #1
 80004fe:	3d01      	subne	r5, #1
 8000500:	e74e      	b.n	80003a0 <__adddf3+0x8c>
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf18      	it	ne
 8000508:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800050c:	d029      	beq.n	8000562 <__adddf3+0x24e>
 800050e:	ea94 0f05 	teq	r4, r5
 8000512:	bf08      	it	eq
 8000514:	ea90 0f02 	teqeq	r0, r2
 8000518:	d005      	beq.n	8000526 <__adddf3+0x212>
 800051a:	ea54 0c00 	orrs.w	ip, r4, r0
 800051e:	bf04      	itt	eq
 8000520:	4619      	moveq	r1, r3
 8000522:	4610      	moveq	r0, r2
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	ea91 0f03 	teq	r1, r3
 800052a:	bf1e      	ittt	ne
 800052c:	2100      	movne	r1, #0
 800052e:	2000      	movne	r0, #0
 8000530:	bd30      	popne	{r4, r5, pc}
 8000532:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000536:	d105      	bne.n	8000544 <__adddf3+0x230>
 8000538:	0040      	lsls	r0, r0, #1
 800053a:	4149      	adcs	r1, r1
 800053c:	bf28      	it	cs
 800053e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000542:	bd30      	pop	{r4, r5, pc}
 8000544:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000548:	bf3c      	itt	cc
 800054a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800054e:	bd30      	popcc	{r4, r5, pc}
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000558:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800055c:	f04f 0000 	mov.w	r0, #0
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000566:	bf1a      	itte	ne
 8000568:	4619      	movne	r1, r3
 800056a:	4610      	movne	r0, r2
 800056c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000570:	bf1c      	itt	ne
 8000572:	460b      	movne	r3, r1
 8000574:	4602      	movne	r2, r0
 8000576:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800057a:	bf06      	itte	eq
 800057c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000580:	ea91 0f03 	teqeq	r1, r3
 8000584:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	bf00      	nop

0800058c <__aeabi_ui2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a0:	f04f 0500 	mov.w	r5, #0
 80005a4:	f04f 0100 	mov.w	r1, #0
 80005a8:	e750      	b.n	800044c <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_i2d>:
 80005ac:	f090 0f00 	teq	r0, #0
 80005b0:	bf04      	itt	eq
 80005b2:	2100      	moveq	r1, #0
 80005b4:	4770      	bxeq	lr
 80005b6:	b530      	push	{r4, r5, lr}
 80005b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005c4:	bf48      	it	mi
 80005c6:	4240      	negmi	r0, r0
 80005c8:	f04f 0100 	mov.w	r1, #0
 80005cc:	e73e      	b.n	800044c <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_f2d>:
 80005d0:	0042      	lsls	r2, r0, #1
 80005d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005de:	bf1f      	itttt	ne
 80005e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ec:	4770      	bxne	lr
 80005ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005f2:	bf08      	it	eq
 80005f4:	4770      	bxeq	lr
 80005f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005fa:	bf04      	itt	eq
 80005fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000600:	4770      	bxeq	lr
 8000602:	b530      	push	{r4, r5, lr}
 8000604:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800060c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000610:	e71c      	b.n	800044c <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_ul2d>:
 8000614:	ea50 0201 	orrs.w	r2, r0, r1
 8000618:	bf08      	it	eq
 800061a:	4770      	bxeq	lr
 800061c:	b530      	push	{r4, r5, lr}
 800061e:	f04f 0500 	mov.w	r5, #0
 8000622:	e00a      	b.n	800063a <__aeabi_l2d+0x16>

08000624 <__aeabi_l2d>:
 8000624:	ea50 0201 	orrs.w	r2, r0, r1
 8000628:	bf08      	it	eq
 800062a:	4770      	bxeq	lr
 800062c:	b530      	push	{r4, r5, lr}
 800062e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000632:	d502      	bpl.n	800063a <__aeabi_l2d+0x16>
 8000634:	4240      	negs	r0, r0
 8000636:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800063a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800063e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000642:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000646:	f43f aed8 	beq.w	80003fa <__adddf3+0xe6>
 800064a:	f04f 0203 	mov.w	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000662:	f1c2 0320 	rsb	r3, r2, #32
 8000666:	fa00 fc03 	lsl.w	ip, r0, r3
 800066a:	fa20 f002 	lsr.w	r0, r0, r2
 800066e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000672:	ea40 000e 	orr.w	r0, r0, lr
 8000676:	fa21 f102 	lsr.w	r1, r1, r2
 800067a:	4414      	add	r4, r2
 800067c:	e6bd      	b.n	80003fa <__adddf3+0xe6>
 800067e:	bf00      	nop

08000680 <__aeabi_dmul>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000686:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800068a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800068e:	bf1d      	ittte	ne
 8000690:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000694:	ea94 0f0c 	teqne	r4, ip
 8000698:	ea95 0f0c 	teqne	r5, ip
 800069c:	f000 f8de 	bleq	800085c <__aeabi_dmul+0x1dc>
 80006a0:	442c      	add	r4, r5
 80006a2:	ea81 0603 	eor.w	r6, r1, r3
 80006a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006b2:	bf18      	it	ne
 80006b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006c0:	d038      	beq.n	8000734 <__aeabi_dmul+0xb4>
 80006c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006d6:	f04f 0600 	mov.w	r6, #0
 80006da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006de:	f09c 0f00 	teq	ip, #0
 80006e2:	bf18      	it	ne
 80006e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006f4:	d204      	bcs.n	8000700 <__aeabi_dmul+0x80>
 80006f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006fa:	416d      	adcs	r5, r5
 80006fc:	eb46 0606 	adc.w	r6, r6, r6
 8000700:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000704:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000708:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800070c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000710:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000714:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000718:	bf88      	it	hi
 800071a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800071e:	d81e      	bhi.n	800075e <__aeabi_dmul+0xde>
 8000720:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000724:	bf08      	it	eq
 8000726:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800072a:	f150 0000 	adcs.w	r0, r0, #0
 800072e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000738:	ea46 0101 	orr.w	r1, r6, r1
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000748:	bfc2      	ittt	gt
 800074a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800074e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000752:	bd70      	popgt	{r4, r5, r6, pc}
 8000754:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000758:	f04f 0e00 	mov.w	lr, #0
 800075c:	3c01      	subs	r4, #1
 800075e:	f300 80ab 	bgt.w	80008b8 <__aeabi_dmul+0x238>
 8000762:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000766:	bfde      	ittt	le
 8000768:	2000      	movle	r0, #0
 800076a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800076e:	bd70      	pople	{r4, r5, r6, pc}
 8000770:	f1c4 0400 	rsb	r4, r4, #0
 8000774:	3c20      	subs	r4, #32
 8000776:	da35      	bge.n	80007e4 <__aeabi_dmul+0x164>
 8000778:	340c      	adds	r4, #12
 800077a:	dc1b      	bgt.n	80007b4 <__aeabi_dmul+0x134>
 800077c:	f104 0414 	add.w	r4, r4, #20
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f305 	lsl.w	r3, r0, r5
 8000788:	fa20 f004 	lsr.w	r0, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000798:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	fa21 f604 	lsr.w	r6, r1, r4
 80007a4:	eb42 0106 	adc.w	r1, r2, r6
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 040c 	rsb	r4, r4, #12
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f304 	lsl.w	r3, r0, r4
 80007c0:	fa20 f005 	lsr.w	r0, r0, r5
 80007c4:	fa01 f204 	lsl.w	r2, r1, r4
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d4:	f141 0100 	adc.w	r1, r1, #0
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f1c4 0520 	rsb	r5, r4, #32
 80007e8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80007f0:	fa20 f304 	lsr.w	r3, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea43 0302 	orr.w	r3, r3, r2
 80007fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	fa21 f204 	lsr.w	r2, r1, r4
 8000808:	ea20 0002 	bic.w	r0, r0, r2
 800080c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f094 0f00 	teq	r4, #0
 8000820:	d10f      	bne.n	8000842 <__aeabi_dmul+0x1c2>
 8000822:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000826:	0040      	lsls	r0, r0, #1
 8000828:	eb41 0101 	adc.w	r1, r1, r1
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf08      	it	eq
 8000832:	3c01      	subeq	r4, #1
 8000834:	d0f7      	beq.n	8000826 <__aeabi_dmul+0x1a6>
 8000836:	ea41 0106 	orr.w	r1, r1, r6
 800083a:	f095 0f00 	teq	r5, #0
 800083e:	bf18      	it	ne
 8000840:	4770      	bxne	lr
 8000842:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	eb43 0303 	adc.w	r3, r3, r3
 800084c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000850:	bf08      	it	eq
 8000852:	3d01      	subeq	r5, #1
 8000854:	d0f7      	beq.n	8000846 <__aeabi_dmul+0x1c6>
 8000856:	ea43 0306 	orr.w	r3, r3, r6
 800085a:	4770      	bx	lr
 800085c:	ea94 0f0c 	teq	r4, ip
 8000860:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000864:	bf18      	it	ne
 8000866:	ea95 0f0c 	teqne	r5, ip
 800086a:	d00c      	beq.n	8000886 <__aeabi_dmul+0x206>
 800086c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000876:	d1d1      	bne.n	800081c <__aeabi_dmul+0x19c>
 8000878:	ea81 0103 	eor.w	r1, r1, r3
 800087c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000880:	f04f 0000 	mov.w	r0, #0
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800088a:	bf06      	itte	eq
 800088c:	4610      	moveq	r0, r2
 800088e:	4619      	moveq	r1, r3
 8000890:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000894:	d019      	beq.n	80008ca <__aeabi_dmul+0x24a>
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	d102      	bne.n	80008a2 <__aeabi_dmul+0x222>
 800089c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008a0:	d113      	bne.n	80008ca <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	d105      	bne.n	80008b4 <__aeabi_dmul+0x234>
 80008a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008ac:	bf1c      	itt	ne
 80008ae:	4610      	movne	r0, r2
 80008b0:	4619      	movne	r1, r3
 80008b2:	d10a      	bne.n	80008ca <__aeabi_dmul+0x24a>
 80008b4:	ea81 0103 	eor.w	r1, r1, r3
 80008b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
 80008ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008d2:	bd70      	pop	{r4, r5, r6, pc}

080008d4 <__aeabi_ddiv>:
 80008d4:	b570      	push	{r4, r5, r6, lr}
 80008d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008e2:	bf1d      	ittte	ne
 80008e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008e8:	ea94 0f0c 	teqne	r4, ip
 80008ec:	ea95 0f0c 	teqne	r5, ip
 80008f0:	f000 f8a7 	bleq	8000a42 <__aeabi_ddiv+0x16e>
 80008f4:	eba4 0405 	sub.w	r4, r4, r5
 80008f8:	ea81 0e03 	eor.w	lr, r1, r3
 80008fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000900:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000904:	f000 8088 	beq.w	8000a18 <__aeabi_ddiv+0x144>
 8000908:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800090c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000910:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000914:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000918:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800091c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000920:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000924:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000928:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800092c:	429d      	cmp	r5, r3
 800092e:	bf08      	it	eq
 8000930:	4296      	cmpeq	r6, r2
 8000932:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000936:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800093a:	d202      	bcs.n	8000942 <__aeabi_ddiv+0x6e>
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	1ab6      	subs	r6, r6, r2
 8000944:	eb65 0503 	sbc.w	r5, r5, r3
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000952:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 000c 	orrcs.w	r0, r0, ip
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009b4:	d018      	beq.n	80009e8 <__aeabi_ddiv+0x114>
 80009b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009d2:	d1c0      	bne.n	8000956 <__aeabi_ddiv+0x82>
 80009d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d8:	d10b      	bne.n	80009f2 <__aeabi_ddiv+0x11e>
 80009da:	ea41 0100 	orr.w	r1, r1, r0
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009e6:	e7b6      	b.n	8000956 <__aeabi_ddiv+0x82>
 80009e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ec:	bf04      	itt	eq
 80009ee:	4301      	orreq	r1, r0
 80009f0:	2000      	moveq	r0, #0
 80009f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009f6:	bf88      	it	hi
 80009f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009fc:	f63f aeaf 	bhi.w	800075e <__aeabi_dmul+0xde>
 8000a00:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a04:	bf04      	itt	eq
 8000a06:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a0e:	f150 0000 	adcs.w	r0, r0, #0
 8000a12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
 8000a18:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a24:	bfc2      	ittt	gt
 8000a26:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a2e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a30:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a34:	f04f 0e00 	mov.w	lr, #0
 8000a38:	3c01      	subs	r4, #1
 8000a3a:	e690      	b.n	800075e <__aeabi_dmul+0xde>
 8000a3c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a40:	e68d      	b.n	800075e <__aeabi_dmul+0xde>
 8000a42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a46:	ea94 0f0c 	teq	r4, ip
 8000a4a:	bf08      	it	eq
 8000a4c:	ea95 0f0c 	teqeq	r5, ip
 8000a50:	f43f af3b 	beq.w	80008ca <__aeabi_dmul+0x24a>
 8000a54:	ea94 0f0c 	teq	r4, ip
 8000a58:	d10a      	bne.n	8000a70 <__aeabi_ddiv+0x19c>
 8000a5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a5e:	f47f af34 	bne.w	80008ca <__aeabi_dmul+0x24a>
 8000a62:	ea95 0f0c 	teq	r5, ip
 8000a66:	f47f af25 	bne.w	80008b4 <__aeabi_dmul+0x234>
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	e72c      	b.n	80008ca <__aeabi_dmul+0x24a>
 8000a70:	ea95 0f0c 	teq	r5, ip
 8000a74:	d106      	bne.n	8000a84 <__aeabi_ddiv+0x1b0>
 8000a76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a7a:	f43f aefd 	beq.w	8000878 <__aeabi_dmul+0x1f8>
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4619      	mov	r1, r3
 8000a82:	e722      	b.n	80008ca <__aeabi_dmul+0x24a>
 8000a84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a8e:	f47f aec5 	bne.w	800081c <__aeabi_dmul+0x19c>
 8000a92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a96:	f47f af0d 	bne.w	80008b4 <__aeabi_dmul+0x234>
 8000a9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a9e:	f47f aeeb 	bne.w	8000878 <__aeabi_dmul+0x1f8>
 8000aa2:	e712      	b.n	80008ca <__aeabi_dmul+0x24a>

08000aa4 <__gedf2>:
 8000aa4:	f04f 3cff 	mov.w	ip, #4294967295
 8000aa8:	e006      	b.n	8000ab8 <__cmpdf2+0x4>
 8000aaa:	bf00      	nop

08000aac <__ledf2>:
 8000aac:	f04f 0c01 	mov.w	ip, #1
 8000ab0:	e002      	b.n	8000ab8 <__cmpdf2+0x4>
 8000ab2:	bf00      	nop

08000ab4 <__cmpdf2>:
 8000ab4:	f04f 0c01 	mov.w	ip, #1
 8000ab8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	bf18      	it	ne
 8000aca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ace:	d01b      	beq.n	8000b08 <__cmpdf2+0x54>
 8000ad0:	b001      	add	sp, #4
 8000ad2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ad6:	bf0c      	ite	eq
 8000ad8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000adc:	ea91 0f03 	teqne	r1, r3
 8000ae0:	bf02      	ittt	eq
 8000ae2:	ea90 0f02 	teqeq	r0, r2
 8000ae6:	2000      	moveq	r0, #0
 8000ae8:	4770      	bxeq	lr
 8000aea:	f110 0f00 	cmn.w	r0, #0
 8000aee:	ea91 0f03 	teq	r1, r3
 8000af2:	bf58      	it	pl
 8000af4:	4299      	cmppl	r1, r3
 8000af6:	bf08      	it	eq
 8000af8:	4290      	cmpeq	r0, r2
 8000afa:	bf2c      	ite	cs
 8000afc:	17d8      	asrcs	r0, r3, #31
 8000afe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b02:	f040 0001 	orr.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__cmpdf2+0x64>
 8000b12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b16:	d107      	bne.n	8000b28 <__cmpdf2+0x74>
 8000b18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b20:	d1d6      	bne.n	8000ad0 <__cmpdf2+0x1c>
 8000b22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b26:	d0d3      	beq.n	8000ad0 <__cmpdf2+0x1c>
 8000b28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_cdrcmple>:
 8000b30:	4684      	mov	ip, r0
 8000b32:	4610      	mov	r0, r2
 8000b34:	4662      	mov	r2, ip
 8000b36:	468c      	mov	ip, r1
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	e000      	b.n	8000b40 <__aeabi_cdcmpeq>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_cdcmpeq>:
 8000b40:	b501      	push	{r0, lr}
 8000b42:	f7ff ffb7 	bl	8000ab4 <__cmpdf2>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	bf48      	it	mi
 8000b4a:	f110 0f00 	cmnmi.w	r0, #0
 8000b4e:	bd01      	pop	{r0, pc}

08000b50 <__aeabi_dcmpeq>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff fff4 	bl	8000b40 <__aeabi_cdcmpeq>
 8000b58:	bf0c      	ite	eq
 8000b5a:	2001      	moveq	r0, #1
 8000b5c:	2000      	movne	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmplt>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffea 	bl	8000b40 <__aeabi_cdcmpeq>
 8000b6c:	bf34      	ite	cc
 8000b6e:	2001      	movcc	r0, #1
 8000b70:	2000      	movcs	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmple>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffe0 	bl	8000b40 <__aeabi_cdcmpeq>
 8000b80:	bf94      	ite	ls
 8000b82:	2001      	movls	r0, #1
 8000b84:	2000      	movhi	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpge>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffce 	bl	8000b30 <__aeabi_cdrcmple>
 8000b94:	bf94      	ite	ls
 8000b96:	2001      	movls	r0, #1
 8000b98:	2000      	movhi	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmpgt>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffc4 	bl	8000b30 <__aeabi_cdrcmple>
 8000ba8:	bf34      	ite	cc
 8000baa:	2001      	movcc	r0, #1
 8000bac:	2000      	movcs	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_d2iz>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bbc:	d215      	bcs.n	8000bea <__aeabi_d2iz+0x36>
 8000bbe:	d511      	bpl.n	8000be4 <__aeabi_d2iz+0x30>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d912      	bls.n	8000bf0 <__aeabi_d2iz+0x3c>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	bf18      	it	ne
 8000be0:	4240      	negne	r0, r0
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d105      	bne.n	8000bfc <__aeabi_d2iz+0x48>
 8000bf0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf4:	bf08      	it	eq
 8000bf6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfa:	4770      	bx	lr
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_d2uiz>:
 8000c04:	004a      	lsls	r2, r1, #1
 8000c06:	d211      	bcs.n	8000c2c <__aeabi_d2uiz+0x28>
 8000c08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c0c:	d211      	bcs.n	8000c32 <__aeabi_d2uiz+0x2e>
 8000c0e:	d50d      	bpl.n	8000c2c <__aeabi_d2uiz+0x28>
 8000c10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c18:	d40e      	bmi.n	8000c38 <__aeabi_d2uiz+0x34>
 8000c1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c26:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2a:	4770      	bx	lr
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c36:	d102      	bne.n	8000c3e <__aeabi_d2uiz+0x3a>
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	4770      	bx	lr
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	4770      	bx	lr

08000c44 <startSystem>:
#include "WindowSensorSystem.h"


void startSystem() {
 8000c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0


	int window1Status = checkWindow1Status();
 8000c4a:	f000 f8bf 	bl	8000dcc <checkWindow1Status>
 8000c4e:	60f8      	str	r0, [r7, #12]
	int window2Status = checkWindow2Status();
 8000c50:	f000 f8ce 	bl	8000df0 <checkWindow2Status>
 8000c54:	60b8      	str	r0, [r7, #8]
	int window3Status = checkWindow3Status();
 8000c56:	f000 f8db 	bl	8000e10 <checkWindow3Status>
 8000c5a:	6078      	str	r0, [r7, #4]


	initialiseSystem();
 8000c5c:	f000 f874 	bl	8000d48 <initialiseSystem>
	printf("starting loop");
 8000c60:	482f      	ldr	r0, [pc, #188]	@ (8000d20 <startSystem+0xdc>)
 8000c62:	f00a f851 	bl	800ad08 <iprintf>

	while (1) {

		if (!isEmpty(&message_queue)) {
 8000c66:	482f      	ldr	r0, [pc, #188]	@ (8000d24 <startSystem+0xe0>)
 8000c68:	f000 fa65 	bl	8001136 <isEmpty>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <startSystem+0x32>
			handleNewMessage();
 8000c72:	f000 f8dd 	bl	8000e30 <handleNewMessage>
		}

		if (checkWindow1Status() != window1Status && isSensor1Registered)
 8000c76:	f000 f8a9 	bl	8000dcc <checkWindow1Status>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d014      	beq.n	8000cac <startSystem+0x68>
 8000c82:	4b29      	ldr	r3, [pc, #164]	@ (8000d28 <startSystem+0xe4>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d010      	beq.n	8000cac <startSystem+0x68>
		{
			window1Status = checkWindow1Status();
 8000c8a:	f000 f89f 	bl	8000dcc <checkWindow1Status>
 8000c8e:	60f8      	str	r0, [r7, #12]
			send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, station1Id, sensor1Id, checkWindow1Status());
 8000c90:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <startSystem+0xe8>)
 8000c92:	681c      	ldr	r4, [r3, #0]
 8000c94:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <startSystem+0xec>)
 8000c96:	681d      	ldr	r5, [r3, #0]
 8000c98:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <startSystem+0xf0>)
 8000c9a:	681e      	ldr	r6, [r3, #0]
 8000c9c:	f000 f896 	bl	8000dcc <checkWindow1Status>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4632      	mov	r2, r6
 8000ca4:	4629      	mov	r1, r5
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f000 fb2a 	bl	8001300 <send_window_status_update>
	    }
		if (checkWindow2Status() != window2Status  && isSensor2Registered)
 8000cac:	f000 f8a0 	bl	8000df0 <checkWindow2Status>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d014      	beq.n	8000ce2 <startSystem+0x9e>
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <startSystem+0xf4>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d010      	beq.n	8000ce2 <startSystem+0x9e>
		{
			window2Status = checkWindow2Status();
 8000cc0:	f000 f896 	bl	8000df0 <checkWindow2Status>
 8000cc4:	60b8      	str	r0, [r7, #8]
			send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, station1Id, sensor2Id, checkWindow2Status());
 8000cc6:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <startSystem+0xe8>)
 8000cc8:	681c      	ldr	r4, [r3, #0]
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <startSystem+0xec>)
 8000ccc:	681d      	ldr	r5, [r3, #0]
 8000cce:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <startSystem+0xf8>)
 8000cd0:	681e      	ldr	r6, [r3, #0]
 8000cd2:	f000 f88d 	bl	8000df0 <checkWindow2Status>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4632      	mov	r2, r6
 8000cda:	4629      	mov	r1, r5
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f000 fb0f 	bl	8001300 <send_window_status_update>
		}
		if (checkWindow3Status() != window3Status  && isSensor3Registered)
 8000ce2:	f000 f895 	bl	8000e10 <checkWindow3Status>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d014      	beq.n	8000d18 <startSystem+0xd4>
 8000cee:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <startSystem+0xfc>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d010      	beq.n	8000d18 <startSystem+0xd4>
		{
			window3Status = checkWindow3Status();
 8000cf6:	f000 f88b 	bl	8000e10 <checkWindow3Status>
 8000cfa:	6078      	str	r0, [r7, #4]
			send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, station1Id, sensor3Id, checkWindow3Status());
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <startSystem+0xe8>)
 8000cfe:	681c      	ldr	r4, [r3, #0]
 8000d00:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <startSystem+0xec>)
 8000d02:	681d      	ldr	r5, [r3, #0]
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <startSystem+0x100>)
 8000d06:	681e      	ldr	r6, [r3, #0]
 8000d08:	f000 f882 	bl	8000e10 <checkWindow3Status>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	4632      	mov	r2, r6
 8000d10:	4629      	mov	r1, r5
 8000d12:	4620      	mov	r0, r4
 8000d14:	f000 faf4 	bl	8001300 <send_window_status_update>
		}

		HAL_Delay(100);
 8000d18:	2064      	movs	r0, #100	@ 0x64
 8000d1a:	f001 f9e7 	bl	80020ec <HAL_Delay>
		if (!isEmpty(&message_queue)) {
 8000d1e:	e7a2      	b.n	8000c66 <startSystem+0x22>
 8000d20:	0800c134 	.word	0x0800c134
 8000d24:	200000cc 	.word	0x200000cc
 8000d28:	20000016 	.word	0x20000016
 8000d2c:	20000010 	.word	0x20000010
 8000d30:	2000000c 	.word	0x2000000c
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000017 	.word	0x20000017
 8000d3c:	20000004 	.word	0x20000004
 8000d40:	20000018 	.word	0x20000018
 8000d44:	20000008 	.word	0x20000008

08000d48 <initialiseSystem>:
	}
}


void initialiseSystem() {
 8000d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4a:	af00      	add	r7, sp, #0


	initRadioCommunication();
 8000d4c:	f000 fa6a 	bl	8001224 <initRadioCommunication>
	initQueue(&message_queue);
 8000d50:	4818      	ldr	r0, [pc, #96]	@ (8000db4 <initialiseSystem+0x6c>)
 8000d52:	f000 f9cb 	bl	80010ec <initQueue>
	cmox_initialize(NULL);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fa8e 	bl	8000278 <cmox_initialize>


	//register sensors to given radio stations
	send_window_status_update(MESSAGE_TYPE_REGISTER, station1Id, sensor1Id,  checkWindow1Status());
 8000d5c:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <initialiseSystem+0x70>)
 8000d5e:	681c      	ldr	r4, [r3, #0]
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <initialiseSystem+0x74>)
 8000d62:	681d      	ldr	r5, [r3, #0]
 8000d64:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <initialiseSystem+0x78>)
 8000d66:	681e      	ldr	r6, [r3, #0]
 8000d68:	f000 f830 	bl	8000dcc <checkWindow1Status>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4632      	mov	r2, r6
 8000d70:	4629      	mov	r1, r5
 8000d72:	4620      	mov	r0, r4
 8000d74:	f000 fac4 	bl	8001300 <send_window_status_update>
	send_window_status_update(MESSAGE_TYPE_REGISTER, station1Id, sensor2Id,  checkWindow2Status());
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <initialiseSystem+0x70>)
 8000d7a:	681c      	ldr	r4, [r3, #0]
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <initialiseSystem+0x74>)
 8000d7e:	681d      	ldr	r5, [r3, #0]
 8000d80:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <initialiseSystem+0x7c>)
 8000d82:	681e      	ldr	r6, [r3, #0]
 8000d84:	f000 f834 	bl	8000df0 <checkWindow2Status>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4632      	mov	r2, r6
 8000d8c:	4629      	mov	r1, r5
 8000d8e:	4620      	mov	r0, r4
 8000d90:	f000 fab6 	bl	8001300 <send_window_status_update>
	send_window_status_update(MESSAGE_TYPE_REGISTER, station1Id, sensor3Id,  checkWindow3Status());
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <initialiseSystem+0x70>)
 8000d96:	681c      	ldr	r4, [r3, #0]
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <initialiseSystem+0x74>)
 8000d9a:	681d      	ldr	r5, [r3, #0]
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <initialiseSystem+0x80>)
 8000d9e:	681e      	ldr	r6, [r3, #0]
 8000da0:	f000 f836 	bl	8000e10 <checkWindow3Status>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4632      	mov	r2, r6
 8000da8:	4629      	mov	r1, r5
 8000daa:	4620      	mov	r0, r4
 8000dac:	f000 faa8 	bl	8001300 <send_window_status_update>

}
 8000db0:	bf00      	nop
 8000db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000db4:	200000cc 	.word	0x200000cc
 8000db8:	200000bc 	.word	0x200000bc
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000004 	.word	0x20000004
 8000dc8:	20000008 	.word	0x20000008

08000dcc <checkWindow1Status>:
#include "gpio_control.h"
#include "stm32u5xx_hal.h"// Include the STM32 HAL for GPIO functions

int checkWindow1Status(void) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET;
 8000dd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd4:	4805      	ldr	r0, [pc, #20]	@ (8000dec <checkWindow1Status+0x20>)
 8000dd6:	f002 f895 	bl	8002f04 <HAL_GPIO_ReadPin>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	bf0c      	ite	eq
 8000de0:	2301      	moveq	r3, #1
 8000de2:	2300      	movne	r3, #0
 8000de4:	b2db      	uxtb	r3, r3
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	42020800 	.word	0x42020800

08000df0 <checkWindow2Status>:

int checkWindow2Status(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_1) == GPIO_PIN_RESET;
 8000df4:	2102      	movs	r1, #2
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <checkWindow2Status+0x1c>)
 8000df8:	f002 f884 	bl	8002f04 <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf0c      	ite	eq
 8000e02:	2301      	moveq	r3, #1
 8000e04:	2300      	movne	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	42021c00 	.word	0x42021c00

08000e10 <checkWindow3Status>:

int checkWindow3Status(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET;
 8000e14:	2108      	movs	r1, #8
 8000e16:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <checkWindow3Status+0x1c>)
 8000e18:	f002 f874 	bl	8002f04 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf0c      	ite	eq
 8000e22:	2301      	moveq	r3, #1
 8000e24:	2300      	movne	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	42020400 	.word	0x42020400

08000e30 <handleNewMessage>:




void handleNewMessage()
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
    uint8_t*  decoded_message = dequeue(&message_queue);
 8000e36:	4851      	ldr	r0, [pc, #324]	@ (8000f7c <handleNewMessage+0x14c>)
 8000e38:	f000 f9c2 	bl	80011c0 <dequeue>
 8000e3c:	6278      	str	r0, [r7, #36]	@ 0x24
    int a = strlen((char *) decoded_message);
 8000e3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e40:	f7ff fa5a 	bl	80002f8 <strlen>
 8000e44:	4603      	mov	r3, r0
 8000e46:	623b      	str	r3, [r7, #32]

    if (strlen((char *) decoded_message) != 21) {
 8000e48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e4a:	f7ff fa55 	bl	80002f8 <strlen>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b15      	cmp	r3, #21
 8000e52:	d002      	beq.n	8000e5a <handleNewMessage+0x2a>
       printf("Error: Input string must be exactly 21 characters long.\n");
 8000e54:	484a      	ldr	r0, [pc, #296]	@ (8000f80 <handleNewMessage+0x150>)
 8000e56:	f009 ffbf 	bl	800add8 <puts>
    char stationId[3];
    char sensorId[3];
    char secret[16];


    messageType[0] = decoded_message[0];
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	763b      	strb	r3, [r7, #24]
    messageType[1] = '\0';
 8000e60:	2300      	movs	r3, #0
 8000e62:	767b      	strb	r3, [r7, #25]

    stationId[0] = decoded_message[1];
 8000e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e66:	3301      	adds	r3, #1
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	753b      	strb	r3, [r7, #20]
    stationId[1] = decoded_message[2];
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6e:	3302      	adds	r3, #2
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	757b      	strb	r3, [r7, #21]
    stationId[2] = '\0';
 8000e74:	2300      	movs	r3, #0
 8000e76:	75bb      	strb	r3, [r7, #22]

    sensorId[0] = decoded_message[3];
 8000e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7a:	3303      	adds	r3, #3
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	743b      	strb	r3, [r7, #16]
    sensorId[1] = decoded_message[4];
 8000e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e82:	3304      	adds	r3, #4
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	747b      	strb	r3, [r7, #17]
    sensorId[2] = '\0';
 8000e88:	2300      	movs	r3, #0
 8000e8a:	74bb      	strb	r3, [r7, #18]

    secret[0] = decoded_message[5];
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8e:	3305      	adds	r3, #5
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	703b      	strb	r3, [r7, #0]
    secret[1] = decoded_message[6];
 8000e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e96:	3306      	adds	r3, #6
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	707b      	strb	r3, [r7, #1]
    secret[2] = decoded_message[7];
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9e:	3307      	adds	r3, #7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	70bb      	strb	r3, [r7, #2]
    secret[3] = decoded_message[8];
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea6:	3308      	adds	r3, #8
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	70fb      	strb	r3, [r7, #3]
    secret[4] = decoded_message[9];
 8000eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eae:	3309      	adds	r3, #9
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	713b      	strb	r3, [r7, #4]
    secret[5] = decoded_message[10];
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb6:	330a      	adds	r3, #10
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	717b      	strb	r3, [r7, #5]
    secret[6] = decoded_message[11];
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebe:	330b      	adds	r3, #11
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	71bb      	strb	r3, [r7, #6]
    secret[7] = decoded_message[12];
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec6:	330c      	adds	r3, #12
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
    secret[8] = decoded_message[13];
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ece:	330d      	adds	r3, #13
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	723b      	strb	r3, [r7, #8]
    secret[9] = decoded_message[14];
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed6:	330e      	adds	r3, #14
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	727b      	strb	r3, [r7, #9]
    secret[10] = decoded_message[15];
 8000edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ede:	330f      	adds	r3, #15
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	72bb      	strb	r3, [r7, #10]
    secret[11] = decoded_message[16];
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee6:	3310      	adds	r3, #16
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	72fb      	strb	r3, [r7, #11]
    secret[12] = decoded_message[17];
 8000eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eee:	3311      	adds	r3, #17
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	733b      	strb	r3, [r7, #12]
    secret[13] = decoded_message[18];
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef6:	3312      	adds	r3, #18
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	737b      	strb	r3, [r7, #13]
    secret[14] = decoded_message[19];
 8000efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efe:	3313      	adds	r3, #19
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	73bb      	strb	r3, [r7, #14]
    secret[15] = decoded_message[20];
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	3314      	adds	r3, #20
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	73fb      	strb	r3, [r7, #15]
    secret[16] = decoded_message[21];
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0e:	3315      	adds	r3, #21
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	743b      	strb	r3, [r7, #16]

    int id = (int)((char)sensorId[1] - '0');
 8000f14:	7c7b      	ldrb	r3, [r7, #17]
 8000f16:	3b30      	subs	r3, #48	@ 0x30
 8000f18:	61fb      	str	r3, [r7, #28]
    if (decodeMessage(id, secret) == -1) return;
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	69f8      	ldr	r0, [r7, #28]
 8000f20:	f000 f834 	bl	8000f8c <decodeMessage>
 8000f24:	4603      	mov	r3, r0
 8000f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2a:	d022      	beq.n	8000f72 <handleNewMessage+0x142>

    getSequenceNumber(id);
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 faf9 	bl	8001524 <getSequenceNumber>

    if (messageType[0] == MESSAGE_TYPE_ACKNOWLEDGEMENT) {
 8000f32:	7e3a      	ldrb	r2, [r7, #24]
 8000f34:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <handleNewMessage+0x154>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d10a      	bne.n	8000f52 <handleNewMessage+0x122>
    	handleAcknowledgementMessage(atoi(stationId), id);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4618      	mov	r0, r3
 8000f42:	f009 fd97 	bl	800aa74 <atoi>
 8000f46:	4603      	mov	r3, r0
 8000f48:	69f9      	ldr	r1, [r7, #28]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f82a 	bl	8000fa4 <handleAcknowledgementMessage>
 8000f50:	e010      	b.n	8000f74 <handleNewMessage+0x144>
    }
    else if ((messageType[0] == MESSAGE_TYPE_REQUEST_UPDATE)) {
 8000f52:	7e3a      	ldrb	r2, [r7, #24]
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <handleNewMessage+0x158>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d10b      	bne.n	8000f74 <handleNewMessage+0x144>
    	handleUpdateStatusMessage(atoi(stationId), id);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4618      	mov	r0, r3
 8000f62:	f009 fd87 	bl	800aa74 <atoi>
 8000f66:	4603      	mov	r3, r0
 8000f68:	69f9      	ldr	r1, [r7, #28]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f856 	bl	800101c <handleUpdateStatusMessage>
 8000f70:	e000      	b.n	8000f74 <handleNewMessage+0x144>
    if (decodeMessage(id, secret) == -1) return;
 8000f72:	bf00      	nop
    }

}
 8000f74:	3728      	adds	r7, #40	@ 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200000cc 	.word	0x200000cc
 8000f80:	0800c144 	.word	0x0800c144
 8000f84:	20000014 	.word	0x20000014
 8000f88:	20000015 	.word	0x20000015

08000f8c <decodeMessage>:

int decodeMessage(int sensorId, uint8_t* secret) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	@ 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]

	return 0;
 8000f96:	2300      	movs	r3, #0
		}
	}
	else {
		return -1;
	}
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3724      	adds	r7, #36	@ 0x24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <handleAcknowledgementMessage>:





void handleAcknowledgementMessage(int stationId, int sensorId) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]

	if (station1Id != stationId)
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <handleAcknowledgementMessage+0x5c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d11a      	bne.n	8000fee <handleAcknowledgementMessage+0x4a>
		return;

	if (sensorId == sensor1Id)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <handleAcknowledgementMessage+0x60>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d103      	bne.n	8000fca <handleAcknowledgementMessage+0x26>
		isSensor1Registered = true;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <handleAcknowledgementMessage+0x64>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
	else if (sensorId == sensor2Id)
		isSensor2Registered = true;
	else if (sensorId == sensor3Id)
		isSensor3Registered = true;

	return;
 8000fc8:	e013      	b.n	8000ff2 <handleAcknowledgementMessage+0x4e>
	else if (sensorId == sensor2Id)
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <handleAcknowledgementMessage+0x68>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d103      	bne.n	8000fdc <handleAcknowledgementMessage+0x38>
		isSensor2Registered = true;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <handleAcknowledgementMessage+0x6c>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
	return;
 8000fda:	e00a      	b.n	8000ff2 <handleAcknowledgementMessage+0x4e>
	else if (sensorId == sensor3Id)
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <handleAcknowledgementMessage+0x70>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d105      	bne.n	8000ff2 <handleAcknowledgementMessage+0x4e>
		isSensor3Registered = true;
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <handleAcknowledgementMessage+0x74>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
	return;
 8000fec:	e001      	b.n	8000ff2 <handleAcknowledgementMessage+0x4e>
		return;
 8000fee:	bf00      	nop
 8000ff0:	e000      	b.n	8000ff4 <handleAcknowledgementMessage+0x50>
	return;
 8000ff2:	bf00      	nop
}
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	2000000c 	.word	0x2000000c
 8001004:	20000000 	.word	0x20000000
 8001008:	20000016 	.word	0x20000016
 800100c:	20000004 	.word	0x20000004
 8001010:	20000017 	.word	0x20000017
 8001014:	20000008 	.word	0x20000008
 8001018:	20000018 	.word	0x20000018

0800101c <handleUpdateStatusMessage>:

void handleUpdateStatusMessage(int stationId, int sensorId) {
 800101c:	b5b0      	push	{r4, r5, r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]

	if (station1Id != stationId)
 8001026:	4b28      	ldr	r3, [pc, #160]	@ (80010c8 <handleUpdateStatusMessage+0xac>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	d147      	bne.n	80010c0 <handleUpdateStatusMessage+0xa4>
		return;

	if (sensorId == sensor1Id && isSensor1Registered)
 8001030:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <handleUpdateStatusMessage+0xb0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d10f      	bne.n	800105a <handleUpdateStatusMessage+0x3e>
 800103a:	4b25      	ldr	r3, [pc, #148]	@ (80010d0 <handleUpdateStatusMessage+0xb4>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00b      	beq.n	800105a <handleUpdateStatusMessage+0x3e>
	{
		send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, stationId, sensor1Id, checkWindow1Status());
 8001042:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <handleUpdateStatusMessage+0xb8>)
 8001044:	681c      	ldr	r4, [r3, #0]
 8001046:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <handleUpdateStatusMessage+0xb0>)
 8001048:	681d      	ldr	r5, [r3, #0]
 800104a:	f7ff febf 	bl	8000dcc <checkWindow1Status>
 800104e:	4603      	mov	r3, r0
 8001050:	462a      	mov	r2, r5
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4620      	mov	r0, r4
 8001056:	f000 f953 	bl	8001300 <send_window_status_update>

    }
	if (sensorId == sensor2Id && isSensor2Registered)
 800105a:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <handleUpdateStatusMessage+0xbc>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d10f      	bne.n	8001084 <handleUpdateStatusMessage+0x68>
 8001064:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <handleUpdateStatusMessage+0xc0>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00b      	beq.n	8001084 <handleUpdateStatusMessage+0x68>
	{
		send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, stationId, sensor2Id, checkWindow2Status());
 800106c:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <handleUpdateStatusMessage+0xb8>)
 800106e:	681c      	ldr	r4, [r3, #0]
 8001070:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <handleUpdateStatusMessage+0xbc>)
 8001072:	681d      	ldr	r5, [r3, #0]
 8001074:	f7ff febc 	bl	8000df0 <checkWindow2Status>
 8001078:	4603      	mov	r3, r0
 800107a:	462a      	mov	r2, r5
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4620      	mov	r0, r4
 8001080:	f000 f93e 	bl	8001300 <send_window_status_update>
    }
	if (sensorId == sensor3Id  && isSensor3Registered)
 8001084:	4b16      	ldr	r3, [pc, #88]	@ (80010e0 <handleUpdateStatusMessage+0xc4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d10f      	bne.n	80010ae <handleUpdateStatusMessage+0x92>
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <handleUpdateStatusMessage+0xc8>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00b      	beq.n	80010ae <handleUpdateStatusMessage+0x92>
	{
		send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, stationId, sensor3Id, checkWindow3Status());
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <handleUpdateStatusMessage+0xb8>)
 8001098:	681c      	ldr	r4, [r3, #0]
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <handleUpdateStatusMessage+0xc4>)
 800109c:	681d      	ldr	r5, [r3, #0]
 800109e:	f7ff feb7 	bl	8000e10 <checkWindow3Status>
 80010a2:	4603      	mov	r3, r0
 80010a4:	462a      	mov	r2, r5
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4620      	mov	r0, r4
 80010aa:	f000 f929 	bl	8001300 <send_window_status_update>
    }

	HAL_Delay(300);
 80010ae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010b2:	f001 f81b 	bl	80020ec <HAL_Delay>
	Radio.Rx(0);
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <handleUpdateStatusMessage+0xcc>)
 80010b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ba:	2000      	movs	r0, #0
 80010bc:	4798      	blx	r3
 80010be:	e000      	b.n	80010c2 <handleUpdateStatusMessage+0xa6>
		return;
 80010c0:	bf00      	nop

}
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bdb0      	pop	{r4, r5, r7, pc}
 80010c8:	2000000c 	.word	0x2000000c
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000016 	.word	0x20000016
 80010d4:	20000010 	.word	0x20000010
 80010d8:	20000004 	.word	0x20000004
 80010dc:	20000017 	.word	0x20000017
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000018 	.word	0x20000018
 80010e8:	0800c2ec 	.word	0x0800c2ec

080010ec <initQueue>:
#include "pointer_queue.h"

void initQueue(PointerQueue* queue) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    queue->front = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
    queue->rear = -1;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	619a      	str	r2, [r3, #24]
    queue->size = 0;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <isFull>:

int isFull(PointerQueue* queue) {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    return queue->size == MAX_QUEUE_SIZE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	2b05      	cmp	r3, #5
 8001122:	bf0c      	ite	eq
 8001124:	2301      	moveq	r3, #1
 8001126:	2300      	movne	r3, #0
 8001128:	b2db      	uxtb	r3, r3
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <isEmpty>:

int isEmpty(PointerQueue* queue) {
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
    return queue->size == 0;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf0c      	ite	eq
 8001146:	2301      	moveq	r3, #1
 8001148:	2300      	movne	r3, #0
 800114a:	b2db      	uxtb	r3, r3
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <enqueue>:

int enqueue(PointerQueue* queue, uint8_t* element) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    if (isFull(queue)) {
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffd6 	bl	8001114 <isFull>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <enqueue+0x20>
        printf("Queue is full! Cannot enqueue.\n");
 800116e:	4812      	ldr	r0, [pc, #72]	@ (80011b8 <enqueue+0x60>)
 8001170:	f009 fe32 	bl	800add8 <puts>
        return 0;
 8001174:	2300      	movs	r3, #0
 8001176:	e01a      	b.n	80011ae <enqueue+0x56>
    }
    queue->rear = (queue->rear + 1) % MAX_QUEUE_SIZE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	1c59      	adds	r1, r3, #1
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <enqueue+0x64>)
 8001180:	fb83 2301 	smull	r2, r3, r3, r1
 8001184:	105a      	asrs	r2, r3, #1
 8001186:	17cb      	asrs	r3, r1, #31
 8001188:	1ad2      	subs	r2, r2, r3
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	1aca      	subs	r2, r1, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	619a      	str	r2, [r3, #24]
    queue->data[queue->rear] = element;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699a      	ldr	r2, [r3, #24]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6839      	ldr	r1, [r7, #0]
 800119e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    queue->size++;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	61da      	str	r2, [r3, #28]
    return 1;
 80011ac:	2301      	movs	r3, #1
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	0800c17c 	.word	0x0800c17c
 80011bc:	66666667 	.word	0x66666667

080011c0 <dequeue>:

uint8_t* dequeue(PointerQueue* queue) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue)) {
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ffb4 	bl	8001136 <isEmpty>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d004      	beq.n	80011de <dequeue+0x1e>
        printf("Queue is empty! Cannot dequeue.\n");
 80011d4:	4811      	ldr	r0, [pc, #68]	@ (800121c <dequeue+0x5c>)
 80011d6:	f009 fdff 	bl	800add8 <puts>
        return NULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	e01a      	b.n	8001214 <dequeue+0x54>
    }
    uint8_t* element = queue->data[queue->front];
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e8:	60fb      	str	r3, [r7, #12]
    queue->front = (queue->front + 1) % MAX_QUEUE_SIZE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	1c59      	adds	r1, r3, #1
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <dequeue+0x60>)
 80011f2:	fb83 2301 	smull	r2, r3, r3, r1
 80011f6:	105a      	asrs	r2, r3, #1
 80011f8:	17cb      	asrs	r3, r1, #31
 80011fa:	1ad2      	subs	r2, r2, r3
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	1aca      	subs	r2, r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	615a      	str	r2, [r3, #20]
    queue->size--;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	1e5a      	subs	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	61da      	str	r2, [r3, #28]
    return element;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	0800c19c 	.word	0x0800c19c
 8001220:	66666667 	.word	0x66666667

08001224 <initRadioCommunication>:

/**
 * Main application entry point.
 */
void initRadioCommunication( void )
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b08b      	sub	sp, #44	@ 0x2c
 8001228:	af0a      	add	r7, sp, #40	@ 0x28
    // Target board initialization
    BoardInitMcu( );
 800122a:	f005 fda5 	bl	8006d78 <BoardInitMcu>
    BoardInitPeriph( );
 800122e:	f005 fd6d 	bl	8006d0c <BoardInitPeriph>

    // Radio initialization
    RadioEvents.TxDone = OnTxDone;
 8001232:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <initRadioCommunication+0xb8>)
 8001234:	4a2a      	ldr	r2, [pc, #168]	@ (80012e0 <initRadioCommunication+0xbc>)
 8001236:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRxDone;
 8001238:	4b28      	ldr	r3, [pc, #160]	@ (80012dc <initRadioCommunication+0xb8>)
 800123a:	4a2a      	ldr	r2, [pc, #168]	@ (80012e4 <initRadioCommunication+0xc0>)
 800123c:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800123e:	4b27      	ldr	r3, [pc, #156]	@ (80012dc <initRadioCommunication+0xb8>)
 8001240:	4a29      	ldr	r2, [pc, #164]	@ (80012e8 <initRadioCommunication+0xc4>)
 8001242:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 8001244:	4b25      	ldr	r3, [pc, #148]	@ (80012dc <initRadioCommunication+0xb8>)
 8001246:	4a29      	ldr	r2, [pc, #164]	@ (80012ec <initRadioCommunication+0xc8>)
 8001248:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRxError;
 800124a:	4b24      	ldr	r3, [pc, #144]	@ (80012dc <initRadioCommunication+0xb8>)
 800124c:	4a28      	ldr	r2, [pc, #160]	@ (80012f0 <initRadioCommunication+0xcc>)
 800124e:	611a      	str	r2, [r3, #16]

    Radio.Init( &RadioEvents );
 8001250:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <initRadioCommunication+0xd0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4821      	ldr	r0, [pc, #132]	@ (80012dc <initRadioCommunication+0xb8>)
 8001256:	4798      	blx	r3

    Radio.SetChannel( RF_FREQUENCY );
 8001258:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <initRadioCommunication+0xd0>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	4826      	ldr	r0, [pc, #152]	@ (80012f8 <initRadioCommunication+0xd4>)
 800125e:	4798      	blx	r3

    Radio.SetTxConfig(  MODEM_FSK,						/* Radio modem to be used [0: FSK, 1: LoRa] */
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <initRadioCommunication+0xd0>)
 8001262:	69dc      	ldr	r4, [r3, #28]
 8001264:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001268:	9308      	str	r3, [sp, #32]
 800126a:	2300      	movs	r3, #0
 800126c:	9307      	str	r3, [sp, #28]
 800126e:	2300      	movs	r3, #0
 8001270:	9306      	str	r3, [sp, #24]
 8001272:	2300      	movs	r3, #0
 8001274:	9305      	str	r3, [sp, #20]
 8001276:	2301      	movs	r3, #1
 8001278:	9304      	str	r3, [sp, #16]
 800127a:	2300      	movs	r3, #0
 800127c:	9303      	str	r3, [sp, #12]
 800127e:	2305      	movs	r3, #5
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	2300      	movs	r3, #0
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2300      	movs	r3, #0
 800128e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001292:	2100      	movs	r1, #0
 8001294:	2000      	movs	r0, #0
 8001296:	47a0      	blx	r4
						0,								/* Number of symbols bewteen each hop. FSK: N/A ( set to 0 ) */
						0,								/* Inverts IQ signals (LoRa only). FSK: N/A ( set to 0 ) */
						3000							/* Transmission timeout [ms] */
	);

    Radio.SetRxConfig(  MODEM_FSK,						/* Radio modem to be used [0: FSK, 1: LoRa] */
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <initRadioCommunication+0xd0>)
 800129a:	699c      	ldr	r4, [r3, #24]
 800129c:	2301      	movs	r3, #1
 800129e:	9309      	str	r3, [sp, #36]	@ 0x24
 80012a0:	2300      	movs	r3, #0
 80012a2:	9308      	str	r3, [sp, #32]
 80012a4:	2300      	movs	r3, #0
 80012a6:	9307      	str	r3, [sp, #28]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9306      	str	r3, [sp, #24]
 80012ac:	2301      	movs	r3, #1
 80012ae:	9305      	str	r3, [sp, #20]
 80012b0:	2300      	movs	r3, #0
 80012b2:	9304      	str	r3, [sp, #16]
 80012b4:	2300      	movs	r3, #0
 80012b6:	9303      	str	r3, [sp, #12]
 80012b8:	2300      	movs	r3, #0
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	2305      	movs	r3, #5
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <initRadioCommunication+0xd8>)
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2300      	movs	r3, #0
 80012c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80012ca:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80012ce:	2000      	movs	r0, #0
 80012d0:	47a0      	blx	r4
	);




}
 80012d2:	bf00      	nop
 80012d4:	3704      	adds	r7, #4
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd90      	pop	{r4, r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000100 	.word	0x20000100
 80012e0:	080015b1 	.word	0x080015b1
 80012e4:	080015d9 	.word	0x080015d9
 80012e8:	08001621 	.word	0x08001621
 80012ec:	0800164d 	.word	0x0800164d
 80012f0:	08001675 	.word	0x08001675
 80012f4:	0800c2ec 	.word	0x0800c2ec
 80012f8:	33bca100 	.word	0x33bca100
 80012fc:	00014585 	.word	0x00014585

08001300 <send_window_status_update>:
uint8_t* createCyphertext(int sensorId, uint8_t* plaintext, uint8_t* ciphertext) {

}

int send_window_status_update(int messageType, int stationId, int sensorId, int windowStatus)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b0a2      	sub	sp, #136	@ 0x88
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
	if (stationId >= 100 || sensorId >= 100)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2b63      	cmp	r3, #99	@ 0x63
 8001312:	dc02      	bgt.n	800131a <send_window_status_update+0x1a>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b63      	cmp	r3, #99	@ 0x63
 8001318:	dd01      	ble.n	800131e <send_window_status_update+0x1e>
			return 0;
 800131a:	2300      	movs	r3, #0
 800131c:	e0f5      	b.n	800150a <send_window_status_update+0x20a>
	if (messageType != 0 && messageType != 3)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <send_window_status_update+0x2e>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d001      	beq.n	800132e <send_window_status_update+0x2e>
		return 0;
 800132a:	2300      	movs	r3, #0
 800132c:	e0ed      	b.n	800150a <send_window_status_update+0x20a>


	Radio.Standby();
 800132e:	4b79      	ldr	r3, [pc, #484]	@ (8001514 <send_window_status_update+0x214>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4798      	blx	r3
	char messageTypeMessage[2];
	char stationIdMessage[3];
	char sensorIdMessage[3];
	char windowStatusMessage[2];
	uint8_t plaintextSecret[16];
	uint8_t cyphertext[16] = {0};
 8001334:	2300      	movs	r3, #0
 8001336:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001338:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
	uint8_t plaintext[17];
	char secret[16];

    snprintf(stationIdMessage, sizeof(stationIdMessage), "%02d", stationId);
 8001344:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4a73      	ldr	r2, [pc, #460]	@ (8001518 <send_window_status_update+0x218>)
 800134c:	2103      	movs	r1, #3
 800134e:	f009 fd4b 	bl	800ade8 <sniprintf>
    snprintf(sensorIdMessage, sizeof(sensorIdMessage), "%02d", sensorId);
 8001352:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a6f      	ldr	r2, [pc, #444]	@ (8001518 <send_window_status_update+0x218>)
 800135a:	2103      	movs	r1, #3
 800135c:	f009 fd44 	bl	800ade8 <sniprintf>
    snprintf(windowStatusMessage, sizeof(windowStatusMessage), "%d", windowStatus);
 8001360:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	4a6d      	ldr	r2, [pc, #436]	@ (800151c <send_window_status_update+0x21c>)
 8001368:	2102      	movs	r1, #2
 800136a:	f009 fd3d 	bl	800ade8 <sniprintf>
    snprintf(messageTypeMessage, sizeof(messageTypeMessage), "%d", messageType);
 800136e:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4a69      	ldr	r2, [pc, #420]	@ (800151c <send_window_status_update+0x21c>)
 8001376:	2102      	movs	r1, #2
 8001378:	f009 fd36 	bl	800ade8 <sniprintf>

    int messageNumber = getSequenceNumber(sensorId);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f8d1 	bl	8001524 <getSequenceNumber>
 8001382:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if (messageNumber == -1) return;
 8001386:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800138a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138e:	f000 80bc 	beq.w	800150a <send_window_status_update+0x20a>

    snprintf(plaintext, sizeof(plaintext), "%016d", messageNumber);
 8001392:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001396:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800139a:	4a61      	ldr	r2, [pc, #388]	@ (8001520 <send_window_status_update+0x220>)
 800139c:	2111      	movs	r1, #17
 800139e:	f009 fd23 	bl	800ade8 <sniprintf>
    plaintextSecret[0] = (uint8_t)windowStatusMessage[0];
 80013a2:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80013a6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    plaintextSecret[1] = plaintext[1];
 80013aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80013ae:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    plaintextSecret[2] = plaintext[2];
 80013b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013b6:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    plaintextSecret[3] = plaintext[3];
 80013ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013be:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    plaintextSecret[4] = plaintext[4];
 80013c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80013c6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
    plaintextSecret[5] = plaintext[5];
 80013ca:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80013ce:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    plaintextSecret[6] = plaintext[6];
 80013d2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80013d6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    plaintextSecret[7] = plaintext[7];
 80013da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80013de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    plaintextSecret[8] = plaintext[8];
 80013e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013e6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    plaintextSecret[9] = plaintext[9];
 80013ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013ee:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    plaintextSecret[10] = plaintext[10];
 80013f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80013f6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    plaintextSecret[11] = plaintext[11];
 80013fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013fe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    plaintextSecret[12] = plaintext[12];
 8001402:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001406:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    plaintextSecret[13] = plaintext[13];
 800140a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800140e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    plaintextSecret[14] = plaintext[14];
 8001412:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001416:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    plaintextSecret[15] = plaintext[15];
 800141a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800141e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    	}


*/

    message[0] = messageTypeMessage[0];
 8001422:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001426:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
    message[1] = stationIdMessage[0];
 800142a:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800142e:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
    message[2] = stationIdMessage[1];
 8001432:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8001436:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
    message[3] = sensorIdMessage[0];
 800143a:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800143e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    message[4] = sensorIdMessage[1];
 8001442:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001446:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    message[5] = (char)plaintextSecret[0];
 800144a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800144e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    message[6] = (char)plaintextSecret[1];
 8001452:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001456:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
    message[7] = (char)plaintextSecret[2];
 800145a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800145e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    message[8] = (char)plaintextSecret[3];
 8001462:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001466:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
    message[9] = (char)plaintextSecret[4];
 800146a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800146e:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
    message[10] = (char)plaintextSecret[5];
 8001472:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001476:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
    message[11] = (char)plaintextSecret[6];
 800147a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800147e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    message[12] = (char)plaintextSecret[7];
 8001482:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001486:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    message[13] = (char)plaintextSecret[8];
 800148a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800148e:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
    message[14] = (char)plaintextSecret[9];
 8001492:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001496:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    message[15] = (char)plaintextSecret[10];
 800149a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800149e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    message[16] = (char)plaintextSecret[11];
 80014a2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80014a6:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
    message[17] = (char)plaintextSecret[12];
 80014aa:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80014ae:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
    message[18] = (char)plaintextSecret[13];
 80014b2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80014b6:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
    message[19] = (char)plaintextSecret[14];
 80014ba:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80014be:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
    message[20] = (char)plaintextSecret[15];
 80014c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80014c6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
    message[21] = '\0';
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

    for (int i = 0; i < 5; ++i) {
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80014d6:	e00e      	b.n	80014f6 <send_window_status_update+0x1f6>
    	Radio.Send( message, 22);
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <send_window_status_update+0x214>)
 80014da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014dc:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80014e0:	2116      	movs	r1, #22
 80014e2:	4610      	mov	r0, r2
 80014e4:	4798      	blx	r3
    	HAL_Delay(50);
 80014e6:	2032      	movs	r0, #50	@ 0x32
 80014e8:	f000 fe00 	bl	80020ec <HAL_Delay>
    for (int i = 0; i < 5; ++i) {
 80014ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014f0:	3301      	adds	r3, #1
 80014f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80014f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	ddec      	ble.n	80014d8 <send_window_status_update+0x1d8>
    }

    Radio.Rx(0);
 80014fe:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <send_window_status_update+0x214>)
 8001500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001502:	2000      	movs	r0, #0
 8001504:	4798      	blx	r3
    return 1;
 8001506:	2301      	movs	r3, #1
 8001508:	e7ff      	b.n	800150a <send_window_status_update+0x20a>
}
 800150a:	4618      	mov	r0, r3
 800150c:	3788      	adds	r7, #136	@ 0x88
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	0800c2ec 	.word	0x0800c2ec
 8001518:	0800c1bc 	.word	0x0800c1bc
 800151c:	0800c1c4 	.word	0x0800c1c4
 8001520:	0800c1c8 	.word	0x0800c1c8

08001524 <getSequenceNumber>:


int getSequenceNumber(int sensorId) {
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

	int count = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
	 if (sensorId == sensor1Id)
 8001530:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <getSequenceNumber+0x74>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	d108      	bne.n	800154c <getSequenceNumber+0x28>
	{
		 count = messagecounter1;
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <getSequenceNumber+0x78>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	60fb      	str	r3, [r7, #12]
		 messagecounter1++;
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <getSequenceNumber+0x78>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a15      	ldr	r2, [pc, #84]	@ (800159c <getSequenceNumber+0x78>)
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e01e      	b.n	800158a <getSequenceNumber+0x66>
	}
	else if (sensorId == sensor2Id)
 800154c:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <getSequenceNumber+0x7c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	429a      	cmp	r2, r3
 8001554:	d108      	bne.n	8001568 <getSequenceNumber+0x44>
	{
		count = messagecounter2;
 8001556:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <getSequenceNumber+0x80>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]
		messagecounter2++;
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <getSequenceNumber+0x80>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a10      	ldr	r2, [pc, #64]	@ (80015a4 <getSequenceNumber+0x80>)
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e010      	b.n	800158a <getSequenceNumber+0x66>
	}
	else if (sensorId == sensor3Id)
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <getSequenceNumber+0x84>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	d108      	bne.n	8001584 <getSequenceNumber+0x60>
	{
		count = messagecounter3;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <getSequenceNumber+0x88>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	60fb      	str	r3, [r7, #12]
		messagecounter3++;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <getSequenceNumber+0x88>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	4a0b      	ldr	r2, [pc, #44]	@ (80015ac <getSequenceNumber+0x88>)
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e002      	b.n	800158a <getSequenceNumber+0x66>
	}
	else {
		return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	e000      	b.n	800158c <getSequenceNumber+0x68>
	}
	 return count;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	20000000 	.word	0x20000000
 800159c:	200000c0 	.word	0x200000c0
 80015a0:	20000004 	.word	0x20000004
 80015a4:	200000c4 	.word	0x200000c4
 80015a8:	20000008 	.word	0x20000008
 80015ac:	200000c8 	.word	0x200000c8

080015b0 <OnTxDone>:



void OnTxDone( void )
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
    State = TX;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <OnTxDone+0x20>)
 80015b6:	2205      	movs	r2, #5
 80015b8:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.txdone++;
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <OnTxDone+0x24>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a04      	ldr	r2, [pc, #16]	@ (80015d4 <OnTxDone+0x24>)
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	200000b9 	.word	0x200000b9
 80015d4:	200000ec 	.word	0x200000ec

080015d8 <OnRxDone>:

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	4608      	mov	r0, r1
 80015e2:	4611      	mov	r1, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	817b      	strh	r3, [r7, #10]
 80015ea:	460b      	mov	r3, r1
 80015ec:	813b      	strh	r3, [r7, #8]
 80015ee:	4613      	mov	r3, r2
 80015f0:	71fb      	strb	r3, [r7, #7]
	enqueue(&message_queue, payload);
 80015f2:	68f9      	ldr	r1, [r7, #12]
 80015f4:	4807      	ldr	r0, [pc, #28]	@ (8001614 <OnRxDone+0x3c>)
 80015f6:	f7ff fdaf 	bl	8001158 <enqueue>
    State = RX_DONE;
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <OnRxDone+0x40>)
 80015fc:	2202      	movs	r2, #2
 80015fe:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxdone++;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <OnRxDone+0x44>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	4a05      	ldr	r2, [pc, #20]	@ (800161c <OnRxDone+0x44>)
 8001608:	6013      	str	r3, [r2, #0]
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200000cc 	.word	0x200000cc
 8001618:	200000b9 	.word	0x200000b9
 800161c:	200000ec 	.word	0x200000ec

08001620 <OnTxTimeout>:



void OnTxTimeout( void )
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <OnTxTimeout+0x20>)
 8001626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001628:	4798      	blx	r3
    State = TX_TIMEOUT;
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <OnTxTimeout+0x24>)
 800162c:	2206      	movs	r2, #6
 800162e:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.txtimeout++;
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <OnTxTimeout+0x28>)
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	3301      	adds	r3, #1
 8001636:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <OnTxTimeout+0x28>)
 8001638:	6113      	str	r3, [r2, #16]
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	0800c2ec 	.word	0x0800c2ec
 8001644:	200000b9 	.word	0x200000b9
 8001648:	200000ec 	.word	0x200000ec

0800164c <OnRxTimeout>:

void OnRxTimeout( void )
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
    State = RX_TIMEOUT;
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <OnRxTimeout+0x20>)
 8001652:	2203      	movs	r2, #3
 8001654:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxtimeout++;
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <OnRxTimeout+0x24>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	3301      	adds	r3, #1
 800165c:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <OnRxTimeout+0x24>)
 800165e:	6053      	str	r3, [r2, #4]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200000b9 	.word	0x200000b9
 8001670:	200000ec 	.word	0x200000ec

08001674 <OnRxError>:

void OnRxError( void )
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
    State = RX_ERROR;
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <OnRxError+0x20>)
 800167a:	2204      	movs	r2, #4
 800167c:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxerror++;
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <OnRxError+0x24>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	3301      	adds	r3, #1
 8001684:	4a04      	ldr	r2, [pc, #16]	@ (8001698 <OnRxError+0x24>)
 8001686:	6093      	str	r3, [r2, #8]
    Radio.Rx(0);
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <OnRxError+0x28>)
 800168a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800168c:	2000      	movs	r0, #0
 800168e:	4798      	blx	r3
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200000b9 	.word	0x200000b9
 8001698:	200000ec 	.word	0x200000ec
 800169c:	0800c2ec 	.word	0x0800c2ec

080016a0 <cmox_ll_init>:
  * @brief          CMOX library low level initialization
  * @param          pArg User defined parameter that is transmitted from initialize service
  * @retval         Initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  __HAL_RCC_CRC_RELEASE_RESET();
 80016a8:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <cmox_ll_init+0x40>)
 80016aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ac:	4a0c      	ldr	r2, [pc, #48]	@ (80016e0 <cmox_ll_init+0x40>)
 80016ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016b2:	6613      	str	r3, [r2, #96]	@ 0x60
  __HAL_RCC_CRC_CLK_ENABLE();
 80016b4:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <cmox_ll_init+0x40>)
 80016b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ba:	4a09      	ldr	r2, [pc, #36]	@ (80016e0 <cmox_ll_init+0x40>)
 80016bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <cmox_ll_init+0x40>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  return CMOX_INIT_SUCCESS;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	46020c00 	.word	0x46020c00

080016e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e8:	f000 fc3a 	bl	8001f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 80016ec:	f000 f85f 	bl	80017ae <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 80016f0:	f000 f80f 	bl	8001712 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f4:	f000 f990 	bl	8001a18 <MX_GPIO_Init>
  MX_LPDMA1_Init();
 80016f8:	f000 f894 	bl	8001824 <MX_LPDMA1_Init>
  MX_RTC_Init();
 80016fc:	f000 f8d0 	bl	80018a0 <MX_RTC_Init>
  MX_SPI1_Init();
 8001700:	f000 f91c 	bl	800193c <MX_SPI1_Init>
  MX_AES_Init();
 8001704:	f000 f860 	bl	80017c8 <MX_AES_Init>
  /* USER CODE BEGIN 2 */

  startSystem();
 8001708:	f7ff fa9c 	bl	8000c44 <startSystem>
 800170c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}

08001712 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b09e      	sub	sp, #120	@ 0x78
 8001716:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	2260      	movs	r2, #96	@ 0x60
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f009 fc6d 	bl	800b000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001726:	463b      	mov	r3, r7
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8001736:	2000      	movs	r0, #0
 8001738:	f001 fc46 	bl	8002fc8 <HAL_PWREx_ControlVoltageScaling>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001742:	f000 f9e1 	bl	8001b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001746:	2318      	movs	r3, #24
 8001748:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800174a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001750:	2301      	movs	r3, #1
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001754:	2310      	movs	r3, #16
 8001756:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001758:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800175c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001762:	2300      	movs	r3, #0
 8001764:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001766:	f107 0318 	add.w	r3, r7, #24
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fd08 	bl	8003180 <HAL_RCC_OscConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001776:	f000 f9c7 	bl	8001b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	231f      	movs	r3, #31
 800177c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001792:	463b      	mov	r3, r7
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f002 fbce 	bl	8003f38 <HAL_RCC_ClockConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017a2:	f000 f9b1 	bl	8001b08 <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	3778      	adds	r7, #120	@ 0x78
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80017b2:	2002      	movs	r0, #2
 80017b4:	f001 fc94 	bl	80030e0 <HAL_PWREx_ConfigSupply>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemPower_Config+0x14>
  {
    Error_Handler();
 80017be:	f000 f9a3 	bl	8001b08 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <MX_AES_Init>:
  * @brief AES Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <MX_AES_Init+0x50>)
 80017ce:	4a13      	ldr	r2, [pc, #76]	@ (800181c <MX_AES_Init+0x54>)
 80017d0:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_NO_SWAP;
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <MX_AES_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <MX_AES_Init+0x50>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_AES_Init+0x50>)
 80017e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001820 <MX_AES_Init+0x58>)
 80017e2:	60da      	str	r2, [r3, #12]
  hcryp.Init.Algorithm = CRYP_AES_ECB;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <MX_AES_Init+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <MX_AES_Init+0x50>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_WORD;
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <MX_AES_Init+0x50>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <MX_AES_Init+0x50>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hcryp.Init.KeyMode = CRYP_KEYMODE_NORMAL;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <MX_AES_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MX_AES_Init+0x50>)
 8001804:	f000 fe2a 	bl	800245c <HAL_CRYP_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_AES_Init+0x4a>
  {
    Error_Handler();
 800180e:	f000 f97b 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000011c 	.word	0x2000011c
 800181c:	420c0000 	.word	0x420c0000
 8001820:	0800c1f4 	.word	0x0800c1f4

08001824 <MX_LPDMA1_Init>:
  * @brief LPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPDMA1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPDMA1_Init 0 */

  /* USER CODE END LPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_LPDMA1_CLK_ENABLE();
 800182a:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <MX_LPDMA1_Init+0x70>)
 800182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001830:	4a18      	ldr	r2, [pc, #96]	@ (8001894 <MX_LPDMA1_Init+0x70>)
 8001832:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001836:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800183a:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <MX_LPDMA1_Init+0x70>)
 800183c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001840:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN LPDMA1_Init 1 */

  /* USER CODE END LPDMA1_Init 1 */
  handle_LPDMA1_Channel0.Instance = LPDMA1_Channel0;
 8001848:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <MX_LPDMA1_Init+0x74>)
 800184a:	4a14      	ldr	r2, [pc, #80]	@ (800189c <MX_LPDMA1_Init+0x78>)
 800184c:	601a      	str	r2, [r3, #0]
  handle_LPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800184e:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <MX_LPDMA1_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_LPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <MX_LPDMA1_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_LPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800185a:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <MX_LPDMA1_Init+0x74>)
 800185c:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8001860:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_LPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_NORMAL;
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <MX_LPDMA1_Init+0x74>)
 8001864:	2280      	movs	r2, #128	@ 0x80
 8001866:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_LPDMA1_Channel0) != HAL_OK)
 8001868:	480b      	ldr	r0, [pc, #44]	@ (8001898 <MX_LPDMA1_Init+0x74>)
 800186a:	f000 feef 	bl	800264c <HAL_DMAEx_List_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_LPDMA1_Init+0x54>
  {
    Error_Handler();
 8001874:	f000 f948 	bl	8001b08 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_LPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001878:	2110      	movs	r1, #16
 800187a:	4807      	ldr	r0, [pc, #28]	@ (8001898 <MX_LPDMA1_Init+0x74>)
 800187c:	f000 feaa 	bl	80025d4 <HAL_DMA_ConfigChannelAttributes>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_LPDMA1_Init+0x66>
  {
    Error_Handler();
 8001886:	f000 f93f 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN LPDMA1_Init 2 */

  /* USER CODE END LPDMA1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	46020c00 	.word	0x46020c00
 8001898:	20000184 	.word	0x20000184
 800189c:	46025050 	.word	0x46025050

080018a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
 80018b4:	615a      	str	r2, [r3, #20]
 80018b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <MX_RTC_Init+0x94>)
 80018ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001938 <MX_RTC_Init+0x98>)
 80018bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <MX_RTC_Init+0x94>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <MX_RTC_Init+0x94>)
 80018c6:	227f      	movs	r2, #127	@ 0x7f
 80018c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <MX_RTC_Init+0x94>)
 80018cc:	22ff      	movs	r2, #255	@ 0xff
 80018ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018d0:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <MX_RTC_Init+0x94>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018d6:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <MX_RTC_Init+0x94>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018dc:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <MX_RTC_Init+0x94>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018e2:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <MX_RTC_Init+0x94>)
 80018e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018e8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80018ea:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <MX_RTC_Init+0x94>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80018f0:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <MX_RTC_Init+0x94>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018f6:	480f      	ldr	r0, [pc, #60]	@ (8001934 <MX_RTC_Init+0x94>)
 80018f8:	f003 fd20 	bl	800533c <HAL_RTC_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001902:	f000 f901 	bl	8001b08 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	@ (8001934 <MX_RTC_Init+0x94>)
 800191c:	f004 facc 	bl	8005eb8 <HAL_RTCEx_PrivilegeModeSet>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8001926:	f000 f8ef 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200001fc 	.word	0x200001fc
 8001938:	46007800 	.word	0x46007800

0800193c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800194c:	4b30      	ldr	r3, [pc, #192]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 800194e:	4a31      	ldr	r2, [pc, #196]	@ (8001a14 <MX_SPI1_Init+0xd8>)
 8001950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001952:	4b2f      	ldr	r3, [pc, #188]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 8001954:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800195a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001960:	4b2b      	ldr	r3, [pc, #172]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 8001962:	2203      	movs	r2, #3
 8001964:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001966:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800196c:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001972:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 8001974:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001978:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800197a:	4b25      	ldr	r3, [pc, #148]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 800197c:	2200      	movs	r2, #0
 800197e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001980:	4b23      	ldr	r3, [pc, #140]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 8001982:	2200      	movs	r2, #0
 8001984:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001986:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 8001988:	2200      	movs	r2, #0
 800198a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800198c:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 800198e:	2200      	movs	r2, #0
 8001990:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001992:	4b1f      	ldr	r3, [pc, #124]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 8001994:	2207      	movs	r2, #7
 8001996:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001998:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 800199a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800199e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019ac:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019b2:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019be:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019d6:	480e      	ldr	r0, [pc, #56]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 80019d8:	f004 fa9c 	bl	8005f14 <HAL_SPI_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 80019e2:	f000 f891 	bl	8001b08 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80019ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80019ee:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	@ (8001a10 <MX_SPI1_Init+0xd4>)
 80019fa:	f005 f946 	bl	8006c8a <HAL_SPIEx_SetConfigAutonomousMode>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8001a04:	f000 f880 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000022c 	.word	0x2000022c
 8001a14:	40013000 	.word	0x40013000

08001a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	@ 0x28
 8001a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2e:	4b32      	ldr	r3, [pc, #200]	@ (8001af8 <MX_GPIO_Init+0xe0>)
 8001a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a34:	4a30      	ldr	r2, [pc, #192]	@ (8001af8 <MX_GPIO_Init+0xe0>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <MX_GPIO_Init+0xe0>)
 8001a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <MX_GPIO_Init+0xe0>)
 8001a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a52:	4a29      	ldr	r2, [pc, #164]	@ (8001af8 <MX_GPIO_Init+0xe0>)
 8001a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a58:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a5c:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <MX_GPIO_Init+0xe0>)
 8001a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b23      	ldr	r3, [pc, #140]	@ (8001af8 <MX_GPIO_Init+0xe0>)
 8001a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a70:	4a21      	ldr	r2, [pc, #132]	@ (8001af8 <MX_GPIO_Init+0xe0>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <MX_GPIO_Init+0xe0>)
 8001a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a88:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <MX_GPIO_Init+0xe0>)
 8001a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8001af8 <MX_GPIO_Init+0xe0>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a98:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <MX_GPIO_Init+0xe0>)
 8001a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4810      	ldr	r0, [pc, #64]	@ (8001afc <MX_GPIO_Init+0xe4>)
 8001abc:	f001 f84a 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480b      	ldr	r0, [pc, #44]	@ (8001b00 <MX_GPIO_Init+0xe8>)
 8001ad4:	f001 f83e 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4806      	ldr	r0, [pc, #24]	@ (8001b04 <MX_GPIO_Init+0xec>)
 8001aec:	f001 f832 	bl	8002b54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001af0:	bf00      	nop
 8001af2:	3728      	adds	r7, #40	@ 0x28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	46020c00 	.word	0x46020c00
 8001afc:	42020800 	.word	0x42020800
 8001b00:	42021c00 	.word	0x42021c00
 8001b04:	42020400 	.word	0x42020400

08001b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b0c:	b672      	cpsid	i
}
 8001b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <Error_Handler+0x8>

08001b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <HAL_MspInit+0x30>)
 8001b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b20:	4a08      	ldr	r2, [pc, #32]	@ (8001b44 <HAL_MspInit+0x30>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_MspInit+0x30>)
 8001b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	46020c00 	.word	0x46020c00

08001b48 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0b      	ldr	r2, [pc, #44]	@ (8001b84 <HAL_CRYP_MspInit+0x3c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10e      	bne.n	8001b78 <HAL_CRYP_MspInit+0x30>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <HAL_CRYP_MspInit+0x40>)
 8001b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b60:	4a09      	ldr	r2, [pc, #36]	@ (8001b88 <HAL_CRYP_MspInit+0x40>)
 8001b62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b6a:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <HAL_CRYP_MspInit+0x40>)
 8001b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END AES_MspInit 1 */

  }

}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	420c0000 	.word	0x420c0000
 8001b88:	46020c00 	.word	0x46020c00

08001b8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0b4      	sub	sp, #208	@ 0xd0
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	22c0      	movs	r2, #192	@ 0xc0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f009 fa2f 	bl	800b000 <memset>
  if(hrtc->Instance==RTC)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c1c <HAL_RTC_MspInit+0x90>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d132      	bne.n	8001c12 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 fd4b 	bl	8004660 <HAL_RCCEx_PeriphCLKConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001bd0:	f7ff ff9a 	bl	8001b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_RTC_MspInit+0x94>)
 8001bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bda:	4a11      	ldr	r2, [pc, #68]	@ (8001c20 <HAL_RTC_MspInit+0x94>)
 8001bdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001be0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001be4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <HAL_RTC_MspInit+0x94>)
 8001be6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001bea:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <HAL_RTC_MspInit+0x94>)
 8001bec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bf0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <HAL_RTC_MspInit+0x94>)
 8001bf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8001c02:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <HAL_RTC_MspInit+0x94>)
 8001c04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c08:	4a05      	ldr	r2, [pc, #20]	@ (8001c20 <HAL_RTC_MspInit+0x94>)
 8001c0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001c12:	bf00      	nop
 8001c14:	37d0      	adds	r7, #208	@ 0xd0
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	46007800 	.word	0x46007800
 8001c20:	46020c00 	.word	0x46020c00

08001c24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b0ba      	sub	sp, #232	@ 0xe8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	22c0      	movs	r2, #192	@ 0xc0
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f009 f9db 	bl	800b000 <memset>
  if(hspi->Instance==SPI1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a27      	ldr	r2, [pc, #156]	@ (8001cec <HAL_SPI_MspInit+0xc8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d146      	bne.n	8001ce2 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001c54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001c60:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 fcf7 	bl	8004660 <HAL_RCCEx_PeriphCLKConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001c78:	f7ff ff46 	bl	8001b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <HAL_SPI_MspInit+0xcc>)
 8001c7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c82:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf0 <HAL_SPI_MspInit+0xcc>)
 8001c84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c88:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001c8c:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <HAL_SPI_MspInit+0xcc>)
 8001c8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_SPI_MspInit+0xcc>)
 8001c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca0:	4a13      	ldr	r2, [pc, #76]	@ (8001cf0 <HAL_SPI_MspInit+0xcc>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_SPI_MspInit+0xcc>)
 8001cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cb8:	23e0      	movs	r3, #224	@ 0xe0
 8001cba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd0:	2305      	movs	r3, #5
 8001cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <HAL_SPI_MspInit+0xd0>)
 8001cde:	f000 ff39 	bl	8002b54 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ce2:	bf00      	nop
 8001ce4:	37e8      	adds	r7, #232	@ 0xe8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40013000 	.word	0x40013000
 8001cf0:	46020c00 	.word	0x46020c00
 8001cf4:	42020000 	.word	0x42020000

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <NMI_Handler+0x4>

08001d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <HardFault_Handler+0x4>

08001d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <MemManage_Handler+0x4>

08001d10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <BusFault_Handler+0x4>

08001d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <UsageFault_Handler+0x4>

08001d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4e:	f000 f9ad 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e00a      	b.n	8001d7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d68:	f3af 8000 	nop.w
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	60ba      	str	r2, [r7, #8]
 8001d74:	b2ca      	uxtb	r2, r1
 8001d76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	dbf0      	blt.n	8001d68 <_read+0x12>
  }

  return len;
 8001d86:	687b      	ldr	r3, [r7, #4]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e009      	b.n	8001db6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	60ba      	str	r2, [r7, #8]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	dbf1      	blt.n	8001da2 <_write+0x12>
  }
  return len;
 8001dbe:	687b      	ldr	r3, [r7, #4]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_close>:

int _close(int file)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001df0:	605a      	str	r2, [r3, #4]
  return 0;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_isatty>:

int _isatty(int file)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e38:	4a14      	ldr	r2, [pc, #80]	@ (8001e8c <_sbrk+0x5c>)
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <_sbrk+0x60>)
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <_sbrk+0x64>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <_sbrk+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d207      	bcs.n	8001e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e60:	f009 f91c 	bl	800b09c <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a05      	ldr	r2, [pc, #20]	@ (8001e94 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20040000 	.word	0x20040000
 8001e90:	00000400 	.word	0x00000400
 8001e94:	200002bc 	.word	0x200002bc
 8001e98:	200007b0 	.word	0x200007b0

08001e9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ea0:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <SystemInit+0x68>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea6:	4a17      	ldr	r2, [pc, #92]	@ (8001f04 <SystemInit+0x68>)
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <SystemInit+0x6c>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001eb6:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <SystemInit+0x6c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <SystemInit+0x6c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <SystemInit+0x6c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <SystemInit+0x6c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8001f08 <SystemInit+0x6c>)
 8001ece:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001ed2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001ed6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <SystemInit+0x6c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001ede:	4b0a      	ldr	r3, [pc, #40]	@ (8001f08 <SystemInit+0x6c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a09      	ldr	r2, [pc, #36]	@ (8001f08 <SystemInit+0x6c>)
 8001ee4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001eea:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <SystemInit+0x6c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ef0:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <SystemInit+0x68>)
 8001ef2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ef6:	609a      	str	r2, [r3, #8]
  #endif
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00
 8001f08:	46020c00 	.word	0x46020c00

08001f0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f0c:	480d      	ldr	r0, [pc, #52]	@ (8001f44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f10:	f7ff ffc4 	bl	8001e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f14:	480c      	ldr	r0, [pc, #48]	@ (8001f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f16:	490d      	ldr	r1, [pc, #52]	@ (8001f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f18:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <LoopForever+0xe>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f1c:	e002      	b.n	8001f24 <LoopCopyDataInit>

08001f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f22:	3304      	adds	r3, #4

08001f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f28:	d3f9      	bcc.n	8001f1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f58 <LoopForever+0x16>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f30:	e001      	b.n	8001f36 <LoopFillZerobss>

08001f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f34:	3204      	adds	r2, #4

08001f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f38:	d3fb      	bcc.n	8001f32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f3a:	f009 f8b5 	bl	800b0a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f3e:	f7ff fbd1 	bl	80016e4 <main>

08001f42 <LoopForever>:

LoopForever:
    b LoopForever
 8001f42:	e7fe      	b.n	8001f42 <LoopForever>
  ldr   r0, =_estack
 8001f44:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001f50:	0800c568 	.word	0x0800c568
  ldr r2, =_sbss
 8001f54:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001f58:	200007ac 	.word	0x200007ac

08001f5c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC1_IRQHandler>
	...

08001f60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f64:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <HAL_Init+0x50>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a11      	ldr	r2, [pc, #68]	@ (8001fb0 <HAL_Init+0x50>)
 8001f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f70:	2003      	movs	r0, #3
 8001f72:	f000 f98c 	bl	800228e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001f76:	f002 f9d1 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <HAL_Init+0x54>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	490c      	ldr	r1, [pc, #48]	@ (8001fb8 <HAL_Init+0x58>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001fbc <HAL_Init+0x5c>)
 8001f8e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f90:	2004      	movs	r0, #4
 8001f92:	f000 f9d1 	bl	8002338 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f96:	200f      	movs	r0, #15
 8001f98:	f000 f812 	bl	8001fc0 <HAL_InitTick>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e002      	b.n	8001fac <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa6:	f7ff fdb5 	bl	8001b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	46020c00 	.word	0x46020c00
 8001fb8:	0800c204 	.word	0x0800c204
 8001fbc:	2000001c 	.word	0x2000001c

08001fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001fcc:	4b33      	ldr	r3, [pc, #204]	@ (800209c <HAL_InitTick+0xdc>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e05c      	b.n	8002092 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001fd8:	4b31      	ldr	r3, [pc, #196]	@ (80020a0 <HAL_InitTick+0xe0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d10c      	bne.n	8001ffe <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80020a4 <HAL_InitTick+0xe4>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800209c <HAL_InitTick+0xdc>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	e037      	b.n	800206e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001ffe:	f000 f9f3 	bl	80023e8 <HAL_SYSTICK_GetCLKSourceConfig>
 8002002:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d023      	beq.n	8002052 <HAL_InitTick+0x92>
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d82d      	bhi.n	800206c <HAL_InitTick+0xac>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_InitTick+0x5e>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d00d      	beq.n	8002038 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800201c:	e026      	b.n	800206c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800201e:	4b21      	ldr	r3, [pc, #132]	@ (80020a4 <HAL_InitTick+0xe4>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4b1e      	ldr	r3, [pc, #120]	@ (800209c <HAL_InitTick+0xdc>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	4619      	mov	r1, r3
 8002028:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800202c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	60fb      	str	r3, [r7, #12]
        break;
 8002036:	e01a      	b.n	800206e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002038:	4b18      	ldr	r3, [pc, #96]	@ (800209c <HAL_InitTick+0xdc>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002042:	fbb3 f3f2 	udiv	r3, r3, r2
 8002046:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	60fb      	str	r3, [r7, #12]
        break;
 8002050:	e00d      	b.n	800206e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002052:	4b12      	ldr	r3, [pc, #72]	@ (800209c <HAL_InitTick+0xdc>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800205c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002060:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002064:	fbb2 f3f3 	udiv	r3, r2, r3
 8002068:	60fb      	str	r3, [r7, #12]
        break;
 800206a:	e000      	b.n	800206e <HAL_InitTick+0xae>
        break;
 800206c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f940 	bl	80022f4 <HAL_SYSTICK_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e009      	b.n	8002092 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800207e:	2200      	movs	r2, #0
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	f04f 30ff 	mov.w	r0, #4294967295
 8002086:	f000 f90d 	bl	80022a4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800208a:	4a07      	ldr	r2, [pc, #28]	@ (80020a8 <HAL_InitTick+0xe8>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000024 	.word	0x20000024
 80020a0:	e000e010 	.word	0xe000e010
 80020a4:	2000001c 	.word	0x2000001c
 80020a8:	20000020 	.word	0x20000020

080020ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000024 	.word	0x20000024
 80020d0:	200002c0 	.word	0x200002c0

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	200002c0 	.word	0x200002c0

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff ffee 	bl	80020d4 <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <HAL_Delay+0x44>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002112:	bf00      	nop
 8002114:	f7ff ffde 	bl	80020d4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000024 	.word	0x20000024

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800215c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002166:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	60d3      	str	r3, [r2, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0b      	blt.n	80021c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4907      	ldr	r1, [pc, #28]	@ (80021d0 <__NVIC_EnableIRQ+0x38>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000e100 	.word	0xe000e100

080021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	@ (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	@ (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
         );
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	@ 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff4c 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022b2:	f7ff ff63 	bl	800217c <__NVIC_GetPriorityGrouping>
 80022b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	6978      	ldr	r0, [r7, #20]
 80022be:	f7ff ffb3 	bl	8002228 <NVIC_EncodePriority>
 80022c2:	4602      	mov	r2, r0
 80022c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff82 	bl	80021d4 <__NVIC_SetPriority>
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff56 	bl	8002198 <__NVIC_EnableIRQ>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002304:	d301      	bcc.n	800230a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002306:	2301      	movs	r3, #1
 8002308:	e00d      	b.n	8002326 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800230a:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <HAL_SYSTICK_Config+0x40>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002312:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <HAL_SYSTICK_Config+0x40>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002318:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_SYSTICK_Config+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a05      	ldr	r2, [pc, #20]	@ (8002334 <HAL_SYSTICK_Config+0x40>)
 800231e:	f043 0303 	orr.w	r3, r3, #3
 8002322:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000e010 	.word	0xe000e010

08002338 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d844      	bhi.n	80023d0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002346:	a201      	add	r2, pc, #4	@ (adr r2, 800234c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234c:	0800236f 	.word	0x0800236f
 8002350:	0800238d 	.word	0x0800238d
 8002354:	080023af 	.word	0x080023af
 8002358:	080023d1 	.word	0x080023d1
 800235c:	08002361 	.word	0x08002361
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002360:	4b1f      	ldr	r3, [pc, #124]	@ (80023e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1e      	ldr	r2, [pc, #120]	@ (80023e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	6013      	str	r3, [r2, #0]
      break;
 800236c:	e031      	b.n	80023d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800236e:	4b1c      	ldr	r3, [pc, #112]	@ (80023e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a1b      	ldr	r2, [pc, #108]	@ (80023e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002374:	f023 0304 	bic.w	r3, r3, #4
 8002378:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800237a:	4b1a      	ldr	r3, [pc, #104]	@ (80023e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800237c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002380:	4a18      	ldr	r2, [pc, #96]	@ (80023e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002382:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800238a:	e022      	b.n	80023d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800238c:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a13      	ldr	r2, [pc, #76]	@ (80023e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002392:	f023 0304 	bic.w	r3, r3, #4
 8002396:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002398:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800239a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800239e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80023a2:	4a10      	ldr	r2, [pc, #64]	@ (80023e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80023ac:	e011      	b.n	80023d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80023ae:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a0b      	ldr	r2, [pc, #44]	@ (80023e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023b4:	f023 0304 	bic.w	r3, r3, #4
 80023b8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80023c4:	4a07      	ldr	r2, [pc, #28]	@ (80023e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80023ce:	e000      	b.n	80023d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80023d0:	bf00      	nop
  }
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000e010 	.word	0xe000e010
 80023e4:	46020c00 	.word	0x46020c00

080023e8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80023ee:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80023fa:	2304      	movs	r3, #4
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	e021      	b.n	8002444 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002400:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002406:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800240a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002412:	d011      	beq.n	8002438 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800241a:	d810      	bhi.n	800243e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d004      	beq.n	800242c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002428:	d003      	beq.n	8002432 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800242a:	e008      	b.n	800243e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800242c:	2300      	movs	r3, #0
 800242e:	607b      	str	r3, [r7, #4]
        break;
 8002430:	e008      	b.n	8002444 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002432:	2301      	movs	r3, #1
 8002434:	607b      	str	r3, [r7, #4]
        break;
 8002436:	e005      	b.n	8002444 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002438:	2302      	movs	r3, #2
 800243a:	607b      	str	r3, [r7, #4]
        break;
 800243c:	e002      	b.n	8002444 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
        break;
 8002442:	bf00      	nop
    }
  }
  return systick_source;
 8002444:	687b      	ldr	r3, [r7, #4]
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e010 	.word	0xe000e010
 8002458:	46020c00 	.word	0x46020c00

0800245c <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
#if defined(SAES)
  uint32_t tickstart;
#endif /* SAES */

  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0a7      	b.n	80025be <HAL_CRYP_Init+0x162>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff fb60 	bl	8001b48 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  if (hcryp->Instance == AES)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a4e      	ldr	r2, [pc, #312]	@ (80025c8 <HAL_CRYP_Init+0x16c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d116      	bne.n	80024c0 <HAL_CRYP_Init+0x64>
  {
    /* Set the key size, data type and Algorithm */
    cr_value = (uint32_t)(hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm | hcryp->Init.KeyMode);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm and mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, cr_value);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b46      	ldr	r3, [pc, #280]	@ (80025cc <HAL_CRYP_Init+0x170>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	430b      	orrs	r3, r1
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e070      	b.n	80025a2 <HAL_CRYP_Init+0x146>
  }
  else
  {
    /* SAES is initializing, fetching random number from the RNG */
    tickstart = HAL_GetTick();
 80024c0:	f7ff fe08 	bl	80020d4 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 80024c6:	e01e      	b.n	8002506 <HAL_CRYP_Init+0xaa>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 80024c8:	f7ff fe04 	bl	80020d4 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b52      	cmp	r3, #82	@ 0x52
 80024d4:	d917      	bls.n	8002506 <HAL_CRYP_Init+0xaa>
      {
        __HAL_CRYP_DISABLE(hcryp);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0201 	bic.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ea:	f043 0210 	orr.w	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e05b      	b.n	80025be <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b08      	cmp	r3, #8
 8002512:	d0d9      	beq.n	80024c8 <HAL_CRYP_Init+0x6c>
      }
    }
    /* SAES is initializing, no random number fetching error flagged */
    tickstart = HAL_GetTick();
 8002514:	f7ff fdde 	bl	80020d4 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 800251a:	e01e      	b.n	800255a <HAL_CRYP_Init+0xfe>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 800251c:	f7ff fdda 	bl	80020d4 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b52      	cmp	r3, #82	@ 0x52
 8002528:	d917      	bls.n	800255a <HAL_CRYP_Init+0xfe>
      {
        __HAL_CRYP_DISABLE(hcryp);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_RNG;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e031      	b.n	80025be <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b08      	cmp	r3, #8
 8002568:	d0d8      	beq.n	800251c <HAL_CRYP_Init+0xc0>
      }
    }
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 800257e:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 800258a:	4313      	orrs	r3, r2
 800258c:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm, Key selection and key protection */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | AES_CR_KEYSEL |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b0e      	ldr	r3, [pc, #56]	@ (80025d0 <HAL_CRYP_Init+0x174>)
 8002596:	4013      	ands	r3, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	430b      	orrs	r3, r1
 80025a0:	6013      	str	r3, [r2, #0]
               AES_CR_KEYPROT, cr_value);
  }
  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	420c0000 	.word	0x420c0000
 80025cc:	fcfaff99 	.word	0xfcfaff99
 80025d0:	8cf2ff99 	.word	0x8cf2ff99

080025d4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e02b      	b.n	8002640 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80025f0:	f023 030f 	bic.w	r3, r3, #15
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fe:	3b50      	subs	r3, #80	@ 0x50
 8002600:	09db      	lsrs	r3, r3, #7
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	2201      	movs	r2, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f003 0311 	and.w	r3, r3, #17
 800261e:	2b11      	cmp	r3, #17
 8002620:	d106      	bne.n	8002630 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	431a      	orrs	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	e006      	b.n	800263e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	43db      	mvns	r3, r3
 8002638:	401a      	ands	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002654:	f7ff fd3e 	bl	80020d4 <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0db      	b.n	800281c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6e      	ldr	r2, [pc, #440]	@ (8002824 <HAL_DMAEx_List_Init+0x1d8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	f000 809f 	beq.w	80027ae <HAL_DMAEx_List_Init+0x162>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a6c      	ldr	r2, [pc, #432]	@ (8002828 <HAL_DMAEx_List_Init+0x1dc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	f000 8099 	beq.w	80027ae <HAL_DMAEx_List_Init+0x162>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a6a      	ldr	r2, [pc, #424]	@ (800282c <HAL_DMAEx_List_Init+0x1e0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	f000 8093 	beq.w	80027ae <HAL_DMAEx_List_Init+0x162>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a68      	ldr	r2, [pc, #416]	@ (8002830 <HAL_DMAEx_List_Init+0x1e4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	f000 808d 	beq.w	80027ae <HAL_DMAEx_List_Init+0x162>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a66      	ldr	r2, [pc, #408]	@ (8002834 <HAL_DMAEx_List_Init+0x1e8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	f000 8087 	beq.w	80027ae <HAL_DMAEx_List_Init+0x162>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a64      	ldr	r2, [pc, #400]	@ (8002838 <HAL_DMAEx_List_Init+0x1ec>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	f000 8081 	beq.w	80027ae <HAL_DMAEx_List_Init+0x162>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a62      	ldr	r2, [pc, #392]	@ (800283c <HAL_DMAEx_List_Init+0x1f0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d07b      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a61      	ldr	r2, [pc, #388]	@ (8002840 <HAL_DMAEx_List_Init+0x1f4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d076      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a5f      	ldr	r2, [pc, #380]	@ (8002844 <HAL_DMAEx_List_Init+0x1f8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d071      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a5e      	ldr	r2, [pc, #376]	@ (8002848 <HAL_DMAEx_List_Init+0x1fc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d06c      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a5c      	ldr	r2, [pc, #368]	@ (800284c <HAL_DMAEx_List_Init+0x200>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d067      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002850 <HAL_DMAEx_List_Init+0x204>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d062      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a59      	ldr	r2, [pc, #356]	@ (8002854 <HAL_DMAEx_List_Init+0x208>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d05d      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a58      	ldr	r2, [pc, #352]	@ (8002858 <HAL_DMAEx_List_Init+0x20c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d058      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a56      	ldr	r2, [pc, #344]	@ (800285c <HAL_DMAEx_List_Init+0x210>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d053      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a55      	ldr	r2, [pc, #340]	@ (8002860 <HAL_DMAEx_List_Init+0x214>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d04e      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a53      	ldr	r2, [pc, #332]	@ (8002864 <HAL_DMAEx_List_Init+0x218>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d049      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a52      	ldr	r2, [pc, #328]	@ (8002868 <HAL_DMAEx_List_Init+0x21c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d044      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a50      	ldr	r2, [pc, #320]	@ (800286c <HAL_DMAEx_List_Init+0x220>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d03f      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a4f      	ldr	r2, [pc, #316]	@ (8002870 <HAL_DMAEx_List_Init+0x224>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d03a      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a4d      	ldr	r2, [pc, #308]	@ (8002874 <HAL_DMAEx_List_Init+0x228>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d035      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a4c      	ldr	r2, [pc, #304]	@ (8002878 <HAL_DMAEx_List_Init+0x22c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d030      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a4a      	ldr	r2, [pc, #296]	@ (800287c <HAL_DMAEx_List_Init+0x230>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02b      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a49      	ldr	r2, [pc, #292]	@ (8002880 <HAL_DMAEx_List_Init+0x234>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d026      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a47      	ldr	r2, [pc, #284]	@ (8002884 <HAL_DMAEx_List_Init+0x238>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d021      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a46      	ldr	r2, [pc, #280]	@ (8002888 <HAL_DMAEx_List_Init+0x23c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d01c      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a44      	ldr	r2, [pc, #272]	@ (800288c <HAL_DMAEx_List_Init+0x240>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d017      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a43      	ldr	r2, [pc, #268]	@ (8002890 <HAL_DMAEx_List_Init+0x244>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d012      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a41      	ldr	r2, [pc, #260]	@ (8002894 <HAL_DMAEx_List_Init+0x248>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a40      	ldr	r2, [pc, #256]	@ (8002898 <HAL_DMAEx_List_Init+0x24c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d008      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a3e      	ldr	r2, [pc, #248]	@ (800289c <HAL_DMAEx_List_Init+0x250>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d003      	beq.n	80027ae <HAL_DMAEx_List_Init+0x162>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a3d      	ldr	r2, [pc, #244]	@ (80028a0 <HAL_DMAEx_List_Init+0x254>)
 80027ac:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0206 	orr.w	r2, r2, #6
 80027cc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80027ce:	e00f      	b.n	80027f0 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80027d0:	f7ff fc80 	bl	80020d4 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b05      	cmp	r3, #5
 80027dc:	d908      	bls.n	80027f0 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2210      	movs	r2, #16
 80027e2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2203      	movs	r2, #3
 80027e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e015      	b.n	800281c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1e8      	bne.n	80027d0 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f850 	bl	80028a4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40020050 	.word	0x40020050
 8002828:	50020050 	.word	0x50020050
 800282c:	400200d0 	.word	0x400200d0
 8002830:	500200d0 	.word	0x500200d0
 8002834:	40020150 	.word	0x40020150
 8002838:	50020150 	.word	0x50020150
 800283c:	400201d0 	.word	0x400201d0
 8002840:	500201d0 	.word	0x500201d0
 8002844:	40020250 	.word	0x40020250
 8002848:	50020250 	.word	0x50020250
 800284c:	400202d0 	.word	0x400202d0
 8002850:	500202d0 	.word	0x500202d0
 8002854:	40020350 	.word	0x40020350
 8002858:	50020350 	.word	0x50020350
 800285c:	400203d0 	.word	0x400203d0
 8002860:	500203d0 	.word	0x500203d0
 8002864:	40020450 	.word	0x40020450
 8002868:	50020450 	.word	0x50020450
 800286c:	400204d0 	.word	0x400204d0
 8002870:	500204d0 	.word	0x500204d0
 8002874:	40020550 	.word	0x40020550
 8002878:	50020550 	.word	0x50020550
 800287c:	400205d0 	.word	0x400205d0
 8002880:	500205d0 	.word	0x500205d0
 8002884:	40020650 	.word	0x40020650
 8002888:	50020650 	.word	0x50020650
 800288c:	400206d0 	.word	0x400206d0
 8002890:	500206d0 	.word	0x500206d0
 8002894:	40020750 	.word	0x40020750
 8002898:	50020750 	.word	0x50020750
 800289c:	400207d0 	.word	0x400207d0
 80028a0:	500207d0 	.word	0x500207d0

080028a4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a85      	ldr	r2, [pc, #532]	@ (8002ad4 <DMA_List_Init+0x230>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	f000 80a0 	beq.w	8002a04 <DMA_List_Init+0x160>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a83      	ldr	r2, [pc, #524]	@ (8002ad8 <DMA_List_Init+0x234>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	f000 809a 	beq.w	8002a04 <DMA_List_Init+0x160>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a81      	ldr	r2, [pc, #516]	@ (8002adc <DMA_List_Init+0x238>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f000 8094 	beq.w	8002a04 <DMA_List_Init+0x160>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ae0 <DMA_List_Init+0x23c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	f000 808e 	beq.w	8002a04 <DMA_List_Init+0x160>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a7d      	ldr	r2, [pc, #500]	@ (8002ae4 <DMA_List_Init+0x240>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	f000 8088 	beq.w	8002a04 <DMA_List_Init+0x160>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a7b      	ldr	r2, [pc, #492]	@ (8002ae8 <DMA_List_Init+0x244>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	f000 8082 	beq.w	8002a04 <DMA_List_Init+0x160>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a79      	ldr	r2, [pc, #484]	@ (8002aec <DMA_List_Init+0x248>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d07c      	beq.n	8002a04 <DMA_List_Init+0x160>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a78      	ldr	r2, [pc, #480]	@ (8002af0 <DMA_List_Init+0x24c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d077      	beq.n	8002a04 <DMA_List_Init+0x160>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a76      	ldr	r2, [pc, #472]	@ (8002af4 <DMA_List_Init+0x250>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d072      	beq.n	8002a04 <DMA_List_Init+0x160>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a75      	ldr	r2, [pc, #468]	@ (8002af8 <DMA_List_Init+0x254>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d06d      	beq.n	8002a04 <DMA_List_Init+0x160>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a73      	ldr	r2, [pc, #460]	@ (8002afc <DMA_List_Init+0x258>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d068      	beq.n	8002a04 <DMA_List_Init+0x160>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a72      	ldr	r2, [pc, #456]	@ (8002b00 <DMA_List_Init+0x25c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d063      	beq.n	8002a04 <DMA_List_Init+0x160>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a70      	ldr	r2, [pc, #448]	@ (8002b04 <DMA_List_Init+0x260>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d05e      	beq.n	8002a04 <DMA_List_Init+0x160>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6f      	ldr	r2, [pc, #444]	@ (8002b08 <DMA_List_Init+0x264>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d059      	beq.n	8002a04 <DMA_List_Init+0x160>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6d      	ldr	r2, [pc, #436]	@ (8002b0c <DMA_List_Init+0x268>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d054      	beq.n	8002a04 <DMA_List_Init+0x160>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a6c      	ldr	r2, [pc, #432]	@ (8002b10 <DMA_List_Init+0x26c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d04f      	beq.n	8002a04 <DMA_List_Init+0x160>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a6a      	ldr	r2, [pc, #424]	@ (8002b14 <DMA_List_Init+0x270>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d04a      	beq.n	8002a04 <DMA_List_Init+0x160>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a69      	ldr	r2, [pc, #420]	@ (8002b18 <DMA_List_Init+0x274>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d045      	beq.n	8002a04 <DMA_List_Init+0x160>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a67      	ldr	r2, [pc, #412]	@ (8002b1c <DMA_List_Init+0x278>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d040      	beq.n	8002a04 <DMA_List_Init+0x160>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a66      	ldr	r2, [pc, #408]	@ (8002b20 <DMA_List_Init+0x27c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d03b      	beq.n	8002a04 <DMA_List_Init+0x160>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a64      	ldr	r2, [pc, #400]	@ (8002b24 <DMA_List_Init+0x280>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d036      	beq.n	8002a04 <DMA_List_Init+0x160>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a63      	ldr	r2, [pc, #396]	@ (8002b28 <DMA_List_Init+0x284>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d031      	beq.n	8002a04 <DMA_List_Init+0x160>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a61      	ldr	r2, [pc, #388]	@ (8002b2c <DMA_List_Init+0x288>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d02c      	beq.n	8002a04 <DMA_List_Init+0x160>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a60      	ldr	r2, [pc, #384]	@ (8002b30 <DMA_List_Init+0x28c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d027      	beq.n	8002a04 <DMA_List_Init+0x160>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a5e      	ldr	r2, [pc, #376]	@ (8002b34 <DMA_List_Init+0x290>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d022      	beq.n	8002a04 <DMA_List_Init+0x160>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002b38 <DMA_List_Init+0x294>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d01d      	beq.n	8002a04 <DMA_List_Init+0x160>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a5b      	ldr	r2, [pc, #364]	@ (8002b3c <DMA_List_Init+0x298>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d018      	beq.n	8002a04 <DMA_List_Init+0x160>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002b40 <DMA_List_Init+0x29c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d013      	beq.n	8002a04 <DMA_List_Init+0x160>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a58      	ldr	r2, [pc, #352]	@ (8002b44 <DMA_List_Init+0x2a0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00e      	beq.n	8002a04 <DMA_List_Init+0x160>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a57      	ldr	r2, [pc, #348]	@ (8002b48 <DMA_List_Init+0x2a4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d009      	beq.n	8002a04 <DMA_List_Init+0x160>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a55      	ldr	r2, [pc, #340]	@ (8002b4c <DMA_List_Init+0x2a8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d004      	beq.n	8002a04 <DMA_List_Init+0x160>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a54      	ldr	r2, [pc, #336]	@ (8002b50 <DMA_List_Init+0x2ac>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d101      	bne.n	8002a08 <DMA_List_Init+0x164>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <DMA_List_Init+0x166>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d004      	beq.n	8002a18 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2200      	movs	r2, #0
 8002a44:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a36      	ldr	r2, [pc, #216]	@ (8002b34 <DMA_List_Init+0x290>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d022      	beq.n	8002aa6 <DMA_List_Init+0x202>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a34      	ldr	r2, [pc, #208]	@ (8002b38 <DMA_List_Init+0x294>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01d      	beq.n	8002aa6 <DMA_List_Init+0x202>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a33      	ldr	r2, [pc, #204]	@ (8002b3c <DMA_List_Init+0x298>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d018      	beq.n	8002aa6 <DMA_List_Init+0x202>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a31      	ldr	r2, [pc, #196]	@ (8002b40 <DMA_List_Init+0x29c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <DMA_List_Init+0x202>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a30      	ldr	r2, [pc, #192]	@ (8002b44 <DMA_List_Init+0x2a0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00e      	beq.n	8002aa6 <DMA_List_Init+0x202>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8002b48 <DMA_List_Init+0x2a4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d009      	beq.n	8002aa6 <DMA_List_Init+0x202>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a2d      	ldr	r2, [pc, #180]	@ (8002b4c <DMA_List_Init+0x2a8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d004      	beq.n	8002aa6 <DMA_List_Init+0x202>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8002b50 <DMA_List_Init+0x2ac>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <DMA_List_Init+0x206>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <DMA_List_Init+0x208>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2200      	movs	r2, #0
 8002abe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40020050 	.word	0x40020050
 8002ad8:	50020050 	.word	0x50020050
 8002adc:	400200d0 	.word	0x400200d0
 8002ae0:	500200d0 	.word	0x500200d0
 8002ae4:	40020150 	.word	0x40020150
 8002ae8:	50020150 	.word	0x50020150
 8002aec:	400201d0 	.word	0x400201d0
 8002af0:	500201d0 	.word	0x500201d0
 8002af4:	40020250 	.word	0x40020250
 8002af8:	50020250 	.word	0x50020250
 8002afc:	400202d0 	.word	0x400202d0
 8002b00:	500202d0 	.word	0x500202d0
 8002b04:	40020350 	.word	0x40020350
 8002b08:	50020350 	.word	0x50020350
 8002b0c:	400203d0 	.word	0x400203d0
 8002b10:	500203d0 	.word	0x500203d0
 8002b14:	40020450 	.word	0x40020450
 8002b18:	50020450 	.word	0x50020450
 8002b1c:	400204d0 	.word	0x400204d0
 8002b20:	500204d0 	.word	0x500204d0
 8002b24:	40020550 	.word	0x40020550
 8002b28:	50020550 	.word	0x50020550
 8002b2c:	400205d0 	.word	0x400205d0
 8002b30:	500205d0 	.word	0x500205d0
 8002b34:	40020650 	.word	0x40020650
 8002b38:	50020650 	.word	0x50020650
 8002b3c:	400206d0 	.word	0x400206d0
 8002b40:	500206d0 	.word	0x500206d0
 8002b44:	40020750 	.word	0x40020750
 8002b48:	50020750 	.word	0x50020750
 8002b4c:	400207d0 	.word	0x400207d0
 8002b50:	500207d0 	.word	0x500207d0

08002b54 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b089      	sub	sp, #36	@ 0x24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b66:	e1ba      	b.n	8002ede <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	4013      	ands	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 81aa 	beq.w	8002ed8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a55      	ldr	r2, [pc, #340]	@ (8002cdc <HAL_GPIO_Init+0x188>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d15d      	bne.n	8002c48 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002b92:	2201      	movs	r2, #1
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0201 	and.w	r2, r3, #1
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002bbc:	4a48      	ldr	r2, [pc, #288]	@ (8002ce0 <HAL_GPIO_Init+0x18c>)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bc4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002bc6:	4a46      	ldr	r2, [pc, #280]	@ (8002ce0 <HAL_GPIO_Init+0x18c>)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	08da      	lsrs	r2, r3, #3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	3208      	adds	r2, #8
 8002bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bde:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	220f      	movs	r2, #15
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	220b      	movs	r2, #11
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	08da      	lsrs	r2, r3, #3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	3208      	adds	r2, #8
 8002c12:	69f9      	ldr	r1, [r7, #28]
 8002c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	2202      	movs	r2, #2
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	e067      	b.n	8002d18 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x104>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b12      	cmp	r3, #18
 8002c56:	d145      	bne.n	8002ce4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	08da      	lsrs	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3208      	adds	r2, #8
 8002c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c64:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	220f      	movs	r2, #15
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 020f 	and.w	r2, r3, #15
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	08da      	lsrs	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3208      	adds	r2, #8
 8002c9e:	69f9      	ldr	r1, [r7, #28]
 8002ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0203 	and.w	r2, r3, #3
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69fa      	ldr	r2, [r7, #28]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e01e      	b.n	8002d18 <HAL_GPIO_Init+0x1c4>
 8002cda:	bf00      	nop
 8002cdc:	46020000 	.word	0x46020000
 8002ce0:	0800c254 	.word	0x0800c254
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0203 	and.w	r2, r3, #3
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d00b      	beq.n	8002d38 <HAL_GPIO_Init+0x1e4>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d007      	beq.n	8002d38 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d2c:	2b11      	cmp	r3, #17
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b12      	cmp	r3, #18
 8002d36:	d130      	bne.n	8002d9a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002d6e:	2201      	movs	r2, #1
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f003 0201 	and.w	r2, r3, #1
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d017      	beq.n	8002dd2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2203      	movs	r2, #3
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d07c      	beq.n	8002ed8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002dde:	4a47      	ldr	r2, [pc, #284]	@ (8002efc <HAL_GPIO_Init+0x3a8>)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	3318      	adds	r3, #24
 8002de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	220f      	movs	r2, #15
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0a9a      	lsrs	r2, r3, #10
 8002e06:	4b3e      	ldr	r3, [pc, #248]	@ (8002f00 <HAL_GPIO_Init+0x3ac>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	f002 0203 	and.w	r2, r2, #3
 8002e10:	00d2      	lsls	r2, r2, #3
 8002e12:	4093      	lsls	r3, r2
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002e1a:	4938      	ldr	r1, [pc, #224]	@ (8002efc <HAL_GPIO_Init+0x3a8>)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	3318      	adds	r3, #24
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002e28:	4b34      	ldr	r3, [pc, #208]	@ (8002efc <HAL_GPIO_Init+0x3a8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002efc <HAL_GPIO_Init+0x3a8>)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002e52:	4b2a      	ldr	r3, [pc, #168]	@ (8002efc <HAL_GPIO_Init+0x3a8>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002e76:	4a21      	ldr	r2, [pc, #132]	@ (8002efc <HAL_GPIO_Init+0x3a8>)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002efc <HAL_GPIO_Init+0x3a8>)
 8002e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e82:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002ea2:	4a16      	ldr	r2, [pc, #88]	@ (8002efc <HAL_GPIO_Init+0x3a8>)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002eaa:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <HAL_GPIO_Init+0x3a8>)
 8002eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <HAL_GPIO_Init+0x3a8>)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3301      	adds	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f ae3d 	bne.w	8002b68 <HAL_GPIO_Init+0x14>
  }
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	3724      	adds	r7, #36	@ 0x24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	46022000 	.word	0x46022000
 8002f00:	002f7f7f 	.word	0x002f7f7f

08002f04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	887b      	ldrh	r3, [r7, #2]
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	e001      	b.n	8002f26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
 8002f40:	4613      	mov	r3, r2
 8002f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f44:	787b      	ldrb	r3, [r7, #1]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002f50:	e002      	b.n	8002f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002fac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d006      	beq.n	8002f88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002fac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f004 fa08 	bl	8007398 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002f88:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d006      	beq.n	8002fa2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002f94:	4a05      	ldr	r2, [pc, #20]	@ (8002fac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f807 	bl	8002fb0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	46022000 	.word	0x46022000

08002fb0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002fd0:	4b39      	ldr	r3, [pc, #228]	@ (80030b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fd8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d10b      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe8:	d905      	bls.n	8002ff6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002fea:	4b33      	ldr	r3, [pc, #204]	@ (80030b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	4a32      	ldr	r2, [pc, #200]	@ (80030b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ff4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e057      	b.n	80030aa <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003000:	d90a      	bls.n	8003018 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003002:	4b2d      	ldr	r3, [pc, #180]	@ (80030b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4313      	orrs	r3, r2
 800300e:	4a2a      	ldr	r2, [pc, #168]	@ (80030b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003014:	60d3      	str	r3, [r2, #12]
 8003016:	e007      	b.n	8003028 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003018:	4b27      	ldr	r3, [pc, #156]	@ (80030b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003020:	4925      	ldr	r1, [pc, #148]	@ (80030b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4313      	orrs	r3, r2
 8003026:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003028:	4b24      	ldr	r3, [pc, #144]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a24      	ldr	r2, [pc, #144]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	2232      	movs	r2, #50	@ 0x32
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	4a21      	ldr	r2, [pc, #132]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	099b      	lsrs	r3, r3, #6
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003046:	e002      	b.n	800304e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3b01      	subs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800304e:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d102      	bne.n	8003060 <HAL_PWREx_ControlVoltageScaling+0x98>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f3      	bne.n	8003048 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01b      	beq.n	800309e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003066:	4b15      	ldr	r3, [pc, #84]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a15      	ldr	r2, [pc, #84]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	099b      	lsrs	r3, r3, #6
 8003072:	2232      	movs	r2, #50	@ 0x32
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	4a11      	ldr	r2, [pc, #68]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	099b      	lsrs	r3, r3, #6
 8003080:	3301      	adds	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003084:	e002      	b.n	800308c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3b01      	subs	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800308c:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800308e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003090:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d102      	bne.n	800309e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f3      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e000      	b.n	80030aa <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	46020800 	.word	0x46020800
 80030bc:	2000001c 	.word	0x2000001c
 80030c0:	10624dd3 	.word	0x10624dd3

080030c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80030c8:	4b04      	ldr	r3, [pc, #16]	@ (80030dc <HAL_PWREx_GetVoltageRange+0x18>)
 80030ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	46020800 	.word	0x46020800

080030e0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80030e8:	4b22      	ldr	r3, [pc, #136]	@ (8003174 <HAL_PWREx_ConfigSupply+0x94>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a22      	ldr	r2, [pc, #136]	@ (8003178 <HAL_PWREx_ConfigSupply+0x98>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	099b      	lsrs	r3, r3, #6
 80030f4:	2232      	movs	r2, #50	@ 0x32
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003178 <HAL_PWREx_ConfigSupply+0x98>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	099b      	lsrs	r3, r3, #6
 8003102:	3301      	adds	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d113      	bne.n	8003134 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800310c:	4b1b      	ldr	r3, [pc, #108]	@ (800317c <HAL_PWREx_ConfigSupply+0x9c>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a1a      	ldr	r2, [pc, #104]	@ (800317c <HAL_PWREx_ConfigSupply+0x9c>)
 8003112:	f023 0302 	bic.w	r3, r3, #2
 8003116:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003118:	e002      	b.n	8003120 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	3b01      	subs	r3, #1
 800311e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003120:	4b16      	ldr	r3, [pc, #88]	@ (800317c <HAL_PWREx_ConfigSupply+0x9c>)
 8003122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b02      	cmp	r3, #2
 800312a:	d116      	bne.n	800315a <HAL_PWREx_ConfigSupply+0x7a>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f3      	bne.n	800311a <HAL_PWREx_ConfigSupply+0x3a>
 8003132:	e012      	b.n	800315a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003134:	4b11      	ldr	r3, [pc, #68]	@ (800317c <HAL_PWREx_ConfigSupply+0x9c>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a10      	ldr	r2, [pc, #64]	@ (800317c <HAL_PWREx_ConfigSupply+0x9c>)
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003140:	e002      	b.n	8003148 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3b01      	subs	r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003148:	4b0c      	ldr	r3, [pc, #48]	@ (800317c <HAL_PWREx_ConfigSupply+0x9c>)
 800314a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d102      	bne.n	800315a <HAL_PWREx_ConfigSupply+0x7a>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f3      	bne.n	8003142 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e000      	b.n	8003166 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	2000001c 	.word	0x2000001c
 8003178:	10624dd3 	.word	0x10624dd3
 800317c:	46020800 	.word	0x46020800

08003180 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08e      	sub	sp, #56	@ 0x38
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003188:	2300      	movs	r3, #0
 800318a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	f000 bec8 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319a:	4b99      	ldr	r3, [pc, #612]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a4:	4b96      	ldr	r3, [pc, #600]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80031a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 816c 	beq.w	8003494 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80031bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <HAL_RCC_OscConfig+0x52>
 80031c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c4:	2b0c      	cmp	r3, #12
 80031c6:	f040 80de 	bne.w	8003386 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	f040 80da 	bne.w	8003386 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	f000 bea5 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031e4:	4b86      	ldr	r3, [pc, #536]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <HAL_RCC_OscConfig+0x7a>
 80031f0:	4b83      	ldr	r3, [pc, #524]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80031f8:	e005      	b.n	8003206 <HAL_RCC_OscConfig+0x86>
 80031fa:	4b81      	ldr	r3, [pc, #516]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80031fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003206:	4293      	cmp	r3, r2
 8003208:	d255      	bcs.n	80032b6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800320a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003214:	4618      	mov	r0, r3
 8003216:	f001 f99d 	bl	8004554 <RCC_SetFlashLatencyFromMSIRange>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f000 be82 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003226:	4b76      	ldr	r3, [pc, #472]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	4a75      	ldr	r2, [pc, #468]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 800322c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003230:	6093      	str	r3, [r2, #8]
 8003232:	4b73      	ldr	r3, [pc, #460]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	4970      	ldr	r1, [pc, #448]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 8003240:	4313      	orrs	r3, r2
 8003242:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800324c:	d309      	bcc.n	8003262 <HAL_RCC_OscConfig+0xe2>
 800324e:	4b6c      	ldr	r3, [pc, #432]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f023 021f 	bic.w	r2, r3, #31
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	4969      	ldr	r1, [pc, #420]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 800325c:	4313      	orrs	r3, r2
 800325e:	60cb      	str	r3, [r1, #12]
 8003260:	e07e      	b.n	8003360 <HAL_RCC_OscConfig+0x1e0>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	da0a      	bge.n	8003280 <HAL_RCC_OscConfig+0x100>
 800326a:	4b65      	ldr	r3, [pc, #404]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	015b      	lsls	r3, r3, #5
 8003278:	4961      	ldr	r1, [pc, #388]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 800327a:	4313      	orrs	r3, r2
 800327c:	60cb      	str	r3, [r1, #12]
 800327e:	e06f      	b.n	8003360 <HAL_RCC_OscConfig+0x1e0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003288:	d30a      	bcc.n	80032a0 <HAL_RCC_OscConfig+0x120>
 800328a:	4b5d      	ldr	r3, [pc, #372]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	029b      	lsls	r3, r3, #10
 8003298:	4959      	ldr	r1, [pc, #356]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 800329a:	4313      	orrs	r3, r2
 800329c:	60cb      	str	r3, [r1, #12]
 800329e:	e05f      	b.n	8003360 <HAL_RCC_OscConfig+0x1e0>
 80032a0:	4b57      	ldr	r3, [pc, #348]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	03db      	lsls	r3, r3, #15
 80032ae:	4954      	ldr	r1, [pc, #336]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60cb      	str	r3, [r1, #12]
 80032b4:	e054      	b.n	8003360 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80032b6:	4b52      	ldr	r3, [pc, #328]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4a51      	ldr	r2, [pc, #324]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80032bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032c0:	6093      	str	r3, [r2, #8]
 80032c2:	4b4f      	ldr	r3, [pc, #316]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	494c      	ldr	r1, [pc, #304]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80032dc:	d309      	bcc.n	80032f2 <HAL_RCC_OscConfig+0x172>
 80032de:	4b48      	ldr	r3, [pc, #288]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f023 021f 	bic.w	r2, r3, #31
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4945      	ldr	r1, [pc, #276]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60cb      	str	r3, [r1, #12]
 80032f0:	e028      	b.n	8003344 <HAL_RCC_OscConfig+0x1c4>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	da0a      	bge.n	8003310 <HAL_RCC_OscConfig+0x190>
 80032fa:	4b41      	ldr	r3, [pc, #260]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	015b      	lsls	r3, r3, #5
 8003308:	493d      	ldr	r1, [pc, #244]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 800330a:	4313      	orrs	r3, r2
 800330c:	60cb      	str	r3, [r1, #12]
 800330e:	e019      	b.n	8003344 <HAL_RCC_OscConfig+0x1c4>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003318:	d30a      	bcc.n	8003330 <HAL_RCC_OscConfig+0x1b0>
 800331a:	4b39      	ldr	r3, [pc, #228]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	029b      	lsls	r3, r3, #10
 8003328:	4935      	ldr	r1, [pc, #212]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 800332a:	4313      	orrs	r3, r2
 800332c:	60cb      	str	r3, [r1, #12]
 800332e:	e009      	b.n	8003344 <HAL_RCC_OscConfig+0x1c4>
 8003330:	4b33      	ldr	r3, [pc, #204]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	03db      	lsls	r3, r3, #15
 800333e:	4930      	ldr	r1, [pc, #192]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 8003340:	4313      	orrs	r3, r2
 8003342:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	4618      	mov	r0, r3
 8003350:	f001 f900 	bl	8004554 <RCC_SetFlashLatencyFromMSIRange>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f000 bde5 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003360:	f001 f8de 	bl	8004520 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003364:	4b27      	ldr	r3, [pc, #156]	@ (8003404 <HAL_RCC_OscConfig+0x284>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe fe29 	bl	8001fc0 <HAL_InitTick>
 800336e:	4603      	mov	r3, r0
 8003370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 808a 	beq.w	8003492 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800337e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003382:	f000 bdd2 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d066      	beq.n	800345c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800338e:	4b1c      	ldr	r3, [pc, #112]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1b      	ldr	r2, [pc, #108]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800339a:	f7fe fe9b 	bl	80020d4 <HAL_GetTick>
 800339e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80033a0:	e009      	b.n	80033b6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033a2:	f7fe fe97 	bl	80020d4 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d902      	bls.n	80033b6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	f000 bdba 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80033b6:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0ef      	beq.n	80033a2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80033c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80033c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033cc:	6093      	str	r3, [r2, #8]
 80033ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	4909      	ldr	r1, [pc, #36]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80033e8:	d30e      	bcc.n	8003408 <HAL_RCC_OscConfig+0x288>
 80033ea:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f023 021f 	bic.w	r2, r3, #31
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4902      	ldr	r1, [pc, #8]	@ (8003400 <HAL_RCC_OscConfig+0x280>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60cb      	str	r3, [r1, #12]
 80033fc:	e04a      	b.n	8003494 <HAL_RCC_OscConfig+0x314>
 80033fe:	bf00      	nop
 8003400:	46020c00 	.word	0x46020c00
 8003404:	20000020 	.word	0x20000020
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	2b00      	cmp	r3, #0
 800340e:	da0a      	bge.n	8003426 <HAL_RCC_OscConfig+0x2a6>
 8003410:	4b98      	ldr	r3, [pc, #608]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	015b      	lsls	r3, r3, #5
 800341e:	4995      	ldr	r1, [pc, #596]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003420:	4313      	orrs	r3, r2
 8003422:	60cb      	str	r3, [r1, #12]
 8003424:	e036      	b.n	8003494 <HAL_RCC_OscConfig+0x314>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342e:	d30a      	bcc.n	8003446 <HAL_RCC_OscConfig+0x2c6>
 8003430:	4b90      	ldr	r3, [pc, #576]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	029b      	lsls	r3, r3, #10
 800343e:	498d      	ldr	r1, [pc, #564]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003440:	4313      	orrs	r3, r2
 8003442:	60cb      	str	r3, [r1, #12]
 8003444:	e026      	b.n	8003494 <HAL_RCC_OscConfig+0x314>
 8003446:	4b8b      	ldr	r3, [pc, #556]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	03db      	lsls	r3, r3, #15
 8003454:	4987      	ldr	r1, [pc, #540]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	60cb      	str	r3, [r1, #12]
 800345a:	e01b      	b.n	8003494 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800345c:	4b85      	ldr	r3, [pc, #532]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a84      	ldr	r2, [pc, #528]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003468:	f7fe fe34 	bl	80020d4 <HAL_GetTick>
 800346c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800346e:	e009      	b.n	8003484 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003470:	f7fe fe30 	bl	80020d4 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d902      	bls.n	8003484 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	f000 bd53 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003484:	4b7b      	ldr	r3, [pc, #492]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1ef      	bne.n	8003470 <HAL_RCC_OscConfig+0x2f0>
 8003490:	e000      	b.n	8003494 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003492:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 808b 	beq.w	80035b8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_OscConfig+0x334>
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d109      	bne.n	80034c2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d17d      	bne.n	80035b8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	f000 bd34 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ca:	d106      	bne.n	80034da <HAL_RCC_OscConfig+0x35a>
 80034cc:	4b69      	ldr	r3, [pc, #420]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a68      	ldr	r2, [pc, #416]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 80034d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	e041      	b.n	800355e <HAL_RCC_OscConfig+0x3de>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034e2:	d112      	bne.n	800350a <HAL_RCC_OscConfig+0x38a>
 80034e4:	4b63      	ldr	r3, [pc, #396]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a62      	ldr	r2, [pc, #392]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 80034ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b60      	ldr	r3, [pc, #384]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a5f      	ldr	r2, [pc, #380]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b5d      	ldr	r3, [pc, #372]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a5c      	ldr	r2, [pc, #368]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	e029      	b.n	800355e <HAL_RCC_OscConfig+0x3de>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003512:	d112      	bne.n	800353a <HAL_RCC_OscConfig+0x3ba>
 8003514:	4b57      	ldr	r3, [pc, #348]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a56      	ldr	r2, [pc, #344]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b54      	ldr	r3, [pc, #336]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a53      	ldr	r2, [pc, #332]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b51      	ldr	r3, [pc, #324]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a50      	ldr	r2, [pc, #320]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	e011      	b.n	800355e <HAL_RCC_OscConfig+0x3de>
 800353a:	4b4e      	ldr	r3, [pc, #312]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a4d      	ldr	r2, [pc, #308]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4b4b      	ldr	r3, [pc, #300]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a4a      	ldr	r2, [pc, #296]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 800354c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b48      	ldr	r3, [pc, #288]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a47      	ldr	r2, [pc, #284]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003558:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800355c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d014      	beq.n	8003590 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003566:	f7fe fdb5 	bl	80020d4 <HAL_GetTick>
 800356a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800356c:	e009      	b.n	8003582 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800356e:	f7fe fdb1 	bl	80020d4 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b64      	cmp	r3, #100	@ 0x64
 800357a:	d902      	bls.n	8003582 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	f000 bcd4 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003582:	4b3c      	ldr	r3, [pc, #240]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0ef      	beq.n	800356e <HAL_RCC_OscConfig+0x3ee>
 800358e:	e013      	b.n	80035b8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003590:	f7fe fda0 	bl	80020d4 <HAL_GetTick>
 8003594:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003596:	e009      	b.n	80035ac <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003598:	f7fe fd9c 	bl	80020d4 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	@ 0x64
 80035a4:	d902      	bls.n	80035ac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	f000 bcbf 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ac:	4b31      	ldr	r3, [pc, #196]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1ef      	bne.n	8003598 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d05f      	beq.n	8003684 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80035c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d005      	beq.n	80035d6 <HAL_RCC_OscConfig+0x456>
 80035ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	d114      	bne.n	80035fa <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d111      	bne.n	80035fa <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f000 bca3 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80035e4:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	4920      	ldr	r1, [pc, #128]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80035f8:	e044      	b.n	8003684 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d024      	beq.n	800364c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003602:	4b1c      	ldr	r3, [pc, #112]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1b      	ldr	r2, [pc, #108]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800360c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800360e:	f7fe fd61 	bl	80020d4 <HAL_GetTick>
 8003612:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003614:	e009      	b.n	800362a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003616:	f7fe fd5d 	bl	80020d4 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d902      	bls.n	800362a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	f000 bc80 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800362a:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0ef      	beq.n	8003616 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b0f      	ldr	r3, [pc, #60]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	041b      	lsls	r3, r3, #16
 8003644:	490b      	ldr	r1, [pc, #44]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	610b      	str	r3, [r1, #16]
 800364a:	e01b      	b.n	8003684 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800364c:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a08      	ldr	r2, [pc, #32]	@ (8003674 <HAL_RCC_OscConfig+0x4f4>)
 8003652:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003656:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003658:	f7fe fd3c 	bl	80020d4 <HAL_GetTick>
 800365c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800365e:	e00b      	b.n	8003678 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003660:	f7fe fd38 	bl	80020d4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d904      	bls.n	8003678 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	f000 bc5b 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
 8003674:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003678:	4baf      	ldr	r3, [pc, #700]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ed      	bne.n	8003660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80c8 	beq.w	8003822 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003692:	2300      	movs	r3, #0
 8003694:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003698:	4ba7      	ldr	r3, [pc, #668]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 800369a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d111      	bne.n	80036ca <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	4ba4      	ldr	r3, [pc, #656]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80036a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ac:	4aa2      	ldr	r2, [pc, #648]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80036ae:	f043 0304 	orr.w	r3, r3, #4
 80036b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80036b6:	4ba0      	ldr	r3, [pc, #640]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80036b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80036ca:	4b9c      	ldr	r3, [pc, #624]	@ (800393c <HAL_RCC_OscConfig+0x7bc>)
 80036cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d119      	bne.n	800370a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80036d6:	4b99      	ldr	r3, [pc, #612]	@ (800393c <HAL_RCC_OscConfig+0x7bc>)
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	4a98      	ldr	r2, [pc, #608]	@ (800393c <HAL_RCC_OscConfig+0x7bc>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e2:	f7fe fcf7 	bl	80020d4 <HAL_GetTick>
 80036e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80036e8:	e009      	b.n	80036fe <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ea:	f7fe fcf3 	bl	80020d4 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d902      	bls.n	80036fe <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	f000 bc16 	b.w	8003f2a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80036fe:	4b8f      	ldr	r3, [pc, #572]	@ (800393c <HAL_RCC_OscConfig+0x7bc>)
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0ef      	beq.n	80036ea <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d05f      	beq.n	80037d2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003712:	4b89      	ldr	r3, [pc, #548]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 8003714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003718:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003724:	429a      	cmp	r2, r3
 8003726:	d037      	beq.n	8003798 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e3f4      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01b      	beq.n	8003782 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800374a:	4b7b      	ldr	r3, [pc, #492]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 800374c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003750:	4a79      	ldr	r2, [pc, #484]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 8003752:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003756:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800375a:	f7fe fcbb 	bl	80020d4 <HAL_GetTick>
 800375e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003762:	f7fe fcb7 	bl	80020d4 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b05      	cmp	r3, #5
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e3da      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003774:	4b70      	ldr	r3, [pc, #448]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 8003776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800377a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1ef      	bne.n	8003762 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003782:	4b6d      	ldr	r3, [pc, #436]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 8003784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003788:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	4969      	ldr	r1, [pc, #420]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003798:	4b67      	ldr	r3, [pc, #412]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 800379a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800379e:	4a66      	ldr	r2, [pc, #408]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80037a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80037a8:	f7fe fc94 	bl	80020d4 <HAL_GetTick>
 80037ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b0:	f7fe fc90 	bl	80020d4 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e3b3      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80037c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80037c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ef      	beq.n	80037b0 <HAL_RCC_OscConfig+0x630>
 80037d0:	e01b      	b.n	800380a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80037d2:	4b59      	ldr	r3, [pc, #356]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80037d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037d8:	4a57      	ldr	r2, [pc, #348]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80037da:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80037de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80037e2:	f7fe fc77 	bl	80020d4 <HAL_GetTick>
 80037e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ea:	f7fe fc73 	bl	80020d4 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b05      	cmp	r3, #5
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e396      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037fc:	4b4e      	ldr	r3, [pc, #312]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80037fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003802:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1ef      	bne.n	80037ea <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800380a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800380e:	2b01      	cmp	r3, #1
 8003810:	d107      	bne.n	8003822 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003812:	4b49      	ldr	r3, [pc, #292]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 8003814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003818:	4a47      	ldr	r2, [pc, #284]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 800381a:	f023 0304 	bic.w	r3, r3, #4
 800381e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8111 	beq.w	8003a52 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003830:	2300      	movs	r3, #0
 8003832:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003836:	4b40      	ldr	r3, [pc, #256]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 8003838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d111      	bne.n	8003868 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003844:	4b3c      	ldr	r3, [pc, #240]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 8003846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800384a:	4a3b      	ldr	r2, [pc, #236]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 800384c:	f043 0304 	orr.w	r3, r3, #4
 8003850:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003854:	4b38      	ldr	r3, [pc, #224]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 8003856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003868:	4b34      	ldr	r3, [pc, #208]	@ (800393c <HAL_RCC_OscConfig+0x7bc>)
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d118      	bne.n	80038a6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003874:	4b31      	ldr	r3, [pc, #196]	@ (800393c <HAL_RCC_OscConfig+0x7bc>)
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	4a30      	ldr	r2, [pc, #192]	@ (800393c <HAL_RCC_OscConfig+0x7bc>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003880:	f7fe fc28 	bl	80020d4 <HAL_GetTick>
 8003884:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003888:	f7fe fc24 	bl	80020d4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e347      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800389a:	4b28      	ldr	r3, [pc, #160]	@ (800393c <HAL_RCC_OscConfig+0x7bc>)
 800389c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01f      	beq.n	80038f2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038be:	4b1e      	ldr	r3, [pc, #120]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80038c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80038c6:	f043 0304 	orr.w	r3, r3, #4
 80038ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80038d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038d4:	4a18      	ldr	r2, [pc, #96]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038de:	e018      	b.n	8003912 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038e0:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80038e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038e6:	4a14      	ldr	r2, [pc, #80]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038f0:	e00f      	b.n	8003912 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038f2:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80038f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003902:	4b0d      	ldr	r3, [pc, #52]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 8003904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003908:	4a0b      	ldr	r2, [pc, #44]	@ (8003938 <HAL_RCC_OscConfig+0x7b8>)
 800390a:	f023 0304 	bic.w	r3, r3, #4
 800390e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d057      	beq.n	80039ca <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800391a:	f7fe fbdb 	bl	80020d4 <HAL_GetTick>
 800391e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003920:	e00e      	b.n	8003940 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003922:	f7fe fbd7 	bl	80020d4 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003930:	4293      	cmp	r3, r2
 8003932:	d905      	bls.n	8003940 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e2f8      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
 8003938:	46020c00 	.word	0x46020c00
 800393c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003940:	4b9c      	ldr	r3, [pc, #624]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0e9      	beq.n	8003922 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01b      	beq.n	8003992 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800395a:	4b96      	ldr	r3, [pc, #600]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 800395c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003960:	4a94      	ldr	r2, [pc, #592]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003966:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800396a:	e00a      	b.n	8003982 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396c:	f7fe fbb2 	bl	80020d4 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e2d3      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003982:	4b8c      	ldr	r3, [pc, #560]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ed      	beq.n	800396c <HAL_RCC_OscConfig+0x7ec>
 8003990:	e053      	b.n	8003a3a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003992:	4b88      	ldr	r3, [pc, #544]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003998:	4a86      	ldr	r2, [pc, #536]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 800399a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800399e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fe fb96 	bl	80020d4 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e2b7      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80039ba:	4b7e      	ldr	r3, [pc, #504]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 80039bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ed      	bne.n	80039a4 <HAL_RCC_OscConfig+0x824>
 80039c8:	e037      	b.n	8003a3a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80039ca:	f7fe fb83 	bl	80020d4 <HAL_GetTick>
 80039ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fe fb7f 	bl	80020d4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e2a0      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039e8:	4b72      	ldr	r3, [pc, #456]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 80039ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ed      	bne.n	80039d2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80039f6:	4b6f      	ldr	r3, [pc, #444]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 80039f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01a      	beq.n	8003a3a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a04:	4b6b      	ldr	r3, [pc, #428]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a0a:	4a6a      	ldr	r2, [pc, #424]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003a0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a14:	e00a      	b.n	8003a2c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a16:	f7fe fb5d 	bl	80020d4 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e27e      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a2c:	4b61      	ldr	r3, [pc, #388]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003a2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1ed      	bne.n	8003a16 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a3a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d107      	bne.n	8003a52 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a42:	4b5c      	ldr	r3, [pc, #368]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a48:	4a5a      	ldr	r2, [pc, #360]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003a4a:	f023 0304 	bic.w	r3, r3, #4
 8003a4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d036      	beq.n	8003acc <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d019      	beq.n	8003a9a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003a66:	4b53      	ldr	r3, [pc, #332]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a52      	ldr	r2, [pc, #328]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003a6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a70:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003a72:	f7fe fb2f 	bl	80020d4 <HAL_GetTick>
 8003a76:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a7a:	f7fe fb2b 	bl	80020d4 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e24e      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003a8c:	4b49      	ldr	r3, [pc, #292]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x8fa>
 8003a98:	e018      	b.n	8003acc <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003a9a:	4b46      	ldr	r3, [pc, #280]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a45      	ldr	r2, [pc, #276]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003aa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003aa4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003aa6:	f7fe fb15 	bl	80020d4 <HAL_GetTick>
 8003aaa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aae:	f7fe fb11 	bl	80020d4 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e234      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003ac0:	4b3c      	ldr	r3, [pc, #240]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1f0      	bne.n	8003aae <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d036      	beq.n	8003b46 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d019      	beq.n	8003b14 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003ae0:	4b34      	ldr	r3, [pc, #208]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a33      	ldr	r2, [pc, #204]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003ae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003aec:	f7fe faf2 	bl	80020d4 <HAL_GetTick>
 8003af0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003af4:	f7fe faee 	bl	80020d4 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e211      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003b06:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x974>
 8003b12:	e018      	b.n	8003b46 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003b14:	4b27      	ldr	r3, [pc, #156]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a26      	ldr	r2, [pc, #152]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003b1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003b20:	f7fe fad8 	bl	80020d4 <HAL_GetTick>
 8003b24:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003b28:	f7fe fad4 	bl	80020d4 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e1f7      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d07f      	beq.n	8003c52 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d062      	beq.n	8003c20 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003b5a:	4b16      	ldr	r3, [pc, #88]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	4a15      	ldr	r2, [pc, #84]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003b60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b64:	6093      	str	r3, [r2, #8]
 8003b66:	4b13      	ldr	r3, [pc, #76]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b72:	4910      	ldr	r1, [pc, #64]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003b80:	d309      	bcc.n	8003b96 <HAL_RCC_OscConfig+0xa16>
 8003b82:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f023 021f 	bic.w	r2, r3, #31
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	4909      	ldr	r1, [pc, #36]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60cb      	str	r3, [r1, #12]
 8003b94:	e02a      	b.n	8003bec <HAL_RCC_OscConfig+0xa6c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	da0c      	bge.n	8003bb8 <HAL_RCC_OscConfig+0xa38>
 8003b9e:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	015b      	lsls	r3, r3, #5
 8003bac:	4901      	ldr	r1, [pc, #4]	@ (8003bb4 <HAL_RCC_OscConfig+0xa34>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60cb      	str	r3, [r1, #12]
 8003bb2:	e01b      	b.n	8003bec <HAL_RCC_OscConfig+0xa6c>
 8003bb4:	46020c00 	.word	0x46020c00
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc0:	d30a      	bcc.n	8003bd8 <HAL_RCC_OscConfig+0xa58>
 8003bc2:	4ba1      	ldr	r3, [pc, #644]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	029b      	lsls	r3, r3, #10
 8003bd0:	499d      	ldr	r1, [pc, #628]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60cb      	str	r3, [r1, #12]
 8003bd6:	e009      	b.n	8003bec <HAL_RCC_OscConfig+0xa6c>
 8003bd8:	4b9b      	ldr	r3, [pc, #620]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	03db      	lsls	r3, r3, #15
 8003be6:	4998      	ldr	r1, [pc, #608]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003bec:	4b96      	ldr	r3, [pc, #600]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a95      	ldr	r2, [pc, #596]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003bf2:	f043 0310 	orr.w	r3, r3, #16
 8003bf6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003bf8:	f7fe fa6c 	bl	80020d4 <HAL_GetTick>
 8003bfc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003c00:	f7fe fa68 	bl	80020d4 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e18b      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003c12:	4b8d      	ldr	r3, [pc, #564]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0xa80>
 8003c1e:	e018      	b.n	8003c52 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003c20:	4b89      	ldr	r3, [pc, #548]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a88      	ldr	r2, [pc, #544]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003c26:	f023 0310 	bic.w	r3, r3, #16
 8003c2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c2c:	f7fe fa52 	bl	80020d4 <HAL_GetTick>
 8003c30:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003c34:	f7fe fa4e 	bl	80020d4 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e171      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003c46:	4b80      	ldr	r3, [pc, #512]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8166 	beq.w	8003f28 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c62:	4b79      	ldr	r3, [pc, #484]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b0c      	cmp	r3, #12
 8003c6c:	f000 80f2 	beq.w	8003e54 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	f040 80c5 	bne.w	8003e04 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003c7a:	4b73      	ldr	r3, [pc, #460]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a72      	ldr	r2, [pc, #456]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003c80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c84:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c86:	f7fe fa25 	bl	80020d4 <HAL_GetTick>
 8003c8a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8e:	f7fe fa21 	bl	80020d4 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e144      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ca0:	4b69      	ldr	r3, [pc, #420]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f0      	bne.n	8003c8e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cac:	4b66      	ldr	r3, [pc, #408]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d111      	bne.n	8003cde <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	4b63      	ldr	r3, [pc, #396]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cc0:	4a61      	ldr	r2, [pc, #388]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003cc2:	f043 0304 	orr.w	r3, r3, #4
 8003cc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003cca:	4b5f      	ldr	r3, [pc, #380]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003cde:	4b5b      	ldr	r3, [pc, #364]	@ (8003e4c <HAL_RCC_OscConfig+0xccc>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ce6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cea:	d102      	bne.n	8003cf2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003cf2:	4b56      	ldr	r3, [pc, #344]	@ (8003e4c <HAL_RCC_OscConfig+0xccc>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	4a55      	ldr	r2, [pc, #340]	@ (8003e4c <HAL_RCC_OscConfig+0xccc>)
 8003cf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cfc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003cfe:	4b52      	ldr	r3, [pc, #328]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d12:	3a01      	subs	r2, #1
 8003d14:	0212      	lsls	r2, r2, #8
 8003d16:	4311      	orrs	r1, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	494a      	ldr	r1, [pc, #296]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d24:	4b48      	ldr	r3, [pc, #288]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003d26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d28:	4b49      	ldr	r3, [pc, #292]	@ (8003e50 <HAL_RCC_OscConfig+0xcd0>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d30:	3a01      	subs	r2, #1
 8003d32:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003d3a:	3a01      	subs	r2, #1
 8003d3c:	0252      	lsls	r2, r2, #9
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	4311      	orrs	r1, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d46:	3a01      	subs	r2, #1
 8003d48:	0412      	lsls	r2, r2, #16
 8003d4a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003d4e:	4311      	orrs	r1, r2
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003d54:	3a01      	subs	r2, #1
 8003d56:	0612      	lsls	r2, r2, #24
 8003d58:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	493a      	ldr	r1, [pc, #232]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003d64:	4b38      	ldr	r3, [pc, #224]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	4a37      	ldr	r2, [pc, #220]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003d6a:	f023 0310 	bic.w	r3, r3, #16
 8003d6e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d74:	4a34      	ldr	r2, [pc, #208]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003d7a:	4b33      	ldr	r3, [pc, #204]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7e:	4a32      	ldr	r2, [pc, #200]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003d80:	f043 0310 	orr.w	r3, r3, #16
 8003d84:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003d86:	4b30      	ldr	r3, [pc, #192]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8a:	f023 020c 	bic.w	r2, r3, #12
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d92:	492d      	ldr	r1, [pc, #180]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003d98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d105      	bne.n	8003dac <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003da0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e4c <HAL_RCC_OscConfig+0xccc>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	4a29      	ldr	r2, [pc, #164]	@ (8003e4c <HAL_RCC_OscConfig+0xccc>)
 8003da6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003daa:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003dac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d107      	bne.n	8003dc4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003db4:	4b24      	ldr	r3, [pc, #144]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dba:	4a23      	ldr	r2, [pc, #140]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003dc4:	4b20      	ldr	r3, [pc, #128]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003dd0:	f7fe f980 	bl	80020d4 <HAL_GetTick>
 8003dd4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fe f97c 	bl	80020d4 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e09f      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003dea:	4b17      	ldr	r3, [pc, #92]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003df6:	4b14      	ldr	r3, [pc, #80]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfa:	4a13      	ldr	r2, [pc, #76]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e00:	6293      	str	r3, [r2, #40]	@ 0x28
 8003e02:	e091      	b.n	8003f28 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003e04:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a0f      	ldr	r2, [pc, #60]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003e0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e0e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003e10:	f7fe f960 	bl	80020d4 <HAL_GetTick>
 8003e14:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e18:	f7fe f95c 	bl	80020d4 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e07f      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e2a:	4b07      	ldr	r3, [pc, #28]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003e36:	4b04      	ldr	r3, [pc, #16]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3a:	4a03      	ldr	r2, [pc, #12]	@ (8003e48 <HAL_RCC_OscConfig+0xcc8>)
 8003e3c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003e40:	f023 0303 	bic.w	r3, r3, #3
 8003e44:	6293      	str	r3, [r2, #40]	@ 0x28
 8003e46:	e06f      	b.n	8003f28 <HAL_RCC_OscConfig+0xda8>
 8003e48:	46020c00 	.word	0x46020c00
 8003e4c:	46020800 	.word	0x46020800
 8003e50:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003e54:	4b37      	ldr	r3, [pc, #220]	@ (8003f34 <HAL_RCC_OscConfig+0xdb4>)
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e5a:	4b36      	ldr	r3, [pc, #216]	@ (8003f34 <HAL_RCC_OscConfig+0xdb4>)
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e5e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d039      	beq.n	8003edc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0203 	and.w	r2, r3, #3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d132      	bne.n	8003edc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d129      	bne.n	8003edc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d122      	bne.n	8003edc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ea0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d11a      	bne.n	8003edc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	0a5b      	lsrs	r3, r3, #9
 8003eaa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d111      	bne.n	8003edc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	0c1b      	lsrs	r3, r3, #16
 8003ebc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d108      	bne.n	8003edc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	0e1b      	lsrs	r3, r3, #24
 8003ece:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e024      	b.n	8003f2a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003ee0:	4b14      	ldr	r3, [pc, #80]	@ (8003f34 <HAL_RCC_OscConfig+0xdb4>)
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee4:	08db      	lsrs	r3, r3, #3
 8003ee6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d01a      	beq.n	8003f28 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003ef2:	4b10      	ldr	r3, [pc, #64]	@ (8003f34 <HAL_RCC_OscConfig+0xdb4>)
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8003f34 <HAL_RCC_OscConfig+0xdb4>)
 8003ef8:	f023 0310 	bic.w	r3, r3, #16
 8003efc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fe f8e9 	bl	80020d4 <HAL_GetTick>
 8003f02:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003f04:	bf00      	nop
 8003f06:	f7fe f8e5 	bl	80020d4 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d0f9      	beq.n	8003f06 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f16:	4a07      	ldr	r2, [pc, #28]	@ (8003f34 <HAL_RCC_OscConfig+0xdb4>)
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003f1c:	4b05      	ldr	r3, [pc, #20]	@ (8003f34 <HAL_RCC_OscConfig+0xdb4>)
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f20:	4a04      	ldr	r2, [pc, #16]	@ (8003f34 <HAL_RCC_OscConfig+0xdb4>)
 8003f22:	f043 0310 	orr.w	r3, r3, #16
 8003f26:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3738      	adds	r7, #56	@ 0x38
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	46020c00 	.word	0x46020c00

08003f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e1d9      	b.n	8004300 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f4c:	4b9b      	ldr	r3, [pc, #620]	@ (80041bc <HAL_RCC_ClockConfig+0x284>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d910      	bls.n	8003f7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b98      	ldr	r3, [pc, #608]	@ (80041bc <HAL_RCC_ClockConfig+0x284>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 020f 	bic.w	r2, r3, #15
 8003f62:	4996      	ldr	r1, [pc, #600]	@ (80041bc <HAL_RCC_ClockConfig+0x284>)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6a:	4b94      	ldr	r3, [pc, #592]	@ (80041bc <HAL_RCC_ClockConfig+0x284>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e1c1      	b.n	8004300 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d010      	beq.n	8003faa <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	4b8c      	ldr	r3, [pc, #560]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d908      	bls.n	8003faa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003f98:	4b89      	ldr	r3, [pc, #548]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	4986      	ldr	r1, [pc, #536]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d012      	beq.n	8003fdc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	4b81      	ldr	r3, [pc, #516]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	091b      	lsrs	r3, r3, #4
 8003fc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d909      	bls.n	8003fdc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003fc8:	4b7d      	ldr	r3, [pc, #500]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	497a      	ldr	r1, [pc, #488]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d010      	beq.n	800400a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	4b74      	ldr	r3, [pc, #464]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d908      	bls.n	800400a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003ff8:	4b71      	ldr	r3, [pc, #452]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	496e      	ldr	r1, [pc, #440]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8004006:	4313      	orrs	r3, r2
 8004008:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d010      	beq.n	8004038 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	4b69      	ldr	r3, [pc, #420]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	429a      	cmp	r2, r3
 8004024:	d908      	bls.n	8004038 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004026:	4b66      	ldr	r3, [pc, #408]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f023 020f 	bic.w	r2, r3, #15
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	4963      	ldr	r1, [pc, #396]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8004034:	4313      	orrs	r3, r2
 8004036:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80d2 	beq.w	80041ea <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b03      	cmp	r3, #3
 8004050:	d143      	bne.n	80040da <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004052:	4b5b      	ldr	r3, [pc, #364]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8004054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d110      	bne.n	8004082 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004060:	4b57      	ldr	r3, [pc, #348]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004066:	4a56      	ldr	r2, [pc, #344]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8004068:	f043 0304 	orr.w	r3, r3, #4
 800406c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004070:	4b53      	ldr	r3, [pc, #332]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8004072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800407e:	2301      	movs	r3, #1
 8004080:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004082:	f7fe f827 	bl	80020d4 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004088:	4b4e      	ldr	r3, [pc, #312]	@ (80041c4 <HAL_RCC_ClockConfig+0x28c>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00f      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004096:	f7fe f81d 	bl	80020d4 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e12b      	b.n	8004300 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80040a8:	4b46      	ldr	r3, [pc, #280]	@ (80041c4 <HAL_RCC_ClockConfig+0x28c>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4b41      	ldr	r3, [pc, #260]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 80040bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040c0:	4a3f      	ldr	r2, [pc, #252]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 80040c2:	f023 0304 	bic.w	r3, r3, #4
 80040c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80040ca:	4b3d      	ldr	r3, [pc, #244]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d121      	bne.n	800411a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e112      	b.n	8004300 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040e2:	4b37      	ldr	r3, [pc, #220]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d115      	bne.n	800411a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e106      	b.n	8004300 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80040fa:	4b31      	ldr	r3, [pc, #196]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0fa      	b.n	8004300 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800410a:	4b2d      	ldr	r3, [pc, #180]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e0f2      	b.n	8004300 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800411a:	4b29      	ldr	r3, [pc, #164]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f023 0203 	bic.w	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4926      	ldr	r1, [pc, #152]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8004128:	4313      	orrs	r3, r2
 800412a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800412c:	f7fd ffd2 	bl	80020d4 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d112      	bne.n	8004160 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413c:	f7fd ffca 	bl	80020d4 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0d6      	b.n	8004300 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004152:	4b1b      	ldr	r3, [pc, #108]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d1ee      	bne.n	800413c <HAL_RCC_ClockConfig+0x204>
 800415e:	e044      	b.n	80041ea <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d112      	bne.n	800418e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004168:	e00a      	b.n	8004180 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416a:	f7fd ffb3 	bl	80020d4 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e0bf      	b.n	8004300 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004180:	4b0f      	ldr	r3, [pc, #60]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f003 030c 	and.w	r3, r3, #12
 8004188:	2b08      	cmp	r3, #8
 800418a:	d1ee      	bne.n	800416a <HAL_RCC_ClockConfig+0x232>
 800418c:	e02d      	b.n	80041ea <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d123      	bne.n	80041de <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004196:	e00a      	b.n	80041ae <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004198:	f7fd ff9c 	bl	80020d4 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e0a8      	b.n	8004300 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80041ae:	4b04      	ldr	r3, [pc, #16]	@ (80041c0 <HAL_RCC_ClockConfig+0x288>)
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1ee      	bne.n	8004198 <HAL_RCC_ClockConfig+0x260>
 80041ba:	e016      	b.n	80041ea <HAL_RCC_ClockConfig+0x2b2>
 80041bc:	40022000 	.word	0x40022000
 80041c0:	46020c00 	.word	0x46020c00
 80041c4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7fd ff84 	bl	80020d4 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e090      	b.n	8004300 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041de:	4b4a      	ldr	r3, [pc, #296]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d1ee      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d010      	beq.n	8004218 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	4b43      	ldr	r3, [pc, #268]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	429a      	cmp	r2, r3
 8004204:	d208      	bcs.n	8004218 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004206:	4b40      	ldr	r3, [pc, #256]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f023 020f 	bic.w	r2, r3, #15
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	493d      	ldr	r1, [pc, #244]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004218:	4b3c      	ldr	r3, [pc, #240]	@ (800430c <HAL_RCC_ClockConfig+0x3d4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d210      	bcs.n	8004248 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004226:	4b39      	ldr	r3, [pc, #228]	@ (800430c <HAL_RCC_ClockConfig+0x3d4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 020f 	bic.w	r2, r3, #15
 800422e:	4937      	ldr	r1, [pc, #220]	@ (800430c <HAL_RCC_ClockConfig+0x3d4>)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b35      	ldr	r3, [pc, #212]	@ (800430c <HAL_RCC_ClockConfig+0x3d4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e05b      	b.n	8004300 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d010      	beq.n	8004276 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	4b2b      	ldr	r3, [pc, #172]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004260:	429a      	cmp	r2, r3
 8004262:	d208      	bcs.n	8004276 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004264:	4b28      	ldr	r3, [pc, #160]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	4925      	ldr	r1, [pc, #148]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 8004272:	4313      	orrs	r3, r2
 8004274:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d012      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	4b20      	ldr	r3, [pc, #128]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	091b      	lsrs	r3, r3, #4
 800428c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004290:	429a      	cmp	r2, r3
 8004292:	d209      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004294:	4b1c      	ldr	r3, [pc, #112]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	4919      	ldr	r1, [pc, #100]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d010      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	4b13      	ldr	r3, [pc, #76]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d208      	bcs.n	80042d6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80042c4:	4b10      	ldr	r3, [pc, #64]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	490d      	ldr	r1, [pc, #52]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80042d6:	f000 f821 	bl	800431c <HAL_RCC_GetSysClockFreq>
 80042da:	4602      	mov	r2, r0
 80042dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <HAL_RCC_ClockConfig+0x3d0>)
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	490a      	ldr	r1, [pc, #40]	@ (8004310 <HAL_RCC_ClockConfig+0x3d8>)
 80042e6:	5ccb      	ldrb	r3, [r1, r3]
 80042e8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ec:	4a09      	ldr	r2, [pc, #36]	@ (8004314 <HAL_RCC_ClockConfig+0x3dc>)
 80042ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042f0:	4b09      	ldr	r3, [pc, #36]	@ (8004318 <HAL_RCC_ClockConfig+0x3e0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd fe63 	bl	8001fc0 <HAL_InitTick>
 80042fa:	4603      	mov	r3, r0
 80042fc:	73fb      	strb	r3, [r7, #15]

  return status;
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	46020c00 	.word	0x46020c00
 800430c:	40022000 	.word	0x40022000
 8004310:	0800c204 	.word	0x0800c204
 8004314:	2000001c 	.word	0x2000001c
 8004318:	20000020 	.word	0x20000020

0800431c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	b08b      	sub	sp, #44	@ 0x2c
 8004320:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800432a:	4b78      	ldr	r3, [pc, #480]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004334:	4b75      	ldr	r3, [pc, #468]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x34>
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b0c      	cmp	r3, #12
 8004348:	d121      	bne.n	800438e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d11e      	bne.n	800438e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004350:	4b6e      	ldr	r3, [pc, #440]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d107      	bne.n	800436c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800435c:	4b6b      	ldr	r3, [pc, #428]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800435e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004362:	0b1b      	lsrs	r3, r3, #12
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	627b      	str	r3, [r7, #36]	@ 0x24
 800436a:	e005      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800436c:	4b67      	ldr	r3, [pc, #412]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	0f1b      	lsrs	r3, r3, #28
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004378:	4a65      	ldr	r2, [pc, #404]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004380:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d110      	bne.n	80043aa <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800438c:	e00d      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800438e:	4b5f      	ldr	r3, [pc, #380]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b04      	cmp	r3, #4
 8004398:	d102      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800439a:	4b5e      	ldr	r3, [pc, #376]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800439c:	623b      	str	r3, [r7, #32]
 800439e:	e004      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80043a8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b0c      	cmp	r3, #12
 80043ae:	f040 80a5 	bne.w	80044fc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80043b2:	4b56      	ldr	r3, [pc, #344]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80043b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80043bc:	4b53      	ldr	r3, [pc, #332]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80043be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c0:	0a1b      	lsrs	r3, r3, #8
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	3301      	adds	r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80043ca:	4b50      	ldr	r3, [pc, #320]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80043cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80043d6:	4b4d      	ldr	r3, [pc, #308]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80043d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043da:	08db      	lsrs	r3, r3, #3
 80043dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ee:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d003      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0xe4>
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d022      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x128>
 80043fe:	e043      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004518 <HAL_RCC_GetSysClockFreq+0x1fc>
 800440e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004412:	4b3e      	ldr	r3, [pc, #248]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004422:	ed97 6a01 	vldr	s12, [r7, #4]
 8004426:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800451c <HAL_RCC_GetSysClockFreq+0x200>
 800442a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800442e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004436:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004442:	e046      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	ee07 3a90 	vmov	s15, r3
 800444a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004518 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004456:	4b2d      	ldr	r3, [pc, #180]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800445a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004466:	ed97 6a01 	vldr	s12, [r7, #4]
 800446a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800451c <HAL_RCC_GetSysClockFreq+0x200>
 800446e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004472:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800447a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800447e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004486:	e024      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	ee07 3a90 	vmov	s15, r3
 800448e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a0:	4b1a      	ldr	r3, [pc, #104]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a8:	ee07 3a90 	vmov	s15, r3
 80044ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80044b0:	ed97 6a01 	vldr	s12, [r7, #4]
 80044b4:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800451c <HAL_RCC_GetSysClockFreq+0x200>
 80044b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80044c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044d0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80044d2:	4b0e      	ldr	r3, [pc, #56]	@ (800450c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d6:	0e1b      	lsrs	r3, r3, #24
 80044d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044dc:	3301      	adds	r3, #1
 80044de:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80044ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f6:	ee17 3a90 	vmov	r3, s15
 80044fa:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80044fc:	6a3b      	ldr	r3, [r7, #32]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	372c      	adds	r7, #44	@ 0x2c
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	46020c00 	.word	0x46020c00
 8004510:	0800c214 	.word	0x0800c214
 8004514:	00f42400 	.word	0x00f42400
 8004518:	4b742400 	.word	0x4b742400
 800451c:	46000000 	.word	0x46000000

08004520 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004524:	f7ff fefa 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b07      	ldr	r3, [pc, #28]	@ (8004548 <HAL_RCC_GetHCLKFreq+0x28>)
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	4906      	ldr	r1, [pc, #24]	@ (800454c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004534:	5ccb      	ldrb	r3, [r1, r3]
 8004536:	fa22 f303 	lsr.w	r3, r2, r3
 800453a:	4a05      	ldr	r2, [pc, #20]	@ (8004550 <HAL_RCC_GetHCLKFreq+0x30>)
 800453c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800453e:	4b04      	ldr	r3, [pc, #16]	@ (8004550 <HAL_RCC_GetHCLKFreq+0x30>)
 8004540:	681b      	ldr	r3, [r3, #0]
}
 8004542:	4618      	mov	r0, r3
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	46020c00 	.word	0x46020c00
 800454c:	0800c204 	.word	0x0800c204
 8004550:	2000001c 	.word	0x2000001c

08004554 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800455c:	4b3e      	ldr	r3, [pc, #248]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800455e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800456a:	f7fe fdab 	bl	80030c4 <HAL_PWREx_GetVoltageRange>
 800456e:	6178      	str	r0, [r7, #20]
 8004570:	e019      	b.n	80045a6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004572:	4b39      	ldr	r3, [pc, #228]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004578:	4a37      	ldr	r2, [pc, #220]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800457a:	f043 0304 	orr.w	r3, r3, #4
 800457e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004582:	4b35      	ldr	r3, [pc, #212]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004590:	f7fe fd98 	bl	80030c4 <HAL_PWREx_GetVoltageRange>
 8004594:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004596:	4b30      	ldr	r3, [pc, #192]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800459c:	4a2e      	ldr	r2, [pc, #184]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800459e:	f023 0304 	bic.w	r3, r3, #4
 80045a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045ac:	d003      	beq.n	80045b6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045b4:	d109      	bne.n	80045ca <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045bc:	d202      	bcs.n	80045c4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80045be:	2301      	movs	r3, #1
 80045c0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80045c2:	e033      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80045c8:	e030      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045d0:	d208      	bcs.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d8:	d102      	bne.n	80045e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80045da:	2303      	movs	r3, #3
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	e025      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e035      	b.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045ea:	d90f      	bls.n	800460c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045f8:	d902      	bls.n	8004600 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	e015      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004600:	2301      	movs	r3, #1
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	e012      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	e00f      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004612:	d109      	bne.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800461a:	d102      	bne.n	8004622 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800461c:	2301      	movs	r3, #1
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	e004      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004622:	2302      	movs	r3, #2
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e001      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004628:	2301      	movs	r3, #1
 800462a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800462c:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f023 020f 	bic.w	r2, r3, #15
 8004634:	4909      	ldr	r1, [pc, #36]	@ (800465c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800463c:	4b07      	ldr	r3, [pc, #28]	@ (800465c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	429a      	cmp	r2, r3
 8004648:	d001      	beq.n	800464e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	46020c00 	.word	0x46020c00
 800465c:	40022000 	.word	0x40022000

08004660 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004664:	b0b6      	sub	sp, #216	@ 0xd8
 8004666:	af00      	add	r7, sp, #0
 8004668:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800466c:	2300      	movs	r3, #0
 800466e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004672:	2300      	movs	r3, #0
 8004674:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004678:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f002 0401 	and.w	r4, r2, #1
 8004684:	2500      	movs	r5, #0
 8004686:	ea54 0305 	orrs.w	r3, r4, r5
 800468a:	d00b      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800468c:	4bc5      	ldr	r3, [pc, #788]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800468e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004692:	f023 0103 	bic.w	r1, r3, #3
 8004696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800469a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469c:	4ac1      	ldr	r2, [pc, #772]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800469e:	430b      	orrs	r3, r1
 80046a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f002 0804 	and.w	r8, r2, #4
 80046b0:	f04f 0900 	mov.w	r9, #0
 80046b4:	ea58 0309 	orrs.w	r3, r8, r9
 80046b8:	d00b      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80046ba:	4bba      	ldr	r3, [pc, #744]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80046bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046c0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80046c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ca:	4ab6      	ldr	r2, [pc, #728]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80046cc:	430b      	orrs	r3, r1
 80046ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	f002 0a08 	and.w	sl, r2, #8
 80046de:	f04f 0b00 	mov.w	fp, #0
 80046e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80046e6:	d00b      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80046e8:	4bae      	ldr	r3, [pc, #696]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80046ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f8:	4aaa      	ldr	r2, [pc, #680]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80046fa:	430b      	orrs	r3, r1
 80046fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004700:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f002 0310 	and.w	r3, r2, #16
 800470c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004710:	2300      	movs	r3, #0
 8004712:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004716:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800471a:	460b      	mov	r3, r1
 800471c:	4313      	orrs	r3, r2
 800471e:	d00b      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004720:	4ba0      	ldr	r3, [pc, #640]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004726:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800472a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800472e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004730:	4a9c      	ldr	r2, [pc, #624]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004732:	430b      	orrs	r3, r1
 8004734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004740:	f002 0320 	and.w	r3, r2, #32
 8004744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004748:	2300      	movs	r3, #0
 800474a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800474e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004752:	460b      	mov	r3, r1
 8004754:	4313      	orrs	r3, r2
 8004756:	d00b      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004758:	4b92      	ldr	r3, [pc, #584]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800475a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800475e:	f023 0107 	bic.w	r1, r3, #7
 8004762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004768:	4a8e      	ldr	r2, [pc, #568]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800476a:	430b      	orrs	r3, r1
 800476c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800477c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004780:	2300      	movs	r3, #0
 8004782:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004786:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800478a:	460b      	mov	r3, r1
 800478c:	4313      	orrs	r3, r2
 800478e:	d00b      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004790:	4b84      	ldr	r3, [pc, #528]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004796:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800479a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800479e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047a0:	4a80      	ldr	r2, [pc, #512]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047a2:	430b      	orrs	r3, r1
 80047a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80047b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80047be:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4313      	orrs	r3, r2
 80047c6:	d00b      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80047c8:	4b76      	ldr	r3, [pc, #472]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047d8:	4a72      	ldr	r2, [pc, #456]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047da:	430b      	orrs	r3, r1
 80047dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80047ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047f0:	2300      	movs	r3, #0
 80047f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047f6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80047fa:	460b      	mov	r3, r1
 80047fc:	4313      	orrs	r3, r2
 80047fe:	d00b      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004800:	4b68      	ldr	r3, [pc, #416]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004806:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800480a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800480e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004810:	4a64      	ldr	r2, [pc, #400]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004812:	430b      	orrs	r3, r1
 8004814:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004824:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004828:	2300      	movs	r3, #0
 800482a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800482e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004832:	460b      	mov	r3, r1
 8004834:	4313      	orrs	r3, r2
 8004836:	d00b      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004838:	4b5a      	ldr	r3, [pc, #360]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800483a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800483e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004848:	4a56      	ldr	r2, [pc, #344]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800484a:	430b      	orrs	r3, r1
 800484c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800485c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004860:	2300      	movs	r3, #0
 8004862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004866:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800486a:	460b      	mov	r3, r1
 800486c:	4313      	orrs	r3, r2
 800486e:	d00b      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004870:	4b4c      	ldr	r3, [pc, #304]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004872:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004876:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800487a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800487e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004880:	4a48      	ldr	r2, [pc, #288]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004882:	430b      	orrs	r3, r1
 8004884:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004888:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004894:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004898:	2300      	movs	r3, #0
 800489a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800489e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80048a2:	460b      	mov	r3, r1
 80048a4:	4313      	orrs	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80048a8:	4b3e      	ldr	r3, [pc, #248]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80048aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048ae:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80048b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048b8:	4a3a      	ldr	r2, [pc, #232]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80048ba:	430b      	orrs	r3, r1
 80048bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80048c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80048cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048ce:	2300      	movs	r3, #0
 80048d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048d2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80048d6:	460b      	mov	r3, r1
 80048d8:	4313      	orrs	r3, r2
 80048da:	d00b      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80048dc:	4b31      	ldr	r3, [pc, #196]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80048de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048ec:	4a2d      	ldr	r2, [pc, #180]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80048ee:	430b      	orrs	r3, r1
 80048f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004900:	673b      	str	r3, [r7, #112]	@ 0x70
 8004902:	2300      	movs	r3, #0
 8004904:	677b      	str	r3, [r7, #116]	@ 0x74
 8004906:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800490a:	460b      	mov	r3, r1
 800490c:	4313      	orrs	r3, r2
 800490e:	d04f      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004910:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004918:	2b80      	cmp	r3, #128	@ 0x80
 800491a:	d02d      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800491c:	2b80      	cmp	r3, #128	@ 0x80
 800491e:	d827      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004920:	2b60      	cmp	r3, #96	@ 0x60
 8004922:	d02b      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004924:	2b60      	cmp	r3, #96	@ 0x60
 8004926:	d823      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004928:	2b40      	cmp	r3, #64	@ 0x40
 800492a:	d006      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800492c:	2b40      	cmp	r3, #64	@ 0x40
 800492e:	d81f      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d009      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004934:	2b20      	cmp	r3, #32
 8004936:	d011      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004938:	e01a      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800493a:	4b1a      	ldr	r3, [pc, #104]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800493c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493e:	4a19      	ldr	r2, [pc, #100]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004944:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004946:	e01a      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004948:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800494c:	3308      	adds	r3, #8
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fbc4 	bl	80050dc <RCCEx_PLL2_Config>
 8004954:	4603      	mov	r3, r0
 8004956:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800495a:	e010      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800495c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004960:	332c      	adds	r3, #44	@ 0x2c
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fc52 	bl	800520c <RCCEx_PLL3_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800496e:	e006      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004976:	e002      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8004978:	bf00      	nop
 800497a:	e000      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 800497c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800497e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d110      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004986:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004988:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800498c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004990:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004998:	4a02      	ldr	r2, [pc, #8]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800499a:	430b      	orrs	r3, r1
 800499c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80049a0:	e006      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80049a2:	bf00      	nop
 80049a4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80049ac:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80049b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80049bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049be:	2300      	movs	r3, #0
 80049c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80049c6:	460b      	mov	r3, r1
 80049c8:	4313      	orrs	r3, r2
 80049ca:	d046      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80049cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049d4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80049d8:	d028      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80049da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80049de:	d821      	bhi.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80049e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049e4:	d022      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80049e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049ea:	d81b      	bhi.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80049ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049f0:	d01c      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80049f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049f6:	d815      	bhi.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80049f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049fc:	d008      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80049fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a02:	d80f      	bhi.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d011      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a0c:	d00e      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004a0e:	e009      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a14:	3308      	adds	r3, #8
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fb60 	bl	80050dc <RCCEx_PLL2_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004a22:	e004      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004a2a:	e000      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8004a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10d      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004a36:	4bb6      	ldr	r3, [pc, #728]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a3c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004a40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a48:	4ab1      	ldr	r2, [pc, #708]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004a50:	e003      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a52:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004a56:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004a5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a66:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a68:	2300      	movs	r3, #0
 8004a6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a6c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a70:	460b      	mov	r3, r1
 8004a72:	4313      	orrs	r3, r2
 8004a74:	d03e      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004a76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d81d      	bhi.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8004a82:	a201      	add	r2, pc, #4	@ (adr r2, 8004a88 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004ac7 	.word	0x08004ac7
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004aab 	.word	0x08004aab
 8004a94:	08004ac7 	.word	0x08004ac7
 8004a98:	08004ac7 	.word	0x08004ac7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a9c:	4b9c      	ldr	r3, [pc, #624]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa0:	4a9b      	ldr	r2, [pc, #620]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004aa8:	e00e      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004aae:	332c      	adds	r3, #44	@ 0x2c
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fbab 	bl	800520c <RCCEx_PLL3_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004abc:	e004      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004ac4:	e000      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8004ac6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004ac8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10d      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004ad0:	4b8f      	ldr	r3, [pc, #572]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004ad2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ad6:	f023 0107 	bic.w	r1, r3, #7
 8004ada:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ae2:	4a8b      	ldr	r2, [pc, #556]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004aea:	e003      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aec:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004af0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b02:	2300      	movs	r3, #0
 8004b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	d04a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b1c:	d028      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004b1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b22:	d821      	bhi.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004b24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b28:	d024      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b2e:	d81b      	bhi.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b34:	d00e      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b3a:	d815      	bhi.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01b      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b44:	d110      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b46:	4b72      	ldr	r3, [pc, #456]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4a:	4a71      	ldr	r2, [pc, #452]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b50:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004b52:	e012      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b58:	332c      	adds	r3, #44	@ 0x2c
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fb56 	bl	800520c <RCCEx_PLL3_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004b66:	e008      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004b6e:	e004      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8004b70:	bf00      	nop
 8004b72:	e002      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8004b74:	bf00      	nop
 8004b76:	e000      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8004b78:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004b7a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10d      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004b82:	4b63      	ldr	r3, [pc, #396]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004b8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b94:	4a5e      	ldr	r2, [pc, #376]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004b96:	430b      	orrs	r3, r1
 8004b98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004b9c:	e003      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004ba2:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004bb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bb8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f000 80ba 	beq.w	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bca:	4b51      	ldr	r3, [pc, #324]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d113      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bde:	4a4c      	ldr	r2, [pc, #304]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004be0:	f043 0304 	orr.w	r3, r3, #4
 8004be4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004be8:	4b49      	ldr	r3, [pc, #292]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004c00:	4b44      	ldr	r3, [pc, #272]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c04:	4a43      	ldr	r2, [pc, #268]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c0c:	f7fd fa62 	bl	80020d4 <HAL_GetTick>
 8004c10:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004c14:	e00b      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c16:	f7fd fa5d 	bl	80020d4 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d903      	bls.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004c2c:	e005      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004c2e:	4b39      	ldr	r3, [pc, #228]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0ed      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8004c3a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d16a      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c42:	4b33      	ldr	r3, [pc, #204]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004c50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d023      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8004c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c5c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d01b      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c68:	4b29      	ldr	r3, [pc, #164]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c76:	4b26      	ldr	r3, [pc, #152]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c7c:	4a24      	ldr	r2, [pc, #144]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c86:	4b22      	ldr	r3, [pc, #136]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c8c:	4a20      	ldr	r2, [pc, #128]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c96:	4a1e      	ldr	r2, [pc, #120]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004c98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ca0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d019      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fd fa12 	bl	80020d4 <HAL_GetTick>
 8004cb0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb4:	e00d      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb6:	f7fd fa0d 	bl	80020d4 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cc0:	1ad2      	subs	r2, r2, r3
 8004cc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d903      	bls.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 8004cd0:	e006      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ea      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8004ce0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10d      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004ce8:	4b09      	ldr	r3, [pc, #36]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cf6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004cfa:	4a05      	ldr	r2, [pc, #20]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004d02:	e00d      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d04:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004d08:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 8004d0c:	e008      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004d0e:	bf00      	nop
 8004d10:	46020c00 	.word	0x46020c00
 8004d14:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004d1c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d20:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d107      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d28:	4bb2      	ldr	r3, [pc, #712]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d2e:	4ab1      	ldr	r2, [pc, #708]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004d30:	f023 0304 	bic.w	r3, r3, #4
 8004d34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004d38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004d44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d46:	2300      	movs	r3, #0
 8004d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d4a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4313      	orrs	r3, r2
 8004d52:	d042      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004d54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d5c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d60:	d022      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004d62:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d66:	d81b      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004d68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d6c:	d011      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8004d6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d72:	d815      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d019      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004d78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d7c:	d110      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d82:	3308      	adds	r3, #8
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 f9a9 	bl	80050dc <RCCEx_PLL2_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004d90:	e00d      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d92:	4b98      	ldr	r3, [pc, #608]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d96:	4a97      	ldr	r2, [pc, #604]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d9c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004d9e:	e006      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004da6:	e002      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8004da8:	bf00      	nop
 8004daa:	e000      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8004dac:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004dae:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10d      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004db6:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dbc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004dc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dc8:	4a8a      	ldr	r2, [pc, #552]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004dd0:	e003      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004dd6:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004dda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004de6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004de8:	2300      	movs	r3, #0
 8004dea:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004df0:	460b      	mov	r3, r1
 8004df2:	4313      	orrs	r3, r2
 8004df4:	d02d      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e02:	d00b      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e08:	d804      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d008      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e12:	d007      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004e1a:	e004      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004e1c:	bf00      	nop
 8004e1e:	e002      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004e20:	bf00      	nop
 8004e22:	e000      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004e24:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004e26:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10d      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004e2e:	4b71      	ldr	r3, [pc, #452]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004e30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e34:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e40:	4a6c      	ldr	r2, [pc, #432]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004e42:	430b      	orrs	r3, r1
 8004e44:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004e48:	e003      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004e4e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e60:	2300      	movs	r3, #0
 8004e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e64:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	d00c      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004e6e:	4b61      	ldr	r3, [pc, #388]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004e70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e74:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8004e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e80:	4a5c      	ldr	r2, [pc, #368]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004e82:	430b      	orrs	r3, r1
 8004e84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004e88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e96:	2300      	movs	r3, #0
 8004e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	d019      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eb0:	d105      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004eb2:	4b50      	ldr	r3, [pc, #320]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb6:	4a4f      	ldr	r2, [pc, #316]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ebc:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004ebe:	4b4d      	ldr	r3, [pc, #308]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004ec0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ec4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ed0:	4a48      	ldr	r2, [pc, #288]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004ed2:	430b      	orrs	r3, r1
 8004ed4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004ed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	d00c      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004efa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004efe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f06:	493b      	ldr	r1, [pc, #236]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004f0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f16:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004f1a:	623b      	str	r3, [r7, #32]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f20:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004f24:	460b      	mov	r3, r1
 8004f26:	4313      	orrs	r3, r2
 8004f28:	d00c      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004f2a:	4b32      	ldr	r3, [pc, #200]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f3c:	492d      	ldr	r1, [pc, #180]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004f44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	2300      	movs	r3, #0
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	d00c      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004f60:	4b24      	ldr	r3, [pc, #144]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004f62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f66:	f023 0218 	bic.w	r2, r3, #24
 8004f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f72:	4920      	ldr	r1, [pc, #128]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f90:	460b      	mov	r3, r1
 8004f92:	4313      	orrs	r3, r2
 8004f94:	d034      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004f96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fa2:	d105      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa4:	4b13      	ldr	r3, [pc, #76]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa8:	4a12      	ldr	r2, [pc, #72]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fae:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004fb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004fb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004fbc:	d108      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 f889 	bl	80050dc <RCCEx_PLL2_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8004fd0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10f      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004fd8:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004fda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fe2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fe6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004fea:	4902      	ldr	r1, [pc, #8]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004ff2:	e005      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004ff4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004ffc:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005016:	460b      	mov	r3, r1
 8005018:	4313      	orrs	r3, r2
 800501a:	d03a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800501c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005024:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005028:	d00e      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800502a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800502e:	d815      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d017      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005038:	d110      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800503a:	4b27      	ldr	r3, [pc, #156]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503e:	4a26      	ldr	r2, [pc, #152]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005044:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005046:	e00e      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005048:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800504c:	3308      	adds	r3, #8
 800504e:	4618      	mov	r0, r3
 8005050:	f000 f844 	bl	80050dc <RCCEx_PLL2_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800505a:	e004      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005062:	e000      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8005064:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005066:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10d      	bne.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800506e:	4b1a      	ldr	r3, [pc, #104]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005074:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800507c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005080:	4915      	ldr	r1, [pc, #84]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005088:	e003      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800508e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005092:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	2300      	movs	r3, #0
 80050a2:	607b      	str	r3, [r7, #4]
 80050a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80050a8:	460b      	mov	r3, r1
 80050aa:	4313      	orrs	r3, r2
 80050ac:	d00c      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80050ae:	4b0a      	ldr	r3, [pc, #40]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80050b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050b4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80050b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80050bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050c0:	4905      	ldr	r1, [pc, #20]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80050c8:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	37d8      	adds	r7, #216	@ 0xd8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d6:	bf00      	nop
 80050d8:	46020c00 	.word	0x46020c00

080050dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80050e4:	4b47      	ldr	r3, [pc, #284]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a46      	ldr	r2, [pc, #280]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 80050ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050f0:	f7fc fff0 	bl	80020d4 <HAL_GetTick>
 80050f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050f6:	e008      	b.n	800510a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050f8:	f7fc ffec 	bl	80020d4 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e077      	b.n	80051fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800510a:	4b3e      	ldr	r3, [pc, #248]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f0      	bne.n	80050f8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005116:	4b3b      	ldr	r3, [pc, #236]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 8005118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800511e:	f023 0303 	bic.w	r3, r3, #3
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6811      	ldr	r1, [r2, #0]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6852      	ldr	r2, [r2, #4]
 800512a:	3a01      	subs	r2, #1
 800512c:	0212      	lsls	r2, r2, #8
 800512e:	430a      	orrs	r2, r1
 8005130:	4934      	ldr	r1, [pc, #208]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 8005132:	4313      	orrs	r3, r2
 8005134:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005136:	4b33      	ldr	r3, [pc, #204]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 8005138:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800513a:	4b33      	ldr	r3, [pc, #204]	@ (8005208 <RCCEx_PLL2_Config+0x12c>)
 800513c:	4013      	ands	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6892      	ldr	r2, [r2, #8]
 8005142:	3a01      	subs	r2, #1
 8005144:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	68d2      	ldr	r2, [r2, #12]
 800514c:	3a01      	subs	r2, #1
 800514e:	0252      	lsls	r2, r2, #9
 8005150:	b292      	uxth	r2, r2
 8005152:	4311      	orrs	r1, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6912      	ldr	r2, [r2, #16]
 8005158:	3a01      	subs	r2, #1
 800515a:	0412      	lsls	r2, r2, #16
 800515c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005160:	4311      	orrs	r1, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6952      	ldr	r2, [r2, #20]
 8005166:	3a01      	subs	r2, #1
 8005168:	0612      	lsls	r2, r2, #24
 800516a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800516e:	430a      	orrs	r2, r1
 8005170:	4924      	ldr	r1, [pc, #144]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 8005172:	4313      	orrs	r3, r2
 8005174:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005176:	4b23      	ldr	r3, [pc, #140]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 8005178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517a:	f023 020c 	bic.w	r2, r3, #12
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	4920      	ldr	r1, [pc, #128]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 8005184:	4313      	orrs	r3, r2
 8005186:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005188:	4b1e      	ldr	r3, [pc, #120]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 800518a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	491c      	ldr	r1, [pc, #112]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 8005192:	4313      	orrs	r3, r2
 8005194:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005196:	4b1b      	ldr	r3, [pc, #108]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 8005198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519a:	4a1a      	ldr	r2, [pc, #104]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 800519c:	f023 0310 	bic.w	r3, r3, #16
 80051a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051a2:	4b18      	ldr	r3, [pc, #96]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051aa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	69d2      	ldr	r2, [r2, #28]
 80051b2:	00d2      	lsls	r2, r2, #3
 80051b4:	4913      	ldr	r1, [pc, #76]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80051ba:	4b12      	ldr	r3, [pc, #72]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	4a11      	ldr	r2, [pc, #68]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 80051c0:	f043 0310 	orr.w	r3, r3, #16
 80051c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80051c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 80051cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051d0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80051d2:	f7fc ff7f 	bl	80020d4 <HAL_GetTick>
 80051d6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051d8:	e008      	b.n	80051ec <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051da:	f7fc ff7b 	bl	80020d4 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e006      	b.n	80051fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051ec:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <RCCEx_PLL2_Config+0x128>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0

}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	46020c00 	.word	0x46020c00
 8005208:	80800000 	.word	0x80800000

0800520c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005214:	4b47      	ldr	r3, [pc, #284]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a46      	ldr	r2, [pc, #280]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 800521a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800521e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005220:	f7fc ff58 	bl	80020d4 <HAL_GetTick>
 8005224:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005226:	e008      	b.n	800523a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005228:	f7fc ff54 	bl	80020d4 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e077      	b.n	800532a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800523a:	4b3e      	ldr	r3, [pc, #248]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005246:	4b3b      	ldr	r3, [pc, #236]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 8005248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800524e:	f023 0303 	bic.w	r3, r3, #3
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6811      	ldr	r1, [r2, #0]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6852      	ldr	r2, [r2, #4]
 800525a:	3a01      	subs	r2, #1
 800525c:	0212      	lsls	r2, r2, #8
 800525e:	430a      	orrs	r2, r1
 8005260:	4934      	ldr	r1, [pc, #208]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 8005262:	4313      	orrs	r3, r2
 8005264:	630b      	str	r3, [r1, #48]	@ 0x30
 8005266:	4b33      	ldr	r3, [pc, #204]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 8005268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800526a:	4b33      	ldr	r3, [pc, #204]	@ (8005338 <RCCEx_PLL3_Config+0x12c>)
 800526c:	4013      	ands	r3, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6892      	ldr	r2, [r2, #8]
 8005272:	3a01      	subs	r2, #1
 8005274:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	68d2      	ldr	r2, [r2, #12]
 800527c:	3a01      	subs	r2, #1
 800527e:	0252      	lsls	r2, r2, #9
 8005280:	b292      	uxth	r2, r2
 8005282:	4311      	orrs	r1, r2
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6912      	ldr	r2, [r2, #16]
 8005288:	3a01      	subs	r2, #1
 800528a:	0412      	lsls	r2, r2, #16
 800528c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005290:	4311      	orrs	r1, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6952      	ldr	r2, [r2, #20]
 8005296:	3a01      	subs	r2, #1
 8005298:	0612      	lsls	r2, r2, #24
 800529a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800529e:	430a      	orrs	r2, r1
 80052a0:	4924      	ldr	r1, [pc, #144]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80052a6:	4b23      	ldr	r3, [pc, #140]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052aa:	f023 020c 	bic.w	r2, r3, #12
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	4920      	ldr	r1, [pc, #128]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80052b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 80052ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	491c      	ldr	r1, [pc, #112]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80052c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 80052cc:	f023 0310 	bic.w	r3, r3, #16
 80052d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052d2:	4b18      	ldr	r3, [pc, #96]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 80052d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	69d2      	ldr	r2, [r2, #28]
 80052e2:	00d2      	lsls	r2, r2, #3
 80052e4:	4913      	ldr	r1, [pc, #76]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80052ea:	4b12      	ldr	r3, [pc, #72]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ee:	4a11      	ldr	r2, [pc, #68]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 80052f0:	f043 0310 	orr.w	r3, r3, #16
 80052f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80052f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 80052fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005300:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005302:	f7fc fee7 	bl	80020d4 <HAL_GetTick>
 8005306:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005308:	e008      	b.n	800531c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800530a:	f7fc fee3 	bl	80020d4 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e006      	b.n	800532a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800531c:	4b05      	ldr	r3, [pc, #20]	@ (8005334 <RCCEx_PLL3_Config+0x128>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	46020c00 	.word	0x46020c00
 8005338:	80800000 	.word	0x80800000

0800533c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d078      	beq.n	8005440 <HAL_RTC_Init+0x104>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fc fc12 	bl	8001b8c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005370:	4b36      	ldr	r3, [pc, #216]	@ (800544c <HAL_RTC_Init+0x110>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b10      	cmp	r3, #16
 800537a:	d058      	beq.n	800542e <HAL_RTC_Init+0xf2>
    {
      /* Check that the RTC mode is not 'binary only' */
      if (__HAL_RTC_GET_BINARY_MODE(hrtc) != RTC_BINARY_ONLY)
 800537c:	4b33      	ldr	r3, [pc, #204]	@ (800544c <HAL_RTC_Init+0x110>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005388:	d053      	beq.n	8005432 <HAL_RTC_Init+0xf6>
      {
        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800538a:	4b30      	ldr	r3, [pc, #192]	@ (800544c <HAL_RTC_Init+0x110>)
 800538c:	22ca      	movs	r2, #202	@ 0xca
 800538e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005390:	4b2e      	ldr	r3, [pc, #184]	@ (800544c <HAL_RTC_Init+0x110>)
 8005392:	2253      	movs	r2, #83	@ 0x53
 8005394:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enter Initialization mode */
        status = RTC_EnterInitMode(hrtc);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fca0 	bl	8005cdc <RTC_EnterInitMode>
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d13f      	bne.n	8005426 <HAL_RTC_Init+0xea>
        {
          /* Clear RTC_CR FMT, OSEL and POL Bits */
          CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80053a6:	4b29      	ldr	r3, [pc, #164]	@ (800544c <HAL_RTC_Init+0x110>)
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	4a28      	ldr	r2, [pc, #160]	@ (800544c <HAL_RTC_Init+0x110>)
 80053ac:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80053b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053b4:	6193      	str	r3, [r2, #24]
          /* Set RTC_CR register */
          SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80053b6:	4b25      	ldr	r3, [pc, #148]	@ (800544c <HAL_RTC_Init+0x110>)
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6859      	ldr	r1, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	4319      	orrs	r1, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	430b      	orrs	r3, r1
 80053ca:	4920      	ldr	r1, [pc, #128]	@ (800544c <HAL_RTC_Init+0x110>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	618b      	str	r3, [r1, #24]

          /* Configure the RTC PRER */
          WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	041b      	lsls	r3, r3, #16
 80053da:	491c      	ldr	r1, [pc, #112]	@ (800544c <HAL_RTC_Init+0x110>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	610b      	str	r3, [r1, #16]

          /* Configure the Binary mode */
          MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80053e0:	4b1a      	ldr	r3, [pc, #104]	@ (800544c <HAL_RTC_Init+0x110>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f0:	430b      	orrs	r3, r1
 80053f2:	4916      	ldr	r1, [pc, #88]	@ (800544c <HAL_RTC_Init+0x110>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60cb      	str	r3, [r1, #12]

          /* Exit Initialization mode */
          status = RTC_ExitInitMode(hrtc);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fcab 	bl	8005d54 <RTC_ExitInitMode>
 80053fe:	4603      	mov	r3, r0
 8005400:	73fb      	strb	r3, [r7, #15]

          if (status == HAL_OK)
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10e      	bne.n	8005426 <HAL_RTC_Init+0xea>
          {
            MODIFY_REG(RTC->CR, \
 8005408:	4b10      	ldr	r3, [pc, #64]	@ (800544c <HAL_RTC_Init+0x110>)
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a19      	ldr	r1, [r3, #32]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	4319      	orrs	r1, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	430b      	orrs	r3, r1
 8005420:	490a      	ldr	r1, [pc, #40]	@ (800544c <HAL_RTC_Init+0x110>)
 8005422:	4313      	orrs	r3, r2
 8005424:	618b      	str	r3, [r1, #24]
                       hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
          }
        }

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005426:	4b09      	ldr	r3, [pc, #36]	@ (800544c <HAL_RTC_Init+0x110>)
 8005428:	22ff      	movs	r2, #255	@ 0xff
 800542a:	625a      	str	r2, [r3, #36]	@ 0x24
 800542c:	e001      	b.n	8005432 <HAL_RTC_Init+0xf6>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005432:	7bfb      	ldrb	r3, [r7, #15]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d103      	bne.n	8005440 <HAL_RTC_Init+0x104>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	46007800 	.word	0x46007800

08005450 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_RTC_SetTime+0x1a>
 8005466:	2302      	movs	r3, #2
 8005468:	e088      	b.n	800557c <HAL_RTC_SetTime+0x12c>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2202      	movs	r2, #2
 8005476:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800547a:	4b42      	ldr	r3, [pc, #264]	@ (8005584 <HAL_RTC_SetTime+0x134>)
 800547c:	22ca      	movs	r2, #202	@ 0xca
 800547e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005480:	4b40      	ldr	r3, [pc, #256]	@ (8005584 <HAL_RTC_SetTime+0x134>)
 8005482:	2253      	movs	r2, #83	@ 0x53
 8005484:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 fc28 	bl	8005cdc <RTC_EnterInitMode>
 800548c:	4603      	mov	r3, r0
 800548e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005490:	7cfb      	ldrb	r3, [r7, #19]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d163      	bne.n	800555e <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8005496:	4b3b      	ldr	r3, [pc, #236]	@ (8005584 <HAL_RTC_SetTime+0x134>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800549e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054a2:	d057      	beq.n	8005554 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d125      	bne.n	80054f6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80054aa:	4b36      	ldr	r3, [pc, #216]	@ (8005584 <HAL_RTC_SetTime+0x134>)
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d102      	bne.n	80054bc <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2200      	movs	r2, #0
 80054ba:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fc85 	bl	8005dd0 <RTC_ByteToBcd2>
 80054c6:	4603      	mov	r3, r0
 80054c8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	785b      	ldrb	r3, [r3, #1]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fc7e 	bl	8005dd0 <RTC_ByteToBcd2>
 80054d4:	4603      	mov	r3, r0
 80054d6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80054d8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	789b      	ldrb	r3, [r3, #2]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fc76 	bl	8005dd0 <RTC_ByteToBcd2>
 80054e4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80054e6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	78db      	ldrb	r3, [r3, #3]
 80054ee:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	e017      	b.n	8005526 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80054f6:	4b23      	ldr	r3, [pc, #140]	@ (8005584 <HAL_RTC_SetTime+0x134>)
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2200      	movs	r2, #0
 8005506:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	785b      	ldrb	r3, [r3, #1]
 8005512:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005514:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800551a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	78db      	ldrb	r3, [r3, #3]
 8005520:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005526:	4a17      	ldr	r2, [pc, #92]	@ (8005584 <HAL_RTC_SetTime+0x134>)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800552e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005532:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8005534:	4b13      	ldr	r3, [pc, #76]	@ (8005584 <HAL_RTC_SetTime+0x134>)
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	4a12      	ldr	r2, [pc, #72]	@ (8005584 <HAL_RTC_SetTime+0x134>)
 800553a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800553e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005540:	4b10      	ldr	r3, [pc, #64]	@ (8005584 <HAL_RTC_SetTime+0x134>)
 8005542:	699a      	ldr	r2, [r3, #24]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	68d9      	ldr	r1, [r3, #12]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	430b      	orrs	r3, r1
 800554e:	490d      	ldr	r1, [pc, #52]	@ (8005584 <HAL_RTC_SetTime+0x134>)
 8005550:	4313      	orrs	r3, r2
 8005552:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 fbfd 	bl	8005d54 <RTC_ExitInitMode>
 800555a:	4603      	mov	r3, r0
 800555c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800555e:	4b09      	ldr	r3, [pc, #36]	@ (8005584 <HAL_RTC_SetTime+0x134>)
 8005560:	22ff      	movs	r2, #255	@ 0xff
 8005562:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005564:	7cfb      	ldrb	r3, [r7, #19]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d103      	bne.n	8005572 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800557a:	7cfb      	ldrb	r3, [r7, #19]
}
 800557c:	4618      	mov	r0, r3
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	bd90      	pop	{r4, r7, pc}
 8005584:	46007800 	.word	0x46007800

08005588 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8005594:	4b34      	ldr	r3, [pc, #208]	@ (8005668 <HAL_RTC_GetTime+0xe0>)
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800559c:	4b32      	ldr	r3, [pc, #200]	@ (8005668 <HAL_RTC_GetTime+0xe0>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055a8:	d04a      	beq.n	8005640 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80055aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005668 <HAL_RTC_GetTime+0xe0>)
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80055b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005668 <HAL_RTC_GetTime+0xe0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80055be:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80055c2:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	0d9b      	lsrs	r3, r3, #22
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d12a      	bne.n	800565e <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fbff 	bl	8005e10 <RTC_Bcd2ToByte>
 8005612:	4603      	mov	r3, r0
 8005614:	461a      	mov	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fbf6 	bl	8005e10 <RTC_Bcd2ToByte>
 8005624:	4603      	mov	r3, r0
 8005626:	461a      	mov	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	789b      	ldrb	r3, [r3, #2]
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fbed 	bl	8005e10 <RTC_Bcd2ToByte>
 8005636:	4603      	mov	r3, r0
 8005638:	461a      	mov	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	709a      	strb	r2, [r3, #2]
 800563e:	e00e      	b.n	800565e <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2200      	movs	r2, #0
 800564a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2200      	movs	r2, #0
 8005650:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2200      	movs	r2, #0
 8005656:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2200      	movs	r2, #0
 800565c:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	46007800 	.word	0x46007800

0800566c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_RTC_SetDate+0x1a>
 8005682:	2302      	movs	r3, #2
 8005684:	e071      	b.n	800576a <HAL_RTC_SetDate+0xfe>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2202      	movs	r2, #2
 8005692:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10e      	bne.n	80056ba <HAL_RTC_SetDate+0x4e>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	785b      	ldrb	r3, [r3, #1]
 80056ac:	f023 0310 	bic.w	r3, r3, #16
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	330a      	adds	r3, #10
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d11c      	bne.n	80056fa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	78db      	ldrb	r3, [r3, #3]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fb83 	bl	8005dd0 <RTC_ByteToBcd2>
 80056ca:	4603      	mov	r3, r0
 80056cc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	785b      	ldrb	r3, [r3, #1]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fb7c 	bl	8005dd0 <RTC_ByteToBcd2>
 80056d8:	4603      	mov	r3, r0
 80056da:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80056dc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	789b      	ldrb	r3, [r3, #2]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fb74 	bl	8005dd0 <RTC_ByteToBcd2>
 80056e8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056ea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e00e      	b.n	8005718 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	78db      	ldrb	r3, [r3, #3]
 80056fe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	785b      	ldrb	r3, [r3, #1]
 8005704:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005706:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800570c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005718:	4b16      	ldr	r3, [pc, #88]	@ (8005774 <HAL_RTC_SetDate+0x108>)
 800571a:	22ca      	movs	r2, #202	@ 0xca
 800571c:	625a      	str	r2, [r3, #36]	@ 0x24
 800571e:	4b15      	ldr	r3, [pc, #84]	@ (8005774 <HAL_RTC_SetDate+0x108>)
 8005720:	2253      	movs	r2, #83	@ 0x53
 8005722:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fad9 	bl	8005cdc <RTC_EnterInitMode>
 800572a:	4603      	mov	r3, r0
 800572c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800572e:	7cfb      	ldrb	r3, [r7, #19]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10b      	bne.n	800574c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8005734:	4a0f      	ldr	r2, [pc, #60]	@ (8005774 <HAL_RTC_SetDate+0x108>)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800573c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005740:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fb06 	bl	8005d54 <RTC_ExitInitMode>
 8005748:	4603      	mov	r3, r0
 800574a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800574c:	4b09      	ldr	r3, [pc, #36]	@ (8005774 <HAL_RTC_SetDate+0x108>)
 800574e:	22ff      	movs	r2, #255	@ 0xff
 8005750:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005752:	7cfb      	ldrb	r3, [r7, #19]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d103      	bne.n	8005760 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8005768:	7cfb      	ldrb	r3, [r7, #19]
}
 800576a:	4618      	mov	r0, r3
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	bd90      	pop	{r4, r7, pc}
 8005772:	bf00      	nop
 8005774:	46007800 	.word	0x46007800

08005778 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8005784:	4b22      	ldr	r3, [pc, #136]	@ (8005810 <HAL_RTC_GetDate+0x98>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800578c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005790:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	b2da      	uxtb	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	0a1b      	lsrs	r3, r3, #8
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	f003 031f 	and.w	r3, r3, #31
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	0b5b      	lsrs	r3, r3, #13
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d11a      	bne.n	8005806 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	78db      	ldrb	r3, [r3, #3]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fb1b 	bl	8005e10 <RTC_Bcd2ToByte>
 80057da:	4603      	mov	r3, r0
 80057dc:	461a      	mov	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fb12 	bl	8005e10 <RTC_Bcd2ToByte>
 80057ec:	4603      	mov	r3, r0
 80057ee:	461a      	mov	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	789b      	ldrb	r3, [r3, #2]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fb09 	bl	8005e10 <RTC_Bcd2ToByte>
 80057fe:	4603      	mov	r3, r0
 8005800:	461a      	mov	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	46007800 	.word	0x46007800

08005814 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005814:	b590      	push	{r4, r7, lr}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_RTC_SetAlarm_IT+0x1e>
 800582e:	2302      	movs	r3, #2
 8005830:	e0ea      	b.n	8005a08 <HAL_RTC_SetAlarm_IT+0x1f4>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2202      	movs	r2, #2
 800583e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                 (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif /* USE_FULL_ASSERT */

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005842:	4b73      	ldr	r3, [pc, #460]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800584a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005852:	d05c      	beq.n	800590e <HAL_RTC_SetAlarm_IT+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d136      	bne.n	80058c8 <HAL_RTC_SetAlarm_IT+0xb4>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800585a:	4b6d      	ldr	r3, [pc, #436]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2200      	movs	r2, #0
 800586a:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f000 faad 	bl	8005dd0 <RTC_ByteToBcd2>
 8005876:	4603      	mov	r3, r0
 8005878:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	4618      	mov	r0, r3
 8005880:	f000 faa6 	bl	8005dd0 <RTC_ByteToBcd2>
 8005884:	4603      	mov	r3, r0
 8005886:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005888:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	789b      	ldrb	r3, [r3, #2]
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fa9e 	bl	8005dd0 <RTC_ByteToBcd2>
 8005894:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005896:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	78db      	ldrb	r3, [r3, #3]
 800589e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058a0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fa90 	bl	8005dd0 <RTC_ByteToBcd2>
 80058b0:	4603      	mov	r3, r0
 80058b2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058b4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058bc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]
 80058c6:	e022      	b.n	800590e <HAL_RTC_SetAlarm_IT+0xfa>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80058c8:	4b51      	ldr	r3, [pc, #324]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d102      	bne.n	80058da <HAL_RTC_SetAlarm_IT+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2200      	movs	r2, #0
 80058d8:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058e6:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058ec:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	78db      	ldrb	r3, [r3, #3]
 80058f2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058f4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058fc:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058fe:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005904:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
    }
  }


  /* Configure the Alarm registers */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005916:	d137      	bne.n	8005988 <HAL_RTC_SetAlarm_IT+0x174>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005918:	4b3d      	ldr	r3, [pc, #244]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800591e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005922:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005924:	4b3a      	ldr	r3, [pc, #232]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005926:	2201      	movs	r2, #1
 8005928:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005930:	d107      	bne.n	8005942 <HAL_RTC_SetAlarm_IT+0x12e>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	4935      	ldr	r1, [pc, #212]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800593c:	4313      	orrs	r3, r2
 800593e:	644b      	str	r3, [r1, #68]	@ 0x44
 8005940:	e006      	b.n	8005950 <HAL_RTC_SetAlarm_IT+0x13c>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005942:	4a33      	ldr	r2, [pc, #204]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005948:	4a31      	ldr	r2, [pc, #196]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005950:	4a2f      	ldr	r2, [pc, #188]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	6713      	str	r3, [r2, #112]	@ 0x70

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595c:	2b01      	cmp	r3, #1
 800595e:	d106      	bne.n	800596e <HAL_RTC_SetAlarm_IT+0x15a>
    {
      /* Configure the  Alarm A output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8005960:	4b2b      	ldr	r3, [pc, #172]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	4a2a      	ldr	r2, [pc, #168]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005966:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800596a:	6193      	str	r3, [r2, #24]
 800596c:	e005      	b.n	800597a <HAL_RTC_SetAlarm_IT+0x166>
    }
    else
    {
      /* Disable the  Alarm A output clear*/
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 800596e:	4b28      	ldr	r3, [pc, #160]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	4a27      	ldr	r2, [pc, #156]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005974:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8005978:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800597a:	4b25      	ldr	r3, [pc, #148]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	4a24      	ldr	r2, [pc, #144]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005980:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8005984:	6193      	str	r3, [r2, #24]
 8005986:	e036      	b.n	80059f6 <HAL_RTC_SetAlarm_IT+0x1e2>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005988:	4b21      	ldr	r3, [pc, #132]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	4a20      	ldr	r2, [pc, #128]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800598e:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8005992:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005994:	4b1e      	ldr	r3, [pc, #120]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005996:	2202      	movs	r2, #2
 8005998:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059a0:	d107      	bne.n	80059b2 <HAL_RTC_SetAlarm_IT+0x19e>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	699a      	ldr	r2, [r3, #24]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	4919      	ldr	r1, [pc, #100]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80059b0:	e006      	b.n	80059c0 <HAL_RTC_SetAlarm_IT+0x1ac>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80059b2:	4a17      	ldr	r2, [pc, #92]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80059b8:	4a15      	ldr	r2, [pc, #84]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80059c0:	4a13      	ldr	r2, [pc, #76]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	6753      	str	r3, [r2, #116]	@ 0x74

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d106      	bne.n	80059de <HAL_RTC_SetAlarm_IT+0x1ca>
    {
      /* Configure the  Alarm B Output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 80059d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	4a0e      	ldr	r2, [pc, #56]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80059d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059da:	6193      	str	r3, [r2, #24]
 80059dc:	e005      	b.n	80059ea <HAL_RTC_SetAlarm_IT+0x1d6>
    }
    else
    {
      /* Disable the  Alarm B Output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 80059de:	4b0c      	ldr	r3, [pc, #48]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	4a0b      	ldr	r2, [pc, #44]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80059e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059e8:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80059ea:	4b09      	ldr	r3, [pc, #36]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	4a08      	ldr	r2, [pc, #32]	@ (8005a10 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80059f0:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80059f4:	6193      	str	r3, [r2, #24]
  }


  hrtc->State = HAL_RTC_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd90      	pop	{r4, r7, pc}
 8005a10:	46007800 	.word	0x46007800

08005a14 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_RTC_DeactivateAlarm+0x18>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e02d      	b.n	8005a88 <HAL_RTC_DeactivateAlarm+0x74>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* In case of interrupt mode is used, the interrupt source must disabled */
  if (Alarm == RTC_ALARM_A)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a42:	d10c      	bne.n	8005a5e <HAL_RTC_DeactivateAlarm+0x4a>
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005a44:	4b13      	ldr	r3, [pc, #76]	@ (8005a94 <HAL_RTC_DeactivateAlarm+0x80>)
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	4a12      	ldr	r2, [pc, #72]	@ (8005a94 <HAL_RTC_DeactivateAlarm+0x80>)
 8005a4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a4e:	6193      	str	r3, [r2, #24]
    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005a50:	4b10      	ldr	r3, [pc, #64]	@ (8005a94 <HAL_RTC_DeactivateAlarm+0x80>)
 8005a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a54:	4a0f      	ldr	r2, [pc, #60]	@ (8005a94 <HAL_RTC_DeactivateAlarm+0x80>)
 8005a56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a5c:	e00b      	b.n	8005a76 <HAL_RTC_DeactivateAlarm+0x62>
  }
  else
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a94 <HAL_RTC_DeactivateAlarm+0x80>)
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	4a0c      	ldr	r2, [pc, #48]	@ (8005a94 <HAL_RTC_DeactivateAlarm+0x80>)
 8005a64:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8005a68:	6193      	str	r3, [r2, #24]
    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a94 <HAL_RTC_DeactivateAlarm+0x80>)
 8005a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a6e:	4a09      	ldr	r2, [pc, #36]	@ (8005a94 <HAL_RTC_DeactivateAlarm+0x80>)
 8005a70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }


  hrtc->State = HAL_RTC_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	46007800 	.word	0x46007800

08005a98 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(const RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm,
                                   uint32_t Format)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aac:	d141      	bne.n	8005b32 <HAL_RTC_GetAlarm+0x9a>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

    tmpreg = READ_REG(RTC->ALRMAR);
 8005ab6:	4b56      	ldr	r3, [pc, #344]	@ (8005c10 <HAL_RTC_GetAlarm+0x178>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aba:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8005abc:	4b54      	ldr	r3, [pc, #336]	@ (8005c10 <HAL_RTC_GetAlarm+0x178>)
 8005abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005ac4:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	0a1b      	lsrs	r3, r3, #8
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	0d9b      	lsrs	r3, r3, #22
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	0e1b      	lsrs	r3, r3, #24
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	615a      	str	r2, [r3, #20]
 8005b30:	e040      	b.n	8005bb4 <HAL_RTC_GetAlarm+0x11c>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b38:	62da      	str	r2, [r3, #44]	@ 0x2c

    tmpreg = READ_REG(RTC->ALRMBR);
 8005b3a:	4b35      	ldr	r3, [pc, #212]	@ (8005c10 <HAL_RTC_GetAlarm+0x178>)
 8005b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b3e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005b40:	4b33      	ldr	r3, [pc, #204]	@ (8005c10 <HAL_RTC_GetAlarm+0x178>)
 8005b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005b48:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	0a1b      	lsrs	r3, r3, #8
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	0d9b      	lsrs	r3, r3, #22
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	0e1b      	lsrs	r3, r3, #24
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d125      	bne.n	8005c06 <HAL_RTC_GetAlarm+0x16e>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f926 	bl	8005e10 <RTC_Bcd2ToByte>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	785b      	ldrb	r3, [r3, #1]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 f91d 	bl	8005e10 <RTC_Bcd2ToByte>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	461a      	mov	r2, r3
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	789b      	ldrb	r3, [r3, #2]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 f914 	bl	8005e10 <RTC_Bcd2ToByte>
 8005be8:	4603      	mov	r3, r0
 8005bea:	461a      	mov	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 f90a 	bl	8005e10 <RTC_Bcd2ToByte>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	461a      	mov	r2, r3
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	46007800 	.word	0x46007800

08005c14 <HAL_RTC_AlarmIRQHandler>:
  * @note   Alarm non-secure is available in non-secure driver.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);
 8005c1c:	4b10      	ldr	r3, [pc, #64]	@ (8005c60 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c20:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_RTC_AlarmIRQHandler+0x24>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c60 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f816 	bl	8005c64 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d005      	beq.n	8005c4e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005c42:	4b07      	ldr	r3, [pc, #28]	@ (8005c60 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8005c44:	2202      	movs	r2, #2
 8005c46:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f92b 	bl	8005ea4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	46007800 	.word	0x46007800

08005c64 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A secure secure callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the secure secure callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005c80:	4b15      	ldr	r3, [pc, #84]	@ (8005cd8 <HAL_RTC_WaitForSynchro+0x60>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	4a14      	ldr	r2, [pc, #80]	@ (8005cd8 <HAL_RTC_WaitForSynchro+0x60>)
 8005c86:	f023 0320 	bic.w	r3, r3, #32
 8005c8a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005c8c:	f7fc fa22 	bl	80020d4 <HAL_GetTick>
 8005c90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005c92:	e013      	b.n	8005cbc <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c94:	f7fc fa1e 	bl	80020d4 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ca2:	d90b      	bls.n	8005cbc <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd8 <HAL_RTC_WaitForSynchro+0x60>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10c      	bne.n	8005cca <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e008      	b.n	8005cce <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005cbc:	4b06      	ldr	r3, [pc, #24]	@ (8005cd8 <HAL_RTC_WaitForSynchro+0x60>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0e5      	beq.n	8005c94 <HAL_RTC_WaitForSynchro+0x1c>
 8005cc8:	e000      	b.n	8005ccc <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8005cca:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	46007800 	.word	0x46007800

08005cdc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005ce8:	4b19      	ldr	r3, [pc, #100]	@ (8005d50 <RTC_EnterInitMode+0x74>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d128      	bne.n	8005d46 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005cf4:	4b16      	ldr	r3, [pc, #88]	@ (8005d50 <RTC_EnterInitMode+0x74>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	4a15      	ldr	r2, [pc, #84]	@ (8005d50 <RTC_EnterInitMode+0x74>)
 8005cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfe:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005d00:	f7fc f9e8 	bl	80020d4 <HAL_GetTick>
 8005d04:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d06:	e013      	b.n	8005d30 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005d08:	f7fc f9e4 	bl	80020d4 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d16:	d90b      	bls.n	8005d30 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005d18:	4b0d      	ldr	r3, [pc, #52]	@ (8005d50 <RTC_EnterInitMode+0x74>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10f      	bne.n	8005d44 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d30:	4b07      	ldr	r3, [pc, #28]	@ (8005d50 <RTC_EnterInitMode+0x74>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <RTC_EnterInitMode+0x6a>
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d1e2      	bne.n	8005d08 <RTC_EnterInitMode+0x2c>
 8005d42:	e000      	b.n	8005d46 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8005d44:	bf00      	nop
        }
      }
    }
  }

  return status;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	46007800 	.word	0x46007800

08005d54 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005d60:	4b1a      	ldr	r3, [pc, #104]	@ (8005dcc <RTC_ExitInitMode+0x78>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	4a19      	ldr	r2, [pc, #100]	@ (8005dcc <RTC_ExitInitMode+0x78>)
 8005d66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d6a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005d6c:	4b17      	ldr	r3, [pc, #92]	@ (8005dcc <RTC_ExitInitMode+0x78>)
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10c      	bne.n	8005d92 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff ff7d 	bl	8005c78 <HAL_RTC_WaitForSynchro>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01e      	beq.n	8005dc2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2203      	movs	r2, #3
 8005d88:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	73fb      	strb	r3, [r7, #15]
 8005d90:	e017      	b.n	8005dc2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d92:	4b0e      	ldr	r3, [pc, #56]	@ (8005dcc <RTC_ExitInitMode+0x78>)
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	4a0d      	ldr	r2, [pc, #52]	@ (8005dcc <RTC_ExitInitMode+0x78>)
 8005d98:	f023 0320 	bic.w	r3, r3, #32
 8005d9c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff ff6a 	bl	8005c78 <HAL_RTC_WaitForSynchro>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2203      	movs	r2, #3
 8005dae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005db6:	4b05      	ldr	r3, [pc, #20]	@ (8005dcc <RTC_ExitInitMode+0x78>)
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	4a04      	ldr	r2, [pc, #16]	@ (8005dcc <RTC_ExitInitMode+0x78>)
 8005dbc:	f043 0320 	orr.w	r3, r3, #32
 8005dc0:	6193      	str	r3, [r2, #24]
  }
  return status;
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	46007800 	.word	0x46007800

08005dd0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8005dde:	79fb      	ldrb	r3, [r7, #7]
 8005de0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005de2:	e005      	b.n	8005df0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3301      	adds	r3, #1
 8005de8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8005dea:	7afb      	ldrb	r3, [r7, #11]
 8005dec:	3b0a      	subs	r3, #10
 8005dee:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005df0:	7afb      	ldrb	r3, [r7, #11]
 8005df2:	2b09      	cmp	r3, #9
 8005df4:	d8f6      	bhi.n	8005de4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	7afb      	ldrb	r3, [r7, #11]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	b2db      	uxtb	r3, r3
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	091b      	lsrs	r3, r3, #4
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	4413      	add	r3, r2
 8005e3a:	b2db      	uxtb	r3, r3
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e019      	b.n	8005e92 <HAL_RTCEx_DeactivateWakeUpTimer+0x4a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8005e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ea0 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	4a0b      	ldr	r2, [pc, #44]	@ (8005ea0 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 8005e74:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 8005e78:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e7a:	4b09      	ldr	r3, [pc, #36]	@ (8005ea0 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 8005e7c:	22ff      	movs	r2, #255	@ 0xff
 8005e7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	46007800 	.word	0x46007800

08005ea4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	4910      	ldr	r1, [pc, #64]	@ (8005f0c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	490c      	ldr	r1, [pc, #48]	@ (8005f10 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f10 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	6919      	ldr	r1, [r3, #16]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	041b      	lsls	r3, r3, #16
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	4905      	ldr	r1, [pc, #20]	@ (8005f10 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	46007800 	.word	0x46007800
 8005f10:	46007c00 	.word	0x46007c00

08005f14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e0fb      	b.n	800611e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a7f      	ldr	r2, [pc, #508]	@ (8006128 <HAL_SPI_Init+0x214>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d004      	beq.n	8005f3a <HAL_SPI_Init+0x26>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a7d      	ldr	r2, [pc, #500]	@ (800612c <HAL_SPI_Init+0x218>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	e000      	b.n	8005f3c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8005f3a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a78      	ldr	r2, [pc, #480]	@ (8006128 <HAL_SPI_Init+0x214>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d004      	beq.n	8005f56 <HAL_SPI_Init+0x42>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a76      	ldr	r2, [pc, #472]	@ (800612c <HAL_SPI_Init+0x218>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d105      	bne.n	8005f62 <HAL_SPI_Init+0x4e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	2b0f      	cmp	r3, #15
 8005f5c:	d901      	bls.n	8005f62 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e0dd      	b.n	800611e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fe76 	bl	8006c54 <SPI_GetPacketSize>
 8005f68:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a6e      	ldr	r2, [pc, #440]	@ (8006128 <HAL_SPI_Init+0x214>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d004      	beq.n	8005f7e <HAL_SPI_Init+0x6a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a6c      	ldr	r2, [pc, #432]	@ (800612c <HAL_SPI_Init+0x218>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d102      	bne.n	8005f84 <HAL_SPI_Init+0x70>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d816      	bhi.n	8005fb2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005f88:	4a69      	ldr	r2, [pc, #420]	@ (8006130 <HAL_SPI_Init+0x21c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00e      	beq.n	8005fac <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a68      	ldr	r2, [pc, #416]	@ (8006134 <HAL_SPI_Init+0x220>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d009      	beq.n	8005fac <HAL_SPI_Init+0x98>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a66      	ldr	r2, [pc, #408]	@ (8006138 <HAL_SPI_Init+0x224>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <HAL_SPI_Init+0x98>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a65      	ldr	r2, [pc, #404]	@ (800613c <HAL_SPI_Init+0x228>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d104      	bne.n	8005fb6 <HAL_SPI_Init+0xa2>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b10      	cmp	r3, #16
 8005fb0:	d901      	bls.n	8005fb6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e0b3      	b.n	800611e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fb fe2a 	bl	8001c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005ff2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ffc:	d119      	bne.n	8006032 <HAL_SPI_Init+0x11e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006006:	d103      	bne.n	8006010 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10c      	bne.n	8006032 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800601c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006020:	d107      	bne.n	8006032 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006030:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00f      	beq.n	800605e <HAL_SPI_Init+0x14a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	2b06      	cmp	r3, #6
 8006044:	d90b      	bls.n	800605e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	e007      	b.n	800606e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800606c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006076:	431a      	orrs	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006080:	ea42 0103 	orr.w	r1, r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006098:	431a      	orrs	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	431a      	orrs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	431a      	orrs	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	431a      	orrs	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060da:	ea42 0103 	orr.w	r1, r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	46002000 	.word	0x46002000
 800612c:	56002000 	.word	0x56002000
 8006130:	40013000 	.word	0x40013000
 8006134:	50013000 	.word	0x50013000
 8006138:	40003800 	.word	0x40003800
 800613c:	50003800 	.word	0x50003800

08006140 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	603b      	str	r3, [r7, #0]
 800614c:	4613      	mov	r3, r2
 800614e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3320      	adds	r3, #32
 8006156:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a90      	ldr	r2, [pc, #576]	@ (80063a0 <HAL_SPI_Transmit+0x260>)
 800615e:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006160:	f7fb ffb8 	bl	80020d4 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b01      	cmp	r3, #1
 8006170:	d001      	beq.n	8006176 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8006172:	2302      	movs	r3, #2
 8006174:	e1f4      	b.n	8006560 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_SPI_Transmit+0x42>
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e1ec      	b.n	8006560 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_SPI_Transmit+0x54>
 8006190:	2302      	movs	r3, #2
 8006192:	e1e5      	b.n	8006560 <HAL_SPI_Transmit+0x420>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2203      	movs	r2, #3
 80061a0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	88fa      	ldrh	r2, [r7, #6]
 80061b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	88fa      	ldrh	r2, [r7, #6]
 80061be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80061ec:	d108      	bne.n	8006200 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	e009      	b.n	8006214 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006212:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	0c1b      	lsrs	r3, r3, #16
 800621c:	041b      	lsls	r3, r3, #16
 800621e:	88f9      	ldrh	r1, [r7, #6]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	6812      	ldr	r2, [r2, #0]
 8006224:	430b      	orrs	r3, r1
 8006226:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10c      	bne.n	8006260 <HAL_SPI_Transmit+0x120>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800624e:	d107      	bne.n	8006260 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800625e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b0f      	cmp	r3, #15
 8006266:	d95b      	bls.n	8006320 <HAL_SPI_Transmit+0x1e0>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a4d      	ldr	r2, [pc, #308]	@ (80063a4 <HAL_SPI_Transmit+0x264>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d04f      	beq.n	8006312 <HAL_SPI_Transmit+0x1d2>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a4c      	ldr	r2, [pc, #304]	@ (80063a8 <HAL_SPI_Transmit+0x268>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d04a      	beq.n	8006312 <HAL_SPI_Transmit+0x1d2>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a4a      	ldr	r2, [pc, #296]	@ (80063ac <HAL_SPI_Transmit+0x26c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d045      	beq.n	8006312 <HAL_SPI_Transmit+0x1d2>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a49      	ldr	r2, [pc, #292]	@ (80063b0 <HAL_SPI_Transmit+0x270>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d147      	bne.n	8006320 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006290:	e03f      	b.n	8006312 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b02      	cmp	r3, #2
 800629e:	d114      	bne.n	80062ca <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6812      	ldr	r2, [r2, #0]
 80062aa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062b0:	1d1a      	adds	r2, r3, #4
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80062c8:	e023      	b.n	8006312 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ca:	f7fb ff03 	bl	80020d4 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d803      	bhi.n	80062e2 <HAL_SPI_Transmit+0x1a2>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d102      	bne.n	80062e8 <HAL_SPI_Transmit+0x1a8>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d114      	bne.n	8006312 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fbe5 	bl	8006ab8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e126      	b.n	8006560 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1b9      	bne.n	8006292 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800631e:	e0f9      	b.n	8006514 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	2b07      	cmp	r3, #7
 8006326:	f240 80ee 	bls.w	8006506 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800632a:	e067      	b.n	80063fc <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b02      	cmp	r3, #2
 8006338:	d13c      	bne.n	80063b4 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b01      	cmp	r3, #1
 8006344:	d918      	bls.n	8006378 <HAL_SPI_Transmit+0x238>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d014      	beq.n	8006378 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6812      	ldr	r2, [r2, #0]
 8006358:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800635e:	1d1a      	adds	r2, r3, #4
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b02      	subs	r3, #2
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006376:	e041      	b.n	80063fc <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800637c:	881a      	ldrh	r2, [r3, #0]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006386:	1c9a      	adds	r2, r3, #2
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800639e:	e02d      	b.n	80063fc <HAL_SPI_Transmit+0x2bc>
 80063a0:	46002000 	.word	0x46002000
 80063a4:	40013000 	.word	0x40013000
 80063a8:	50013000 	.word	0x50013000
 80063ac:	40003800 	.word	0x40003800
 80063b0:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063b4:	f7fb fe8e 	bl	80020d4 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d803      	bhi.n	80063cc <HAL_SPI_Transmit+0x28c>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d102      	bne.n	80063d2 <HAL_SPI_Transmit+0x292>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d114      	bne.n	80063fc <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 fb70 	bl	8006ab8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e0b1      	b.n	8006560 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006402:	b29b      	uxth	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d191      	bne.n	800632c <HAL_SPI_Transmit+0x1ec>
 8006408:	e084      	b.n	8006514 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b02      	cmp	r3, #2
 8006416:	d152      	bne.n	80064be <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b03      	cmp	r3, #3
 8006422:	d918      	bls.n	8006456 <HAL_SPI_Transmit+0x316>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006428:	2b40      	cmp	r3, #64	@ 0x40
 800642a:	d914      	bls.n	8006456 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800643c:	1d1a      	adds	r2, r3, #4
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b04      	subs	r3, #4
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006454:	e057      	b.n	8006506 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b01      	cmp	r3, #1
 8006460:	d917      	bls.n	8006492 <HAL_SPI_Transmit+0x352>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006466:	2b00      	cmp	r3, #0
 8006468:	d013      	beq.n	8006492 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800646e:	881a      	ldrh	r2, [r3, #0]
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006478:	1c9a      	adds	r2, r3, #2
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b02      	subs	r3, #2
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006490:	e039      	b.n	8006506 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3320      	adds	r3, #32
 800649c:	7812      	ldrb	r2, [r2, #0]
 800649e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80064bc:	e023      	b.n	8006506 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064be:	f7fb fe09 	bl	80020d4 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d803      	bhi.n	80064d6 <HAL_SPI_Transmit+0x396>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d4:	d102      	bne.n	80064dc <HAL_SPI_Transmit+0x39c>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d114      	bne.n	8006506 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 faeb 	bl	8006ab8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e02c      	b.n	8006560 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	f47f af7b 	bne.w	800640a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	2108      	movs	r1, #8
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 fb6a 	bl	8006bf8 <SPI_WaitOnFlagUntilTimeout>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d007      	beq.n	800653a <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006530:	f043 0220 	orr.w	r2, r3, #32
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f000 fabc 	bl	8006ab8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800655e:	2300      	movs	r3, #0
  }
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	4613      	mov	r3, r2
 8006576:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	b29b      	uxth	r3, r3
 8006580:	3301      	adds	r3, #1
 8006582:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3330      	adds	r3, #48	@ 0x30
 800658a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a96      	ldr	r2, [pc, #600]	@ (80067ec <HAL_SPI_Receive+0x284>)
 8006592:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006594:	f7fb fd9e 	bl	80020d4 <HAL_GetTick>
 8006598:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d001      	beq.n	80065aa <HAL_SPI_Receive+0x42>
  {
    return HAL_BUSY;
 80065a6:	2302      	movs	r3, #2
 80065a8:	e274      	b.n	8006a94 <HAL_SPI_Receive+0x52c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <HAL_SPI_Receive+0x4e>
 80065b0:	88fb      	ldrh	r3, [r7, #6]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_SPI_Receive+0x52>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e26c      	b.n	8006a94 <HAL_SPI_Receive+0x52c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_SPI_Receive+0x60>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e265      	b.n	8006a94 <HAL_SPI_Receive+0x52c>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2204      	movs	r2, #4
 80065d4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	88fa      	ldrh	r2, [r7, #6]
 80065ea:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	88fa      	ldrh	r2, [r7, #6]
 80065f2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006620:	d108      	bne.n	8006634 <HAL_SPI_Receive+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	e009      	b.n	8006648 <HAL_SPI_Receive+0xe0>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006646:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	0c1b      	lsrs	r3, r3, #16
 8006650:	041b      	lsls	r3, r3, #16
 8006652:	88f9      	ldrh	r1, [r7, #6]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	430b      	orrs	r3, r1
 800665a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10c      	bne.n	8006694 <HAL_SPI_Receive+0x12c>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006682:	d107      	bne.n	8006694 <HAL_SPI_Receive+0x12c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006692:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	2b0f      	cmp	r3, #15
 800669a:	f240 8081 	bls.w	80067a0 <HAL_SPI_Receive+0x238>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a53      	ldr	r2, [pc, #332]	@ (80067f0 <HAL_SPI_Receive+0x288>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d074      	beq.n	8006792 <HAL_SPI_Receive+0x22a>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a51      	ldr	r2, [pc, #324]	@ (80067f4 <HAL_SPI_Receive+0x28c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d06f      	beq.n	8006792 <HAL_SPI_Receive+0x22a>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a50      	ldr	r2, [pc, #320]	@ (80067f8 <HAL_SPI_Receive+0x290>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d06a      	beq.n	8006792 <HAL_SPI_Receive+0x22a>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a4e      	ldr	r2, [pc, #312]	@ (80067fc <HAL_SPI_Receive+0x294>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d16c      	bne.n	80067a0 <HAL_SPI_Receive+0x238>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80066c6:	e064      	b.n	8006792 <HAL_SPI_Receive+0x22a>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d114      	bne.n	8006708 <HAL_SPI_Receive+0x1a0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80066e8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066ee:	1d1a      	adds	r2, r3, #4
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006706:	e044      	b.n	8006792 <HAL_SPI_Receive+0x22a>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800670e:	b29b      	uxth	r3, r3
 8006710:	8bfa      	ldrh	r2, [r7, #30]
 8006712:	429a      	cmp	r2, r3
 8006714:	d919      	bls.n	800674a <HAL_SPI_Receive+0x1e2>
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d014      	beq.n	800674a <HAL_SPI_Receive+0x1e2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006728:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800672a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006730:	1d1a      	adds	r2, r3, #4
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800673c:	b29b      	uxth	r3, r3
 800673e:	3b01      	subs	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006748:	e023      	b.n	8006792 <HAL_SPI_Receive+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800674a:	f7fb fcc3 	bl	80020d4 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d803      	bhi.n	8006762 <HAL_SPI_Receive+0x1fa>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006760:	d102      	bne.n	8006768 <HAL_SPI_Receive+0x200>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d114      	bne.n	8006792 <HAL_SPI_Receive+0x22a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f9a5 	bl	8006ab8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006774:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e180      	b.n	8006a94 <HAL_SPI_Receive+0x52c>
    while (hspi->RxXferCount > 0UL)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d194      	bne.n	80066c8 <HAL_SPI_Receive+0x160>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800679e:	e166      	b.n	8006a6e <HAL_SPI_Receive+0x506>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	2b07      	cmp	r3, #7
 80067a6:	f240 815b 	bls.w	8006a60 <HAL_SPI_Receive+0x4f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80067aa:	e099      	b.n	80068e0 <HAL_SPI_Receive+0x378>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d11e      	bne.n	8006800 <HAL_SPI_Receive+0x298>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	8812      	ldrh	r2, [r2, #0]
 80067ca:	b292      	uxth	r2, r2
 80067cc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067d2:	1c9a      	adds	r2, r3, #2
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80067ea:	e079      	b.n	80068e0 <HAL_SPI_Receive+0x378>
 80067ec:	46002000 	.word	0x46002000
 80067f0:	40013000 	.word	0x40013000
 80067f4:	50013000 	.word	0x50013000
 80067f8:	40003800 	.word	0x40003800
 80067fc:	50003800 	.word	0x50003800
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006806:	b29b      	uxth	r3, r3
 8006808:	8bfa      	ldrh	r2, [r7, #30]
 800680a:	429a      	cmp	r2, r3
 800680c:	d924      	bls.n	8006858 <HAL_SPI_Receive+0x2f0>
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01f      	beq.n	8006858 <HAL_SPI_Receive+0x2f0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	8812      	ldrh	r2, [r2, #0]
 8006820:	b292      	uxth	r2, r2
 8006822:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006828:	1c9a      	adds	r2, r3, #2
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	8812      	ldrh	r2, [r2, #0]
 8006836:	b292      	uxth	r2, r2
 8006838:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800683e:	1c9a      	adds	r2, r3, #2
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800684a:	b29b      	uxth	r3, r3
 800684c:	3b02      	subs	r3, #2
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006856:	e043      	b.n	80068e0 <HAL_SPI_Receive+0x378>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800685e:	b29b      	uxth	r3, r3
 8006860:	2b01      	cmp	r3, #1
 8006862:	d119      	bne.n	8006898 <HAL_SPI_Receive+0x330>
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d014      	beq.n	8006898 <HAL_SPI_Receive+0x330>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	8812      	ldrh	r2, [r2, #0]
 8006876:	b292      	uxth	r2, r2
 8006878:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800687e:	1c9a      	adds	r2, r3, #2
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006896:	e023      	b.n	80068e0 <HAL_SPI_Receive+0x378>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006898:	f7fb fc1c 	bl	80020d4 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d803      	bhi.n	80068b0 <HAL_SPI_Receive+0x348>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ae:	d102      	bne.n	80068b6 <HAL_SPI_Receive+0x34e>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d114      	bne.n	80068e0 <HAL_SPI_Receive+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f8fe 	bl	8006ab8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e0d9      	b.n	8006a94 <HAL_SPI_Receive+0x52c>
    while (hspi->RxXferCount > 0UL)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f47f af5f 	bne.w	80067ac <HAL_SPI_Receive+0x244>
 80068ee:	e0be      	b.n	8006a6e <HAL_SPI_Receive+0x506>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b01      	cmp	r3, #1
 8006904:	d117      	bne.n	8006936 <HAL_SPI_Receive+0x3ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006912:	7812      	ldrb	r2, [r2, #0]
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006934:	e094      	b.n	8006a60 <HAL_SPI_Receive+0x4f8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800693c:	b29b      	uxth	r3, r3
 800693e:	8bfa      	ldrh	r2, [r7, #30]
 8006940:	429a      	cmp	r2, r3
 8006942:	d946      	bls.n	80069d2 <HAL_SPI_Receive+0x46a>
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d041      	beq.n	80069d2 <HAL_SPI_Receive+0x46a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800695a:	7812      	ldrb	r2, [r2, #0]
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006976:	7812      	ldrb	r2, [r2, #0]
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006992:	7812      	ldrb	r2, [r2, #0]
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069ae:	7812      	ldrb	r2, [r2, #0]
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b04      	subs	r3, #4
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80069d0:	e046      	b.n	8006a60 <HAL_SPI_Receive+0x4f8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d81c      	bhi.n	8006a18 <HAL_SPI_Receive+0x4b0>
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d017      	beq.n	8006a18 <HAL_SPI_Receive+0x4b0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069f4:	7812      	ldrb	r2, [r2, #0]
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006a16:	e023      	b.n	8006a60 <HAL_SPI_Receive+0x4f8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a18:	f7fb fb5c 	bl	80020d4 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d803      	bhi.n	8006a30 <HAL_SPI_Receive+0x4c8>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2e:	d102      	bne.n	8006a36 <HAL_SPI_Receive+0x4ce>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d114      	bne.n	8006a60 <HAL_SPI_Receive+0x4f8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 f83e 	bl	8006ab8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e019      	b.n	8006a94 <HAL_SPI_Receive+0x52c>
    while (hspi->RxXferCount > 0UL)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f47f af41 	bne.w	80068f0 <HAL_SPI_Receive+0x388>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 f822 	bl	8006ab8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <HAL_SPI_Receive+0x52a>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e000      	b.n	8006a94 <HAL_SPI_Receive+0x52c>
  }
  else
  {
    return HAL_OK;
 8006a92:	2300      	movs	r3, #0
  }
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3720      	adds	r7, #32
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006aaa:	b2db      	uxtb	r3, r3
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0208 	orr.w	r2, r2, #8
 8006ad6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0210 	orr.w	r2, r2, #16
 8006ae6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0201 	bic.w	r2, r2, #1
 8006af6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6812      	ldr	r2, [r2, #0]
 8006b02:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689a      	ldr	r2, [r3, #8]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006b1a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	d014      	beq.n	8006b52 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00f      	beq.n	8006b52 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b38:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0220 	orr.w	r2, r2, #32
 8006b50:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d014      	beq.n	8006b88 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00f      	beq.n	8006b88 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b6e:	f043 0204 	orr.w	r2, r3, #4
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b86:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00f      	beq.n	8006bb2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b98:	f043 0201 	orr.w	r2, r3, #1
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bb0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00f      	beq.n	8006bdc <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bc2:	f043 0208 	orr.w	r2, r3, #8
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bda:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8006bec:	bf00      	nop
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	4613      	mov	r3, r2
 8006c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006c08:	e010      	b.n	8006c2c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c0a:	f7fb fa63 	bl	80020d4 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d803      	bhi.n	8006c22 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c20:	d102      	bne.n	8006c28 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e00f      	b.n	8006c4c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	695a      	ldr	r2, [r3, #20]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	4013      	ands	r3, r2
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	bf0c      	ite	eq
 8006c3c:	2301      	moveq	r3, #1
 8006c3e:	2300      	movne	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	79fb      	ldrb	r3, [r7, #7]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d0df      	beq.n	8006c0a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	3301      	adds	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	3307      	adds	r3, #7
 8006c72:	08db      	lsrs	r3, r3, #3
 8006c74:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	fb02 f303 	mul.w	r3, r2, r3
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d12e      	bne.n	8006cfe <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d101      	bne.n	8006cae <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8006caa:	2302      	movs	r3, #2
 8006cac:	e028      	b.n	8006d00 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0201 	bic.w	r2, r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8006cda:	ea42 0103 	orr.w	r1, r2, r3
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e000      	b.n	8006d00 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
  }
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <BoardInitPeriph>:
//{
//    SystemWakeupTimeCalibrated = true;
//}

void BoardInitPeriph( void )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af02      	add	r7, sp, #8
    /* Init the GPIO extender pins */
#if ( USE_POTENTIOMETER == 0 )
    GpioInit( &Led1, LED_1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
#endif
    GpioInit( &Led2, LED_2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8006d12:	2301      	movs	r3, #1
 8006d14:	9301      	str	r3, [sp, #4]
 8006d16:	2300      	movs	r3, #0
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	2100      	movs	r1, #0
 8006d20:	4812      	ldr	r0, [pc, #72]	@ (8006d6c <BoardInitPeriph+0x60>)
 8006d22:	f000 fb5f 	bl	80073e4 <GpioInit>
    GpioInit( &Led3, LED_3, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8006d26:	2301      	movs	r3, #1
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	2201      	movs	r2, #1
 8006d32:	2101      	movs	r1, #1
 8006d34:	480e      	ldr	r0, [pc, #56]	@ (8006d70 <BoardInitPeriph+0x64>)
 8006d36:	f000 fb55 	bl	80073e4 <GpioInit>
    GpioInit( &Led4, LED_4, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	2300      	movs	r3, #0
 8006d44:	2201      	movs	r2, #1
 8006d46:	2108      	movs	r1, #8
 8006d48:	480a      	ldr	r0, [pc, #40]	@ (8006d74 <BoardInitPeriph+0x68>)
 8006d4a:	f000 fb4b 	bl	80073e4 <GpioInit>

    // Switch LED 1, 2, 3, 4 OFF
#if ( USE_POTENTIOMETER == 0 )
    GpioWrite( &Led1, 0 );
#endif
    GpioWrite( &Led2, 0 );
 8006d4e:	2100      	movs	r1, #0
 8006d50:	4806      	ldr	r0, [pc, #24]	@ (8006d6c <BoardInitPeriph+0x60>)
 8006d52:	f000 fb86 	bl	8007462 <GpioWrite>
    GpioWrite( &Led3, 0 );
 8006d56:	2100      	movs	r1, #0
 8006d58:	4805      	ldr	r0, [pc, #20]	@ (8006d70 <BoardInitPeriph+0x64>)
 8006d5a:	f000 fb82 	bl	8007462 <GpioWrite>
    GpioWrite( &Led4, 0 );
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4804      	ldr	r0, [pc, #16]	@ (8006d74 <BoardInitPeriph+0x68>)
 8006d62:	f000 fb7e 	bl	8007462 <GpioWrite>
}
 8006d66:	bf00      	nop
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	200002c4 	.word	0x200002c4
 8006d70:	200002d0 	.word	0x200002d0
 8006d74:	200002dc 	.word	0x200002dc

08006d78 <BoardInitMcu>:

void BoardInitMcu( void )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af02      	add	r7, sp, #8
    if( McuInitialized == false )
 8006d7e:	4b10      	ldr	r3, [pc, #64]	@ (8006dc0 <BoardInitMcu+0x48>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	f083 0301 	eor.w	r3, r3, #1
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <BoardInitMcu+0x18>
#endif
//        HAL_Init( );

//        SystemClockConfig( );

        RtcInit( );
 8006d8c:	f000 fb7e 	bl	800748c <RtcInit>
//        SystemClockReConfig( );
    }

//    AdcInit( &Adc, POTI );

    SpiInit( &SX1276.Spi, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
 8006d90:	f04f 33ff 	mov.w	r3, #4294967295
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	2305      	movs	r3, #5
 8006d98:	2206      	movs	r2, #6
 8006d9a:	2107      	movs	r1, #7
 8006d9c:	4809      	ldr	r0, [pc, #36]	@ (8006dc4 <BoardInitMcu+0x4c>)
 8006d9e:	f001 f847 	bl	8007e30 <SpiInit>
    SX1276IoInit( );
 8006da2:	f001 f937 	bl	8008014 <SX1276IoInit>

    if( McuInitialized == false )
 8006da6:	4b06      	ldr	r3, [pc, #24]	@ (8006dc0 <BoardInitMcu+0x48>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	f083 0301 	eor.w	r3, r3, #1
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <BoardInitMcu+0x42>
    {
        McuInitialized = true;
 8006db4:	4b02      	ldr	r3, [pc, #8]	@ (8006dc0 <BoardInitMcu+0x48>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	701a      	strb	r2, [r3, #0]
//        if( GetBoardPowerSource( ) == BATTERY_POWER )
//        {
//            CalibrateSystemWakeupTime( );
//        }
    }
}
 8006dba:	bf00      	nop
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	200002e8 	.word	0x200002e8
 8006dc4:	20000508 	.word	0x20000508

08006dc8 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
    HAL_Delay( ms );
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7fb f98b 	bl	80020ec <HAL_Delay>
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <GpioMcuInit>:
#include "gpio-board.h"

static GpioIrqHandler *GpioIrq[16];

void GpioMcuInit( Gpio_t *obj, PinNames pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08c      	sub	sp, #48	@ 0x30
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	4608      	mov	r0, r1
 8006dea:	4611      	mov	r1, r2
 8006dec:	461a      	mov	r2, r3
 8006dee:	4603      	mov	r3, r0
 8006df0:	70fb      	strb	r3, [r7, #3]
 8006df2:	460b      	mov	r3, r1
 8006df4:	70bb      	strb	r3, [r7, #2]
 8006df6:	4613      	mov	r3, r2
 8006df8:	707b      	strb	r3, [r7, #1]
    GPIO_InitTypeDef GPIO_InitStructure;

    if( pin == NC )
 8006dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e02:	f000 80c3 	beq.w	8006f8c <GpioMcuInit+0x1ac>
    {
        return;
    }
    obj->pin = pin;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	78fa      	ldrb	r2, [r7, #3]
 8006e0a:	701a      	strb	r2, [r3, #0]
    obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f993 3000 	ldrsb.w	r3, [r3]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	2201      	movs	r2, #1
 8006e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	805a      	strh	r2, [r3, #2]

    if( ( obj->pin & 0xF0 ) == 0x00 )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f993 3000 	ldrsb.w	r3, [r3]
 8006e2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d112      	bne.n	8006e58 <GpioMcuInit+0x78>
    {
        obj->port = GPIOA;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a57      	ldr	r2, [pc, #348]	@ (8006f94 <GpioMcuInit+0x1b4>)
 8006e36:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE( );
 8006e38:	4b57      	ldr	r3, [pc, #348]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e3e:	4a56      	ldr	r2, [pc, #344]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006e40:	f043 0301 	orr.w	r3, r3, #1
 8006e44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006e48:	4b53      	ldr	r3, [pc, #332]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	61bb      	str	r3, [r7, #24]
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	e05f      	b.n	8006f18 <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x10 )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8006e5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e62:	2b10      	cmp	r3, #16
 8006e64:	d112      	bne.n	8006e8c <GpioMcuInit+0xac>
    {
        obj->port = GPIOB;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a4c      	ldr	r2, [pc, #304]	@ (8006f9c <GpioMcuInit+0x1bc>)
 8006e6a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOB_CLK_ENABLE( );
 8006e6c:	4b4a      	ldr	r3, [pc, #296]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e72:	4a49      	ldr	r2, [pc, #292]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006e74:	f043 0302 	orr.w	r3, r3, #2
 8006e78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006e7c:	4b46      	ldr	r3, [pc, #280]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	e045      	b.n	8006f18 <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x20 )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f993 3000 	ldrsb.w	r3, [r3]
 8006e92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d112      	bne.n	8006ec0 <GpioMcuInit+0xe0>
    {
        obj->port = GPIOC;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a40      	ldr	r2, [pc, #256]	@ (8006fa0 <GpioMcuInit+0x1c0>)
 8006e9e:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOC_CLK_ENABLE( );
 8006ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ea6:	4a3c      	ldr	r2, [pc, #240]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006ea8:	f043 0304 	orr.w	r3, r3, #4
 8006eac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006eb0:	4b39      	ldr	r3, [pc, #228]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	613b      	str	r3, [r7, #16]
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	e02b      	b.n	8006f18 <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x30 )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f993 3000 	ldrsb.w	r3, [r3]
 8006ec6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006eca:	2b30      	cmp	r3, #48	@ 0x30
 8006ecc:	d112      	bne.n	8006ef4 <GpioMcuInit+0x114>
    {
        obj->port = GPIOD;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a34      	ldr	r2, [pc, #208]	@ (8006fa4 <GpioMcuInit+0x1c4>)
 8006ed2:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOD_CLK_ENABLE( );
 8006ed4:	4b30      	ldr	r3, [pc, #192]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006eda:	4a2f      	ldr	r2, [pc, #188]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006edc:	f043 0308 	orr.w	r3, r3, #8
 8006ee0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	e011      	b.n	8006f18 <GpioMcuInit+0x138>
    }
    else
    {
        obj->port = GPIOH;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8006fa8 <GpioMcuInit+0x1c8>)
 8006ef8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOH_CLK_ENABLE( );
 8006efa:	4b27      	ldr	r3, [pc, #156]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f00:	4a25      	ldr	r2, [pc, #148]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006f0a:	4b23      	ldr	r3, [pc, #140]	@ (8006f98 <GpioMcuInit+0x1b8>)
 8006f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f14:	60bb      	str	r3, [r7, #8]
 8006f16:	68bb      	ldr	r3, [r7, #8]
    }

    GPIO_InitStructure.Pin =  obj->pinIndex ;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	885b      	ldrh	r3, [r3, #2]
 8006f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Pull = type;
 8006f1e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8006f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f24:	2302      	movs	r3, #2
 8006f26:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( mode == PIN_INPUT )
 8006f28:	78bb      	ldrb	r3, [r7, #2]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <GpioMcuInit+0x154>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	623b      	str	r3, [r7, #32]
 8006f32:	e01b      	b.n	8006f6c <GpioMcuInit+0x18c>
    }
    else if( mode == PIN_ANALOGIC )
 8006f34:	78bb      	ldrb	r3, [r7, #2]
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d102      	bne.n	8006f40 <GpioMcuInit+0x160>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	623b      	str	r3, [r7, #32]
 8006f3e:	e015      	b.n	8006f6c <GpioMcuInit+0x18c>
    }
    else if( mode == PIN_ALTERNATE_FCT )
 8006f40:	78bb      	ldrb	r3, [r7, #2]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d10a      	bne.n	8006f5c <GpioMcuInit+0x17c>
    {
        if( config == PIN_OPEN_DRAIN )
 8006f46:	787b      	ldrb	r3, [r7, #1]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d102      	bne.n	8006f52 <GpioMcuInit+0x172>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8006f4c:	2312      	movs	r3, #18
 8006f4e:	623b      	str	r3, [r7, #32]
 8006f50:	e001      	b.n	8006f56 <GpioMcuInit+0x176>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8006f52:	2302      	movs	r3, #2
 8006f54:	623b      	str	r3, [r7, #32]
        }
        GPIO_InitStructure.Alternate = value;
 8006f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f5a:	e007      	b.n	8006f6c <GpioMcuInit+0x18c>
    }
    else // mode ouptut
    {
        if( config == PIN_OPEN_DRAIN )
 8006f5c:	787b      	ldrb	r3, [r7, #1]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d102      	bne.n	8006f68 <GpioMcuInit+0x188>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8006f62:	2311      	movs	r3, #17
 8006f64:	623b      	str	r3, [r7, #32]
 8006f66:	e001      	b.n	8006f6c <GpioMcuInit+0x18c>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	623b      	str	r3, [r7, #32]
        }
    }

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f107 021c 	add.w	r2, r7, #28
 8006f74:	4611      	mov	r1, r2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fb fdec 	bl	8002b54 <HAL_GPIO_Init>

    // Sets initial output value
    if( mode == PIN_OUTPUT )
 8006f7c:	78bb      	ldrb	r3, [r7, #2]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d105      	bne.n	8006f8e <GpioMcuInit+0x1ae>
    {
        GpioMcuWrite( obj, value );
 8006f82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f953 	bl	8007230 <GpioMcuWrite>
 8006f8a:	e000      	b.n	8006f8e <GpioMcuInit+0x1ae>
        return;
 8006f8c:	bf00      	nop
    }
}
 8006f8e:	3730      	adds	r7, #48	@ 0x30
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	42020000 	.word	0x42020000
 8006f98:	46020c00 	.word	0x46020c00
 8006f9c:	42020400 	.word	0x42020400
 8006fa0:	42020800 	.word	0x42020800
 8006fa4:	42020c00 	.word	0x42020c00
 8006fa8:	42021c00 	.word	0x42021c00

08006fac <GpioMcuSetInterrupt>:

void GpioMcuSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08c      	sub	sp, #48	@ 0x30
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	72fb      	strb	r3, [r7, #11]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	72bb      	strb	r3, [r7, #10]
    uint32_t priority = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    IRQn_Type IRQnb = EXTI0_IRQn;
 8006fc2:	230b      	movs	r3, #11
 8006fc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    GPIO_InitTypeDef   GPIO_InitStructure;

    if( irqHandler == NULL )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 8123 	beq.w	8007216 <GpioMcuSetInterrupt+0x26a>
    {
        return;
    }

    GPIO_InitStructure.Pin =  obj->pinIndex;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	885b      	ldrh	r3, [r3, #2]
 8006fd4:	617b      	str	r3, [r7, #20]

    if( irqMode == IRQ_RISING_EDGE )
 8006fd6:	7afb      	ldrb	r3, [r7, #11]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d102      	bne.n	8006fe2 <GpioMcuSetInterrupt+0x36>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8006fdc:	4b90      	ldr	r3, [pc, #576]	@ (8007220 <GpioMcuSetInterrupt+0x274>)
 8006fde:	61bb      	str	r3, [r7, #24]
 8006fe0:	e007      	b.n	8006ff2 <GpioMcuSetInterrupt+0x46>
    }
    else if( irqMode == IRQ_FALLING_EDGE )
 8006fe2:	7afb      	ldrb	r3, [r7, #11]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d102      	bne.n	8006fee <GpioMcuSetInterrupt+0x42>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8006fe8:	4b8e      	ldr	r3, [pc, #568]	@ (8007224 <GpioMcuSetInterrupt+0x278>)
 8006fea:	61bb      	str	r3, [r7, #24]
 8006fec:	e001      	b.n	8006ff2 <GpioMcuSetInterrupt+0x46>
    }
    else
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006fee:	4b8e      	ldr	r3, [pc, #568]	@ (8007228 <GpioMcuSetInterrupt+0x27c>)
 8006ff0:	61bb      	str	r3, [r7, #24]
    }

    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f107 0214 	add.w	r2, r7, #20
 8007002:	4611      	mov	r1, r2
 8007004:	4618      	mov	r0, r3
 8007006:	f7fb fda5 	bl	8002b54 <HAL_GPIO_Init>

    switch( irqPriority )
 800700a:	7abb      	ldrb	r3, [r7, #10]
 800700c:	2b03      	cmp	r3, #3
 800700e:	d00f      	beq.n	8007030 <GpioMcuSetInterrupt+0x84>
 8007010:	2b03      	cmp	r3, #3
 8007012:	dc10      	bgt.n	8007036 <GpioMcuSetInterrupt+0x8a>
 8007014:	2b01      	cmp	r3, #1
 8007016:	dc02      	bgt.n	800701e <GpioMcuSetInterrupt+0x72>
 8007018:	2b00      	cmp	r3, #0
 800701a:	da03      	bge.n	8007024 <GpioMcuSetInterrupt+0x78>
 800701c:	e00b      	b.n	8007036 <GpioMcuSetInterrupt+0x8a>
 800701e:	2b02      	cmp	r3, #2
 8007020:	d003      	beq.n	800702a <GpioMcuSetInterrupt+0x7e>
 8007022:	e008      	b.n	8007036 <GpioMcuSetInterrupt+0x8a>
    {
    case IRQ_VERY_LOW_PRIORITY:
    case IRQ_LOW_PRIORITY:
        priority = 3;
 8007024:	2303      	movs	r3, #3
 8007026:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007028:	e008      	b.n	800703c <GpioMcuSetInterrupt+0x90>
    case IRQ_MEDIUM_PRIORITY:
        priority = 2;
 800702a:	2302      	movs	r3, #2
 800702c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800702e:	e005      	b.n	800703c <GpioMcuSetInterrupt+0x90>
    case IRQ_HIGH_PRIORITY:
        priority = 1;
 8007030:	2301      	movs	r3, #1
 8007032:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007034:	e002      	b.n	800703c <GpioMcuSetInterrupt+0x90>
    case IRQ_VERY_HIGH_PRIORITY:
    default:
        priority = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800703a:	bf00      	nop
    }

    switch( obj->pinIndex )		// PK: definicja EXTI rozszerzona do pełnych 16 przerwań
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	885b      	ldrh	r3, [r3, #2]
 8007040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007044:	f000 80cb 	beq.w	80071de <GpioMcuSetInterrupt+0x232>
 8007048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800704c:	f300 80cb 	bgt.w	80071e6 <GpioMcuSetInterrupt+0x23a>
 8007050:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007054:	f000 80bf 	beq.w	80071d6 <GpioMcuSetInterrupt+0x22a>
 8007058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800705c:	f300 80c3 	bgt.w	80071e6 <GpioMcuSetInterrupt+0x23a>
 8007060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007064:	f000 80b3 	beq.w	80071ce <GpioMcuSetInterrupt+0x222>
 8007068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800706c:	f300 80bb 	bgt.w	80071e6 <GpioMcuSetInterrupt+0x23a>
 8007070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007074:	f000 80a7 	beq.w	80071c6 <GpioMcuSetInterrupt+0x21a>
 8007078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800707c:	f300 80b3 	bgt.w	80071e6 <GpioMcuSetInterrupt+0x23a>
 8007080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007084:	f000 809b 	beq.w	80071be <GpioMcuSetInterrupt+0x212>
 8007088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800708c:	f300 80ab 	bgt.w	80071e6 <GpioMcuSetInterrupt+0x23a>
 8007090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007094:	f000 808f 	beq.w	80071b6 <GpioMcuSetInterrupt+0x20a>
 8007098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800709c:	f300 80a3 	bgt.w	80071e6 <GpioMcuSetInterrupt+0x23a>
 80070a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070a4:	f000 8083 	beq.w	80071ae <GpioMcuSetInterrupt+0x202>
 80070a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ac:	f300 809b 	bgt.w	80071e6 <GpioMcuSetInterrupt+0x23a>
 80070b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070b4:	d077      	beq.n	80071a6 <GpioMcuSetInterrupt+0x1fa>
 80070b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ba:	f300 8094 	bgt.w	80071e6 <GpioMcuSetInterrupt+0x23a>
 80070be:	2b80      	cmp	r3, #128	@ 0x80
 80070c0:	d06d      	beq.n	800719e <GpioMcuSetInterrupt+0x1f2>
 80070c2:	2b80      	cmp	r3, #128	@ 0x80
 80070c4:	f300 808f 	bgt.w	80071e6 <GpioMcuSetInterrupt+0x23a>
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	dc49      	bgt.n	8007160 <GpioMcuSetInterrupt+0x1b4>
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f340 808a 	ble.w	80071e6 <GpioMcuSetInterrupt+0x23a>
 80070d2:	3b01      	subs	r3, #1
 80070d4:	2b1f      	cmp	r3, #31
 80070d6:	f200 8086 	bhi.w	80071e6 <GpioMcuSetInterrupt+0x23a>
 80070da:	a201      	add	r2, pc, #4	@ (adr r2, 80070e0 <GpioMcuSetInterrupt+0x134>)
 80070dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e0:	08007167 	.word	0x08007167
 80070e4:	0800716f 	.word	0x0800716f
 80070e8:	080071e7 	.word	0x080071e7
 80070ec:	08007177 	.word	0x08007177
 80070f0:	080071e7 	.word	0x080071e7
 80070f4:	080071e7 	.word	0x080071e7
 80070f8:	080071e7 	.word	0x080071e7
 80070fc:	0800717f 	.word	0x0800717f
 8007100:	080071e7 	.word	0x080071e7
 8007104:	080071e7 	.word	0x080071e7
 8007108:	080071e7 	.word	0x080071e7
 800710c:	080071e7 	.word	0x080071e7
 8007110:	080071e7 	.word	0x080071e7
 8007114:	080071e7 	.word	0x080071e7
 8007118:	080071e7 	.word	0x080071e7
 800711c:	08007187 	.word	0x08007187
 8007120:	080071e7 	.word	0x080071e7
 8007124:	080071e7 	.word	0x080071e7
 8007128:	080071e7 	.word	0x080071e7
 800712c:	080071e7 	.word	0x080071e7
 8007130:	080071e7 	.word	0x080071e7
 8007134:	080071e7 	.word	0x080071e7
 8007138:	080071e7 	.word	0x080071e7
 800713c:	080071e7 	.word	0x080071e7
 8007140:	080071e7 	.word	0x080071e7
 8007144:	080071e7 	.word	0x080071e7
 8007148:	080071e7 	.word	0x080071e7
 800714c:	080071e7 	.word	0x080071e7
 8007150:	080071e7 	.word	0x080071e7
 8007154:	080071e7 	.word	0x080071e7
 8007158:	080071e7 	.word	0x080071e7
 800715c:	0800718f 	.word	0x0800718f
 8007160:	2b40      	cmp	r3, #64	@ 0x40
 8007162:	d018      	beq.n	8007196 <GpioMcuSetInterrupt+0x1ea>
        break;
    case GPIO_PIN_15:
        IRQnb = EXTI15_IRQn;
        break;
    default:
        break;
 8007164:	e03f      	b.n	80071e6 <GpioMcuSetInterrupt+0x23a>
        IRQnb = EXTI0_IRQn;
 8007166:	230b      	movs	r3, #11
 8007168:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800716c:	e03c      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI1_IRQn;
 800716e:	230c      	movs	r3, #12
 8007170:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8007174:	e038      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI2_IRQn;
 8007176:	230d      	movs	r3, #13
 8007178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800717c:	e034      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI3_IRQn;
 800717e:	230e      	movs	r3, #14
 8007180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8007184:	e030      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI4_IRQn;
 8007186:	230f      	movs	r3, #15
 8007188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800718c:	e02c      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI5_IRQn;
 800718e:	2310      	movs	r3, #16
 8007190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8007194:	e028      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI6_IRQn;
 8007196:	2311      	movs	r3, #17
 8007198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 800719c:	e024      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI7_IRQn;
 800719e:	2312      	movs	r3, #18
 80071a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80071a4:	e020      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI8_IRQn;
 80071a6:	2313      	movs	r3, #19
 80071a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80071ac:	e01c      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI9_IRQn;
 80071ae:	2314      	movs	r3, #20
 80071b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80071b4:	e018      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI10_IRQn;
 80071b6:	2315      	movs	r3, #21
 80071b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80071bc:	e014      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI11_IRQn;
 80071be:	2316      	movs	r3, #22
 80071c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80071c4:	e010      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI12_IRQn;
 80071c6:	2317      	movs	r3, #23
 80071c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80071cc:	e00c      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI13_IRQn;
 80071ce:	2318      	movs	r3, #24
 80071d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80071d4:	e008      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI14_IRQn;
 80071d6:	2319      	movs	r3, #25
 80071d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80071dc:	e004      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI15_IRQn;
 80071de:	231a      	movs	r3, #26
 80071e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 80071e4:	e000      	b.n	80071e8 <GpioMcuSetInterrupt+0x23c>
        break;
 80071e6:	bf00      	nop
    }
    //watch

    GpioIrq[(obj->pin ) & 0x0F] = irqHandler;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f993 3000 	ldrsb.w	r3, [r3]
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	490d      	ldr	r1, [pc, #52]	@ (800722c <GpioMcuSetInterrupt+0x280>)
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 80071fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007200:	2200      	movs	r2, #0
 8007202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007204:	4618      	mov	r0, r3
 8007206:	f7fb f84d 	bl	80022a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 800720a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800720e:	4618      	mov	r0, r3
 8007210:	f7fb f862 	bl	80022d8 <HAL_NVIC_EnableIRQ>
 8007214:	e000      	b.n	8007218 <GpioMcuSetInterrupt+0x26c>
        return;
 8007216:	bf00      	nop
}
 8007218:	3730      	adds	r7, #48	@ 0x30
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	10110000 	.word	0x10110000
 8007224:	10210000 	.word	0x10210000
 8007228:	10310000 	.word	0x10310000
 800722c:	200002ec 	.word	0x200002ec

08007230 <GpioMcuWrite>:
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
    if( ( obj == NULL ) || ( obj->port == NULL ) )
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }
    // Check if pin is not connected
    if( obj->pin == NC )
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f993 3000 	ldrsb.w	r3, [r3]
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d009      	beq.n	800725e <GpioMcuWrite+0x2e>
    {
        return;
    }
    HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6858      	ldr	r0, [r3, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	885b      	ldrh	r3, [r3, #2]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	4619      	mov	r1, r3
 8007258:	f7fb fe6c 	bl	8002f34 <HAL_GPIO_WritePin>
 800725c:	e000      	b.n	8007260 <GpioMcuWrite+0x30>
        return;
 800725e:	bf00      	nop
}
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <EXTI0_IRQHandler>:
    }
    return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
}

void EXTI0_IRQHandler( void )
{
 8007266:	b580      	push	{r7, lr}
 8007268:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800726a:	f000 f9ed 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800726e:	2001      	movs	r0, #1
 8007270:	f7fb fe78 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 8007274:	bf00      	nop
 8007276:	bd80      	pop	{r7, pc}

08007278 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800727c:	f000 f9e4 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8007280:	2002      	movs	r0, #2
 8007282:	f7fb fe6f 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 8007286:	bf00      	nop
 8007288:	bd80      	pop	{r7, pc}

0800728a <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 800728a:	b580      	push	{r7, lr}
 800728c:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800728e:	f000 f9db 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8007292:	2004      	movs	r0, #4
 8007294:	f7fb fe66 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 8007298:	bf00      	nop
 800729a:	bd80      	pop	{r7, pc}

0800729c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 80072a0:	f000 f9d2 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 80072a4:	2008      	movs	r0, #8
 80072a6:	f7fb fe5d 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 80072aa:	bf00      	nop
 80072ac:	bd80      	pop	{r7, pc}

080072ae <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 80072b2:	f000 f9c9 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 80072b6:	2010      	movs	r0, #16
 80072b8:	f7fb fe54 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 80072bc:	bf00      	nop
 80072be:	bd80      	pop	{r7, pc}

080072c0 <EXTI5_IRQHandler>:

void EXTI5_IRQHandler( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 80072c4:	f000 f9c0 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 80072c8:	2020      	movs	r0, #32
 80072ca:	f7fb fe4b 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 80072ce:	bf00      	nop
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <EXTI6_IRQHandler>:

void EXTI6_IRQHandler( void )
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 80072d6:	f000 f9b7 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 80072da:	2040      	movs	r0, #64	@ 0x40
 80072dc:	f7fb fe42 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 80072e0:	bf00      	nop
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <EXTI7_IRQHandler>:

void EXTI7_IRQHandler( void )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 80072e8:	f000 f9ae 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 80072ec:	2080      	movs	r0, #128	@ 0x80
 80072ee:	f7fb fe39 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 80072f2:	bf00      	nop
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <EXTI8_IRQHandler>:

void EXTI8_IRQHandler( void )
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 80072fa:	f000 f9a5 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 80072fe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007302:	f7fb fe2f 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 8007306:	bf00      	nop
 8007308:	bd80      	pop	{r7, pc}

0800730a <EXTI9_IRQHandler>:

void EXTI9_IRQHandler( void )
{
 800730a:	b580      	push	{r7, lr}
 800730c:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800730e:	f000 f99b 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8007312:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007316:	f7fb fe25 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 800731a:	bf00      	nop
 800731c:	bd80      	pop	{r7, pc}

0800731e <EXTI10_IRQHandler>:

void EXTI10_IRQHandler( void )
{
 800731e:	b580      	push	{r7, lr}
 8007320:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8007322:	f000 f991 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8007326:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800732a:	f7fb fe1b 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 800732e:	bf00      	nop
 8007330:	bd80      	pop	{r7, pc}

08007332 <EXTI11_IRQHandler>:

void EXTI11_IRQHandler( void )
{
 8007332:	b580      	push	{r7, lr}
 8007334:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8007336:	f000 f987 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800733a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800733e:	f7fb fe11 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 8007342:	bf00      	nop
 8007344:	bd80      	pop	{r7, pc}

08007346 <EXTI12_IRQHandler>:

void EXTI12_IRQHandler( void )
{
 8007346:	b580      	push	{r7, lr}
 8007348:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800734a:	f000 f97d 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800734e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007352:	f7fb fe07 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 8007356:	bf00      	nop
 8007358:	bd80      	pop	{r7, pc}

0800735a <EXTI13_IRQHandler>:

void EXTI13_IRQHandler( void )
{
 800735a:	b580      	push	{r7, lr}
 800735c:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800735e:	f000 f973 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8007362:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007366:	f7fb fdfd 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 800736a:	bf00      	nop
 800736c:	bd80      	pop	{r7, pc}

0800736e <EXTI14_IRQHandler>:

void EXTI14_IRQHandler( void )
{
 800736e:	b580      	push	{r7, lr}
 8007370:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8007372:	f000 f969 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 8007376:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800737a:	f7fb fdf3 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 800737e:	bf00      	nop
 8007380:	bd80      	pop	{r7, pc}

08007382 <EXTI15_IRQHandler>:

void EXTI15_IRQHandler( void )
{
 8007382:	b580      	push	{r7, lr}
 8007384:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8007386:	f000 f95f 	bl	8007648 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 800738a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800738e:	f7fb fde9 	bl	8002f64 <HAL_GPIO_EXTI_IRQHandler>
}
 8007392:	bf00      	nop
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <HAL_GPIO_EXTI_Rising_Callback>:
}
*/

//void HAL_GPIO_EXTI_Callback( uint16_t gpioPin )       // PK: dla L476
void HAL_GPIO_EXTI_Rising_Callback( uint16_t gpioPin )  // PK: dla U545
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	80fb      	strh	r3, [r7, #6]
    uint8_t callbackIndex = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]

    if( gpioPin > 0 )
 80073a6:	88fb      	ldrh	r3, [r7, #6]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d009      	beq.n	80073c0 <HAL_GPIO_EXTI_Rising_Callback+0x28>
    {
        while( gpioPin != 0x01 )
 80073ac:	e005      	b.n	80073ba <HAL_GPIO_EXTI_Rising_Callback+0x22>
        {
            gpioPin = gpioPin >> 1;
 80073ae:	88fb      	ldrh	r3, [r7, #6]
 80073b0:	085b      	lsrs	r3, r3, #1
 80073b2:	80fb      	strh	r3, [r7, #6]
            callbackIndex++;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	3301      	adds	r3, #1
 80073b8:	73fb      	strb	r3, [r7, #15]
        while( gpioPin != 0x01 )
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d1f6      	bne.n	80073ae <HAL_GPIO_EXTI_Rising_Callback+0x16>
        }
    }

    if( GpioIrq[callbackIndex] != NULL )
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	4a07      	ldr	r2, [pc, #28]	@ (80073e0 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 80073c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d004      	beq.n	80073d6 <HAL_GPIO_EXTI_Rising_Callback+0x3e>
    {
        GpioIrq[callbackIndex]( );
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
 80073ce:	4a04      	ldr	r2, [pc, #16]	@ (80073e0 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 80073d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073d4:	4798      	blx	r3
    }
}
 80073d6:	bf00      	nop
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	200002ec 	.word	0x200002ec

080073e4 <GpioInit>:
#if defined( BOARD_IOE_EXT )
#include "gpio-ioe.h"
#endif

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af02      	add	r7, sp, #8
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	4608      	mov	r0, r1
 80073ee:	4611      	mov	r1, r2
 80073f0:	461a      	mov	r2, r3
 80073f2:	4603      	mov	r3, r0
 80073f4:	70fb      	strb	r3, [r7, #3]
 80073f6:	460b      	mov	r3, r1
 80073f8:	70bb      	strb	r3, [r7, #2]
 80073fa:	4613      	mov	r3, r2
 80073fc:	707b      	strb	r3, [r7, #1]
    if( ( uint32_t )( pin >> 4 ) <= 6 )
 80073fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007402:	111b      	asrs	r3, r3, #4
 8007404:	b25b      	sxtb	r3, r3
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b06      	cmp	r3, #6
 800740a:	d80b      	bhi.n	8007424 <GpioInit+0x40>
    {
        GpioMcuInit( obj, pin, mode, config, type, value );
 800740c:	7878      	ldrb	r0, [r7, #1]
 800740e:	78ba      	ldrb	r2, [r7, #2]
 8007410:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	7c3b      	ldrb	r3, [r7, #16]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	4603      	mov	r3, r0
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff fcde 	bl	8006de0 <GpioMcuInit>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeInit( obj, pin, mode, config, type, value );
#endif
    }
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <GpioSetInterrupt>:

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	607b      	str	r3, [r7, #4]
 8007436:	460b      	mov	r3, r1
 8007438:	72fb      	strb	r3, [r7, #11]
 800743a:	4613      	mov	r3, r2
 800743c:	72bb      	strb	r3, [r7, #10]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f993 3000 	ldrsb.w	r3, [r3]
 8007444:	111b      	asrs	r3, r3, #4
 8007446:	b25b      	sxtb	r3, r3
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b06      	cmp	r3, #6
 800744c:	d805      	bhi.n	800745a <GpioSetInterrupt+0x2e>
    {
        GpioMcuSetInterrupt( obj, irqMode, irqPriority, irqHandler );
 800744e:	7aba      	ldrb	r2, [r7, #10]
 8007450:	7af9      	ldrb	r1, [r7, #11]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f7ff fda9 	bl	8006fac <GpioMcuSetInterrupt>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
#endif
    }
}
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <GpioWrite>:
#endif
    }
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f993 3000 	ldrsb.w	r3, [r3]
 8007472:	111b      	asrs	r3, r3, #4
 8007474:	b25b      	sxtb	r3, r3
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b06      	cmp	r3, #6
 800747a:	d803      	bhi.n	8007484 <GpioWrite+0x22>
    {
        GpioMcuWrite( obj, value );
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7ff fed6 	bl	8007230 <GpioMcuWrite>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeWrite( obj, value );
#endif
    }
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <RtcInit>:
 * \param[IN] year Calendar current year
 */
static void RtcCheckCalendarRollOver( uint8_t year );

void RtcInit( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0
    RtcCalendar_t rtcInit;

    if( RtcInitalized == false )
 8007492:	4b2c      	ldr	r3, [pc, #176]	@ (8007544 <RtcInit+0xb8>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	f083 0301 	eor.w	r3, r3, #1
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d04d      	beq.n	800753c <RtcInit+0xb0>
    {
        __HAL_RCC_RTC_ENABLE( );
 80074a0:	4b29      	ldr	r3, [pc, #164]	@ (8007548 <RtcInit+0xbc>)
 80074a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074a6:	4a28      	ldr	r2, [pc, #160]	@ (8007548 <RtcInit+0xbc>)
 80074a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        RtcHandle.Instance = RTC;
 80074b0:	4b26      	ldr	r3, [pc, #152]	@ (800754c <RtcInit+0xc0>)
 80074b2:	4a27      	ldr	r2, [pc, #156]	@ (8007550 <RtcInit+0xc4>)
 80074b4:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 80074b6:	4b25      	ldr	r3, [pc, #148]	@ (800754c <RtcInit+0xc0>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	605a      	str	r2, [r3, #4]

        RtcHandle.Init.AsynchPrediv = 128; // 4; //128;     // changed from 3 - PK
 80074bc:	4b23      	ldr	r3, [pc, #140]	@ (800754c <RtcInit+0xc0>)
 80074be:	2280      	movs	r2, #128	@ 0x80
 80074c0:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv = 25; //4; //256*64;      // changed from 3 - PK
 80074c2:	4b22      	ldr	r3, [pc, #136]	@ (800754c <RtcInit+0xc0>)
 80074c4:	2219      	movs	r2, #25
 80074c6:	60da      	str	r2, [r3, #12]

        RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 80074c8:	4b20      	ldr	r3, [pc, #128]	@ (800754c <RtcInit+0xc0>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80074ce:	4b1f      	ldr	r3, [pc, #124]	@ (800754c <RtcInit+0xc0>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	619a      	str	r2, [r3, #24]
        RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80074d4:	4b1d      	ldr	r3, [pc, #116]	@ (800754c <RtcInit+0xc0>)
 80074d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80074da:	61da      	str	r2, [r3, #28]
        HAL_RTC_Init( &RtcHandle );
 80074dc:	481b      	ldr	r0, [pc, #108]	@ (800754c <RtcInit+0xc0>)
 80074de:	f7fd ff2d 	bl	800533c <HAL_RTC_Init>

        // Set Date: Friday 1st of January 2000
        rtcInit.CalendarDate.Year = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	727b      	strb	r3, [r7, #9]
        rtcInit.CalendarDate.Month = 1;
 80074e6:	2301      	movs	r3, #1
 80074e8:	71fb      	strb	r3, [r7, #7]
        rtcInit.CalendarDate.Date = 1;
 80074ea:	2301      	movs	r3, #1
 80074ec:	723b      	strb	r3, [r7, #8]
        rtcInit.CalendarDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80074ee:	2306      	movs	r3, #6
 80074f0:	71bb      	strb	r3, [r7, #6]
        HAL_RTC_SetDate( &RtcHandle, &rtcInit.CalendarDate, RTC_FORMAT_BIN );
 80074f2:	1d3b      	adds	r3, r7, #4
 80074f4:	3302      	adds	r3, #2
 80074f6:	2200      	movs	r2, #0
 80074f8:	4619      	mov	r1, r3
 80074fa:	4814      	ldr	r0, [pc, #80]	@ (800754c <RtcInit+0xc0>)
 80074fc:	f7fe f8b6 	bl	800566c <HAL_RTC_SetDate>

        // Set Time: 00:00:00
        rtcInit.CalendarTime.Hours = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	733b      	strb	r3, [r7, #12]
        rtcInit.CalendarTime.Minutes = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	737b      	strb	r3, [r7, #13]
        rtcInit.CalendarTime.Seconds = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	73bb      	strb	r3, [r7, #14]
        rtcInit.CalendarTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]
        rtcInit.CalendarTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007510:	2300      	movs	r3, #0
 8007512:	61bb      	str	r3, [r7, #24]
        rtcInit.CalendarTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007514:	2300      	movs	r3, #0
 8007516:	61fb      	str	r3, [r7, #28]
        HAL_RTC_SetTime( &RtcHandle, &rtcInit.CalendarTime, RTC_FORMAT_BIN );
 8007518:	1d3b      	adds	r3, r7, #4
 800751a:	3308      	adds	r3, #8
 800751c:	2200      	movs	r2, #0
 800751e:	4619      	mov	r1, r3
 8007520:	480a      	ldr	r0, [pc, #40]	@ (800754c <RtcInit+0xc0>)
 8007522:	f7fd ff95 	bl	8005450 <HAL_RTC_SetTime>

        HAL_NVIC_SetPriority( RTC_IRQn, 4, 0 );
 8007526:	2200      	movs	r2, #0
 8007528:	2104      	movs	r1, #4
 800752a:	2002      	movs	r0, #2
 800752c:	f7fa feba 	bl	80022a4 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_IRQn );
 8007530:	2002      	movs	r0, #2
 8007532:	f7fa fed1 	bl	80022d8 <HAL_NVIC_EnableIRQ>
        RtcInitalized = true;
 8007536:	4b03      	ldr	r3, [pc, #12]	@ (8007544 <RtcInit+0xb8>)
 8007538:	2201      	movs	r2, #1
 800753a:	701a      	strb	r2, [r3, #0]
    }
}
 800753c:	bf00      	nop
 800753e:	3720      	adds	r7, #32
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20000380 	.word	0x20000380
 8007548:	46020c00 	.word	0x46020c00
 800754c:	20000350 	.word	0x20000350
 8007550:	46007800 	.word	0x46007800

08007554 <RtcSetTimeout>:

void RtcSetTimeout( uint32_t timeout )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
    RtcStartWakeUpAlarm( timeout );
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f8e1 	bl	8007724 <RtcStartWakeUpAlarm>
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <RtcGetAdjustedTimeoutValue>:

TimerTime_t RtcGetAdjustedTimeoutValue( uint32_t timeout )
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
    if( timeout > McuWakeUpTime )
 8007574:	4b16      	ldr	r3, [pc, #88]	@ (80075d0 <RtcGetAdjustedTimeoutValue+0x64>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	429a      	cmp	r2, r3
 800757c:	d90c      	bls.n	8007598 <RtcGetAdjustedTimeoutValue+0x2c>
    {   // we have waken up from a GPIO and we have lost "McuWakeUpTime" that we need to compensate on next event
        if( NonScheduledWakeUp == true )
 800757e:	4b15      	ldr	r3, [pc, #84]	@ (80075d4 <RtcGetAdjustedTimeoutValue+0x68>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <RtcGetAdjustedTimeoutValue+0x2c>
        {
            NonScheduledWakeUp = false;
 8007588:	4b12      	ldr	r3, [pc, #72]	@ (80075d4 <RtcGetAdjustedTimeoutValue+0x68>)
 800758a:	2200      	movs	r2, #0
 800758c:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800758e:	4b10      	ldr	r3, [pc, #64]	@ (80075d0 <RtcGetAdjustedTimeoutValue+0x64>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	607b      	str	r3, [r7, #4]
        }
    }
    
    if( timeout > McuWakeUpTime )
 8007598:	4b0d      	ldr	r3, [pc, #52]	@ (80075d0 <RtcGetAdjustedTimeoutValue+0x64>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d90e      	bls.n	80075c0 <RtcGetAdjustedTimeoutValue+0x54>
    {   // we don't go in Low Power mode for delay below 50ms (needed for LEDs)        
        if( timeout < 50 ) // 50 ms
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b31      	cmp	r3, #49	@ 0x31
 80075a6:	d803      	bhi.n	80075b0 <RtcGetAdjustedTimeoutValue+0x44>
        {
            RtcTimerEventAllowsLowPower = false;
 80075a8:	4b0b      	ldr	r3, [pc, #44]	@ (80075d8 <RtcGetAdjustedTimeoutValue+0x6c>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	701a      	strb	r2, [r3, #0]
 80075ae:	e007      	b.n	80075c0 <RtcGetAdjustedTimeoutValue+0x54>
        }
        else
        {
            RtcTimerEventAllowsLowPower = true;
 80075b0:	4b09      	ldr	r3, [pc, #36]	@ (80075d8 <RtcGetAdjustedTimeoutValue+0x6c>)
 80075b2:	2201      	movs	r2, #1
 80075b4:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 80075b6:	4b06      	ldr	r3, [pc, #24]	@ (80075d0 <RtcGetAdjustedTimeoutValue+0x64>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	607b      	str	r3, [r7, #4]
        }
    }

    return  timeout;
 80075c0:	687b      	ldr	r3, [r7, #4]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	20000384 	.word	0x20000384
 80075d4:	2000032f 	.word	0x2000032f
 80075d8:	2000034c 	.word	0x2000034c

080075dc <RtcGetElapsedAlarmTime>:
{
    return( RtcConvertCalendarTickToTimerTime( NULL ) );
}

TimerTime_t RtcGetElapsedAlarmTime( void )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
    TimerTime_t currentTime = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	607b      	str	r3, [r7, #4]
    TimerTime_t contextTime = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	603b      	str	r3, [r7, #0]

    currentTime = RtcConvertCalendarTickToTimerTime( NULL );
 80075ea:	2000      	movs	r0, #0
 80075ec:	f000 fabc 	bl	8007b68 <RtcConvertCalendarTickToTimerTime>
 80075f0:	6078      	str	r0, [r7, #4]
    contextTime = RtcConvertCalendarTickToTimerTime( &RtcCalendarContext );
 80075f2:	480a      	ldr	r0, [pc, #40]	@ (800761c <RtcGetElapsedAlarmTime+0x40>)
 80075f4:	f000 fab8 	bl	8007b68 <RtcConvertCalendarTickToTimerTime>
 80075f8:	6038      	str	r0, [r7, #0]

    if( currentTime < contextTime )
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d204      	bcs.n	800760c <RtcGetElapsedAlarmTime+0x30>
    {
        return( currentTime + ( 0xFFFFFFFF - contextTime ) );
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	e002      	b.n	8007612 <RtcGetElapsedAlarmTime+0x36>
    }
    else
    {
        return( currentTime - contextTime );
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	1ad3      	subs	r3, r2, r3
    }
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20000330 	.word	0x20000330

08007620 <BlockLowPowerDuringTask>:
        return( elapsedTime - eventInTime );
    }
}

void BlockLowPowerDuringTask ( bool status )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	71fb      	strb	r3, [r7, #7]
    if( status == true )
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <BlockLowPowerDuringTask+0x14>
    {
        RtcRecoverMcuStatus( );
 8007630:	f000 f80a 	bl	8007648 <RtcRecoverMcuStatus>
    }
    LowPowerDisableDuringTask = status;
 8007634:	4a03      	ldr	r2, [pc, #12]	@ (8007644 <BlockLowPowerDuringTask+0x24>)
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	7013      	strb	r3, [r2, #0]
}
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	2000034d 	.word	0x2000034d

08007648 <RtcRecoverMcuStatus>:
//        HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
    }
}

void RtcRecoverMcuStatus( void )
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
//    {
//        BoardInitMcu( );
//    }


}
 800764c:	bf00      	nop
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <RtcComputeWakeUpTime>:

static void RtcComputeWakeUpTime( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b096      	sub	sp, #88	@ 0x58
 800765c:	af00      	add	r7, sp, #0
    uint32_t start = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t stop = 0;
 8007662:	2300      	movs	r3, #0
 8007664:	653b      	str	r3, [r7, #80]	@ 0x50
    RTC_AlarmTypeDef  alarmRtc;
    RtcCalendar_t now;

    if( WakeUpTimeInitialized == false )
 8007666:	4b2b      	ldr	r3, [pc, #172]	@ (8007714 <RtcComputeWakeUpTime+0xbc>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	f083 0301 	eor.w	r3, r3, #1
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d04b      	beq.n	800770c <RtcComputeWakeUpTime+0xb4>
    {
        now = RtcGetCalendar( );
 8007674:	1d3b      	adds	r3, r7, #4
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fb90 	bl	8007d9c <RtcGetCalendar>
        HAL_RTC_GetAlarm( &RtcHandle, &alarmRtc, RTC_ALARM_A, RTC_FORMAT_BIN );
 800767c:	f107 0120 	add.w	r1, r7, #32
 8007680:	2300      	movs	r3, #0
 8007682:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007686:	4824      	ldr	r0, [pc, #144]	@ (8007718 <RtcComputeWakeUpTime+0xc0>)
 8007688:	f7fe fa06 	bl	8005a98 <HAL_RTC_GetAlarm>

        start = alarmRtc.AlarmTime.Seconds + ( SecondsInMinute * alarmRtc.AlarmTime.Minutes ) + ( SecondsInHour * alarmRtc.AlarmTime.Hours );
 800768c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007690:	461a      	mov	r2, r3
 8007692:	233c      	movs	r3, #60	@ 0x3c
 8007694:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8007698:	fb01 f303 	mul.w	r3, r1, r3
 800769c:	441a      	add	r2, r3
 800769e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80076a2:	f897 1020 	ldrb.w	r1, [r7, #32]
 80076a6:	fb01 f303 	mul.w	r3, r1, r3
 80076aa:	4413      	add	r3, r2
 80076ac:	657b      	str	r3, [r7, #84]	@ 0x54
        stop = now.CalendarTime.Seconds + ( SecondsInMinute * now.CalendarTime.Minutes ) + ( SecondsInHour * now.CalendarTime.Hours );
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	461a      	mov	r2, r3
 80076b2:	233c      	movs	r3, #60	@ 0x3c
 80076b4:	7b79      	ldrb	r1, [r7, #13]
 80076b6:	fb01 f303 	mul.w	r3, r1, r3
 80076ba:	441a      	add	r2, r3
 80076bc:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80076c0:	7b39      	ldrb	r1, [r7, #12]
 80076c2:	fb01 f303 	mul.w	r3, r1, r3
 80076c6:	4413      	add	r3, r2
 80076c8:	653b      	str	r3, [r7, #80]	@ 0x50

        McuWakeUpTime = ceil ( ( stop - start ) * RTC_ALARM_TICK_DURATION );
 80076ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80076cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7f8 ff5b 	bl	800058c <__aeabi_ui2d>
 80076d6:	f04f 0200 	mov.w	r2, #0
 80076da:	4b10      	ldr	r3, [pc, #64]	@ (800771c <RtcComputeWakeUpTime+0xc4>)
 80076dc:	f7f8 ffd0 	bl	8000680 <__aeabi_dmul>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	ec43 2b17 	vmov	d7, r2, r3
 80076e8:	eeb0 0a47 	vmov.f32	s0, s14
 80076ec:	eef0 0a67 	vmov.f32	s1, s15
 80076f0:	f004 fbd2 	bl	800be98 <ceil>
 80076f4:	ec53 2b10 	vmov	r2, r3, d0
 80076f8:	4610      	mov	r0, r2
 80076fa:	4619      	mov	r1, r3
 80076fc:	f7f9 fa82 	bl	8000c04 <__aeabi_d2uiz>
 8007700:	4603      	mov	r3, r0
 8007702:	4a07      	ldr	r2, [pc, #28]	@ (8007720 <RtcComputeWakeUpTime+0xc8>)
 8007704:	6013      	str	r3, [r2, #0]

        WakeUpTimeInitialized = true;
 8007706:	4b03      	ldr	r3, [pc, #12]	@ (8007714 <RtcComputeWakeUpTime+0xbc>)
 8007708:	2201      	movs	r2, #1
 800770a:	701a      	strb	r2, [r3, #0]
    }
}
 800770c:	bf00      	nop
 800770e:	3758      	adds	r7, #88	@ 0x58
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	20000381 	.word	0x20000381
 8007718:	20000350 	.word	0x20000350
 800771c:	3fdf4000 	.word	0x3fdf4000
 8007720:	20000384 	.word	0x20000384

08007724 <RtcStartWakeUpAlarm>:

static void RtcStartWakeUpAlarm( uint32_t timeoutValue )
{
 8007724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007726:	b0a3      	sub	sp, #140	@ 0x8c
 8007728:	af06      	add	r7, sp, #24
 800772a:	6078      	str	r0, [r7, #4]
    RtcCalendar_t now;
    RtcCalendar_t alarmTimer;
    RTC_AlarmTypeDef alarmStructure;

    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800772c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007730:	4822      	ldr	r0, [pc, #136]	@ (80077bc <RtcStartWakeUpAlarm+0x98>)
 8007732:	f7fe f96f 	bl	8005a14 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_DeactivateWakeUpTimer( &RtcHandle );
 8007736:	4821      	ldr	r0, [pc, #132]	@ (80077bc <RtcStartWakeUpAlarm+0x98>)
 8007738:	f7fe fb86 	bl	8005e48 <HAL_RTCEx_DeactivateWakeUpTimer>

    // Load the RTC calendar
    now = RtcGetCalendar( );
 800773c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007740:	4618      	mov	r0, r3
 8007742:	f000 fb2b 	bl	8007d9c <RtcGetCalendar>

    // Save the calendar into RtcCalendarContext to be able to calculate the elapsed time
    RtcCalendarContext = now;
 8007746:	4b1e      	ldr	r3, [pc, #120]	@ (80077c0 <RtcStartWakeUpAlarm+0x9c>)
 8007748:	461d      	mov	r5, r3
 800774a:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800774e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007752:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007756:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    // timeoutValue is in ms 
    alarmTimer = RtcComputeTimerTimeToAlarmTick( timeoutValue, now );
 800775a:	f107 0638 	add.w	r6, r7, #56	@ 0x38
 800775e:	466d      	mov	r5, sp
 8007760:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8007764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	602b      	str	r3, [r5, #0]
 800776c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007770:	cb0c      	ldmia	r3, {r2, r3}
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	4630      	mov	r0, r6
 8007776:	f000 f827 	bl	80077c8 <RtcComputeTimerTimeToAlarmTick>

    alarmStructure.Alarm = RTC_ALARM_A;
 800777a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800777e:	637b      	str	r3, [r7, #52]	@ 0x34
    alarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8007780:	2300      	movs	r3, #0
 8007782:	62bb      	str	r3, [r7, #40]	@ 0x28
    alarmStructure.AlarmMask = RTC_ALARMMASK_NONE;
 8007784:	2300      	movs	r3, #0
 8007786:	61fb      	str	r3, [r7, #28]
    alarmStructure.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8007788:	2300      	movs	r3, #0
 800778a:	72fb      	strb	r3, [r7, #11]
    
    alarmStructure.AlarmTime.Seconds = alarmTimer.CalendarTime.Seconds;
 800778c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8007790:	72bb      	strb	r3, [r7, #10]
    alarmStructure.AlarmTime.Minutes = alarmTimer.CalendarTime.Minutes;
 8007792:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8007796:	727b      	strb	r3, [r7, #9]
    alarmStructure.AlarmTime.Hours = alarmTimer.CalendarTime.Hours;
 8007798:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800779c:	723b      	strb	r3, [r7, #8]
    alarmStructure.AlarmDateWeekDay = alarmTimer.CalendarDate.Date;
 800779e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80077a2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    if( HAL_RTC_SetAlarm_IT( &RtcHandle, &alarmStructure, RTC_FORMAT_BIN ) != HAL_OK )
 80077a6:	f107 0308 	add.w	r3, r7, #8
 80077aa:	2200      	movs	r2, #0
 80077ac:	4619      	mov	r1, r3
 80077ae:	4803      	ldr	r0, [pc, #12]	@ (80077bc <RtcStartWakeUpAlarm+0x98>)
 80077b0:	f7fe f830 	bl	8005814 <HAL_RTC_SetAlarm_IT>
    {
        assert_param( FAIL );
    }
}
 80077b4:	bf00      	nop
 80077b6:	3774      	adds	r7, #116	@ 0x74
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077bc:	20000350 	.word	0x20000350
 80077c0:	20000330 	.word	0x20000330
 80077c4:	00000000 	.word	0x00000000

080077c8 <RtcComputeTimerTimeToAlarmTick>:

static RtcCalendar_t RtcComputeTimerTimeToAlarmTick( TimerTime_t timeCounter, RtcCalendar_t now )
{
 80077c8:	b082      	sub	sp, #8
 80077ca:	b5b0      	push	{r4, r5, r7, lr}
 80077cc:	b092      	sub	sp, #72	@ 0x48
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
 80077d4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80077d8:	e881 000c 	stmia.w	r1, {r2, r3}
    RtcCalendar_t calendar = now;
 80077dc:	f107 040c 	add.w	r4, r7, #12
 80077e0:	f107 0558 	add.w	r5, r7, #88	@ 0x58
 80077e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80077ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    uint16_t seconds = now.CalendarTime.Seconds;
 80077f0:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80077f4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t minutes = now.CalendarTime.Minutes;
 80077f8:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80077fc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    uint16_t hours = now.CalendarTime.Hours;
 8007800:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8007804:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t days = now.CalendarDate.Date;
 8007808:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800780c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    double timeoutValueTemp = 0.0;
 8007810:	f04f 0200 	mov.w	r2, #0
 8007814:	f04f 0300 	mov.w	r3, #0
 8007818:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double timeoutValue = 0.0;
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double error = 0.0;
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	f04f 0300 	mov.w	r3, #0
 8007830:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    
    timeCounter = MIN( timeCounter, ( TimerTime_t )( RTC_ALARM_MAX_NUMBER_OF_DAYS * SecondsInDay * RTC_ALARM_TICK_DURATION ) );
 8007834:	4ac4      	ldr	r2, [pc, #784]	@ (8007b48 <RtcComputeTimerTimeToAlarmTick+0x380>)
 8007836:	4613      	mov	r3, r2
 8007838:	00db      	lsls	r3, r3, #3
 800783a:	1a9b      	subs	r3, r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4618      	mov	r0, r3
 8007840:	f7f8 fea4 	bl	800058c <__aeabi_ui2d>
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	4bc0      	ldr	r3, [pc, #768]	@ (8007b4c <RtcComputeTimerTimeToAlarmTick+0x384>)
 800784a:	f7f8 ff19 	bl	8000680 <__aeabi_dmul>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4610      	mov	r0, r2
 8007854:	4619      	mov	r1, r3
 8007856:	f7f9 f9d5 	bl	8000c04 <__aeabi_d2uiz>
 800785a:	4602      	mov	r2, r0
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	4293      	cmp	r3, r2
 8007860:	bf28      	it	cs
 8007862:	4613      	movcs	r3, r2
 8007864:	603b      	str	r3, [r7, #0]

    if( timeCounter < 1 )
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <RtcComputeTimerTimeToAlarmTick+0xa8>
    {
        timeCounter = 1;
 800786c:	2301      	movs	r3, #1
 800786e:	603b      	str	r3, [r7, #0]
    }

    // timeoutValue is used for complete computation
    timeoutValue = round( timeCounter * RTC_ALARM_TICK_PER_MS );
 8007870:	6838      	ldr	r0, [r7, #0]
 8007872:	f7f8 fe8b 	bl	800058c <__aeabi_ui2d>
 8007876:	a3b2      	add	r3, pc, #712	@ (adr r3, 8007b40 <RtcComputeTimerTimeToAlarmTick+0x378>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	f7f8 ff00 	bl	8000680 <__aeabi_dmul>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	ec43 2b17 	vmov	d7, r2, r3
 8007888:	eeb0 0a47 	vmov.f32	s0, s14
 800788c:	eef0 0a67 	vmov.f32	s1, s15
 8007890:	f004 fbfe 	bl	800c090 <round>
 8007894:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

    // timeoutValueTemp is used to compensate the cumulating errors in timing far in the future
    timeoutValueTemp =  ( double )timeCounter * RTC_ALARM_TICK_PER_MS;
 8007898:	6838      	ldr	r0, [r7, #0]
 800789a:	f7f8 fe77 	bl	800058c <__aeabi_ui2d>
 800789e:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007b40 <RtcComputeTimerTimeToAlarmTick+0x378>)
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f7f8 feec 	bl	8000680 <__aeabi_dmul>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Compute timeoutValue error
    error = timeoutValue - timeoutValueTemp;
 80078b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80078b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80078b8:	f7f8 fd2a 	bl	8000310 <__aeabi_dsub>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Add new error value to the cumulated value in uS
    TimeoutValueError += ( error  * 1000 );
 80078c4:	4ba2      	ldr	r3, [pc, #648]	@ (8007b50 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7f8 fe6f 	bl	80005ac <__aeabi_i2d>
 80078ce:	4604      	mov	r4, r0
 80078d0:	460d      	mov	r5, r1
 80078d2:	f04f 0200 	mov.w	r2, #0
 80078d6:	4b9f      	ldr	r3, [pc, #636]	@ (8007b54 <RtcComputeTimerTimeToAlarmTick+0x38c>)
 80078d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80078dc:	f7f8 fed0 	bl	8000680 <__aeabi_dmul>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4620      	mov	r0, r4
 80078e6:	4629      	mov	r1, r5
 80078e8:	f7f8 fd14 	bl	8000314 <__adddf3>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4610      	mov	r0, r2
 80078f2:	4619      	mov	r1, r3
 80078f4:	f7f9 f95e 	bl	8000bb4 <__aeabi_d2iz>
 80078f8:	4603      	mov	r3, r0
 80078fa:	4a95      	ldr	r2, [pc, #596]	@ (8007b50 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80078fc:	6013      	str	r3, [r2, #0]

    // Correct cumulated error if greater than ( RTC_ALARM_TICK_DURATION * 1000 )
    if( TimeoutValueError >= ( int32_t )( RTC_ALARM_TICK_DURATION * 1000 ) )
 80078fe:	4b94      	ldr	r3, [pc, #592]	@ (8007b50 <RtcComputeTimerTimeToAlarmTick+0x388>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f5b3 7ff4 	cmp.w	r3, #488	@ 0x1e8
 8007906:	db25      	blt.n	8007954 <RtcComputeTimerTimeToAlarmTick+0x18c>
    {
        TimeoutValueError = TimeoutValueError - ( uint32_t )( RTC_ALARM_TICK_DURATION * 1000 );
 8007908:	4b91      	ldr	r3, [pc, #580]	@ (8007b50 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8007910:	461a      	mov	r2, r3
 8007912:	4b8f      	ldr	r3, [pc, #572]	@ (8007b50 <RtcComputeTimerTimeToAlarmTick+0x388>)
 8007914:	601a      	str	r2, [r3, #0]
        timeoutValue = timeoutValue + 1;
 8007916:	f04f 0200 	mov.w	r2, #0
 800791a:	4b8f      	ldr	r3, [pc, #572]	@ (8007b58 <RtcComputeTimerTimeToAlarmTick+0x390>)
 800791c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007920:	f7f8 fcf8 	bl	8000314 <__adddf3>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }

    // Convert milliseconds to RTC format and add to now
    while( timeoutValue >= SecondsInDay )
 800792c:	e012      	b.n	8007954 <RtcComputeTimerTimeToAlarmTick+0x18c>
    {
        timeoutValue -= SecondsInDay;
 800792e:	4b86      	ldr	r3, [pc, #536]	@ (8007b48 <RtcComputeTimerTimeToAlarmTick+0x380>)
 8007930:	4618      	mov	r0, r3
 8007932:	f7f8 fe2b 	bl	800058c <__aeabi_ui2d>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800793e:	f7f8 fce7 	bl	8000310 <__aeabi_dsub>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        days++;
 800794a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800794e:	3301      	adds	r3, #1
 8007950:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    while( timeoutValue >= SecondsInDay )
 8007954:	4b7c      	ldr	r3, [pc, #496]	@ (8007b48 <RtcComputeTimerTimeToAlarmTick+0x380>)
 8007956:	4618      	mov	r0, r3
 8007958:	f7f8 fe18 	bl	800058c <__aeabi_ui2d>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007964:	f7f9 f912 	bl	8000b8c <__aeabi_dcmpge>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1df      	bne.n	800792e <RtcComputeTimerTimeToAlarmTick+0x166>
    }

    // Calculate hours
    while( timeoutValue >= SecondsInHour )
 800796e:	e013      	b.n	8007998 <RtcComputeTimerTimeToAlarmTick+0x1d0>
    {
        timeoutValue -= SecondsInHour;
 8007970:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007974:	4618      	mov	r0, r3
 8007976:	f7f8 fe19 	bl	80005ac <__aeabi_i2d>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007982:	f7f8 fcc5 	bl	8000310 <__aeabi_dsub>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        hours++;
 800798e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007992:	3301      	adds	r3, #1
 8007994:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    while( timeoutValue >= SecondsInHour )
 8007998:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800799c:	4618      	mov	r0, r3
 800799e:	f7f8 fe05 	bl	80005ac <__aeabi_i2d>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80079aa:	f7f9 f8ef 	bl	8000b8c <__aeabi_dcmpge>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1dd      	bne.n	8007970 <RtcComputeTimerTimeToAlarmTick+0x1a8>
    }

    // Calculate minutes
    while( timeoutValue >= SecondsInMinute )
 80079b4:	e012      	b.n	80079dc <RtcComputeTimerTimeToAlarmTick+0x214>
    {
        timeoutValue -= SecondsInMinute;
 80079b6:	233c      	movs	r3, #60	@ 0x3c
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7f8 fdf7 	bl	80005ac <__aeabi_i2d>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80079c6:	f7f8 fca3 	bl	8000310 <__aeabi_dsub>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        minutes++;
 80079d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80079d6:	3301      	adds	r3, #1
 80079d8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while( timeoutValue >= SecondsInMinute )
 80079dc:	233c      	movs	r3, #60	@ 0x3c
 80079de:	4618      	mov	r0, r3
 80079e0:	f7f8 fde4 	bl	80005ac <__aeabi_i2d>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80079ec:	f7f9 f8ce 	bl	8000b8c <__aeabi_dcmpge>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1df      	bne.n	80079b6 <RtcComputeTimerTimeToAlarmTick+0x1ee>
    }

    // Calculate seconds
    seconds = seconds + timeoutValue;
 80079f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7f8 fdd6 	bl	80005ac <__aeabi_i2d>
 8007a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a04:	f7f8 fc86 	bl	8000314 <__adddf3>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4619      	mov	r1, r3
 8007a10:	f7f9 f8f8 	bl	8000c04 <__aeabi_d2uiz>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    // Correct for modulo
    while( seconds >= 60 )
 8007a1a:	e009      	b.n	8007a30 <RtcComputeTimerTimeToAlarmTick+0x268>
    { 
        seconds -= 60;
 8007a1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007a20:	3b3c      	subs	r3, #60	@ 0x3c
 8007a22:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        minutes++;
 8007a26:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while( seconds >= 60 )
 8007a30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007a34:	2b3b      	cmp	r3, #59	@ 0x3b
 8007a36:	d8f1      	bhi.n	8007a1c <RtcComputeTimerTimeToAlarmTick+0x254>
    }

    while( minutes >= 60 )
 8007a38:	e009      	b.n	8007a4e <RtcComputeTimerTimeToAlarmTick+0x286>
    {
        minutes -= 60;
 8007a3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007a3e:	3b3c      	subs	r3, #60	@ 0x3c
 8007a40:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        hours++;
 8007a44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007a48:	3301      	adds	r3, #1
 8007a4a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    while( minutes >= 60 )
 8007a4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007a52:	2b3b      	cmp	r3, #59	@ 0x3b
 8007a54:	d8f1      	bhi.n	8007a3a <RtcComputeTimerTimeToAlarmTick+0x272>
    }

    while( hours >= HoursInDay )
 8007a56:	e00b      	b.n	8007a70 <RtcComputeTimerTimeToAlarmTick+0x2a8>
    {
        hours -= HoursInDay;
 8007a58:	2318      	movs	r3, #24
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007a60:	1a9b      	subs	r3, r3, r2
 8007a62:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        days++;
 8007a66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    while( hours >= HoursInDay )
 8007a70:	2318      	movs	r3, #24
 8007a72:	461a      	mov	r2, r3
 8007a74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d2ed      	bcs.n	8007a58 <RtcComputeTimerTimeToAlarmTick+0x290>
    }

    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + Century ) % 4 ) == 0 )
 8007a7c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d009      	beq.n	8007a98 <RtcComputeTimerTimeToAlarmTick+0x2d0>
 8007a84:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8007a88:	461a      	mov	r2, r3
 8007a8a:	4b34      	ldr	r3, [pc, #208]	@ (8007b5c <RtcComputeTimerTimeToAlarmTick+0x394>)
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f003 0303 	and.w	r3, r3, #3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d118      	bne.n	8007aca <RtcComputeTimerTimeToAlarmTick+0x302>
    {
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 8007a98:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	4a30      	ldr	r2, [pc, #192]	@ (8007b60 <RtcComputeTimerTimeToAlarmTick+0x398>)
 8007aa0:	5cd3      	ldrb	r3, [r2, r3]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d926      	bls.n	8007afa <RtcComputeTimerTimeToAlarmTick+0x332>
        {
            days = days % DaysInMonthLeapYear[now.CalendarDate.Month - 1];
 8007aac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007ab0:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8007ab4:	3a01      	subs	r2, #1
 8007ab6:	492a      	ldr	r1, [pc, #168]	@ (8007b60 <RtcComputeTimerTimeToAlarmTick+0x398>)
 8007ab8:	5c8a      	ldrb	r2, [r1, r2]
 8007aba:	fb93 f1f2 	sdiv	r1, r3, r2
 8007abe:	fb01 f202 	mul.w	r2, r1, r2
 8007ac2:	1a9b      	subs	r3, r3, r2
 8007ac4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 8007ac8:	e017      	b.n	8007afa <RtcComputeTimerTimeToAlarmTick+0x332>
        }
    }
    else
    {
        if( days > DaysInMonth[now.CalendarDate.Month - 1] )
 8007aca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	4a24      	ldr	r2, [pc, #144]	@ (8007b64 <RtcComputeTimerTimeToAlarmTick+0x39c>)
 8007ad2:	5cd3      	ldrb	r3, [r2, r3]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d90d      	bls.n	8007afa <RtcComputeTimerTimeToAlarmTick+0x332>
        {   
            days = days % DaysInMonth[now.CalendarDate.Month - 1];
 8007ade:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007ae2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8007ae6:	3a01      	subs	r2, #1
 8007ae8:	491e      	ldr	r1, [pc, #120]	@ (8007b64 <RtcComputeTimerTimeToAlarmTick+0x39c>)
 8007aea:	5c8a      	ldrb	r2, [r1, r2]
 8007aec:	fb93 f1f2 	sdiv	r1, r3, r2
 8007af0:	fb01 f202 	mul.w	r2, r1, r2
 8007af4:	1a9b      	subs	r3, r3, r2
 8007af6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        }
    }

    calendar.CalendarTime.Seconds = seconds;
 8007afa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	75bb      	strb	r3, [r7, #22]
    calendar.CalendarTime.Minutes = minutes;
 8007b02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	757b      	strb	r3, [r7, #21]
    calendar.CalendarTime.Hours = hours;
 8007b0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	753b      	strb	r3, [r7, #20]
    calendar.CalendarDate.Date = days;
 8007b12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	743b      	strb	r3, [r7, #16]

    return calendar;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	461d      	mov	r5, r3
 8007b1e:	f107 040c 	add.w	r4, r7, #12
 8007b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b26:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007b2a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	3748      	adds	r7, #72	@ 0x48
 8007b32:	46bd      	mov	sp, r7
 8007b34:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007b38:	b002      	add	sp, #8
 8007b3a:	4770      	bx	lr
 8007b3c:	f3af 8000 	nop.w
 8007b40:	a0b5ed8d 	.word	0xa0b5ed8d
 8007b44:	3f60c6f7 	.word	0x3f60c6f7
 8007b48:	00015180 	.word	0x00015180
 8007b4c:	3fdf4000 	.word	0x3fdf4000
 8007b50:	20000388 	.word	0x20000388
 8007b54:	408f4000 	.word	0x408f4000
 8007b58:	3ff00000 	.word	0x3ff00000
 8007b5c:	2000032c 	.word	0x2000032c
 8007b60:	0800c2e0 	.word	0x0800c2e0
 8007b64:	0800c2d4 	.word	0x0800c2d4

08007b68 <RtcConvertCalendarTickToTimerTime>:

    return calendar;
}

static TimerTime_t RtcConvertCalendarTickToTimerTime( RtcCalendar_t *calendar )
{
 8007b68:	b5b0      	push	{r4, r5, r7, lr}
 8007b6a:	b08e      	sub	sp, #56	@ 0x38
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
    TimerTime_t timeCounter = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	62bb      	str	r3, [r7, #40]	@ 0x28
    RtcCalendar_t now;
    double timeCounterTemp = 0.0;
 8007b74:	f04f 0200 	mov.w	r2, #0
 8007b78:	f04f 0300 	mov.w	r3, #0
 8007b7c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Passing a NULL pointer will compute from "now" else,
    // compute from the given calendar value
    if( calendar == NULL )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d105      	bne.n	8007b92 <RtcConvertCalendarTickToTimerTime+0x2a>
    {
        now = RtcGetCalendar( );
 8007b86:	f107 030c 	add.w	r3, r7, #12
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 f906 	bl	8007d9c <RtcGetCalendar>
 8007b90:	e009      	b.n	8007ba6 <RtcConvertCalendarTickToTimerTime+0x3e>
    }
    else
    {
        now = *calendar;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f107 040c 	add.w	r4, r7, #12
 8007b98:	461d      	mov	r5, r3
 8007b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }

    // Years (calculation valid up to year 2099)
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007baa:	e02c      	b.n	8007c06 <RtcConvertCalendarTickToTimerTime+0x9e>
    {
        if( ( i == 0 ) || ( i % 4 ) == 0 )
 8007bac:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d005      	beq.n	8007bc0 <RtcConvertCalendarTickToTimerTime+0x58>
 8007bb4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007bb6:	f003 0303 	and.w	r3, r3, #3
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10e      	bne.n	8007bde <RtcConvertCalendarTickToTimerTime+0x76>
        {
            timeCounterTemp += ( double )SecondsInLeapYear;
 8007bc0:	4b5d      	ldr	r3, [pc, #372]	@ (8007d38 <RtcConvertCalendarTickToTimerTime+0x1d0>)
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7f8 fce2 	bl	800058c <__aeabi_ui2d>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007bd0:	f7f8 fba0 	bl	8000314 <__adddf3>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8007bdc:	e00d      	b.n	8007bfa <RtcConvertCalendarTickToTimerTime+0x92>
        }
        else
        {
            timeCounterTemp += ( double )SecondsInYear;
 8007bde:	4b57      	ldr	r3, [pc, #348]	@ (8007d3c <RtcConvertCalendarTickToTimerTime+0x1d4>)
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7f8 fcd3 	bl	800058c <__aeabi_ui2d>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007bee:	f7f8 fb91 	bl	8000314 <__adddf3>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 8007bfa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	3301      	adds	r3, #1
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007c06:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8007c0a:	7c7b      	ldrb	r3, [r7, #17]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	89bb      	ldrh	r3, [r7, #12]
 8007c10:	440b      	add	r3, r1
 8007c12:	429a      	cmp	r2, r3
 8007c14:	dbca      	blt.n	8007bac <RtcConvertCalendarTickToTimerTime+0x44>
        }
    }

    // Months (calculation valid up to year 2099)*/
    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + now.CalendarCentury ) % 4 ) == 0 )
 8007c16:	7c7b      	ldrb	r3, [r7, #17]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d007      	beq.n	8007c2c <RtcConvertCalendarTickToTimerTime+0xc4>
 8007c1c:	7c7b      	ldrb	r3, [r7, #17]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	89bb      	ldrh	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f003 0303 	and.w	r3, r3, #3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d124      	bne.n	8007c76 <RtcConvertCalendarTickToTimerTime+0x10e>
    {
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8007c32:	e019      	b.n	8007c68 <RtcConvertCalendarTickToTimerTime+0x100>
        {
            timeCounterTemp += ( double )( DaysInMonthLeapYear[i] * SecondsInDay );
 8007c34:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007c38:	4a41      	ldr	r2, [pc, #260]	@ (8007d40 <RtcConvertCalendarTickToTimerTime+0x1d8>)
 8007c3a:	5cd3      	ldrb	r3, [r2, r3]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	4b41      	ldr	r3, [pc, #260]	@ (8007d44 <RtcConvertCalendarTickToTimerTime+0x1dc>)
 8007c40:	fb02 f303 	mul.w	r3, r2, r3
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7f8 fca1 	bl	800058c <__aeabi_ui2d>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007c52:	f7f8 fb5f 	bl	8000314 <__adddf3>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 8007c5e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007c62:	3301      	adds	r3, #1
 8007c64:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8007c68:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	429a      	cmp	r2, r3
 8007c72:	dbdf      	blt.n	8007c34 <RtcConvertCalendarTickToTimerTime+0xcc>
 8007c74:	e023      	b.n	8007cbe <RtcConvertCalendarTickToTimerTime+0x156>
        }
    }
    else
    {
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 8007c76:	2300      	movs	r3, #0
 8007c78:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8007c7c:	e019      	b.n	8007cb2 <RtcConvertCalendarTickToTimerTime+0x14a>
        {
            timeCounterTemp += ( double )( DaysInMonth[i] * SecondsInDay );
 8007c7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c82:	4a31      	ldr	r2, [pc, #196]	@ (8007d48 <RtcConvertCalendarTickToTimerTime+0x1e0>)
 8007c84:	5cd3      	ldrb	r3, [r2, r3]
 8007c86:	461a      	mov	r2, r3
 8007c88:	4b2e      	ldr	r3, [pc, #184]	@ (8007d44 <RtcConvertCalendarTickToTimerTime+0x1dc>)
 8007c8a:	fb02 f303 	mul.w	r3, r2, r3
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7f8 fc7c 	bl	800058c <__aeabi_ui2d>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007c9c:	f7f8 fb3a 	bl	8000314 <__adddf3>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 8007ca8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007cac:	3301      	adds	r3, #1
 8007cae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8007cb2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	dbdf      	blt.n	8007c7e <RtcConvertCalendarTickToTimerTime+0x116>
        }
    }

    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 8007cbe:	7dbb      	ldrb	r3, [r7, #22]
 8007cc0:	4619      	mov	r1, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 8007cc2:	7d3b      	ldrb	r3, [r7, #20]
 8007cc4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8007cc8:	fb03 f202 	mul.w	r2, r3, r2
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
 8007ccc:	7d7b      	ldrb	r3, [r7, #21]
 8007cce:	203c      	movs	r0, #60	@ 0x3c
 8007cd0:	fb00 f303 	mul.w	r3, r0, r3
 8007cd4:	4413      	add	r3, r2
 8007cd6:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( now.CalendarDate.Date * SecondsInDay ) ) );
 8007cd8:	7c3b      	ldrb	r3, [r7, #16]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4b19      	ldr	r3, [pc, #100]	@ (8007d44 <RtcConvertCalendarTickToTimerTime+0x1dc>)
 8007cde:	fb01 f303 	mul.w	r3, r1, r3
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 8007ce2:	4413      	add	r3, r2
    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7f8 fc51 	bl	800058c <__aeabi_ui2d>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007cf2:	f7f8 fb0f 	bl	8000314 <__adddf3>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    timeCounterTemp = ( double )timeCounterTemp * RTC_ALARM_TICK_DURATION;
 8007cfe:	f04f 0200 	mov.w	r2, #0
 8007d02:	4b12      	ldr	r3, [pc, #72]	@ (8007d4c <RtcConvertCalendarTickToTimerTime+0x1e4>)
 8007d04:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007d08:	f7f8 fcba 	bl	8000680 <__aeabi_dmul>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    timeCounter = round( timeCounterTemp );
 8007d14:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8007d18:	f004 f9ba 	bl	800c090 <round>
 8007d1c:	ec53 2b10 	vmov	r2, r3, d0
 8007d20:	4610      	mov	r0, r2
 8007d22:	4619      	mov	r1, r3
 8007d24:	f7f8 ff6e 	bl	8000c04 <__aeabi_d2uiz>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return ( timeCounter );
 8007d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3738      	adds	r7, #56	@ 0x38
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bdb0      	pop	{r4, r5, r7, pc}
 8007d36:	bf00      	nop
 8007d38:	01e28500 	.word	0x01e28500
 8007d3c:	01e13380 	.word	0x01e13380
 8007d40:	0800c2e0 	.word	0x0800c2e0
 8007d44:	00015180 	.word	0x00015180
 8007d48:	0800c2d4 	.word	0x0800c2d4
 8007d4c:	3fdf4000 	.word	0x3fdf4000

08007d50 <RtcCheckCalendarRollOver>:

static void RtcCheckCalendarRollOver( uint8_t year )
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	71fb      	strb	r3, [r7, #7]
    if( year == 99 )
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	2b63      	cmp	r3, #99	@ 0x63
 8007d5e:	d102      	bne.n	8007d66 <RtcCheckCalendarRollOver+0x16>
    {
        CallendarRollOverReady = true;
 8007d60:	4b0c      	ldr	r3, [pc, #48]	@ (8007d94 <RtcCheckCalendarRollOver+0x44>)
 8007d62:	2201      	movs	r2, #1
 8007d64:	701a      	strb	r2, [r3, #0]
    }

    if( ( CallendarRollOverReady == true ) && ( ( year + Century ) == Century ) )
 8007d66:	4b0b      	ldr	r3, [pc, #44]	@ (8007d94 <RtcCheckCalendarRollOver+0x44>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00b      	beq.n	8007d86 <RtcCheckCalendarRollOver+0x36>
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d108      	bne.n	8007d86 <RtcCheckCalendarRollOver+0x36>
    {   // Indicate a roll-over of the calendar
        CallendarRollOverReady = false;
 8007d74:	4b07      	ldr	r3, [pc, #28]	@ (8007d94 <RtcCheckCalendarRollOver+0x44>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	701a      	strb	r2, [r3, #0]
        Century = Century + 100;
 8007d7a:	4b07      	ldr	r3, [pc, #28]	@ (8007d98 <RtcCheckCalendarRollOver+0x48>)
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	3364      	adds	r3, #100	@ 0x64
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	4b05      	ldr	r3, [pc, #20]	@ (8007d98 <RtcCheckCalendarRollOver+0x48>)
 8007d84:	801a      	strh	r2, [r3, #0]
    }
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	2000032e 	.word	0x2000032e
 8007d98:	2000032c 	.word	0x2000032c

08007d9c <RtcGetCalendar>:

static RtcCalendar_t RtcGetCalendar( void )
{
 8007d9c:	b5b0      	push	{r4, r5, r7, lr}
 8007d9e:	b08a      	sub	sp, #40	@ 0x28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
    RtcCalendar_t calendar;
    HAL_RTC_GetTime( &RtcHandle, &calendar.CalendarTime, RTC_FORMAT_BIN );
 8007da4:	f107 030c 	add.w	r3, r7, #12
 8007da8:	3308      	adds	r3, #8
 8007daa:	2200      	movs	r2, #0
 8007dac:	4619      	mov	r1, r3
 8007dae:	4810      	ldr	r0, [pc, #64]	@ (8007df0 <RtcGetCalendar+0x54>)
 8007db0:	f7fd fbea 	bl	8005588 <HAL_RTC_GetTime>
    HAL_RTC_GetDate( &RtcHandle, &calendar.CalendarDate, RTC_FORMAT_BIN );
 8007db4:	f107 030c 	add.w	r3, r7, #12
 8007db8:	3302      	adds	r3, #2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	480c      	ldr	r0, [pc, #48]	@ (8007df0 <RtcGetCalendar+0x54>)
 8007dc0:	f7fd fcda 	bl	8005778 <HAL_RTC_GetDate>
    calendar.CalendarCentury = Century;
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007df4 <RtcGetCalendar+0x58>)
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	81bb      	strh	r3, [r7, #12]
    RtcCheckCalendarRollOver( calendar.CalendarDate.Year );
 8007dca:	7c7b      	ldrb	r3, [r7, #17]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff ffbf 	bl	8007d50 <RtcCheckCalendarRollOver>
    return calendar;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	461d      	mov	r5, r3
 8007dd6:	f107 040c 	add.w	r4, r7, #12
 8007dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007dde:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007de2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	3728      	adds	r7, #40	@ 0x28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bdb0      	pop	{r4, r5, r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000350 	.word	0x20000350
 8007df4:	2000032c 	.word	0x2000032c

08007df8 <RTC_IRQHandler>:
/*!
 * \brief RTC IRQ Handler of the RTC Alarm
 */
//void RTC_Alarm_IRQHandler( void )   // STM32L476
void RTC_IRQHandler( void )    // changed for STM32U5 - PK
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
    HAL_RTC_AlarmIRQHandler( &RtcHandle );
 8007dfc:	480a      	ldr	r0, [pc, #40]	@ (8007e28 <RTC_IRQHandler+0x30>)
 8007dfe:	f7fd ff09 	bl	8005c14 <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8007e02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007e06:	4808      	ldr	r0, [pc, #32]	@ (8007e28 <RTC_IRQHandler+0x30>)
 8007e08:	f7fd fe04 	bl	8005a14 <HAL_RTC_DeactivateAlarm>
    RtcRecoverMcuStatus( );
 8007e0c:	f7ff fc1c 	bl	8007648 <RtcRecoverMcuStatus>
    RtcComputeWakeUpTime( );
 8007e10:	f7ff fc22 	bl	8007658 <RtcComputeWakeUpTime>
//    BlockLowPowerDuringTask( false );
    BlockLowPowerDuringTask( true );   // PK bugfix
 8007e14:	2001      	movs	r0, #1
 8007e16:	f7ff fc03 	bl	8007620 <BlockLowPowerDuringTask>
//    DelayMs(10);   // BUG FIX PK
    printf("RTC_IRQHandler\n\r");
 8007e1a:	4804      	ldr	r0, [pc, #16]	@ (8007e2c <RTC_IRQHandler+0x34>)
 8007e1c:	f002 ff74 	bl	800ad08 <iprintf>
    TimerIrqHandler( );
 8007e20:	f000 fb34 	bl	800848c <TimerIrqHandler>
}
 8007e24:	bf00      	nop
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20000350 	.word	0x20000350
 8007e2c:	0800c1d0 	.word	0x0800c1d0

08007e30 <SpiInit>:
}SPIName;

void Error_Handler(void);   // should be defined in main.c - PK

void SpiInit( Spi_t *obj, PinNames mosi, PinNames miso, PinNames sclk, PinNames nss )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	4608      	mov	r0, r1
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	4603      	mov	r3, r0
 8007e40:	70fb      	strb	r3, [r7, #3]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70bb      	strb	r3, [r7, #2]
 8007e46:	4613      	mov	r3, r2
 8007e48:	707b      	strb	r3, [r7, #1]
    __HAL_RCC_SPI1_FORCE_RESET( );
 8007e4a:	4b3f      	ldr	r3, [pc, #252]	@ (8007f48 <SpiInit+0x118>)
 8007e4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e4e:	4a3e      	ldr	r2, [pc, #248]	@ (8007f48 <SpiInit+0x118>)
 8007e50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007e54:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_SPI1_RELEASE_RESET( );
 8007e56:	4b3c      	ldr	r3, [pc, #240]	@ (8007f48 <SpiInit+0x118>)
 8007e58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e5a:	4a3b      	ldr	r2, [pc, #236]	@ (8007f48 <SpiInit+0x118>)
 8007e5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e60:	67d3      	str	r3, [r2, #124]	@ 0x7c

    __HAL_RCC_SPI1_CLK_ENABLE( );
 8007e62:	4b39      	ldr	r3, [pc, #228]	@ (8007f48 <SpiInit+0x118>)
 8007e64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e68:	4a37      	ldr	r2, [pc, #220]	@ (8007f48 <SpiInit+0x118>)
 8007e6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007e6e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8007e72:	4b35      	ldr	r3, [pc, #212]	@ (8007f48 <SpiInit+0x118>)
 8007e74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	68fb      	ldr	r3, [r7, #12]

//    obj->Spi.Instance = ( SPI_TypeDef *) SPI1_BASE;
    obj->Spi.Instance = SPI1; //( SPI_TypeDef *) SPI1_BASE;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a32      	ldr	r2, [pc, #200]	@ (8007f4c <SpiInit+0x11c>)
 8007e84:	601a      	str	r2, [r3, #0]

    GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8007e8c:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8007e90:	2305      	movs	r3, #5
 8007e92:	9301      	str	r3, [sp, #4]
 8007e94:	2302      	movs	r3, #2
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f7ff faa2 	bl	80073e4 <GpioInit>
    GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f103 009c 	add.w	r0, r3, #156	@ 0x9c
 8007ea6:	f997 1002 	ldrsb.w	r1, [r7, #2]
 8007eaa:	2305      	movs	r3, #5
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	2302      	movs	r3, #2
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	f7ff fa95 	bl	80073e4 <GpioInit>
    GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
 8007ec0:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8007ec4:	2305      	movs	r3, #5
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	2302      	movs	r3, #2
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f7ff fa88 	bl	80073e4 <GpioInit>

    if( nss != NC )
 8007ed4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8007ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007edc:	d00d      	beq.n	8007efa <SpiInit+0xca>
    {
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI1 );
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f103 00b4 	add.w	r0, r3, #180	@ 0xb4
 8007ee4:	f997 1018 	ldrsb.w	r1, [r7, #24]
 8007ee8:	2305      	movs	r3, #5
 8007eea:	9301      	str	r3, [sp, #4]
 8007eec:	2301      	movs	r3, #1
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f7ff fa76 	bl	80073e4 <GpioInit>
 8007ef8:	e003      	b.n	8007f02 <SpiInit+0xd2>
    }
    else
    {
        obj->Spi.Init.NSS = SPI_NSS_SOFT;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007f00:	619a      	str	r2, [r3, #24]
    }

    if( nss == NC )
 8007f02:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8007f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0a:	d108      	bne.n	8007f1e <SpiInit+0xee>
    {
        SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	2300      	movs	r3, #0
 8007f12:	2200      	movs	r2, #0
 8007f14:	2107      	movs	r1, #7
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f81a 	bl	8007f50 <SpiFormat>
 8007f1c:	e007      	b.n	8007f2e <SpiInit+0xfe>
    }
    else
    {
        SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 8007f1e:	2301      	movs	r3, #1
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	2300      	movs	r3, #0
 8007f24:	2200      	movs	r2, #0
 8007f26:	2107      	movs	r1, #7
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f811 	bl	8007f50 <SpiFormat>

//    HAL_SPI_Init( &obj->Spi );

//	SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};

	if (HAL_SPI_Init(&obj->Spi) != HAL_OK)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fd ffef 	bl	8005f14 <HAL_SPI_Init>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <SpiInit+0x110>
	{
		Error_Handler();
 8007f3c:	f7f9 fde4 	bl	8001b08 <Error_Handler>
		{
			Error_Handler();
		}
	}
	*/
}
 8007f40:	bf00      	nop
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	46020c00 	.word	0x46020c00
 8007f4c:	40013000 	.word	0x40013000

08007f50 <SpiFormat>:
    GpioInit( &obj->Sclk, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &obj->Nss, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}

void SpiFormat( Spi_t *obj, uint32_t bits, int8_t cpol, int8_t cpha, int8_t slave )
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	460b      	mov	r3, r1
 8007f60:	71fb      	strb	r3, [r7, #7]
 8007f62:	4613      	mov	r3, r2
 8007f64:	71bb      	strb	r3, [r7, #6]
	/* SPI1 parameter configuration*/
    if( slave == 0 )
 8007f66:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d104      	bne.n	8007f78 <SpiFormat+0x28>
    {
        obj->Spi.Init.Mode = SPI_MODE_MASTER;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007f74:	605a      	str	r2, [r3, #4]
 8007f76:	e002      	b.n	8007f7e <SpiFormat+0x2e>
    }
    else
    {
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	605a      	str	r2, [r3, #4]
    }

	obj->Spi.Init.Direction = SPI_DIRECTION_2LINES;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	609a      	str	r2, [r3, #8]
	if( bits == SPI_DATASIZE_8BIT )
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2b07      	cmp	r3, #7
 8007f88:	d103      	bne.n	8007f92 <SpiFormat+0x42>
	{
		obj->Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2207      	movs	r2, #7
 8007f8e:	60da      	str	r2, [r3, #12]
 8007f90:	e002      	b.n	8007f98 <SpiFormat+0x48>
	}
	else
	{
		obj->Spi.Init.DataSize = SPI_DATASIZE_16BIT;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	220f      	movs	r2, #15
 8007f96:	60da      	str	r2, [r3, #12]
	}

	obj->Spi.Init.CLKPolarity = cpol;
 8007f98:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	611a      	str	r2, [r3, #16]
	obj->Spi.Init.CLKPhase = cpha;
 8007fa0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	615a      	str	r2, [r3, #20]
	obj->Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8007fae:	61da      	str	r2, [r3, #28]
	obj->Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	621a      	str	r2, [r3, #32]
	obj->Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	625a      	str	r2, [r3, #36]	@ 0x24
	obj->Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	629a      	str	r2, [r3, #40]	@ 0x28
	obj->Spi.Init.CRCPolynomial = 0x7;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2207      	movs	r2, #7
 8007fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
	obj->Spi.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007fce:	635a      	str	r2, [r3, #52]	@ 0x34
	obj->Spi.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	639a      	str	r2, [r3, #56]	@ 0x38
	obj->Spi.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	63da      	str	r2, [r3, #60]	@ 0x3c
	obj->Spi.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	649a      	str	r2, [r3, #72]	@ 0x48
	obj->Spi.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	64da      	str	r2, [r3, #76]	@ 0x4c
	obj->Spi.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	651a      	str	r2, [r3, #80]	@ 0x50
	obj->Spi.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	655a      	str	r2, [r3, #84]	@ 0x54
	obj->Spi.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	659a      	str	r2, [r3, #88]	@ 0x58
	obj->Spi.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
	obj->Spi.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8008006:	bf00      	nop
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
	...

08008014 <SX1276IoInit>:
 */
Gpio_t AntRx;
Gpio_t AntTx;

void SX1276IoInit( void )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af02      	add	r7, sp, #8
    GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800801a:	2301      	movs	r3, #1
 800801c:	9301      	str	r3, [sp, #4]
 800801e:	2301      	movs	r3, #1
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	2300      	movs	r3, #0
 8008024:	2201      	movs	r2, #1
 8008026:	2129      	movs	r1, #41	@ 0x29
 8008028:	4820      	ldr	r0, [pc, #128]	@ (80080ac <SX1276IoInit+0x98>)
 800802a:	f7ff f9db 	bl	80073e4 <GpioInit>

    GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800802e:	2300      	movs	r3, #0
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	2301      	movs	r3, #1
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	2300      	movs	r3, #0
 8008038:	2200      	movs	r2, #0
 800803a:	2112      	movs	r1, #18
 800803c:	481c      	ldr	r0, [pc, #112]	@ (80080b0 <SX1276IoInit+0x9c>)
 800803e:	f7ff f9d1 	bl	80073e4 <GpioInit>
    GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8008042:	2300      	movs	r3, #0
 8008044:	9301      	str	r3, [sp, #4]
 8008046:	2301      	movs	r3, #1
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	2300      	movs	r3, #0
 800804c:	2200      	movs	r2, #0
 800804e:	2111      	movs	r1, #17
 8008050:	4818      	ldr	r0, [pc, #96]	@ (80080b4 <SX1276IoInit+0xa0>)
 8008052:	f7ff f9c7 	bl	80073e4 <GpioInit>
    GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8008056:	2300      	movs	r3, #0
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	2301      	movs	r3, #1
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	2300      	movs	r3, #0
 8008060:	2200      	movs	r2, #0
 8008062:	211f      	movs	r1, #31
 8008064:	4814      	ldr	r0, [pc, #80]	@ (80080b8 <SX1276IoInit+0xa4>)
 8008066:	f7ff f9bd 	bl	80073e4 <GpioInit>
    GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800806a:	2300      	movs	r3, #0
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	2301      	movs	r3, #1
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	2300      	movs	r3, #0
 8008074:	2200      	movs	r2, #0
 8008076:	211e      	movs	r1, #30
 8008078:	4810      	ldr	r0, [pc, #64]	@ (80080bc <SX1276IoInit+0xa8>)
 800807a:	f7ff f9b3 	bl	80073e4 <GpioInit>
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800807e:	2300      	movs	r3, #0
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	2301      	movs	r3, #1
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	2300      	movs	r3, #0
 8008088:	2200      	movs	r2, #0
 800808a:	211d      	movs	r1, #29
 800808c:	480c      	ldr	r0, [pc, #48]	@ (80080c0 <SX1276IoInit+0xac>)
 800808e:	f7ff f9a9 	bl	80073e4 <GpioInit>
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8008092:	2300      	movs	r3, #0
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	2301      	movs	r3, #1
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	2300      	movs	r3, #0
 800809c:	2200      	movs	r2, #0
 800809e:	2118      	movs	r1, #24
 80080a0:	4808      	ldr	r0, [pc, #32]	@ (80080c4 <SX1276IoInit+0xb0>)
 80080a2:	f7ff f99f 	bl	80073e4 <GpioInit>
}
 80080a6:	bf00      	nop
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	200005bc 	.word	0x200005bc
 80080b0:	200004c0 	.word	0x200004c0
 80080b4:	200004cc 	.word	0x200004cc
 80080b8:	200004d8 	.word	0x200004d8
 80080bc:	200004e4 	.word	0x200004e4
 80080c0:	200004f0 	.word	0x200004f0
 80080c4:	200004fc 	.word	0x200004fc

080080c8 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
    GpioSetInterrupt( &SX1276.DIO0, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2203      	movs	r2, #3
 80080d6:	2101      	movs	r1, #1
 80080d8:	4817      	ldr	r0, [pc, #92]	@ (8008138 <SX1276IoIrqInit+0x70>)
 80080da:	f7ff f9a7 	bl	800742c <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3304      	adds	r3, #4
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2203      	movs	r2, #3
 80080e6:	2101      	movs	r1, #1
 80080e8:	4814      	ldr	r0, [pc, #80]	@ (800813c <SX1276IoIrqInit+0x74>)
 80080ea:	f7ff f99f 	bl	800742c <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO2, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3308      	adds	r3, #8
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2203      	movs	r2, #3
 80080f6:	2101      	movs	r1, #1
 80080f8:	4811      	ldr	r0, [pc, #68]	@ (8008140 <SX1276IoIrqInit+0x78>)
 80080fa:	f7ff f997 	bl	800742c <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO3, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	330c      	adds	r3, #12
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2203      	movs	r2, #3
 8008106:	2101      	movs	r1, #1
 8008108:	480e      	ldr	r0, [pc, #56]	@ (8008144 <SX1276IoIrqInit+0x7c>)
 800810a:	f7ff f98f 	bl	800742c <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO4, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[4] );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3310      	adds	r3, #16
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2203      	movs	r2, #3
 8008116:	2101      	movs	r1, #1
 8008118:	480b      	ldr	r0, [pc, #44]	@ (8008148 <SX1276IoIrqInit+0x80>)
 800811a:	f7ff f987 	bl	800742c <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO5, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[5] );
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	3314      	adds	r3, #20
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2203      	movs	r2, #3
 8008126:	2101      	movs	r1, #1
 8008128:	4808      	ldr	r0, [pc, #32]	@ (800814c <SX1276IoIrqInit+0x84>)
 800812a:	f7ff f97f 	bl	800742c <GpioSetInterrupt>
}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	200004c0 	.word	0x200004c0
 800813c:	200004cc 	.word	0x200004cc
 8008140:	200004d8 	.word	0x200004d8
 8008144:	200004e4 	.word	0x200004e4
 8008148:	200004f0 	.word	0x200004f0
 800814c:	200004fc 	.word	0x200004fc

08008150 <SX1276GetPaSelect>:
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}

uint8_t SX1276GetPaSelect( uint32_t channel )
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_PABOOST;
 8008158:	2380      	movs	r3, #128	@ 0x80
}
 800815a:	4618      	mov	r0, r3
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
	...

08008168 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 8008172:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <SX1276SetAntSwLowPower+0x38>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	79fa      	ldrb	r2, [r7, #7]
 8008178:	429a      	cmp	r2, r3
 800817a:	d00d      	beq.n	8008198 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 800817c:	4a08      	ldr	r2, [pc, #32]	@ (80081a0 <SX1276SetAntSwLowPower+0x38>)
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	7013      	strb	r3, [r2, #0]
    
        if( status == false )
 8008182:	79fb      	ldrb	r3, [r7, #7]
 8008184:	f083 0301 	eor.w	r3, r3, #1
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 800818e:	f000 f809 	bl	80081a4 <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 8008192:	e001      	b.n	8008198 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 8008194:	f000 f824 	bl	80081e0 <SX1276AntSwDeInit>
}
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	2000038c 	.word	0x2000038c

080081a4 <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af02      	add	r7, sp, #8
    GpioInit( &AntTx, RADIO_ANT_SWITCH_TX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 80081aa:	2300      	movs	r3, #0
 80081ac:	9301      	str	r3, [sp, #4]
 80081ae:	2301      	movs	r3, #1
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	2300      	movs	r3, #0
 80081b4:	2201      	movs	r2, #1
 80081b6:	2114      	movs	r1, #20
 80081b8:	4807      	ldr	r0, [pc, #28]	@ (80081d8 <SX1276AntSwInit+0x34>)
 80081ba:	f7ff f913 	bl	80073e4 <GpioInit>
    GpioInit( &AntRx, RADIO_ANT_SWITCH_RX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 80081be:	2301      	movs	r3, #1
 80081c0:	9301      	str	r3, [sp, #4]
 80081c2:	2301      	movs	r3, #1
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	2300      	movs	r3, #0
 80081c8:	2201      	movs	r2, #1
 80081ca:	2115      	movs	r1, #21
 80081cc:	4803      	ldr	r0, [pc, #12]	@ (80081dc <SX1276AntSwInit+0x38>)
 80081ce:	f7ff f909 	bl	80073e4 <GpioInit>
}
 80081d2:	bf00      	nop
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	2000039c 	.word	0x2000039c
 80081dc:	20000390 	.word	0x20000390

080081e0 <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af02      	add	r7, sp, #8
    GpioInit( &AntTx, RADIO_ANT_SWITCH_TX, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 80081e6:	2300      	movs	r3, #0
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	2300      	movs	r3, #0
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	2300      	movs	r3, #0
 80081f0:	2203      	movs	r2, #3
 80081f2:	2114      	movs	r1, #20
 80081f4:	4807      	ldr	r0, [pc, #28]	@ (8008214 <SX1276AntSwDeInit+0x34>)
 80081f6:	f7ff f8f5 	bl	80073e4 <GpioInit>
    GpioInit( &AntRx, RADIO_ANT_SWITCH_RX, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 80081fa:	2300      	movs	r3, #0
 80081fc:	9301      	str	r3, [sp, #4]
 80081fe:	2300      	movs	r3, #0
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	2300      	movs	r3, #0
 8008204:	2203      	movs	r2, #3
 8008206:	2115      	movs	r1, #21
 8008208:	4803      	ldr	r0, [pc, #12]	@ (8008218 <SX1276AntSwDeInit+0x38>)
 800820a:	f7ff f8eb 	bl	80073e4 <GpioInit>
}
 800820e:	bf00      	nop
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	2000039c 	.word	0x2000039c
 8008218:	20000390 	.word	0x20000390

0800821c <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t rxTx )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	71fb      	strb	r3, [r7, #7]
    if( rxTx != 0 ) // 1: TX, 0: RX
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d008      	beq.n	800823e <SX1276SetAntSw+0x22>
    {
        GpioWrite( &AntRx, 0 );
 800822c:	2100      	movs	r1, #0
 800822e:	480a      	ldr	r0, [pc, #40]	@ (8008258 <SX1276SetAntSw+0x3c>)
 8008230:	f7ff f917 	bl	8007462 <GpioWrite>
        GpioWrite( &AntTx, 1 );
 8008234:	2101      	movs	r1, #1
 8008236:	4809      	ldr	r0, [pc, #36]	@ (800825c <SX1276SetAntSw+0x40>)
 8008238:	f7ff f913 	bl	8007462 <GpioWrite>
    else
    {
        GpioWrite( &AntRx, 1 );
        GpioWrite( &AntTx, 0 );
    }
}
 800823c:	e007      	b.n	800824e <SX1276SetAntSw+0x32>
        GpioWrite( &AntRx, 1 );
 800823e:	2101      	movs	r1, #1
 8008240:	4805      	ldr	r0, [pc, #20]	@ (8008258 <SX1276SetAntSw+0x3c>)
 8008242:	f7ff f90e 	bl	8007462 <GpioWrite>
        GpioWrite( &AntTx, 0 );
 8008246:	2100      	movs	r1, #0
 8008248:	4804      	ldr	r0, [pc, #16]	@ (800825c <SX1276SetAntSw+0x40>)
 800824a:	f7ff f90a 	bl	8007462 <GpioWrite>
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000390 	.word	0x20000390
 800825c:	2000039c 	.word	0x2000039c

08008260 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8008268:	2301      	movs	r3, #1
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <TimerInit>:
 * \retval value current timer value
 */
TimerTime_t TimerGetValue( void );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	605a      	str	r2, [r3, #4]
    obj->IsRunning = false;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	721a      	strb	r2, [r3, #8]
    obj->Callback = callback;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	60da      	str	r2, [r3, #12]
    obj->Next = NULL;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	611a      	str	r2, [r3, #16]
}
 800829e:	bf00      	nop
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
	...

080082ac <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	60fb      	str	r3, [r7, #12]
    uint32_t remainingTime = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 80082bc:	b672      	cpsid	i
}
 80082be:	bf00      	nop

    __disable_irq( );

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <TimerStart+0x26>
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f9d8 	bl	800867c <TimerExists>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <TimerStart+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 80082d2:	b662      	cpsie	i
}
 80082d4:	bf00      	nop
    {
        __enable_irq( );
        return;
 80082d6:	e03e      	b.n	8008356 <TimerStart+0xaa>
    }

    obj->Timestamp = obj->ReloadValue;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	601a      	str	r2, [r3, #0]
    obj->IsRunning = false;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == NULL )
 80082e6:	4b1d      	ldr	r3, [pc, #116]	@ (800835c <TimerStart+0xb0>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <TimerStart+0x50>
    {
        TimerInsertNewHeadTimer( obj, obj->Timestamp );
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f8a1 	bl	800843c <TimerInsertNewHeadTimer>
 80082fa:	e02a      	b.n	8008352 <TimerStart+0xa6>
    }
    else
    {
        if( TimerListHead->IsRunning == true )
 80082fc:	4b17      	ldr	r3, [pc, #92]	@ (800835c <TimerStart+0xb0>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	7a1b      	ldrb	r3, [r3, #8]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d013      	beq.n	800832e <TimerStart+0x82>
        {
            elapsedTime = TimerGetValue( );
 8008306:	f000 f9e9 	bl	80086dc <TimerGetValue>
 800830a:	60f8      	str	r0, [r7, #12]
            if( elapsedTime > TimerListHead->Timestamp )
 800830c:	4b13      	ldr	r3, [pc, #76]	@ (800835c <TimerStart+0xb0>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	429a      	cmp	r2, r3
 8008316:	d903      	bls.n	8008320 <TimerStart+0x74>
            {
                elapsedTime = TimerListHead->Timestamp; // security but should never occur
 8008318:	4b10      	ldr	r3, [pc, #64]	@ (800835c <TimerStart+0xb0>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	60fb      	str	r3, [r7, #12]
            }
            remainingTime = TimerListHead->Timestamp - elapsedTime;
 8008320:	4b0e      	ldr	r3, [pc, #56]	@ (800835c <TimerStart+0xb0>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	60bb      	str	r3, [r7, #8]
 800832c:	e003      	b.n	8008336 <TimerStart+0x8a>
        }
        else
        {
            remainingTime = TimerListHead->Timestamp;
 800832e:	4b0b      	ldr	r3, [pc, #44]	@ (800835c <TimerStart+0xb0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	60bb      	str	r3, [r7, #8]
        }

        if( obj->Timestamp < remainingTime )
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	429a      	cmp	r2, r3
 800833e:	d904      	bls.n	800834a <TimerStart+0x9e>
        {
            TimerInsertNewHeadTimer( obj, remainingTime );
 8008340:	68b9      	ldr	r1, [r7, #8]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f87a 	bl	800843c <TimerInsertNewHeadTimer>
 8008348:	e003      	b.n	8008352 <TimerStart+0xa6>
        }
        else
        {
             TimerInsertTimer( obj, remainingTime );
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f807 	bl	8008360 <TimerInsertTimer>
  __ASM volatile ("cpsie i" : : : "memory");
 8008352:	b662      	cpsie	i
}
 8008354:	bf00      	nop
        }
    }
    __enable_irq( );
}
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	200003ac 	.word	0x200003ac

08008360 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
    uint32_t aggregatedTimestamp = 0;      // hold the sum of timestamps
 800836a:	2300      	movs	r3, #0
 800836c:	617b      	str	r3, [r7, #20]
    uint32_t aggregatedTimestampNext = 0;  // hold the sum of timestamps up to the next event
 800836e:	2300      	movs	r3, #0
 8008370:	613b      	str	r3, [r7, #16]

    TimerEvent_t* prev = TimerListHead;
 8008372:	4b31      	ldr	r3, [pc, #196]	@ (8008438 <TimerInsertTimer+0xd8>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* cur = TimerListHead->Next;
 8008378:	4b2f      	ldr	r3, [pc, #188]	@ (8008438 <TimerInsertTimer+0xd8>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	60bb      	str	r3, [r7, #8]

    if( cur == NULL )
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10c      	bne.n	80083a0 <TimerInsertTimer+0x40>
    { // obj comes just after the head
        obj->Timestamp -= remainingTime;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	1ad2      	subs	r2, r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	601a      	str	r2, [r3, #0]
        prev->Next = obj;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	611a      	str	r2, [r3, #16]
        obj->Next = NULL;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	611a      	str	r2, [r3, #16]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
                }
            }
        }
    }
}
 800839e:	e045      	b.n	800842c <TimerInsertTimer+0xcc>
        aggregatedTimestamp = remainingTime;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	617b      	str	r3, [r7, #20]
        aggregatedTimestampNext = remainingTime + cur->Timestamp;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	4413      	add	r3, r2
 80083ac:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 80083ae:	e039      	b.n	8008424 <TimerInsertTimer+0xc4>
            if( aggregatedTimestampNext > obj->Timestamp )
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d916      	bls.n	80083e8 <TimerInsertTimer+0x88>
                obj->Timestamp -= aggregatedTimestamp;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	1ad2      	subs	r2, r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]
                if( cur != NULL )
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d006      	beq.n	80083da <TimerInsertTimer+0x7a>
                    cur->Timestamp -= obj->Timestamp;
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	1ad2      	subs	r2, r2, r3
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	601a      	str	r2, [r3, #0]
                prev->Next = obj;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	611a      	str	r2, [r3, #16]
                obj->Next = cur;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	611a      	str	r2, [r3, #16]
                break;
 80083e6:	e021      	b.n	800842c <TimerInsertTimer+0xcc>
                prev = cur;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	60fb      	str	r3, [r7, #12]
                cur = cur->Next;
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	60bb      	str	r3, [r7, #8]
                if( cur == NULL )
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10e      	bne.n	8008416 <TimerInsertTimer+0xb6>
                    aggregatedTimestamp = aggregatedTimestampNext;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	617b      	str	r3, [r7, #20]
                    obj->Timestamp -= aggregatedTimestamp;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	1ad2      	subs	r2, r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	601a      	str	r2, [r3, #0]
                    prev->Next = obj;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	611a      	str	r2, [r3, #16]
                    obj->Next = NULL;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	611a      	str	r2, [r3, #16]
                    break;
 8008414:	e00a      	b.n	800842c <TimerInsertTimer+0xcc>
                    aggregatedTimestamp = aggregatedTimestampNext;
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	617b      	str	r3, [r7, #20]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	4413      	add	r3, r2
 8008422:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1c2      	bne.n	80083b0 <TimerInsertTimer+0x50>
}
 800842a:	e7ff      	b.n	800842c <TimerInsertTimer+0xcc>
 800842c:	bf00      	nop
 800842e:	371c      	adds	r7, #28
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	200003ac 	.word	0x200003ac

0800843c <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
    TimerEvent_t* cur = TimerListHead;
 8008446:	4b10      	ldr	r3, [pc, #64]	@ (8008488 <TimerInsertNewHeadTimer+0x4c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d008      	beq.n	8008464 <TimerInsertNewHeadTimer+0x28>
    {
        cur->Timestamp = remainingTime - obj->Timestamp;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	1ad2      	subs	r2, r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	601a      	str	r2, [r3, #0]
        cur->IsRunning = false;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	721a      	strb	r2, [r3, #8]
    }

    obj->Next = cur;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	611a      	str	r2, [r3, #16]
    obj->IsRunning = true;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	721a      	strb	r2, [r3, #8]
    TimerListHead = obj;
 8008470:	4a05      	ldr	r2, [pc, #20]	@ (8008488 <TimerInsertNewHeadTimer+0x4c>)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 8008476:	4b04      	ldr	r3, [pc, #16]	@ (8008488 <TimerInsertNewHeadTimer+0x4c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 f936 	bl	80086ec <TimerSetTimeout>
}
 8008480:	bf00      	nop
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	200003ac 	.word	0x200003ac

0800848c <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
    uint32_t elapsedTime = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	607b      	str	r3, [r7, #4]

    elapsedTime = TimerGetValue( );
 8008496:	f000 f921 	bl	80086dc <TimerGetValue>
 800849a:	6078      	str	r0, [r7, #4]
    
    if (TimerListHead == NULL)  // PK: this is just a workaround to avoid HardFault error caused by null-pointer (it is cleared earlier for an unknown reason)
 800849c:	4b26      	ldr	r3, [pc, #152]	@ (8008538 <TimerIrqHandler+0xac>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d045      	beq.n	8008530 <TimerIrqHandler+0xa4>
    	return;

    if( elapsedTime >= TimerListHead->Timestamp )
 80084a4:	4b24      	ldr	r3, [pc, #144]	@ (8008538 <TimerIrqHandler+0xac>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d304      	bcc.n	80084ba <TimerIrqHandler+0x2e>
    {
        TimerListHead->Timestamp = 0;
 80084b0:	4b21      	ldr	r3, [pc, #132]	@ (8008538 <TimerIrqHandler+0xac>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	e007      	b.n	80084ca <TimerIrqHandler+0x3e>
    }
    else
    {
        TimerListHead->Timestamp -= elapsedTime;
 80084ba:	4b1f      	ldr	r3, [pc, #124]	@ (8008538 <TimerIrqHandler+0xac>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6819      	ldr	r1, [r3, #0]
 80084c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008538 <TimerIrqHandler+0xac>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	1a8a      	subs	r2, r1, r2
 80084c8:	601a      	str	r2, [r3, #0]
    }

    TimerListHead->IsRunning = false;
 80084ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008538 <TimerIrqHandler+0xac>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2200      	movs	r2, #0
 80084d0:	721a      	strb	r2, [r3, #8]

    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 80084d2:	e00e      	b.n	80084f2 <TimerIrqHandler+0x66>
    {
        TimerEvent_t* elapsedTimer = TimerListHead;
 80084d4:	4b18      	ldr	r3, [pc, #96]	@ (8008538 <TimerIrqHandler+0xac>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	603b      	str	r3, [r7, #0]
        TimerListHead = TimerListHead->Next;
 80084da:	4b17      	ldr	r3, [pc, #92]	@ (8008538 <TimerIrqHandler+0xac>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	4a15      	ldr	r2, [pc, #84]	@ (8008538 <TimerIrqHandler+0xac>)
 80084e2:	6013      	str	r3, [r2, #0]

        if( elapsedTimer->Callback != NULL )
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <TimerIrqHandler+0x66>
        {
            elapsedTimer->Callback( );
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 80084f2:	4b11      	ldr	r3, [pc, #68]	@ (8008538 <TimerIrqHandler+0xac>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d004      	beq.n	8008504 <TimerIrqHandler+0x78>
 80084fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008538 <TimerIrqHandler+0xac>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0e7      	beq.n	80084d4 <TimerIrqHandler+0x48>
        }
    }

    // start the next TimerListHead if it exists
    if( TimerListHead != NULL )
 8008504:	4b0c      	ldr	r3, [pc, #48]	@ (8008538 <TimerIrqHandler+0xac>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d012      	beq.n	8008532 <TimerIrqHandler+0xa6>
    {
        if( TimerListHead->IsRunning != true )
 800850c:	4b0a      	ldr	r3, [pc, #40]	@ (8008538 <TimerIrqHandler+0xac>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	7a1b      	ldrb	r3, [r3, #8]
 8008512:	f083 0301 	eor.w	r3, r3, #1
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <TimerIrqHandler+0xa6>
        {
            TimerListHead->IsRunning = true;
 800851c:	4b06      	ldr	r3, [pc, #24]	@ (8008538 <TimerIrqHandler+0xac>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2201      	movs	r2, #1
 8008522:	721a      	strb	r2, [r3, #8]
            TimerSetTimeout( TimerListHead );
 8008524:	4b04      	ldr	r3, [pc, #16]	@ (8008538 <TimerIrqHandler+0xac>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f8df 	bl	80086ec <TimerSetTimeout>
 800852e:	e000      	b.n	8008532 <TimerIrqHandler+0xa6>
    	return;
 8008530:	bf00      	nop
        }
    }
}
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	200003ac 	.word	0x200003ac

0800853c <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8008544:	b672      	cpsid	i
}
 8008546:	bf00      	nop
    __disable_irq( );

    uint32_t elapsedTime = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	617b      	str	r3, [r7, #20]
    uint32_t remainingTime = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	60bb      	str	r3, [r7, #8]

    TimerEvent_t* prev = TimerListHead;
 8008550:	4b49      	ldr	r3, [pc, #292]	@ (8008678 <TimerStop+0x13c>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	613b      	str	r3, [r7, #16]
    TimerEvent_t* cur = TimerListHead;
 8008556:	4b48      	ldr	r3, [pc, #288]	@ (8008678 <TimerStop+0x13c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60fb      	str	r3, [r7, #12]

    // List is empty or the Obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800855c:	4b46      	ldr	r3, [pc, #280]	@ (8008678 <TimerStop+0x13c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <TimerStop+0x2e>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d102      	bne.n	8008570 <TimerStop+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 800856a:	b662      	cpsie	i
}
 800856c:	bf00      	nop
    {
        __enable_irq( );
        return;
 800856e:	e080      	b.n	8008672 <TimerStop+0x136>
    }

    if( TimerListHead == obj ) // Stop the Head
 8008570:	4b41      	ldr	r3, [pc, #260]	@ (8008678 <TimerStop+0x13c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	429a      	cmp	r2, r3
 8008578:	d152      	bne.n	8008620 <TimerStop+0xe4>
    {
        if( TimerListHead->IsRunning == true ) // The head is already running
 800857a:	4b3f      	ldr	r3, [pc, #252]	@ (8008678 <TimerStop+0x13c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	7a1b      	ldrb	r3, [r3, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d033      	beq.n	80085ec <TimerStop+0xb0>
        {
            elapsedTime = TimerGetValue( );
 8008584:	f000 f8aa 	bl	80086dc <TimerGetValue>
 8008588:	6178      	str	r0, [r7, #20]
            if( elapsedTime > obj->Timestamp )
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	429a      	cmp	r2, r3
 8008592:	d902      	bls.n	800859a <TimerStop+0x5e>
            {
                elapsedTime = obj->Timestamp;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	617b      	str	r3, [r7, #20]
            }

            remainingTime = obj->Timestamp - elapsedTime;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	60bb      	str	r3, [r7, #8]

            if( TimerListHead->Next != NULL )
 80085a4:	4b34      	ldr	r3, [pc, #208]	@ (8008678 <TimerStop+0x13c>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d01a      	beq.n	80085e4 <TimerStop+0xa8>
            {
                TimerListHead->IsRunning = false;
 80085ae:	4b32      	ldr	r3, [pc, #200]	@ (8008678 <TimerStop+0x13c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2200      	movs	r2, #0
 80085b4:	721a      	strb	r2, [r3, #8]
                TimerListHead = TimerListHead->Next;
 80085b6:	4b30      	ldr	r3, [pc, #192]	@ (8008678 <TimerStop+0x13c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	4a2e      	ldr	r2, [pc, #184]	@ (8008678 <TimerStop+0x13c>)
 80085be:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 80085c0:	4b2d      	ldr	r3, [pc, #180]	@ (8008678 <TimerStop+0x13c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6819      	ldr	r1, [r3, #0]
 80085c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008678 <TimerStop+0x13c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	440a      	add	r2, r1
 80085ce:	601a      	str	r2, [r3, #0]
                TimerListHead->IsRunning = true;
 80085d0:	4b29      	ldr	r3, [pc, #164]	@ (8008678 <TimerStop+0x13c>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2201      	movs	r2, #1
 80085d6:	721a      	strb	r2, [r3, #8]
                TimerSetTimeout( TimerListHead );
 80085d8:	4b27      	ldr	r3, [pc, #156]	@ (8008678 <TimerStop+0x13c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 f885 	bl	80086ec <TimerSetTimeout>
 80085e2:	e044      	b.n	800866e <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 80085e4:	4b24      	ldr	r3, [pc, #144]	@ (8008678 <TimerStop+0x13c>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e040      	b.n	800866e <TimerStop+0x132>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 80085ec:	4b22      	ldr	r3, [pc, #136]	@ (8008678 <TimerStop+0x13c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d010      	beq.n	8008618 <TimerStop+0xdc>
            {
                remainingTime = obj->Timestamp;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60bb      	str	r3, [r7, #8]
                TimerListHead = TimerListHead->Next;
 80085fc:	4b1e      	ldr	r3, [pc, #120]	@ (8008678 <TimerStop+0x13c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	4a1d      	ldr	r2, [pc, #116]	@ (8008678 <TimerStop+0x13c>)
 8008604:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 8008606:	4b1c      	ldr	r3, [pc, #112]	@ (8008678 <TimerStop+0x13c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6819      	ldr	r1, [r3, #0]
 800860c:	4b1a      	ldr	r3, [pc, #104]	@ (8008678 <TimerStop+0x13c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	440a      	add	r2, r1
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	e02a      	b.n	800866e <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 8008618:	4b17      	ldr	r3, [pc, #92]	@ (8008678 <TimerStop+0x13c>)
 800861a:	2200      	movs	r2, #0
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	e026      	b.n	800866e <TimerStop+0x132>
            }
        }
    }
    else // Stop an object within the list
    {
        remainingTime = obj->Timestamp;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	60bb      	str	r3, [r7, #8]

        while( cur != NULL )
 8008626:	e01f      	b.n	8008668 <TimerStop+0x12c>
        {
            if( cur == obj )
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	429a      	cmp	r2, r3
 800862e:	d116      	bne.n	800865e <TimerStop+0x122>
            {
                if( cur->Next != NULL )
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00c      	beq.n	8008652 <TimerStop+0x116>
                {
                    cur = cur->Next;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	611a      	str	r2, [r3, #16]
                    cur->Timestamp += remainingTime;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	441a      	add	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	601a      	str	r2, [r3, #0]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 8008650:	e00d      	b.n	800866e <TimerStop+0x132>
                    cur = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	611a      	str	r2, [r3, #16]
                break;
 800865c:	e007      	b.n	800866e <TimerStop+0x132>
            }
            else
            {
                prev = cur;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	613b      	str	r3, [r7, #16]
                cur = cur->Next;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	60fb      	str	r3, [r7, #12]
        while( cur != NULL )
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1dc      	bne.n	8008628 <TimerStop+0xec>
  __ASM volatile ("cpsie i" : : : "memory");
 800866e:	b662      	cpsie	i
}
 8008670:	bf00      	nop
            }
        }
    }
    __enable_irq( );
}
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	200003ac 	.word	0x200003ac

0800867c <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8008684:	4b0b      	ldr	r3, [pc, #44]	@ (80086b4 <TimerExists+0x38>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 800868a:	e008      	b.n	800869e <TimerExists+0x22>
    {
        if( cur == obj )
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	429a      	cmp	r2, r3
 8008692:	d101      	bne.n	8008698 <TimerExists+0x1c>
        {
            return true;
 8008694:	2301      	movs	r3, #1
 8008696:	e006      	b.n	80086a6 <TimerExists+0x2a>
        }
        cur = cur->Next;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1f3      	bne.n	800868c <TimerExists+0x10>
    }
    return false;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	200003ac 	.word	0x200003ac

080086b8 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
    TimerStop( obj );
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7ff ff3a 	bl	800853c <TimerStop>
    obj->Timestamp = value;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = value;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	605a      	str	r2, [r3, #4]
}
 80086d4:	bf00      	nop
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <TimerGetValue>:

TimerTime_t TimerGetValue( void )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
    return RtcGetElapsedAlarmTime( );
 80086e0:	f7fe ff7c 	bl	80075dc <RtcGetElapsedAlarmTime>
 80086e4:	4603      	mov	r3, r0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	bd80      	pop	{r7, pc}
	...

080086ec <TimerSetTimeout>:
{
    return RtcComputeFutureEventTime( eventInFuture );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
    HasLoopedThroughMain = 0;
 80086f4:	4b09      	ldr	r3, [pc, #36]	@ (800871c <TimerSetTimeout+0x30>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	701a      	strb	r2, [r3, #0]
    obj->Timestamp = RtcGetAdjustedTimeoutValue( obj->Timestamp ); 
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe ff34 	bl	800756c <RtcGetAdjustedTimeoutValue>
 8008704:	4602      	mov	r2, r0
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	601a      	str	r2, [r3, #0]
    RtcSetTimeout( obj->Timestamp );
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe ff20 	bl	8007554 <RtcSetTimeout>
}
 8008714:	bf00      	nop
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	200003a8 	.word	0x200003a8

08008720 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 800872e:	e007      	b.n	8008740 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	1c53      	adds	r3, r2, #1
 8008734:	60bb      	str	r3, [r7, #8]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	1c59      	adds	r1, r3, #1
 800873a:	60f9      	str	r1, [r7, #12]
 800873c:	7812      	ldrb	r2, [r2, #0]
 800873e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	1e5a      	subs	r2, r3, #1
 8008744:	80fa      	strh	r2, [r7, #6]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1f2      	bne.n	8008730 <memcpy1+0x10>
    }
}
 800874a:	bf00      	nop
 800874c:	bf00      	nop
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8008760:	4a24      	ldr	r2, [pc, #144]	@ (80087f4 <SX1276Init+0x9c>)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8008766:	4924      	ldr	r1, [pc, #144]	@ (80087f8 <SX1276Init+0xa0>)
 8008768:	4824      	ldr	r0, [pc, #144]	@ (80087fc <SX1276Init+0xa4>)
 800876a:	f7ff fd84 	bl	8008276 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800876e:	4922      	ldr	r1, [pc, #136]	@ (80087f8 <SX1276Init+0xa0>)
 8008770:	4823      	ldr	r0, [pc, #140]	@ (8008800 <SX1276Init+0xa8>)
 8008772:	f7ff fd80 	bl	8008276 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8008776:	4920      	ldr	r1, [pc, #128]	@ (80087f8 <SX1276Init+0xa0>)
 8008778:	4822      	ldr	r0, [pc, #136]	@ (8008804 <SX1276Init+0xac>)
 800877a:	f7ff fd7c 	bl	8008276 <TimerInit>

    SX1276Reset( );
 800877e:	f001 fb75 	bl	8009e6c <SX1276Reset>

    RxChainCalibration( );
 8008782:	f000 f8e5 	bl	8008950 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008786:	2000      	movs	r0, #0
 8008788:	f001 fb92 	bl	8009eb0 <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 800878c:	481e      	ldr	r0, [pc, #120]	@ (8008808 <SX1276Init+0xb0>)
 800878e:	f7ff fc9b 	bl	80080c8 <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8008792:	2300      	movs	r3, #0
 8008794:	73fb      	strb	r3, [r7, #15]
 8008796:	e01f      	b.n	80087d8 <SX1276Init+0x80>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8008798:	7bfa      	ldrb	r2, [r7, #15]
 800879a:	491c      	ldr	r1, [pc, #112]	@ (800880c <SX1276Init+0xb4>)
 800879c:	4613      	mov	r3, r2
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	4413      	add	r3, r2
 80087a2:	440b      	add	r3, r1
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 fbb0 	bl	8009f0c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80087ac:	7bfa      	ldrb	r2, [r7, #15]
 80087ae:	4917      	ldr	r1, [pc, #92]	@ (800880c <SX1276Init+0xb4>)
 80087b0:	4613      	mov	r3, r2
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	4413      	add	r3, r2
 80087b6:	440b      	add	r3, r1
 80087b8:	3301      	adds	r3, #1
 80087ba:	7818      	ldrb	r0, [r3, #0]
 80087bc:	7bfa      	ldrb	r2, [r7, #15]
 80087be:	4913      	ldr	r1, [pc, #76]	@ (800880c <SX1276Init+0xb4>)
 80087c0:	4613      	mov	r3, r2
 80087c2:	005b      	lsls	r3, r3, #1
 80087c4:	4413      	add	r3, r2
 80087c6:	440b      	add	r3, r1
 80087c8:	3302      	adds	r3, #2
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	4619      	mov	r1, r3
 80087ce:	f001 fbdf 	bl	8009f90 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	3301      	adds	r3, #1
 80087d6:	73fb      	strb	r3, [r7, #15]
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	2b10      	cmp	r3, #16
 80087dc:	d9dc      	bls.n	8008798 <SX1276Init+0x40>
    }

    SX1276SetModem( MODEM_FSK );
 80087de:	2000      	movs	r0, #0
 80087e0:	f001 fb94 	bl	8009f0c <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 80087e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008810 <SX1276Init+0xb8>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 80087ec:	bf00      	nop
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	200003b0 	.word	0x200003b0
 80087f8:	0800a141 	.word	0x0800a141
 80087fc:	20000624 	.word	0x20000624
 8008800:	20000638 	.word	0x20000638
 8008804:	2000064c 	.word	0x2000064c
 8008808:	20000028 	.word	0x20000028
 800880c:	0800c340 	.word	0x0800c340
 8008810:	200004b4 	.word	0x200004b4

08008814 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8008814:	b480      	push	{r7}
 8008816:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8008818:	4b03      	ldr	r3, [pc, #12]	@ (8008828 <SX1276GetStatus+0x14>)
 800881a:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
}
 800881e:	4618      	mov	r0, r3
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	200004b4 	.word	0x200004b4
 800882c:	00000000 	.word	0x00000000

08008830 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
    SX1276.Settings.Channel = freq;
 8008838:	4a17      	ldr	r2, [pc, #92]	@ (8008898 <SX1276SetChannel+0x68>)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7f7 fea3 	bl	800058c <__aeabi_ui2d>
 8008846:	a312      	add	r3, pc, #72	@ (adr r3, 8008890 <SX1276SetChannel+0x60>)
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	f7f8 f842 	bl	80008d4 <__aeabi_ddiv>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4610      	mov	r0, r2
 8008856:	4619      	mov	r1, r3
 8008858:	f7f8 f9d4 	bl	8000c04 <__aeabi_d2uiz>
 800885c:	4603      	mov	r3, r0
 800885e:	607b      	str	r3, [r7, #4]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	0c1b      	lsrs	r3, r3, #16
 8008864:	b2db      	uxtb	r3, r3
 8008866:	4619      	mov	r1, r3
 8008868:	2006      	movs	r0, #6
 800886a:	f001 fb91 	bl	8009f90 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	0a1b      	lsrs	r3, r3, #8
 8008872:	b2db      	uxtb	r3, r3
 8008874:	4619      	mov	r1, r3
 8008876:	2007      	movs	r0, #7
 8008878:	f001 fb8a 	bl	8009f90 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	b2db      	uxtb	r3, r3
 8008880:	4619      	mov	r1, r3
 8008882:	2008      	movs	r0, #8
 8008884:	f001 fb84 	bl	8009f90 <SX1276Write>
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	00000000 	.word	0x00000000
 8008894:	404e8480 	.word	0x404e8480
 8008898:	200004b4 	.word	0x200004b4

0800889c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	6039      	str	r1, [r7, #0]
 80088a6:	71fb      	strb	r3, [r7, #7]
 80088a8:	4613      	mov	r3, r2
 80088aa:	80bb      	strh	r3, [r7, #4]
    int16_t rssi = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	81fb      	strh	r3, [r7, #14]

    SX1276SetModem( modem );
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 fb2a 	bl	8009f0c <SX1276SetModem>

    SX1276SetChannel( freq );
 80088b8:	6838      	ldr	r0, [r7, #0]
 80088ba:	f7ff ffb9 	bl	8008830 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80088be:	2005      	movs	r0, #5
 80088c0:	f001 faf6 	bl	8009eb0 <SX1276SetOpMode>

    DelayMs( 1 );
 80088c4:	2001      	movs	r0, #1
 80088c6:	f7fe fa7f 	bl	8006dc8 <DelayMs>

    rssi = SX1276ReadRssi( modem );
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 fa91 	bl	8009df4 <SX1276ReadRssi>
 80088d2:	4603      	mov	r3, r0
 80088d4:	81fb      	strh	r3, [r7, #14]

    SX1276SetSleep( );
 80088d6:	f000 ff6b 	bl	80097b0 <SX1276SetSleep>

    if( rssi > rssiThresh )
 80088da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80088de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	dd01      	ble.n	80088ea <SX1276IsChannelFree+0x4e>
    {
        return false;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e000      	b.n	80088ec <SX1276IsChannelFree+0x50>
    }
    return true;
 80088ea:	2301      	movs	r3, #1
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <SX1276Random>:

uint32_t SX1276Random( void )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80088fe:	2001      	movs	r0, #1
 8008900:	f001 fb04 	bl	8009f0c <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8008904:	21ff      	movs	r1, #255	@ 0xff
 8008906:	2011      	movs	r0, #17
 8008908:	f001 fb42 	bl	8009f90 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800890c:	2005      	movs	r0, #5
 800890e:	f001 facf 	bl	8009eb0 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8008912:	2300      	movs	r3, #0
 8008914:	71fb      	strb	r3, [r7, #7]
 8008916:	e011      	b.n	800893c <SX1276Random+0x48>
    {
        DelayMs( 1 );
 8008918:	2001      	movs	r0, #1
 800891a:	f7fe fa55 	bl	8006dc8 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800891e:	202c      	movs	r0, #44	@ 0x2c
 8008920:	f001 fb48 	bl	8009fb4 <SX1276Read>
 8008924:	4603      	mov	r3, r0
 8008926:	f003 0201 	and.w	r2, r3, #1
 800892a:	79fb      	ldrb	r3, [r7, #7]
 800892c:	fa02 f303 	lsl.w	r3, r2, r3
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	4313      	orrs	r3, r2
 8008934:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	3301      	adds	r3, #1
 800893a:	71fb      	strb	r3, [r7, #7]
 800893c:	79fb      	ldrb	r3, [r7, #7]
 800893e:	2b1f      	cmp	r3, #31
 8008940:	d9ea      	bls.n	8008918 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 8008942:	f000 ff35 	bl	80097b0 <SX1276SetSleep>

    return rnd;
 8008946:	683b      	ldr	r3, [r7, #0]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8008950:	b590      	push	{r4, r7, lr}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8008956:	2009      	movs	r0, #9
 8008958:	f001 fb2c 	bl	8009fb4 <SX1276Read>
 800895c:	4603      	mov	r3, r0
 800895e:	71fb      	strb	r3, [r7, #7]
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008960:	2006      	movs	r0, #6
 8008962:	f001 fb27 	bl	8009fb4 <SX1276Read>
 8008966:	4603      	mov	r3, r0
 8008968:	041c      	lsls	r4, r3, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800896a:	2007      	movs	r0, #7
 800896c:	f001 fb22 	bl	8009fb4 <SX1276Read>
 8008970:	4603      	mov	r3, r0
 8008972:	021b      	lsls	r3, r3, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008974:	431c      	orrs	r4, r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 8008976:	2008      	movs	r0, #8
 8008978:	f001 fb1c 	bl	8009fb4 <SX1276Read>
 800897c:	4603      	mov	r3, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800897e:	4323      	orrs	r3, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008980:	4618      	mov	r0, r3
 8008982:	f7f7 fe03 	bl	800058c <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 8008986:	a325      	add	r3, pc, #148	@ (adr r3, 8008a1c <RxChainCalibration+0xcc>)
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f7f7 fe78 	bl	8000680 <__aeabi_dmul>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008994:	4610      	mov	r0, r2
 8008996:	4619      	mov	r1, r3
 8008998:	f7f8 f934 	bl	8000c04 <__aeabi_d2uiz>
 800899c:	4603      	mov	r3, r0
 800899e:	603b      	str	r3, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 80089a0:	2100      	movs	r1, #0
 80089a2:	2009      	movs	r0, #9
 80089a4:	f001 faf4 	bl	8009f90 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80089a8:	203b      	movs	r0, #59	@ 0x3b
 80089aa:	f001 fb03 	bl	8009fb4 <SX1276Read>
 80089ae:	4603      	mov	r3, r0
 80089b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	4619      	mov	r1, r3
 80089b8:	203b      	movs	r0, #59	@ 0x3b
 80089ba:	f001 fae9 	bl	8009f90 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80089be:	bf00      	nop
 80089c0:	203b      	movs	r0, #59	@ 0x3b
 80089c2:	f001 faf7 	bl	8009fb4 <SX1276Read>
 80089c6:	4603      	mov	r3, r0
 80089c8:	f003 0320 	and.w	r3, r3, #32
 80089cc:	2b20      	cmp	r3, #32
 80089ce:	d0f7      	beq.n	80089c0 <RxChainCalibration+0x70>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 80089d0:	4811      	ldr	r0, [pc, #68]	@ (8008a18 <RxChainCalibration+0xc8>)
 80089d2:	f7ff ff2d 	bl	8008830 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80089d6:	203b      	movs	r0, #59	@ 0x3b
 80089d8:	f001 faec 	bl	8009fb4 <SX1276Read>
 80089dc:	4603      	mov	r3, r0
 80089de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	4619      	mov	r1, r3
 80089e6:	203b      	movs	r0, #59	@ 0x3b
 80089e8:	f001 fad2 	bl	8009f90 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80089ec:	bf00      	nop
 80089ee:	203b      	movs	r0, #59	@ 0x3b
 80089f0:	f001 fae0 	bl	8009fb4 <SX1276Read>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f003 0320 	and.w	r3, r3, #32
 80089fa:	2b20      	cmp	r3, #32
 80089fc:	d0f7      	beq.n	80089ee <RxChainCalibration+0x9e>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80089fe:	79fb      	ldrb	r3, [r7, #7]
 8008a00:	4619      	mov	r1, r3
 8008a02:	2009      	movs	r0, #9
 8008a04:	f001 fac4 	bl	8009f90 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8008a08:	6838      	ldr	r0, [r7, #0]
 8008a0a:	f7ff ff11 	bl	8008830 <SX1276SetChannel>
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd90      	pop	{r4, r7, pc}
 8008a16:	bf00      	nop
 8008a18:	33bca100 	.word	0x33bca100
 8008a1c:	00000000 	.word	0x00000000
 8008a20:	404e8480 	.word	0x404e8480

08008a24 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73fb      	strb	r3, [r7, #15]
 8008a30:	e017      	b.n	8008a62 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	4a10      	ldr	r2, [pc, #64]	@ (8008a78 <GetFskBandwidthRegValue+0x54>)
 8008a36:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d30d      	bcc.n	8008a5c <GetFskBandwidthRegValue+0x38>
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
 8008a42:	3301      	adds	r3, #1
 8008a44:	4a0c      	ldr	r2, [pc, #48]	@ (8008a78 <GetFskBandwidthRegValue+0x54>)
 8008a46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d205      	bcs.n	8008a5c <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	4a09      	ldr	r2, [pc, #36]	@ (8008a78 <GetFskBandwidthRegValue+0x54>)
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	4413      	add	r3, r2
 8008a58:	791b      	ldrb	r3, [r3, #4]
 8008a5a:	e007      	b.n	8008a6c <GetFskBandwidthRegValue+0x48>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	73fb      	strb	r3, [r7, #15]
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	2b14      	cmp	r3, #20
 8008a66:	d9e4      	bls.n	8008a32 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8008a68:	bf00      	nop
 8008a6a:	e7fd      	b.n	8008a68 <GetFskBandwidthRegValue+0x44>
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	0800c374 	.word	0x0800c374
 8008a7c:	00000000 	.word	0x00000000

08008a80 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	607a      	str	r2, [r7, #4]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]
 8008a90:	4613      	mov	r3, r2
 8008a92:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f001 fa38 	bl	8009f0c <SX1276SetModem>

    switch( modem )
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <SX1276SetRxConfig+0x2a>
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	f000 8095 	beq.w	8008bd2 <SX1276SetRxConfig+0x152>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8008aa8:	e1c4      	b.n	8008e34 <SX1276SetRxConfig+0x3b4>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8008aaa:	4a79      	ldr	r2, [pc, #484]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
            SX1276.Settings.Fsk.Datarate = datarate;
 8008ab2:	4a77      	ldr	r2, [pc, #476]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8008aba:	4a75      	ldr	r2, [pc, #468]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
            SX1276.Settings.Fsk.FixLen = fixLen;
 8008ac2:	4a73      	ldr	r2, [pc, #460]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008ac4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008ac8:	f882 3132 	strb.w	r3, [r2, #306]	@ 0x132
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8008acc:	4a70      	ldr	r2, [pc, #448]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008ace:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008ad2:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8008ad6:	4a6e      	ldr	r2, [pc, #440]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008ad8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008adc:	f882 3134 	strb.w	r3, [r2, #308]	@ 0x134
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8008ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008ae2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008ae6:	f882 3135 	strb.w	r3, [r2, #309]	@ 0x135
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8008aea:	4a69      	ldr	r2, [pc, #420]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008aec:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008af0:	f882 3136 	strb.w	r3, [r2, #310]	@ 0x136
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8008af4:	4a66      	ldr	r2, [pc, #408]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008af6:	8bbb      	ldrh	r3, [r7, #28]
 8008af8:	f8a2 3130 	strh.w	r3, [r2, #304]	@ 0x130
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7f7 fd45 	bl	800058c <__aeabi_ui2d>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	a160      	add	r1, pc, #384	@ (adr r1, 8008c88 <SX1276SetRxConfig+0x208>)
 8008b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b0c:	f7f7 fee2 	bl	80008d4 <__aeabi_ddiv>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4610      	mov	r0, r2
 8008b16:	4619      	mov	r1, r3
 8008b18:	f7f8 f874 	bl	8000c04 <__aeabi_d2uiz>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	0a1b      	lsrs	r3, r3, #8
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	4619      	mov	r1, r3
 8008b2a:	2002      	movs	r0, #2
 8008b2c:	f001 fa30 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	4619      	mov	r1, r3
 8008b36:	2003      	movs	r0, #3
 8008b38:	f001 fa2a 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8008b3c:	68b8      	ldr	r0, [r7, #8]
 8008b3e:	f7ff ff71 	bl	8008a24 <GetFskBandwidthRegValue>
 8008b42:	4603      	mov	r3, r0
 8008b44:	4619      	mov	r1, r3
 8008b46:	2012      	movs	r0, #18
 8008b48:	f001 fa22 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8008b4c:	69b8      	ldr	r0, [r7, #24]
 8008b4e:	f7ff ff69 	bl	8008a24 <GetFskBandwidthRegValue>
 8008b52:	4603      	mov	r3, r0
 8008b54:	4619      	mov	r1, r3
 8008b56:	2013      	movs	r0, #19
 8008b58:	f001 fa1a 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8008b5c:	8bbb      	ldrh	r3, [r7, #28]
 8008b5e:	0a1b      	lsrs	r3, r3, #8
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	4619      	mov	r1, r3
 8008b66:	2025      	movs	r0, #37	@ 0x25
 8008b68:	f001 fa12 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8008b6c:	8bbb      	ldrh	r3, [r7, #28]
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	4619      	mov	r1, r3
 8008b72:	2026      	movs	r0, #38	@ 0x26
 8008b74:	f001 fa0c 	bl	8009f90 <SX1276Write>
            if( fixLen == 1 )
 8008b78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d006      	beq.n	8008b8e <SX1276SetRxConfig+0x10e>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8008b80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008b84:	4619      	mov	r1, r3
 8008b86:	2032      	movs	r0, #50	@ 0x32
 8008b88:	f001 fa02 	bl	8009f90 <SX1276Write>
 8008b8c:	e003      	b.n	8008b96 <SX1276SetRxConfig+0x116>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8008b8e:	21ff      	movs	r1, #255	@ 0xff
 8008b90:	2032      	movs	r0, #50	@ 0x32
 8008b92:	f001 f9fd 	bl	8009f90 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8008b96:	2030      	movs	r0, #48	@ 0x30
 8008b98:	f001 fa0c 	bl	8009fb4 <SX1276Read>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8008ba0:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 8008ba4:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8008ba6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8008baa:	2a00      	cmp	r2, #0
 8008bac:	d001      	beq.n	8008bb2 <SX1276SetRxConfig+0x132>
 8008bae:	2200      	movs	r2, #0
 8008bb0:	e001      	b.n	8008bb6 <SX1276SetRxConfig+0x136>
 8008bb2:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8008bba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008bbe:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8008bc0:	b25b      	sxtb	r3, r3
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	4619      	mov	r1, r3
 8008bca:	2030      	movs	r0, #48	@ 0x30
 8008bcc:	f001 f9e0 	bl	8009f90 <SX1276Write>
        break;
 8008bd0:	e130      	b.n	8008e34 <SX1276SetRxConfig+0x3b4>
            if( bandwidth > 2 )
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d901      	bls.n	8008bdc <SX1276SetRxConfig+0x15c>
                while( 1 );
 8008bd8:	bf00      	nop
 8008bda:	e7fd      	b.n	8008bd8 <SX1276SetRxConfig+0x158>
            bandwidth += 7;
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	3307      	adds	r3, #7
 8008be0:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8008be2:	4a2b      	ldr	r2, [pc, #172]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
            SX1276.Settings.LoRa.Datarate = datarate;
 8008bea:	4a29      	ldr	r2, [pc, #164]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
            SX1276.Settings.LoRa.Coderate = coderate;
 8008bf2:	4a27      	ldr	r2, [pc, #156]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
 8008bf6:	f882 3159 	strb.w	r3, [r2, #345]	@ 0x159
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8008bfa:	4a25      	ldr	r2, [pc, #148]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008bfc:	8bbb      	ldrh	r3, [r7, #28]
 8008bfe:	f8a2 315a 	strh.w	r3, [r2, #346]	@ 0x15a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8008c02:	4a23      	ldr	r2, [pc, #140]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008c04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c08:	f882 315c 	strb.w	r3, [r2, #348]	@ 0x15c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8008c0c:	4a20      	ldr	r2, [pc, #128]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008c0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008c12:	f882 315d 	strb.w	r3, [r2, #349]	@ 0x15d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8008c16:	4a1e      	ldr	r2, [pc, #120]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008c18:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008c1c:	f882 315e 	strb.w	r3, [r2, #350]	@ 0x15e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8008c20:	4a1b      	ldr	r2, [pc, #108]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008c22:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008c26:	f882 315f 	strb.w	r3, [r2, #351]	@ 0x15f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8008c2a:	4a19      	ldr	r2, [pc, #100]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008c2c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008c30:	f882 3160 	strb.w	r3, [r2, #352]	@ 0x160
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8008c34:	4a16      	ldr	r2, [pc, #88]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008c36:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008c3a:	f882 3161 	strb.w	r3, [r2, #353]	@ 0x161
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8008c3e:	4a14      	ldr	r2, [pc, #80]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008c40:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008c44:	f882 3162 	strb.w	r3, [r2, #354]	@ 0x162
            if( datarate > 12 )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b0c      	cmp	r3, #12
 8008c4c:	d902      	bls.n	8008c54 <SX1276SetRxConfig+0x1d4>
                datarate = 12;
 8008c4e:	230c      	movs	r3, #12
 8008c50:	607b      	str	r3, [r7, #4]
 8008c52:	e004      	b.n	8008c5e <SX1276SetRxConfig+0x1de>
            else if( datarate < 6 )
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b05      	cmp	r3, #5
 8008c58:	d801      	bhi.n	8008c5e <SX1276SetRxConfig+0x1de>
                datarate = 6;
 8008c5a:	2306      	movs	r3, #6
 8008c5c:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2b07      	cmp	r3, #7
 8008c62:	d105      	bne.n	8008c70 <SX1276SetRxConfig+0x1f0>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b0b      	cmp	r3, #11
 8008c68:	d008      	beq.n	8008c7c <SX1276SetRxConfig+0x1fc>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b0c      	cmp	r3, #12
 8008c6e:	d005      	beq.n	8008c7c <SX1276SetRxConfig+0x1fc>
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b08      	cmp	r3, #8
 8008c74:	d10e      	bne.n	8008c94 <SX1276SetRxConfig+0x214>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b0c      	cmp	r3, #12
 8008c7a:	d10b      	bne.n	8008c94 <SX1276SetRxConfig+0x214>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8008c7c:	4b04      	ldr	r3, [pc, #16]	@ (8008c90 <SX1276SetRxConfig+0x210>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
 8008c84:	e00a      	b.n	8008c9c <SX1276SetRxConfig+0x21c>
 8008c86:	bf00      	nop
 8008c88:	00000000 	.word	0x00000000
 8008c8c:	417e8480 	.word	0x417e8480
 8008c90:	200004b4 	.word	0x200004b4
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8008c94:	4b69      	ldr	r3, [pc, #420]	@ (8008e3c <SX1276SetRxConfig+0x3bc>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8008c9c:	201d      	movs	r0, #29
 8008c9e:	f001 f989 	bl	8009fb4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	011b      	lsls	r3, r3, #4
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8008cb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	201d      	movs	r0, #29
 8008cc0:	f001 f966 	bl	8009f90 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8008cc4:	201e      	movs	r0, #30
 8008cc6:	f001 f975 	bl	8009fb4 <SX1276Read>
 8008cca:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8008ccc:	f003 0308 	and.w	r3, r3, #8
 8008cd0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	011b      	lsls	r3, r3, #4
 8008cd8:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8008cde:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8008cea:	8c3b      	ldrh	r3, [r7, #32]
 8008cec:	0a1b      	lsrs	r3, r3, #8
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	f003 0303 	and.w	r3, r3, #3
 8008cf6:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	201e      	movs	r0, #30
 8008d00:	f001 f946 	bl	8009f90 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8008d04:	2026      	movs	r0, #38	@ 0x26
 8008d06:	f001 f955 	bl	8009fb4 <SX1276Read>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	b25b      	sxtb	r3, r3
 8008d0e:	f023 0308 	bic.w	r3, r3, #8
 8008d12:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8008d14:	4b49      	ldr	r3, [pc, #292]	@ (8008e3c <SX1276SetRxConfig+0x3bc>)
 8008d16:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8008d1a:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8008d1c:	b25b      	sxtb	r3, r3
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	4619      	mov	r1, r3
 8008d26:	2026      	movs	r0, #38	@ 0x26
 8008d28:	f001 f932 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8008d2c:	8c3b      	ldrh	r3, [r7, #32]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	4619      	mov	r1, r3
 8008d32:	201f      	movs	r0, #31
 8008d34:	f001 f92c 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8008d38:	8bbb      	ldrh	r3, [r7, #28]
 8008d3a:	0a1b      	lsrs	r3, r3, #8
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	4619      	mov	r1, r3
 8008d42:	2020      	movs	r0, #32
 8008d44:	f001 f924 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8008d48:	8bbb      	ldrh	r3, [r7, #28]
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	2021      	movs	r0, #33	@ 0x21
 8008d50:	f001 f91e 	bl	8009f90 <SX1276Write>
            if( fixLen == 1 )
 8008d54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d005      	beq.n	8008d68 <SX1276SetRxConfig+0x2e8>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8008d5c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008d60:	4619      	mov	r1, r3
 8008d62:	2022      	movs	r0, #34	@ 0x22
 8008d64:	f001 f914 	bl	8009f90 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008d68:	4b34      	ldr	r3, [pc, #208]	@ (8008e3c <SX1276SetRxConfig+0x3bc>)
 8008d6a:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d011      	beq.n	8008d96 <SX1276SetRxConfig+0x316>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8008d72:	2044      	movs	r0, #68	@ 0x44
 8008d74:	f001 f91e 	bl	8009fb4 <SX1276Read>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	4619      	mov	r1, r3
 8008d82:	2044      	movs	r0, #68	@ 0x44
 8008d84:	f001 f904 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8008d88:	4b2c      	ldr	r3, [pc, #176]	@ (8008e3c <SX1276SetRxConfig+0x3bc>)
 8008d8a:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8008d8e:	4619      	mov	r1, r3
 8008d90:	2024      	movs	r0, #36	@ 0x24
 8008d92:	f001 f8fd 	bl	8009f90 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b09      	cmp	r3, #9
 8008d9a:	d10e      	bne.n	8008dba <SX1276SetRxConfig+0x33a>
 8008d9c:	4b27      	ldr	r3, [pc, #156]	@ (8008e3c <SX1276SetRxConfig+0x3bc>)
 8008d9e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8008da2:	4a27      	ldr	r2, [pc, #156]	@ (8008e40 <SX1276SetRxConfig+0x3c0>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d908      	bls.n	8008dba <SX1276SetRxConfig+0x33a>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8008da8:	2102      	movs	r1, #2
 8008daa:	2036      	movs	r0, #54	@ 0x36
 8008dac:	f001 f8f0 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 8008db0:	2164      	movs	r1, #100	@ 0x64
 8008db2:	203a      	movs	r0, #58	@ 0x3a
 8008db4:	f001 f8ec 	bl	8009f90 <SX1276Write>
 8008db8:	e00f      	b.n	8008dda <SX1276SetRxConfig+0x35a>
            else if( bandwidth == 9 )
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b09      	cmp	r3, #9
 8008dbe:	d108      	bne.n	8008dd2 <SX1276SetRxConfig+0x352>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8008dc0:	2102      	movs	r1, #2
 8008dc2:	2036      	movs	r0, #54	@ 0x36
 8008dc4:	f001 f8e4 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 8008dc8:	217f      	movs	r1, #127	@ 0x7f
 8008dca:	203a      	movs	r0, #58	@ 0x3a
 8008dcc:	f001 f8e0 	bl	8009f90 <SX1276Write>
 8008dd0:	e003      	b.n	8008dda <SX1276SetRxConfig+0x35a>
                SX1276Write( REG_LR_TEST36, 0x03 );
 8008dd2:	2103      	movs	r1, #3
 8008dd4:	2036      	movs	r0, #54	@ 0x36
 8008dd6:	f001 f8db 	bl	8009f90 <SX1276Write>
            if( datarate == 6 )
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b06      	cmp	r3, #6
 8008dde:	d114      	bne.n	8008e0a <SX1276SetRxConfig+0x38a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8008de0:	2031      	movs	r0, #49	@ 0x31
 8008de2:	f001 f8e7 	bl	8009fb4 <SX1276Read>
 8008de6:	4603      	mov	r3, r0
 8008de8:	b25b      	sxtb	r3, r3
 8008dea:	f023 0307 	bic.w	r3, r3, #7
 8008dee:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8008df0:	f043 0305 	orr.w	r3, r3, #5
 8008df4:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	4619      	mov	r1, r3
 8008dfa:	2031      	movs	r0, #49	@ 0x31
 8008dfc:	f001 f8c8 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8008e00:	210c      	movs	r1, #12
 8008e02:	2037      	movs	r0, #55	@ 0x37
 8008e04:	f001 f8c4 	bl	8009f90 <SX1276Write>
        break;
 8008e08:	e013      	b.n	8008e32 <SX1276SetRxConfig+0x3b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8008e0a:	2031      	movs	r0, #49	@ 0x31
 8008e0c:	f001 f8d2 	bl	8009fb4 <SX1276Read>
 8008e10:	4603      	mov	r3, r0
 8008e12:	b25b      	sxtb	r3, r3
 8008e14:	f023 0307 	bic.w	r3, r3, #7
 8008e18:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8008e1a:	f043 0303 	orr.w	r3, r3, #3
 8008e1e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	4619      	mov	r1, r3
 8008e24:	2031      	movs	r0, #49	@ 0x31
 8008e26:	f001 f8b3 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8008e2a:	210a      	movs	r1, #10
 8008e2c:	2037      	movs	r0, #55	@ 0x37
 8008e2e:	f001 f8af 	bl	8009f90 <SX1276Write>
        break;
 8008e32:	bf00      	nop
}
 8008e34:	bf00      	nop
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	200004b4 	.word	0x200004b4
 8008e40:	1f4add40 	.word	0x1f4add40
 8008e44:	00000000 	.word	0x00000000

08008e48 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008e48:	b590      	push	{r4, r7, lr}
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60ba      	str	r2, [r7, #8]
 8008e50:	607b      	str	r3, [r7, #4]
 8008e52:	4603      	mov	r3, r0
 8008e54:	73fb      	strb	r3, [r7, #15]
 8008e56:	460b      	mov	r3, r1
 8008e58:	73bb      	strb	r3, [r7, #14]
    uint8_t paConfig = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	75fb      	strb	r3, [r7, #23]
    uint8_t paDac = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75bb      	strb	r3, [r7, #22]

    SX1276SetModem( modem );
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f001 f851 	bl	8009f0c <SX1276SetModem>

    paConfig = SX1276Read( REG_PACONFIG );
 8008e6a:	2009      	movs	r0, #9
 8008e6c:	f001 f8a2 	bl	8009fb4 <SX1276Read>
 8008e70:	4603      	mov	r3, r0
 8008e72:	75fb      	strb	r3, [r7, #23]
    paDac = SX1276Read( REG_PADAC );
 8008e74:	204d      	movs	r0, #77	@ 0x4d
 8008e76:	f001 f89d 	bl	8009fb4 <SX1276Read>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	75bb      	strb	r3, [r7, #22]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 8008e7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e86:	b25c      	sxtb	r4, r3
 8008e88:	4bb3      	ldr	r3, [pc, #716]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8008e8a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7ff f95e 	bl	8008150 <SX1276GetPaSelect>
 8008e94:	4603      	mov	r3, r0
 8008e96:	b25b      	sxtb	r3, r3
 8008e98:	4323      	orrs	r3, r4
 8008e9a:	b25b      	sxtb	r3, r3
 8008e9c:	75fb      	strb	r3, [r7, #23]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ea0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8008ea4:	75fb      	strb	r3, [r7, #23]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8008ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	da4e      	bge.n	8008f4c <SX1276SetTxConfig+0x104>
    {
        if( power > 17 )
 8008eae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eb2:	2b11      	cmp	r3, #17
 8008eb4:	dd04      	ble.n	8008ec0 <SX1276SetTxConfig+0x78>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8008eb6:	7dbb      	ldrb	r3, [r7, #22]
 8008eb8:	f043 0307 	orr.w	r3, r3, #7
 8008ebc:	75bb      	strb	r3, [r7, #22]
 8008ebe:	e008      	b.n	8008ed2 <SX1276SetTxConfig+0x8a>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8008ec0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008ec4:	f023 0307 	bic.w	r3, r3, #7
 8008ec8:	b25b      	sxtb	r3, r3
 8008eca:	f043 0304 	orr.w	r3, r3, #4
 8008ece:	b25b      	sxtb	r3, r3
 8008ed0:	75bb      	strb	r3, [r7, #22]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8008ed2:	7dbb      	ldrb	r3, [r7, #22]
 8008ed4:	f003 0307 	and.w	r3, r3, #7
 8008ed8:	2b07      	cmp	r3, #7
 8008eda:	d11b      	bne.n	8008f14 <SX1276SetTxConfig+0xcc>
        {
            if( power < 5 )
 8008edc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	dc01      	bgt.n	8008ee8 <SX1276SetTxConfig+0xa0>
            {
                power = 5;
 8008ee4:	2305      	movs	r3, #5
 8008ee6:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 20 )
 8008ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eec:	2b14      	cmp	r3, #20
 8008eee:	dd01      	ble.n	8008ef4 <SX1276SetTxConfig+0xac>
            {
                power = 20;
 8008ef0:	2314      	movs	r3, #20
 8008ef2:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8008ef4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ef8:	f023 030f 	bic.w	r3, r3, #15
 8008efc:	b25a      	sxtb	r2, r3
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
 8008f00:	3b05      	subs	r3, #5
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	b25b      	sxtb	r3, r3
 8008f06:	f003 030f 	and.w	r3, r3, #15
 8008f0a:	b25b      	sxtb	r3, r3
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	b25b      	sxtb	r3, r3
 8008f10:	75fb      	strb	r3, [r7, #23]
 8008f12:	e037      	b.n	8008f84 <SX1276SetTxConfig+0x13c>
        }
        else
        {
            if( power < 2 )
 8008f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	dc01      	bgt.n	8008f20 <SX1276SetTxConfig+0xd8>
            {
                power = 2;
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 17 )
 8008f20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f24:	2b11      	cmp	r3, #17
 8008f26:	dd01      	ble.n	8008f2c <SX1276SetTxConfig+0xe4>
            {
                power = 17;
 8008f28:	2311      	movs	r3, #17
 8008f2a:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8008f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f30:	f023 030f 	bic.w	r3, r3, #15
 8008f34:	b25a      	sxtb	r2, r3
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	3b02      	subs	r3, #2
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	b25b      	sxtb	r3, r3
 8008f3e:	f003 030f 	and.w	r3, r3, #15
 8008f42:	b25b      	sxtb	r3, r3
 8008f44:	4313      	orrs	r3, r2
 8008f46:	b25b      	sxtb	r3, r3
 8008f48:	75fb      	strb	r3, [r7, #23]
 8008f4a:	e01b      	b.n	8008f84 <SX1276SetTxConfig+0x13c>
        }
    }
    else
    {
        if( power < -1 )
 8008f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f54:	da01      	bge.n	8008f5a <SX1276SetTxConfig+0x112>
        {
            power = -1;
 8008f56:	23ff      	movs	r3, #255	@ 0xff
 8008f58:	73bb      	strb	r3, [r7, #14]
        }
        if( power > 14 )
 8008f5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f5e:	2b0e      	cmp	r3, #14
 8008f60:	dd01      	ble.n	8008f66 <SX1276SetTxConfig+0x11e>
        {
            power = 14;
 8008f62:	230e      	movs	r3, #14
 8008f64:	73bb      	strb	r3, [r7, #14]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8008f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f6a:	f023 030f 	bic.w	r3, r3, #15
 8008f6e:	b25a      	sxtb	r2, r3
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	3301      	adds	r3, #1
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	b25b      	sxtb	r3, r3
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	b25b      	sxtb	r3, r3
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	b25b      	sxtb	r3, r3
 8008f82:	75fb      	strb	r3, [r7, #23]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	4619      	mov	r1, r3
 8008f88:	2009      	movs	r0, #9
 8008f8a:	f001 f801 	bl	8009f90 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8008f8e:	7dbb      	ldrb	r3, [r7, #22]
 8008f90:	4619      	mov	r1, r3
 8008f92:	204d      	movs	r0, #77	@ 0x4d
 8008f94:	f000 fffc 	bl	8009f90 <SX1276Write>

    switch( modem )
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <SX1276SetTxConfig+0x15e>
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	f000 8092 	beq.w	80090c8 <SX1276SetTxConfig+0x280>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8008fa4:	e189      	b.n	80092ba <SX1276SetTxConfig+0x472>
            SX1276.Settings.Fsk.Power = power;
 8008fa6:	4a6c      	ldr	r2, [pc, #432]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
            SX1276.Settings.Fsk.Fdev = fdev;
 8008fae:	4a6a      	ldr	r2, [pc, #424]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8008fb6:	4a68      	ldr	r2, [pc, #416]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
            SX1276.Settings.Fsk.Datarate = datarate;
 8008fbe:	4a66      	ldr	r2, [pc, #408]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8008fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc2:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8008fc6:	4a64      	ldr	r2, [pc, #400]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8008fc8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008fca:	f8a2 3130 	strh.w	r3, [r2, #304]	@ 0x130
            SX1276.Settings.Fsk.FixLen = fixLen;
 8008fce:	4a62      	ldr	r2, [pc, #392]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8008fd0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008fd4:	f882 3132 	strb.w	r3, [r2, #306]	@ 0x132
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8008fd8:	4a5f      	ldr	r2, [pc, #380]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8008fda:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008fde:	f882 3134 	strb.w	r3, [r2, #308]	@ 0x134
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8008fe2:	4a5d      	ldr	r2, [pc, #372]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8008fe4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8008fe8:	f882 3135 	strb.w	r3, [r2, #309]	@ 0x135
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8008fec:	4a5a      	ldr	r2, [pc, #360]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8008fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ff0:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8008ff4:	68b8      	ldr	r0, [r7, #8]
 8008ff6:	f7f7 fac9 	bl	800058c <__aeabi_ui2d>
 8008ffa:	a353      	add	r3, pc, #332	@ (adr r3, 8009148 <SX1276SetTxConfig+0x300>)
 8008ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009000:	f7f7 fc68 	bl	80008d4 <__aeabi_ddiv>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4610      	mov	r0, r2
 800900a:	4619      	mov	r1, r3
 800900c:	f7f7 fdfa 	bl	8000c04 <__aeabi_d2uiz>
 8009010:	4603      	mov	r3, r0
 8009012:	b29b      	uxth	r3, r3
 8009014:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	0a1b      	lsrs	r3, r3, #8
 800901a:	b2db      	uxtb	r3, r3
 800901c:	4619      	mov	r1, r3
 800901e:	2004      	movs	r0, #4
 8009020:	f000 ffb6 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	4619      	mov	r1, r3
 800902a:	2005      	movs	r0, #5
 800902c:	f000 ffb0 	bl	8009f90 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8009030:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009032:	f7f7 faab 	bl	800058c <__aeabi_ui2d>
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	a145      	add	r1, pc, #276	@ (adr r1, 8009150 <SX1276SetTxConfig+0x308>)
 800903c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009040:	f7f7 fc48 	bl	80008d4 <__aeabi_ddiv>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4610      	mov	r0, r2
 800904a:	4619      	mov	r1, r3
 800904c:	f7f7 fdda 	bl	8000c04 <__aeabi_d2uiz>
 8009050:	4603      	mov	r3, r0
 8009052:	b29b      	uxth	r3, r3
 8009054:	62bb      	str	r3, [r7, #40]	@ 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8009056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009058:	0a1b      	lsrs	r3, r3, #8
 800905a:	b2db      	uxtb	r3, r3
 800905c:	4619      	mov	r1, r3
 800905e:	2002      	movs	r0, #2
 8009060:	f000 ff96 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8009064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009066:	b2db      	uxtb	r3, r3
 8009068:	4619      	mov	r1, r3
 800906a:	2003      	movs	r0, #3
 800906c:	f000 ff90 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8009070:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009072:	0a1b      	lsrs	r3, r3, #8
 8009074:	b29b      	uxth	r3, r3
 8009076:	b2db      	uxtb	r3, r3
 8009078:	4619      	mov	r1, r3
 800907a:	2025      	movs	r0, #37	@ 0x25
 800907c:	f000 ff88 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8009080:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009082:	b2db      	uxtb	r3, r3
 8009084:	4619      	mov	r1, r3
 8009086:	2026      	movs	r0, #38	@ 0x26
 8009088:	f000 ff82 	bl	8009f90 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800908c:	2030      	movs	r0, #48	@ 0x30
 800908e:	f000 ff91 	bl	8009fb4 <SX1276Read>
 8009092:	4603      	mov	r3, r0
 8009094:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8009096:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 800909a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800909c:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80090a0:	2a00      	cmp	r2, #0
 80090a2:	d001      	beq.n	80090a8 <SX1276SetTxConfig+0x260>
 80090a4:	2200      	movs	r2, #0
 80090a6:	e001      	b.n	80090ac <SX1276SetTxConfig+0x264>
 80090a8:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80090ac:	4313      	orrs	r3, r2
 80090ae:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 80090b0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80090b4:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80090b6:	b25b      	sxtb	r3, r3
 80090b8:	4313      	orrs	r3, r2
 80090ba:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	4619      	mov	r1, r3
 80090c0:	2030      	movs	r0, #48	@ 0x30
 80090c2:	f000 ff65 	bl	8009f90 <SX1276Write>
        break;
 80090c6:	e0f8      	b.n	80092ba <SX1276SetTxConfig+0x472>
            SX1276.Settings.LoRa.Power = power;
 80090c8:	4a23      	ldr	r2, [pc, #140]	@ (8009158 <SX1276SetTxConfig+0x310>)
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
 80090cc:	f882 314c 	strb.w	r3, [r2, #332]	@ 0x14c
            if( bandwidth > 2 )
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d901      	bls.n	80090da <SX1276SetTxConfig+0x292>
                while( 1 );
 80090d6:	bf00      	nop
 80090d8:	e7fd      	b.n	80090d6 <SX1276SetTxConfig+0x28e>
            bandwidth += 7;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3307      	adds	r3, #7
 80090de:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80090e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009158 <SX1276SetTxConfig+0x310>)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
            SX1276.Settings.LoRa.Datarate = datarate;
 80090e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009158 <SX1276SetTxConfig+0x310>)
 80090ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ec:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
            SX1276.Settings.LoRa.Coderate = coderate;
 80090f0:	4a19      	ldr	r2, [pc, #100]	@ (8009158 <SX1276SetTxConfig+0x310>)
 80090f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80090f6:	f882 3159 	strb.w	r3, [r2, #345]	@ 0x159
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80090fa:	4a17      	ldr	r2, [pc, #92]	@ (8009158 <SX1276SetTxConfig+0x310>)
 80090fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80090fe:	f8a2 315a 	strh.w	r3, [r2, #346]	@ 0x15a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8009102:	4a15      	ldr	r2, [pc, #84]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8009104:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009108:	f882 315c 	strb.w	r3, [r2, #348]	@ 0x15c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800910c:	4a12      	ldr	r2, [pc, #72]	@ (8009158 <SX1276SetTxConfig+0x310>)
 800910e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8009112:	f882 315f 	strb.w	r3, [r2, #351]	@ 0x15f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8009116:	4a10      	ldr	r2, [pc, #64]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8009118:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800911c:	f882 3160 	strb.w	r3, [r2, #352]	@ 0x160
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8009120:	4a0d      	ldr	r2, [pc, #52]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8009122:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8009126:	f882 315e 	strb.w	r3, [r2, #350]	@ 0x15e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800912a:	4a0b      	ldr	r2, [pc, #44]	@ (8009158 <SX1276SetTxConfig+0x310>)
 800912c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8009130:	f882 3161 	strb.w	r3, [r2, #353]	@ 0x161
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8009134:	4a08      	ldr	r2, [pc, #32]	@ (8009158 <SX1276SetTxConfig+0x310>)
 8009136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009138:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
            if( datarate > 12 )
 800913c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913e:	2b0c      	cmp	r3, #12
 8009140:	d90c      	bls.n	800915c <SX1276SetTxConfig+0x314>
                datarate = 12;
 8009142:	230c      	movs	r3, #12
 8009144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009146:	e00e      	b.n	8009166 <SX1276SetTxConfig+0x31e>
 8009148:	00000000 	.word	0x00000000
 800914c:	404e8480 	.word	0x404e8480
 8009150:	00000000 	.word	0x00000000
 8009154:	417e8480 	.word	0x417e8480
 8009158:	200004b4 	.word	0x200004b4
            else if( datarate < 6 )
 800915c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915e:	2b05      	cmp	r3, #5
 8009160:	d801      	bhi.n	8009166 <SX1276SetTxConfig+0x31e>
                datarate = 6;
 8009162:	2306      	movs	r3, #6
 8009164:	62bb      	str	r3, [r7, #40]	@ 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b07      	cmp	r3, #7
 800916a:	d105      	bne.n	8009178 <SX1276SetTxConfig+0x330>
 800916c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916e:	2b0b      	cmp	r3, #11
 8009170:	d008      	beq.n	8009184 <SX1276SetTxConfig+0x33c>
 8009172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009174:	2b0c      	cmp	r3, #12
 8009176:	d005      	beq.n	8009184 <SX1276SetTxConfig+0x33c>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b08      	cmp	r3, #8
 800917c:	d107      	bne.n	800918e <SX1276SetTxConfig+0x346>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800917e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009180:	2b0c      	cmp	r3, #12
 8009182:	d104      	bne.n	800918e <SX1276SetTxConfig+0x346>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8009184:	4b4f      	ldr	r3, [pc, #316]	@ (80092c4 <SX1276SetTxConfig+0x47c>)
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
 800918c:	e003      	b.n	8009196 <SX1276SetTxConfig+0x34e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800918e:	4b4d      	ldr	r3, [pc, #308]	@ (80092c4 <SX1276SetTxConfig+0x47c>)
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8009196:	4b4b      	ldr	r3, [pc, #300]	@ (80092c4 <SX1276SetTxConfig+0x47c>)
 8009198:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800919c:	2b00      	cmp	r3, #0
 800919e:	d011      	beq.n	80091c4 <SX1276SetTxConfig+0x37c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80091a0:	2044      	movs	r0, #68	@ 0x44
 80091a2:	f000 ff07 	bl	8009fb4 <SX1276Read>
 80091a6:	4603      	mov	r3, r0
 80091a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	4619      	mov	r1, r3
 80091b0:	2044      	movs	r0, #68	@ 0x44
 80091b2:	f000 feed 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80091b6:	4b43      	ldr	r3, [pc, #268]	@ (80092c4 <SX1276SetTxConfig+0x47c>)
 80091b8:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 80091bc:	4619      	mov	r1, r3
 80091be:	2024      	movs	r0, #36	@ 0x24
 80091c0:	f000 fee6 	bl	8009f90 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80091c4:	201d      	movs	r0, #29
 80091c6:	f000 fef5 	bl	8009fb4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	011b      	lsls	r3, r3, #4
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	4313      	orrs	r3, r2
 80091dc:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80091de:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80091e2:	4313      	orrs	r3, r2
 80091e4:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80091e6:	4619      	mov	r1, r3
 80091e8:	201d      	movs	r0, #29
 80091ea:	f000 fed1 	bl	8009f90 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80091ee:	201e      	movs	r0, #30
 80091f0:	f000 fee0 	bl	8009fb4 <SX1276Read>
 80091f4:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 80091f6:	f003 030b 	and.w	r3, r3, #11
 80091fa:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	011b      	lsls	r3, r3, #4
 8009202:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8009204:	4313      	orrs	r3, r2
 8009206:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8009208:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8009210:	4313      	orrs	r3, r2
 8009212:	b2db      	uxtb	r3, r3
 8009214:	4619      	mov	r1, r3
 8009216:	201e      	movs	r0, #30
 8009218:	f000 feba 	bl	8009f90 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800921c:	2026      	movs	r0, #38	@ 0x26
 800921e:	f000 fec9 	bl	8009fb4 <SX1276Read>
 8009222:	4603      	mov	r3, r0
 8009224:	b25b      	sxtb	r3, r3
 8009226:	f023 0308 	bic.w	r3, r3, #8
 800922a:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800922c:	4b25      	ldr	r3, [pc, #148]	@ (80092c4 <SX1276SetTxConfig+0x47c>)
 800922e:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8009232:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8009234:	b25b      	sxtb	r3, r3
 8009236:	4313      	orrs	r3, r2
 8009238:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800923a:	b2db      	uxtb	r3, r3
 800923c:	4619      	mov	r1, r3
 800923e:	2026      	movs	r0, #38	@ 0x26
 8009240:	f000 fea6 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8009244:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009246:	0a1b      	lsrs	r3, r3, #8
 8009248:	b29b      	uxth	r3, r3
 800924a:	b2db      	uxtb	r3, r3
 800924c:	4619      	mov	r1, r3
 800924e:	2020      	movs	r0, #32
 8009250:	f000 fe9e 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8009254:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009256:	b2db      	uxtb	r3, r3
 8009258:	4619      	mov	r1, r3
 800925a:	2021      	movs	r0, #33	@ 0x21
 800925c:	f000 fe98 	bl	8009f90 <SX1276Write>
            if( datarate == 6 )
 8009260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009262:	2b06      	cmp	r3, #6
 8009264:	d114      	bne.n	8009290 <SX1276SetTxConfig+0x448>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8009266:	2031      	movs	r0, #49	@ 0x31
 8009268:	f000 fea4 	bl	8009fb4 <SX1276Read>
 800926c:	4603      	mov	r3, r0
 800926e:	b25b      	sxtb	r3, r3
 8009270:	f023 0307 	bic.w	r3, r3, #7
 8009274:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8009276:	f043 0305 	orr.w	r3, r3, #5
 800927a:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800927c:	b2db      	uxtb	r3, r3
 800927e:	4619      	mov	r1, r3
 8009280:	2031      	movs	r0, #49	@ 0x31
 8009282:	f000 fe85 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8009286:	210c      	movs	r1, #12
 8009288:	2037      	movs	r0, #55	@ 0x37
 800928a:	f000 fe81 	bl	8009f90 <SX1276Write>
        break;
 800928e:	e013      	b.n	80092b8 <SX1276SetTxConfig+0x470>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8009290:	2031      	movs	r0, #49	@ 0x31
 8009292:	f000 fe8f 	bl	8009fb4 <SX1276Read>
 8009296:	4603      	mov	r3, r0
 8009298:	b25b      	sxtb	r3, r3
 800929a:	f023 0307 	bic.w	r3, r3, #7
 800929e:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80092a0:	f043 0303 	orr.w	r3, r3, #3
 80092a4:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	4619      	mov	r1, r3
 80092aa:	2031      	movs	r0, #49	@ 0x31
 80092ac:	f000 fe70 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80092b0:	210a      	movs	r1, #10
 80092b2:	2037      	movs	r0, #55	@ 0x37
 80092b4:	f000 fe6c 	bl	8009f90 <SX1276Write>
        break;
 80092b8:	bf00      	nop
}
 80092ba:	bf00      	nop
 80092bc:	371c      	adds	r7, #28
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd90      	pop	{r4, r7, pc}
 80092c2:	bf00      	nop
 80092c4:	200004b4 	.word	0x200004b4

080092c8 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 80092c8:	b5b0      	push	{r4, r5, r7, lr}
 80092ca:	b094      	sub	sp, #80	@ 0x50
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	460a      	mov	r2, r1
 80092d2:	71fb      	strb	r3, [r7, #7]
 80092d4:	4613      	mov	r3, r2
 80092d6:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	64fb      	str	r3, [r7, #76]	@ 0x4c

    switch( modem )
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <SX1276GetTimeOnAir+0x22>
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	f000 8092 	beq.w	800940c <SX1276GetTimeOnAir+0x144>
 80092e8:	e1a0      	b.n	800962c <SX1276GetTimeOnAir+0x364>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80092ea:	4ba9      	ldr	r3, [pc, #676]	@ (8009590 <SX1276GetTimeOnAir+0x2c8>)
 80092ec:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 80092f0:	461c      	mov	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80092f2:	2027      	movs	r0, #39	@ 0x27
 80092f4:	f000 fe5e 	bl	8009fb4 <SX1276Read>
 80092f8:	4603      	mov	r3, r0
 80092fa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80092fe:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8009300:	4423      	add	r3, r4
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8009302:	4618      	mov	r0, r3
 8009304:	f7f7 f952 	bl	80005ac <__aeabi_i2d>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800930c:	49a0      	ldr	r1, [pc, #640]	@ (8009590 <SX1276GetTimeOnAir+0x2c8>)
 800930e:	f891 1132 	ldrb.w	r1, [r1, #306]	@ 0x132
 8009312:	2900      	cmp	r1, #0
 8009314:	d004      	beq.n	8009320 <SX1276GetTimeOnAir+0x58>
 8009316:	f04f 0000 	mov.w	r0, #0
 800931a:	f04f 0100 	mov.w	r1, #0
 800931e:	e002      	b.n	8009326 <SX1276GetTimeOnAir+0x5e>
 8009320:	f04f 0000 	mov.w	r0, #0
 8009324:	499b      	ldr	r1, [pc, #620]	@ (8009594 <SX1276GetTimeOnAir+0x2cc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8009326:	f7f6 fff5 	bl	8000314 <__adddf3>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	4614      	mov	r4, r2
 8009330:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8009332:	2030      	movs	r0, #48	@ 0x30
 8009334:	f000 fe3e 	bl	8009fb4 <SX1276Read>
 8009338:	4603      	mov	r3, r0
 800933a:	f023 03f9 	bic.w	r3, r3, #249	@ 0xf9
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <SX1276GetTimeOnAir+0x82>
 8009342:	f04f 0000 	mov.w	r0, #0
 8009346:	4993      	ldr	r1, [pc, #588]	@ (8009594 <SX1276GetTimeOnAir+0x2cc>)
 8009348:	e003      	b.n	8009352 <SX1276GetTimeOnAir+0x8a>
 800934a:	f04f 0000 	mov.w	r0, #0
 800934e:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8009352:	4622      	mov	r2, r4
 8009354:	462b      	mov	r3, r5
 8009356:	f7f6 ffdd 	bl	8000314 <__adddf3>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4614      	mov	r4, r2
 8009360:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8009362:	79bb      	ldrb	r3, [r7, #6]
 8009364:	4618      	mov	r0, r3
 8009366:	f7f7 f921 	bl	80005ac <__aeabi_i2d>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	4620      	mov	r0, r4
 8009370:	4629      	mov	r1, r5
 8009372:	f7f6 ffcf 	bl	8000314 <__adddf3>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4614      	mov	r4, r2
 800937c:	461d      	mov	r5, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800937e:	4b84      	ldr	r3, [pc, #528]	@ (8009590 <SX1276GetTimeOnAir+0x2c8>)
 8009380:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8009384:	2b00      	cmp	r3, #0
 8009386:	d004      	beq.n	8009392 <SX1276GetTimeOnAir+0xca>
 8009388:	f04f 0000 	mov.w	r0, #0
 800938c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8009390:	e003      	b.n	800939a <SX1276GetTimeOnAir+0xd2>
 8009392:	f04f 0000 	mov.w	r0, #0
 8009396:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 800939a:	4622      	mov	r2, r4
 800939c:	462b      	mov	r3, r5
 800939e:	f7f6 ffb9 	bl	8000314 <__adddf3>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4610      	mov	r0, r2
 80093a8:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80093aa:	f04f 0200 	mov.w	r2, #0
 80093ae:	4b7a      	ldr	r3, [pc, #488]	@ (8009598 <SX1276GetTimeOnAir+0x2d0>)
 80093b0:	f7f7 f966 	bl	8000680 <__aeabi_dmul>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4614      	mov	r4, r2
 80093ba:	461d      	mov	r5, r3
                                     SX1276.Settings.Fsk.Datarate ) * /* 1e6 */  1e3  );     // FIX by PK
 80093bc:	4b74      	ldr	r3, [pc, #464]	@ (8009590 <SX1276GetTimeOnAir+0x2c8>)
 80093be:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7f7 f8e2 	bl	800058c <__aeabi_ui2d>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4620      	mov	r0, r4
 80093ce:	4629      	mov	r1, r5
 80093d0:	f7f7 fa80 	bl	80008d4 <__aeabi_ddiv>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4610      	mov	r0, r2
 80093da:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80093dc:	f04f 0200 	mov.w	r2, #0
 80093e0:	4b6e      	ldr	r3, [pc, #440]	@ (800959c <SX1276GetTimeOnAir+0x2d4>)
 80093e2:	f7f7 f94d 	bl	8000680 <__aeabi_dmul>
 80093e6:	4602      	mov	r2, r0
 80093e8:	460b      	mov	r3, r1
 80093ea:	ec43 2b17 	vmov	d7, r2, r3
 80093ee:	eeb0 0a47 	vmov.f32	s0, s14
 80093f2:	eef0 0a67 	vmov.f32	s1, s15
 80093f6:	f002 fe4b 	bl	800c090 <round>
 80093fa:	ec53 2b10 	vmov	r2, r3, d0
 80093fe:	4610      	mov	r0, r2
 8009400:	4619      	mov	r1, r3
 8009402:	f7f7 fbff 	bl	8000c04 <__aeabi_d2uiz>
 8009406:	4603      	mov	r3, r0
 8009408:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 800940a:	e10f      	b.n	800962c <SX1276GetTimeOnAir+0x364>
    case MODEM_LORA:
        {
            double bw = 0.0;
 800940c:	f04f 0200 	mov.w	r2, #0
 8009410:	f04f 0300 	mov.w	r3, #0
 8009414:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8009418:	4b5d      	ldr	r3, [pc, #372]	@ (8009590 <SX1276GetTimeOnAir+0x2c8>)
 800941a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800941e:	2b09      	cmp	r3, #9
 8009420:	d012      	beq.n	8009448 <SX1276GetTimeOnAir+0x180>
 8009422:	2b09      	cmp	r3, #9
 8009424:	d816      	bhi.n	8009454 <SX1276GetTimeOnAir+0x18c>
 8009426:	2b07      	cmp	r3, #7
 8009428:	d002      	beq.n	8009430 <SX1276GetTimeOnAir+0x168>
 800942a:	2b08      	cmp	r3, #8
 800942c:	d006      	beq.n	800943c <SX1276GetTimeOnAir+0x174>
 800942e:	e011      	b.n	8009454 <SX1276GetTimeOnAir+0x18c>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 8009430:	a351      	add	r3, pc, #324	@ (adr r3, 8009578 <SX1276GetTimeOnAir+0x2b0>)
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 800943a:	e00b      	b.n	8009454 <SX1276GetTimeOnAir+0x18c>
            case 8: // 250 kHz
                bw = 250e3;
 800943c:	a350      	add	r3, pc, #320	@ (adr r3, 8009580 <SX1276GetTimeOnAir+0x2b8>)
 800943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009442:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 8009446:	e005      	b.n	8009454 <SX1276GetTimeOnAir+0x18c>
            case 9: // 500 kHz
                bw = 500e3;
 8009448:	a34f      	add	r3, pc, #316	@ (adr r3, 8009588 <SX1276GetTimeOnAir+0x2c0>)
 800944a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 8009452:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8009454:	4b4e      	ldr	r3, [pc, #312]	@ (8009590 <SX1276GetTimeOnAir+0x2c8>)
 8009456:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800945a:	2201      	movs	r2, #1
 800945c:	fa02 f303 	lsl.w	r3, r2, r3
 8009460:	4618      	mov	r0, r3
 8009462:	f7f7 f8a3 	bl	80005ac <__aeabi_i2d>
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800946e:	f7f7 fa31 	bl	80008d4 <__aeabi_ddiv>
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            double ts = 1 / rs;
 800947a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800947e:	f04f 0000 	mov.w	r0, #0
 8009482:	4944      	ldr	r1, [pc, #272]	@ (8009594 <SX1276GetTimeOnAir+0x2cc>)
 8009484:	f7f7 fa26 	bl	80008d4 <__aeabi_ddiv>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8009490:	4b3f      	ldr	r3, [pc, #252]	@ (8009590 <SX1276GetTimeOnAir+0x2c8>)
 8009492:	f8b3 315a 	ldrh.w	r3, [r3, #346]	@ 0x15a
 8009496:	4618      	mov	r0, r3
 8009498:	f7f7 f888 	bl	80005ac <__aeabi_i2d>
 800949c:	f04f 0200 	mov.w	r2, #0
 80094a0:	4b3f      	ldr	r3, [pc, #252]	@ (80095a0 <SX1276GetTimeOnAir+0x2d8>)
 80094a2:	f7f6 ff37 	bl	8000314 <__adddf3>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80094ae:	f7f7 f8e7 	bl	8000680 <__aeabi_dmul>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80094ba:	79bb      	ldrb	r3, [r7, #6]
 80094bc:	00db      	lsls	r3, r3, #3
 80094be:	461a      	mov	r2, r3
 80094c0:	4b33      	ldr	r3, [pc, #204]	@ (8009590 <SX1276GetTimeOnAir+0x2c8>)
 80094c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80094ca:	4a31      	ldr	r2, [pc, #196]	@ (8009590 <SX1276GetTimeOnAir+0x2c8>)
 80094cc:	f892 215e 	ldrb.w	r2, [r2, #350]	@ 0x15e
 80094d0:	0112      	lsls	r2, r2, #4
 80094d2:	441a      	add	r2, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80094d4:	4b2e      	ldr	r3, [pc, #184]	@ (8009590 <SX1276GetTimeOnAir+0x2c8>)
 80094d6:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <SX1276GetTimeOnAir+0x21a>
 80094de:	2314      	movs	r3, #20
 80094e0:	e000      	b.n	80094e4 <SX1276GetTimeOnAir+0x21c>
 80094e2:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7f7 f84f 	bl	800058c <__aeabi_ui2d>
 80094ee:	4604      	mov	r4, r0
 80094f0:	460d      	mov	r5, r1
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 80094f2:	4b27      	ldr	r3, [pc, #156]	@ (8009590 <SX1276GetTimeOnAir+0x2c8>)
 80094f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80094f8:	009a      	lsls	r2, r3, #2
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 80094fa:	4b25      	ldr	r3, [pc, #148]	@ (8009590 <SX1276GetTimeOnAir+0x2c8>)
 80094fc:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <SX1276GetTimeOnAir+0x240>
 8009504:	2302      	movs	r3, #2
 8009506:	e000      	b.n	800950a <SX1276GetTimeOnAir+0x242>
 8009508:	2300      	movs	r3, #0
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	4618      	mov	r0, r3
 800950e:	f7f7 f83d 	bl	800058c <__aeabi_ui2d>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8009516:	4620      	mov	r0, r4
 8009518:	4629      	mov	r1, r5
 800951a:	f7f7 f9db 	bl	80008d4 <__aeabi_ddiv>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	ec43 2b17 	vmov	d7, r2, r3
 8009526:	eeb0 0a47 	vmov.f32	s0, s14
 800952a:	eef0 0a67 	vmov.f32	s1, s15
 800952e:	f002 fcb3 	bl	800be98 <ceil>
 8009532:	ec55 4b10 	vmov	r4, r5, d0
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8009536:	4b16      	ldr	r3, [pc, #88]	@ (8009590 <SX1276GetTimeOnAir+0x2c8>)
 8009538:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 800953c:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 800953e:	4618      	mov	r0, r3
 8009540:	f7f7 f834 	bl	80005ac <__aeabi_i2d>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8009548:	4620      	mov	r0, r4
 800954a:	4629      	mov	r1, r5
 800954c:	f7f7 f898 	bl	8000680 <__aeabi_dmul>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8009558:	f04f 0200 	mov.w	r2, #0
 800955c:	f04f 0300 	mov.w	r3, #0
 8009560:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009564:	f7f7 fb1c 	bl	8000ba0 <__aeabi_dcmpgt>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d01a      	beq.n	80095a4 <SX1276GetTimeOnAir+0x2dc>
 800956e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009572:	e01b      	b.n	80095ac <SX1276GetTimeOnAir+0x2e4>
 8009574:	f3af 8000 	nop.w
 8009578:	00000000 	.word	0x00000000
 800957c:	40fe8480 	.word	0x40fe8480
 8009580:	00000000 	.word	0x00000000
 8009584:	410e8480 	.word	0x410e8480
 8009588:	00000000 	.word	0x00000000
 800958c:	411e8480 	.word	0x411e8480
 8009590:	200004b4 	.word	0x200004b4
 8009594:	3ff00000 	.word	0x3ff00000
 8009598:	40200000 	.word	0x40200000
 800959c:	408f4000 	.word	0x408f4000
 80095a0:	40110000 	.word	0x40110000
 80095a4:	f04f 0000 	mov.w	r0, #0
 80095a8:	f04f 0100 	mov.w	r1, #0
 80095ac:	f04f 0200 	mov.w	r2, #0
 80095b0:	4b23      	ldr	r3, [pc, #140]	@ (8009640 <SX1276GetTimeOnAir+0x378>)
 80095b2:	f7f6 feaf 	bl	8000314 <__adddf3>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
            double tPayload = nPayload * ts;
 80095be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80095c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095c6:	f7f7 f85b 	bl	8000680 <__aeabi_dmul>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 80095d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80095da:	f7f6 fe9b 	bl	8000314 <__adddf3>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
            // return us secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 80095e6:	f04f 0200 	mov.w	r2, #0
 80095ea:	4b16      	ldr	r3, [pc, #88]	@ (8009644 <SX1276GetTimeOnAir+0x37c>)
 80095ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80095f0:	f7f7 f846 	bl	8000680 <__aeabi_dmul>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4610      	mov	r0, r2
 80095fa:	4619      	mov	r1, r3
 80095fc:	a30e      	add	r3, pc, #56	@ (adr r3, 8009638 <SX1276GetTimeOnAir+0x370>)
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	f7f6 fe87 	bl	8000314 <__adddf3>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	ec43 2b17 	vmov	d7, r2, r3
 800960e:	eeb0 0a47 	vmov.f32	s0, s14
 8009612:	eef0 0a67 	vmov.f32	s1, s15
 8009616:	f002 fcbb 	bl	800bf90 <floor>
 800961a:	ec53 2b10 	vmov	r2, r3, d0
 800961e:	4610      	mov	r0, r2
 8009620:	4619      	mov	r1, r3
 8009622:	f7f7 faef 	bl	8000c04 <__aeabi_d2uiz>
 8009626:	4603      	mov	r3, r0
 8009628:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 800962a:	bf00      	nop
    }
    return airTime;
 800962c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800962e:	4618      	mov	r0, r3
 8009630:	3750      	adds	r7, #80	@ 0x50
 8009632:	46bd      	mov	sp, r7
 8009634:	bdb0      	pop	{r4, r5, r7, pc}
 8009636:	bf00      	nop
 8009638:	d916872b 	.word	0xd916872b
 800963c:	3feff7ce 	.word	0x3feff7ce
 8009640:	40200000 	.word	0x40200000
 8009644:	408f4000 	.word	0x408f4000

08009648 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8009658:	4b53      	ldr	r3, [pc, #332]	@ (80097a8 <SX1276Send+0x160>)
 800965a:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <SX1276Send+0x20>
 8009662:	2b01      	cmp	r3, #1
 8009664:	d048      	beq.n	80096f8 <SX1276Send+0xb0>
 8009666:	e098      	b.n	800979a <SX1276Send+0x152>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8009668:	4b4f      	ldr	r3, [pc, #316]	@ (80097a8 <SX1276Send+0x160>)
 800966a:	2200      	movs	r2, #0
 800966c:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = size;
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	461a      	mov	r2, r3
 8009674:	4b4c      	ldr	r3, [pc, #304]	@ (80097a8 <SX1276Send+0x160>)
 8009676:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

            if( SX1276.Settings.Fsk.FixLen == false )
 800967a:	4b4b      	ldr	r3, [pc, #300]	@ (80097a8 <SX1276Send+0x160>)
 800967c:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8009680:	f083 0301 	eor.w	r3, r3, #1
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	d005      	beq.n	8009696 <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800968a:	1cfb      	adds	r3, r7, #3
 800968c:	2101      	movs	r1, #1
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fd08 	bl	800a0a4 <SX1276WriteFifo>
 8009694:	e004      	b.n	80096a0 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	4619      	mov	r1, r3
 800969a:	2032      	movs	r0, #50	@ 0x32
 800969c:	f000 fc78 	bl	8009f90 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d007      	beq.n	80096b6 <SX1276Send+0x6e>
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	2b40      	cmp	r3, #64	@ 0x40
 80096aa:	d804      	bhi.n	80096b6 <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80096ac:	78fa      	ldrb	r2, [r7, #3]
 80096ae:	4b3e      	ldr	r3, [pc, #248]	@ (80097a8 <SX1276Send+0x160>)
 80096b0:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
 80096b4:	e009      	b.n	80096ca <SX1276Send+0x82>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 80096b6:	78fb      	ldrb	r3, [r7, #3]
 80096b8:	461a      	mov	r2, r3
 80096ba:	6879      	ldr	r1, [r7, #4]
 80096bc:	483b      	ldr	r0, [pc, #236]	@ (80097ac <SX1276Send+0x164>)
 80096be:	f7ff f82f 	bl	8008720 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80096c2:	4b39      	ldr	r3, [pc, #228]	@ (80097a8 <SX1276Send+0x160>)
 80096c4:	2220      	movs	r2, #32
 80096c6:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 80096ca:	4b37      	ldr	r3, [pc, #220]	@ (80097a8 <SX1276Send+0x160>)
 80096cc:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fce6 	bl	800a0a4 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80096d8:	4b33      	ldr	r3, [pc, #204]	@ (80097a8 <SX1276Send+0x160>)
 80096da:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 80096de:	4a32      	ldr	r2, [pc, #200]	@ (80097a8 <SX1276Send+0x160>)
 80096e0:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 80096e4:	4413      	add	r3, r2
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	4b2f      	ldr	r3, [pc, #188]	@ (80097a8 <SX1276Send+0x160>)
 80096ea:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80096ee:	4b2e      	ldr	r3, [pc, #184]	@ (80097a8 <SX1276Send+0x160>)
 80096f0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80096f4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80096f6:	e050      	b.n	800979a <SX1276Send+0x152>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80096f8:	4b2b      	ldr	r3, [pc, #172]	@ (80097a8 <SX1276Send+0x160>)
 80096fa:	f893 3161 	ldrb.w	r3, [r3, #353]	@ 0x161
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00f      	beq.n	8009722 <SX1276Send+0xda>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8009702:	2033      	movs	r0, #51	@ 0x33
 8009704:	f000 fc56 	bl	8009fb4 <SX1276Read>
 8009708:	4603      	mov	r3, r0
 800970a:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 800970e:	b2db      	uxtb	r3, r3
 8009710:	4619      	mov	r1, r3
 8009712:	2033      	movs	r0, #51	@ 0x33
 8009714:	f000 fc3c 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8009718:	2119      	movs	r1, #25
 800971a:	203b      	movs	r0, #59	@ 0x3b
 800971c:	f000 fc38 	bl	8009f90 <SX1276Write>
 8009720:	e013      	b.n	800974a <SX1276Send+0x102>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8009722:	2033      	movs	r0, #51	@ 0x33
 8009724:	f000 fc46 	bl	8009fb4 <SX1276Read>
 8009728:	4603      	mov	r3, r0
 800972a:	b25b      	sxtb	r3, r3
 800972c:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 8009730:	b25b      	sxtb	r3, r3
 8009732:	f043 0301 	orr.w	r3, r3, #1
 8009736:	b25b      	sxtb	r3, r3
 8009738:	b2db      	uxtb	r3, r3
 800973a:	4619      	mov	r1, r3
 800973c:	2033      	movs	r0, #51	@ 0x33
 800973e:	f000 fc27 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8009742:	211d      	movs	r1, #29
 8009744:	203b      	movs	r0, #59	@ 0x3b
 8009746:	f000 fc23 	bl	8009f90 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 800974a:	78fa      	ldrb	r2, [r7, #3]
 800974c:	4b16      	ldr	r3, [pc, #88]	@ (80097a8 <SX1276Send+0x160>)
 800974e:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8009752:	78fb      	ldrb	r3, [r7, #3]
 8009754:	4619      	mov	r1, r3
 8009756:	2022      	movs	r0, #34	@ 0x22
 8009758:	f000 fc1a 	bl	8009f90 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800975c:	2100      	movs	r1, #0
 800975e:	200e      	movs	r0, #14
 8009760:	f000 fc16 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8009764:	2100      	movs	r1, #0
 8009766:	200d      	movs	r0, #13
 8009768:	f000 fc12 	bl	8009f90 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800976c:	2001      	movs	r0, #1
 800976e:	f000 fc21 	bl	8009fb4 <SX1276Read>
 8009772:	4603      	mov	r3, r0
 8009774:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009778:	2b00      	cmp	r3, #0
 800977a:	d104      	bne.n	8009786 <SX1276Send+0x13e>
            {
                SX1276SetStby( );
 800977c:	f000 f830 	bl	80097e0 <SX1276SetStby>
                DelayMs( 1 );
 8009780:	2001      	movs	r0, #1
 8009782:	f7fd fb21 	bl	8006dc8 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8009786:	78fb      	ldrb	r3, [r7, #3]
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fc8a 	bl	800a0a4 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8009790:	4b05      	ldr	r3, [pc, #20]	@ (80097a8 <SX1276Send+0x160>)
 8009792:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8009796:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009798:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 fa8c 	bl	8009cb8 <SX1276SetTx>
}
 80097a0:	bf00      	nop
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	200004b4 	.word	0x200004b4
 80097ac:	200003b4 	.word	0x200003b4

080097b0 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80097b4:	4807      	ldr	r0, [pc, #28]	@ (80097d4 <SX1276SetSleep+0x24>)
 80097b6:	f7fe fec1 	bl	800853c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80097ba:	4807      	ldr	r0, [pc, #28]	@ (80097d8 <SX1276SetSleep+0x28>)
 80097bc:	f7fe febe 	bl	800853c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80097c0:	2000      	movs	r0, #0
 80097c2:	f000 fb75 	bl	8009eb0 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80097c6:	4b05      	ldr	r3, [pc, #20]	@ (80097dc <SX1276SetSleep+0x2c>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 80097ce:	bf00      	nop
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20000638 	.word	0x20000638
 80097d8:	20000624 	.word	0x20000624
 80097dc:	200004b4 	.word	0x200004b4

080097e0 <SX1276SetStby>:

void SX1276SetStby( void )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80097e4:	4807      	ldr	r0, [pc, #28]	@ (8009804 <SX1276SetStby+0x24>)
 80097e6:	f7fe fea9 	bl	800853c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80097ea:	4807      	ldr	r0, [pc, #28]	@ (8009808 <SX1276SetStby+0x28>)
 80097ec:	f7fe fea6 	bl	800853c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80097f0:	2001      	movs	r0, #1
 80097f2:	f000 fb5d 	bl	8009eb0 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80097f6:	4b05      	ldr	r3, [pc, #20]	@ (800980c <SX1276SetStby+0x2c>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 80097fe:	bf00      	nop
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20000638 	.word	0x20000638
 8009808:	20000624 	.word	0x20000624
 800980c:	200004b4 	.word	0x200004b4

08009810 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8009810:	b5b0      	push	{r4, r5, r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8009818:	2300      	movs	r3, #0
 800981a:	73fb      	strb	r3, [r7, #15]

    switch( SX1276.Settings.Modem )
 800981c:	4bc4      	ldr	r3, [pc, #784]	@ (8009b30 <SX1276SetRx+0x320>)
 800981e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <SX1276SetRx+0x1c>
 8009826:	2b01      	cmp	r3, #1
 8009828:	d03e      	beq.n	80098a8 <SX1276SetRx+0x98>
 800982a:	e19b      	b.n	8009b64 <SX1276SetRx+0x354>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800982c:	4bc0      	ldr	r3, [pc, #768]	@ (8009b30 <SX1276SetRx+0x320>)
 800982e:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8009832:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8009834:	2040      	movs	r0, #64	@ 0x40
 8009836:	f000 fbbd 	bl	8009fb4 <SX1276Read>
 800983a:	4603      	mov	r3, r0
 800983c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8009844:	f043 030c 	orr.w	r3, r3, #12
 8009848:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800984a:	b2db      	uxtb	r3, r3
 800984c:	4619      	mov	r1, r3
 800984e:	2040      	movs	r0, #64	@ 0x40
 8009850:	f000 fb9e 	bl	8009f90 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8009854:	2041      	movs	r0, #65	@ 0x41
 8009856:	f000 fbad 	bl	8009fb4 <SX1276Read>
 800985a:	4603      	mov	r3, r0
 800985c:	f063 033e 	orn	r3, r3, #62	@ 0x3e
 8009860:	b2db      	uxtb	r3, r3
 8009862:	4619      	mov	r1, r3
 8009864:	2041      	movs	r0, #65	@ 0x41
 8009866:	f000 fb93 	bl	8009f90 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800986a:	2035      	movs	r0, #53	@ 0x35
 800986c:	f000 fba2 	bl	8009fb4 <SX1276Read>
 8009870:	4603      	mov	r3, r0
 8009872:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009876:	b2da      	uxtb	r2, r3
 8009878:	4bad      	ldr	r3, [pc, #692]	@ (8009b30 <SX1276SetRx+0x320>)
 800987a:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800987e:	211e      	movs	r1, #30
 8009880:	200d      	movs	r0, #13
 8009882:	f000 fb85 	bl	8009f90 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8009886:	4baa      	ldr	r3, [pc, #680]	@ (8009b30 <SX1276SetRx+0x320>)
 8009888:	2200      	movs	r2, #0
 800988a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800988e:	4ba8      	ldr	r3, [pc, #672]	@ (8009b30 <SX1276SetRx+0x320>)
 8009890:	2200      	movs	r2, #0
 8009892:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8009896:	4ba6      	ldr	r3, [pc, #664]	@ (8009b30 <SX1276SetRx+0x320>)
 8009898:	2200      	movs	r2, #0
 800989a:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = 0;
 800989e:	4ba4      	ldr	r3, [pc, #656]	@ (8009b30 <SX1276SetRx+0x320>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
        }
        break;
 80098a6:	e15d      	b.n	8009b64 <SX1276SetRx+0x354>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80098a8:	4ba1      	ldr	r3, [pc, #644]	@ (8009b30 <SX1276SetRx+0x320>)
 80098aa:	f893 3161 	ldrb.w	r3, [r3, #353]	@ 0x161
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00f      	beq.n	80098d2 <SX1276SetRx+0xc2>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80098b2:	2033      	movs	r0, #51	@ 0x33
 80098b4:	f000 fb7e 	bl	8009fb4 <SX1276Read>
 80098b8:	4603      	mov	r3, r0
 80098ba:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	4619      	mov	r1, r3
 80098c2:	2033      	movs	r0, #51	@ 0x33
 80098c4:	f000 fb64 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80098c8:	2119      	movs	r1, #25
 80098ca:	203b      	movs	r0, #59	@ 0x3b
 80098cc:	f000 fb60 	bl	8009f90 <SX1276Write>
 80098d0:	e013      	b.n	80098fa <SX1276SetRx+0xea>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80098d2:	2033      	movs	r0, #51	@ 0x33
 80098d4:	f000 fb6e 	bl	8009fb4 <SX1276Read>
 80098d8:	4603      	mov	r3, r0
 80098da:	b25b      	sxtb	r3, r3
 80098dc:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 80098e0:	b25b      	sxtb	r3, r3
 80098e2:	f043 0301 	orr.w	r3, r3, #1
 80098e6:	b25b      	sxtb	r3, r3
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	4619      	mov	r1, r3
 80098ec:	2033      	movs	r0, #51	@ 0x33
 80098ee:	f000 fb4f 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80098f2:	211d      	movs	r1, #29
 80098f4:	203b      	movs	r0, #59	@ 0x3b
 80098f6:	f000 fb4b 	bl	8009f90 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80098fa:	4b8d      	ldr	r3, [pc, #564]	@ (8009b30 <SX1276SetRx+0x320>)
 80098fc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8009900:	2b08      	cmp	r3, #8
 8009902:	f200 80d6 	bhi.w	8009ab2 <SX1276SetRx+0x2a2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8009906:	2031      	movs	r0, #49	@ 0x31
 8009908:	f000 fb54 	bl	8009fb4 <SX1276Read>
 800990c:	4603      	mov	r3, r0
 800990e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009912:	b2db      	uxtb	r3, r3
 8009914:	4619      	mov	r1, r3
 8009916:	2031      	movs	r0, #49	@ 0x31
 8009918:	f000 fb3a 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 800991c:	2100      	movs	r1, #0
 800991e:	2030      	movs	r0, #48	@ 0x30
 8009920:	f000 fb36 	bl	8009f90 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8009924:	4b82      	ldr	r3, [pc, #520]	@ (8009b30 <SX1276SetRx+0x320>)
 8009926:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800992a:	2b08      	cmp	r3, #8
 800992c:	f200 80cc 	bhi.w	8009ac8 <SX1276SetRx+0x2b8>
 8009930:	a201      	add	r2, pc, #4	@ (adr r2, 8009938 <SX1276SetRx+0x128>)
 8009932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009936:	bf00      	nop
 8009938:	0800995d 	.word	0x0800995d
 800993c:	08009991 	.word	0x08009991
 8009940:	080099c5 	.word	0x080099c5
 8009944:	080099f9 	.word	0x080099f9
 8009948:	08009a2d 	.word	0x08009a2d
 800994c:	08009a61 	.word	0x08009a61
 8009950:	08009a95 	.word	0x08009a95
 8009954:	08009a9f 	.word	0x08009a9f
 8009958:	08009aa9 	.word	0x08009aa9
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 800995c:	2148      	movs	r1, #72	@ 0x48
 800995e:	202f      	movs	r0, #47	@ 0x2f
 8009960:	f000 fb16 	bl	8009f90 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7.81e3 );
 8009964:	4b72      	ldr	r3, [pc, #456]	@ (8009b30 <SX1276SetRx+0x320>)
 8009966:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800996a:	4618      	mov	r0, r3
 800996c:	f7f6 fe0e 	bl	800058c <__aeabi_ui2d>
 8009970:	a363      	add	r3, pc, #396	@ (adr r3, 8009b00 <SX1276SetRx+0x2f0>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fccd 	bl	8000314 <__adddf3>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	4610      	mov	r0, r2
 8009980:	4619      	mov	r1, r3
 8009982:	f7f7 f93f 	bl	8000c04 <__aeabi_d2uiz>
 8009986:	4603      	mov	r3, r0
 8009988:	4618      	mov	r0, r3
 800998a:	f7fe ff51 	bl	8008830 <SX1276SetChannel>
                    break;
 800998e:	e09b      	b.n	8009ac8 <SX1276SetRx+0x2b8>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8009990:	2144      	movs	r1, #68	@ 0x44
 8009992:	202f      	movs	r0, #47	@ 0x2f
 8009994:	f000 fafc 	bl	8009f90 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10.42e3 );
 8009998:	4b65      	ldr	r3, [pc, #404]	@ (8009b30 <SX1276SetRx+0x320>)
 800999a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800999e:	4618      	mov	r0, r3
 80099a0:	f7f6 fdf4 	bl	800058c <__aeabi_ui2d>
 80099a4:	a358      	add	r3, pc, #352	@ (adr r3, 8009b08 <SX1276SetRx+0x2f8>)
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	f7f6 fcb3 	bl	8000314 <__adddf3>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4610      	mov	r0, r2
 80099b4:	4619      	mov	r1, r3
 80099b6:	f7f7 f925 	bl	8000c04 <__aeabi_d2uiz>
 80099ba:	4603      	mov	r3, r0
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fe ff37 	bl	8008830 <SX1276SetChannel>
                    break;
 80099c2:	e081      	b.n	8009ac8 <SX1276SetRx+0x2b8>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80099c4:	2144      	movs	r1, #68	@ 0x44
 80099c6:	202f      	movs	r0, #47	@ 0x2f
 80099c8:	f000 fae2 	bl	8009f90 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15.62e3 );
 80099cc:	4b58      	ldr	r3, [pc, #352]	@ (8009b30 <SX1276SetRx+0x320>)
 80099ce:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7f6 fdda 	bl	800058c <__aeabi_ui2d>
 80099d8:	a34d      	add	r3, pc, #308	@ (adr r3, 8009b10 <SX1276SetRx+0x300>)
 80099da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099de:	f7f6 fc99 	bl	8000314 <__adddf3>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4610      	mov	r0, r2
 80099e8:	4619      	mov	r1, r3
 80099ea:	f7f7 f90b 	bl	8000c04 <__aeabi_d2uiz>
 80099ee:	4603      	mov	r3, r0
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe ff1d 	bl	8008830 <SX1276SetChannel>
                    break;
 80099f6:	e067      	b.n	8009ac8 <SX1276SetRx+0x2b8>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80099f8:	2144      	movs	r1, #68	@ 0x44
 80099fa:	202f      	movs	r0, #47	@ 0x2f
 80099fc:	f000 fac8 	bl	8009f90 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20.83e3 );
 8009a00:	4b4b      	ldr	r3, [pc, #300]	@ (8009b30 <SX1276SetRx+0x320>)
 8009a02:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7f6 fdc0 	bl	800058c <__aeabi_ui2d>
 8009a0c:	a342      	add	r3, pc, #264	@ (adr r3, 8009b18 <SX1276SetRx+0x308>)
 8009a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a12:	f7f6 fc7f 	bl	8000314 <__adddf3>
 8009a16:	4602      	mov	r2, r0
 8009a18:	460b      	mov	r3, r1
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	f7f7 f8f1 	bl	8000c04 <__aeabi_d2uiz>
 8009a22:	4603      	mov	r3, r0
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe ff03 	bl	8008830 <SX1276SetChannel>
                    break;
 8009a2a:	e04d      	b.n	8009ac8 <SX1276SetRx+0x2b8>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8009a2c:	2144      	movs	r1, #68	@ 0x44
 8009a2e:	202f      	movs	r0, #47	@ 0x2f
 8009a30:	f000 faae 	bl	8009f90 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31.25e3 );
 8009a34:	4b3e      	ldr	r3, [pc, #248]	@ (8009b30 <SX1276SetRx+0x320>)
 8009a36:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7f6 fda6 	bl	800058c <__aeabi_ui2d>
 8009a40:	a337      	add	r3, pc, #220	@ (adr r3, 8009b20 <SX1276SetRx+0x310>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f7f6 fc65 	bl	8000314 <__adddf3>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4610      	mov	r0, r2
 8009a50:	4619      	mov	r1, r3
 8009a52:	f7f7 f8d7 	bl	8000c04 <__aeabi_d2uiz>
 8009a56:	4603      	mov	r3, r0
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe fee9 	bl	8008830 <SX1276SetChannel>
                    break;
 8009a5e:	e033      	b.n	8009ac8 <SX1276SetRx+0x2b8>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8009a60:	2144      	movs	r1, #68	@ 0x44
 8009a62:	202f      	movs	r0, #47	@ 0x2f
 8009a64:	f000 fa94 	bl	8009f90 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41.67e3 );
 8009a68:	4b31      	ldr	r3, [pc, #196]	@ (8009b30 <SX1276SetRx+0x320>)
 8009a6a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7f6 fd8c 	bl	800058c <__aeabi_ui2d>
 8009a74:	a32c      	add	r3, pc, #176	@ (adr r3, 8009b28 <SX1276SetRx+0x318>)
 8009a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7a:	f7f6 fc4b 	bl	8000314 <__adddf3>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	4610      	mov	r0, r2
 8009a84:	4619      	mov	r1, r3
 8009a86:	f7f7 f8bd 	bl	8000c04 <__aeabi_d2uiz>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe fecf 	bl	8008830 <SX1276SetChannel>
                    break;
 8009a92:	e019      	b.n	8009ac8 <SX1276SetRx+0x2b8>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8009a94:	2140      	movs	r1, #64	@ 0x40
 8009a96:	202f      	movs	r0, #47	@ 0x2f
 8009a98:	f000 fa7a 	bl	8009f90 <SX1276Write>
                    break;
 8009a9c:	e014      	b.n	8009ac8 <SX1276SetRx+0x2b8>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8009a9e:	2140      	movs	r1, #64	@ 0x40
 8009aa0:	202f      	movs	r0, #47	@ 0x2f
 8009aa2:	f000 fa75 	bl	8009f90 <SX1276Write>
                    break;
 8009aa6:	e00f      	b.n	8009ac8 <SX1276SetRx+0x2b8>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8009aa8:	2140      	movs	r1, #64	@ 0x40
 8009aaa:	202f      	movs	r0, #47	@ 0x2f
 8009aac:	f000 fa70 	bl	8009f90 <SX1276Write>
                    break;
 8009ab0:	e00a      	b.n	8009ac8 <SX1276SetRx+0x2b8>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8009ab2:	2031      	movs	r0, #49	@ 0x31
 8009ab4:	f000 fa7e 	bl	8009fb4 <SX1276Read>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	2031      	movs	r0, #49	@ 0x31
 8009ac4:	f000 fa64 	bl	8009f90 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8009ac8:	4b19      	ldr	r3, [pc, #100]	@ (8009b30 <SX1276SetRx+0x320>)
 8009aca:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 8009ace:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8009ad0:	4b17      	ldr	r3, [pc, #92]	@ (8009b30 <SX1276SetRx+0x320>)
 8009ad2:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d02c      	beq.n	8009b34 <SX1276SetRx+0x324>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8009ada:	211d      	movs	r1, #29
 8009adc:	2011      	movs	r0, #17
 8009ade:	f000 fa57 	bl	8009f90 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8009ae2:	2040      	movs	r0, #64	@ 0x40
 8009ae4:	f000 fa66 	bl	8009fb4 <SX1276Read>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	4619      	mov	r1, r3
 8009af2:	2040      	movs	r0, #64	@ 0x40
 8009af4:	f000 fa4c 	bl	8009f90 <SX1276Write>
 8009af8:	e02b      	b.n	8009b52 <SX1276SetRx+0x342>
 8009afa:	bf00      	nop
 8009afc:	f3af 8000 	nop.w
 8009b00:	00000000 	.word	0x00000000
 8009b04:	40be8200 	.word	0x40be8200
 8009b08:	00000000 	.word	0x00000000
 8009b0c:	40c45a00 	.word	0x40c45a00
 8009b10:	00000000 	.word	0x00000000
 8009b14:	40ce8200 	.word	0x40ce8200
 8009b18:	00000000 	.word	0x00000000
 8009b1c:	40d45780 	.word	0x40d45780
 8009b20:	00000000 	.word	0x00000000
 8009b24:	40de8480 	.word	0x40de8480
 8009b28:	00000000 	.word	0x00000000
 8009b2c:	40e458c0 	.word	0x40e458c0
 8009b30:	200004b4 	.word	0x200004b4
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8009b34:	211f      	movs	r1, #31
 8009b36:	2011      	movs	r0, #17
 8009b38:	f000 fa2a 	bl	8009f90 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8009b3c:	2040      	movs	r0, #64	@ 0x40
 8009b3e:	f000 fa39 	bl	8009fb4 <SX1276Read>
 8009b42:	4603      	mov	r3, r0
 8009b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	2040      	movs	r0, #64	@ 0x40
 8009b4e:	f000 fa1f 	bl	8009f90 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8009b52:	2100      	movs	r1, #0
 8009b54:	200f      	movs	r0, #15
 8009b56:	f000 fa1b 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	200d      	movs	r0, #13
 8009b5e:	f000 fa17 	bl	8009f90 <SX1276Write>
        }
        break;
 8009b62:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8009b64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b68:	2100      	movs	r1, #0
 8009b6a:	484a      	ldr	r0, [pc, #296]	@ (8009c94 <SX1276SetRx+0x484>)
 8009b6c:	f001 fa48 	bl	800b000 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8009b70:	4b49      	ldr	r3, [pc, #292]	@ (8009c98 <SX1276SetRx+0x488>)
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
    if( timeout != 0 )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d006      	beq.n	8009b8c <SX1276SetRx+0x37c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	4846      	ldr	r0, [pc, #280]	@ (8009c9c <SX1276SetRx+0x48c>)
 8009b82:	f7fe fd99 	bl	80086b8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8009b86:	4845      	ldr	r0, [pc, #276]	@ (8009c9c <SX1276SetRx+0x48c>)
 8009b88:	f7fe fb90 	bl	80082ac <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8009b8c:	4b42      	ldr	r3, [pc, #264]	@ (8009c98 <SX1276SetRx+0x488>)
 8009b8e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d16f      	bne.n	8009c76 <SX1276SetRx+0x466>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8009b96:	2005      	movs	r0, #5
 8009b98:	f000 f98a 	bl	8009eb0 <SX1276SetOpMode>

        if( rxContinuous == false )
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
 8009b9e:	f083 0301 	eor.w	r3, r3, #1
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d070      	beq.n	8009c8a <SX1276SetRx+0x47a>
        {
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8009ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8009c98 <SX1276SetRx+0x488>)
 8009baa:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7f6 fcfc 	bl	80005ac <__aeabi_i2d>
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	460d      	mov	r5, r1
                                                             ( ( SX1276Read( REG_SYNCCONFIG ) &
 8009bb8:	2027      	movs	r0, #39	@ 0x27
 8009bba:	f000 f9fb 	bl	8009fb4 <SX1276Read>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
                                                                ~RF_SYNCCONFIG_SYNCSIZE_MASK ) +
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7f6 fcf1 	bl	80005ac <__aeabi_i2d>
 8009bca:	f04f 0200 	mov.w	r2, #0
 8009bce:	4b34      	ldr	r3, [pc, #208]	@ (8009ca0 <SX1276SetRx+0x490>)
 8009bd0:	f7f6 fba0 	bl	8000314 <__adddf3>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	460b      	mov	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8009bd8:	4620      	mov	r0, r4
 8009bda:	4629      	mov	r1, r5
 8009bdc:	f7f6 fb9a 	bl	8000314 <__adddf3>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	4610      	mov	r0, r2
 8009be6:	4619      	mov	r1, r3
                                                                1.0 ) + 10.0 ) /
 8009be8:	f04f 0200 	mov.w	r2, #0
 8009bec:	4b2d      	ldr	r3, [pc, #180]	@ (8009ca4 <SX1276SetRx+0x494>)
 8009bee:	f7f6 fb91 	bl	8000314 <__adddf3>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	4619      	mov	r1, r3
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8009bfa:	f04f 0200 	mov.w	r2, #0
 8009bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8009ca8 <SX1276SetRx+0x498>)
 8009c00:	f7f6 fd3e 	bl	8000680 <__aeabi_dmul>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4614      	mov	r4, r2
 8009c0a:	461d      	mov	r5, r3
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 8009c0c:	4b22      	ldr	r3, [pc, #136]	@ (8009c98 <SX1276SetRx+0x488>)
 8009c0e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7f6 fcba 	bl	800058c <__aeabi_ui2d>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
                                                                1.0 ) + 10.0 ) /
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	4629      	mov	r1, r5
 8009c20:	f7f6 fe58 	bl	80008d4 <__aeabi_ddiv>
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	4610      	mov	r0, r2
 8009c2a:	4619      	mov	r1, r3
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8009c2c:	f04f 0200 	mov.w	r2, #0
 8009c30:	4b1e      	ldr	r3, [pc, #120]	@ (8009cac <SX1276SetRx+0x49c>)
 8009c32:	f7f6 fd25 	bl	8000680 <__aeabi_dmul>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	ec43 2b17 	vmov	d7, r2, r3
 8009c3e:	eeb0 0a47 	vmov.f32	s0, s14
 8009c42:	eef0 0a67 	vmov.f32	s1, s15
 8009c46:	f002 f927 	bl	800be98 <ceil>
 8009c4a:	ec51 0b10 	vmov	r0, r1, d0
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 8009c4e:	f04f 0200 	mov.w	r2, #0
 8009c52:	4b17      	ldr	r3, [pc, #92]	@ (8009cb0 <SX1276SetRx+0x4a0>)
 8009c54:	f7f6 fb5e 	bl	8000314 <__adddf3>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	4619      	mov	r1, r3
 8009c60:	f7f6 ffd0 	bl	8000c04 <__aeabi_d2uiz>
 8009c64:	4603      	mov	r3, r0
 8009c66:	4619      	mov	r1, r3
 8009c68:	4812      	ldr	r0, [pc, #72]	@ (8009cb4 <SX1276SetRx+0x4a4>)
 8009c6a:	f7fe fd25 	bl	80086b8 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8009c6e:	4811      	ldr	r0, [pc, #68]	@ (8009cb4 <SX1276SetRx+0x4a4>)
 8009c70:	f7fe fb1c 	bl	80082ac <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8009c74:	e009      	b.n	8009c8a <SX1276SetRx+0x47a>
        if( rxContinuous == true )
 8009c76:	7bfb      	ldrb	r3, [r7, #15]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d003      	beq.n	8009c84 <SX1276SetRx+0x474>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8009c7c:	2005      	movs	r0, #5
 8009c7e:	f000 f917 	bl	8009eb0 <SX1276SetOpMode>
}
 8009c82:	e002      	b.n	8009c8a <SX1276SetRx+0x47a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8009c84:	2006      	movs	r0, #6
 8009c86:	f000 f913 	bl	8009eb0 <SX1276SetOpMode>
}
 8009c8a:	bf00      	nop
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bdb0      	pop	{r4, r5, r7, pc}
 8009c92:	bf00      	nop
 8009c94:	200003b4 	.word	0x200003b4
 8009c98:	200004b4 	.word	0x200004b4
 8009c9c:	20000638 	.word	0x20000638
 8009ca0:	3ff00000 	.word	0x3ff00000
 8009ca4:	40240000 	.word	0x40240000
 8009ca8:	40200000 	.word	0x40200000
 8009cac:	408f4000 	.word	0x408f4000
 8009cb0:	40100000 	.word	0x40100000
 8009cb4:	2000064c 	.word	0x2000064c

08009cb8 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 8009cc0:	6879      	ldr	r1, [r7, #4]
 8009cc2:	4837      	ldr	r0, [pc, #220]	@ (8009da0 <SX1276SetTx+0xe8>)
 8009cc4:	f7fe fcf8 	bl	80086b8 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8009cc8:	4b36      	ldr	r3, [pc, #216]	@ (8009da4 <SX1276SetTx+0xec>)
 8009cca:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d002      	beq.n	8009cd8 <SX1276SetTx+0x20>
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d026      	beq.n	8009d24 <SX1276SetTx+0x6c>
 8009cd6:	e054      	b.n	8009d82 <SX1276SetTx+0xca>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8009cd8:	2040      	movs	r0, #64	@ 0x40
 8009cda:	f000 f96b 	bl	8009fb4 <SX1276Read>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8009ce8:	f043 0310 	orr.w	r3, r3, #16
 8009cec:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	2040      	movs	r0, #64	@ 0x40
 8009cf4:	f000 f94c 	bl	8009f90 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8009cf8:	2041      	movs	r0, #65	@ 0x41
 8009cfa:	f000 f95b 	bl	8009fb4 <SX1276Read>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	4619      	mov	r1, r3
 8009d08:	2041      	movs	r0, #65	@ 0x41
 8009d0a:	f000 f941 	bl	8009f90 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8009d0e:	2035      	movs	r0, #53	@ 0x35
 8009d10:	f000 f950 	bl	8009fb4 <SX1276Read>
 8009d14:	4603      	mov	r3, r0
 8009d16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d1a:	b2da      	uxtb	r2, r3
 8009d1c:	4b21      	ldr	r3, [pc, #132]	@ (8009da4 <SX1276SetTx+0xec>)
 8009d1e:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
        }
        break;
 8009d22:	e02e      	b.n	8009d82 <SX1276SetTx+0xca>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8009d24:	4b1f      	ldr	r3, [pc, #124]	@ (8009da4 <SX1276SetTx+0xec>)
 8009d26:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d014      	beq.n	8009d58 <SX1276SetTx+0xa0>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8009d2e:	21f5      	movs	r1, #245	@ 0xf5
 8009d30:	2011      	movs	r0, #17
 8009d32:	f000 f92d 	bl	8009f90 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8009d36:	2040      	movs	r0, #64	@ 0x40
 8009d38:	f000 f93c 	bl	8009fb4 <SX1276Read>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	b25b      	sxtb	r3, r3
 8009d40:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 8009d44:	b25b      	sxtb	r3, r3
 8009d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d4a:	b25b      	sxtb	r3, r3
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	4619      	mov	r1, r3
 8009d50:	2040      	movs	r0, #64	@ 0x40
 8009d52:	f000 f91d 	bl	8009f90 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8009d56:	e013      	b.n	8009d80 <SX1276SetTx+0xc8>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8009d58:	21f7      	movs	r1, #247	@ 0xf7
 8009d5a:	2011      	movs	r0, #17
 8009d5c:	f000 f918 	bl	8009f90 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8009d60:	2040      	movs	r0, #64	@ 0x40
 8009d62:	f000 f927 	bl	8009fb4 <SX1276Read>
 8009d66:	4603      	mov	r3, r0
 8009d68:	b25b      	sxtb	r3, r3
 8009d6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d6e:	b25b      	sxtb	r3, r3
 8009d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d74:	b25b      	sxtb	r3, r3
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	4619      	mov	r1, r3
 8009d7a:	2040      	movs	r0, #64	@ 0x40
 8009d7c:	f000 f908 	bl	8009f90 <SX1276Write>
        break;
 8009d80:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8009d82:	4b08      	ldr	r3, [pc, #32]	@ (8009da4 <SX1276SetTx+0xec>)
 8009d84:	2202      	movs	r2, #2
 8009d86:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
    TimerStart( &TxTimeoutTimer );
 8009d8a:	4805      	ldr	r0, [pc, #20]	@ (8009da0 <SX1276SetTx+0xe8>)
 8009d8c:	f7fe fa8e 	bl	80082ac <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8009d90:	2003      	movs	r0, #3
 8009d92:	f000 f88d 	bl	8009eb0 <SX1276SetOpMode>
}
 8009d96:	bf00      	nop
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	20000624 	.word	0x20000624
 8009da4:	200004b4 	.word	0x200004b4

08009da8 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8009dac:	4b10      	ldr	r3, [pc, #64]	@ (8009df0 <SX1276StartCad+0x48>)
 8009dae:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d019      	beq.n	8009dea <SX1276StartCad+0x42>
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d000      	beq.n	8009dbc <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8009dba:	e017      	b.n	8009dec <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8009dbc:	21fa      	movs	r1, #250	@ 0xfa
 8009dbe:	2011      	movs	r0, #17
 8009dc0:	f000 f8e6 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8009dc4:	2040      	movs	r0, #64	@ 0x40
 8009dc6:	f000 f8f5 	bl	8009fb4 <SX1276Read>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	2040      	movs	r0, #64	@ 0x40
 8009dd6:	f000 f8db 	bl	8009f90 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8009dda:	4b05      	ldr	r3, [pc, #20]	@ (8009df0 <SX1276StartCad+0x48>)
 8009ddc:	2203      	movs	r2, #3
 8009dde:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8009de2:	2007      	movs	r0, #7
 8009de4:	f000 f864 	bl	8009eb0 <SX1276SetOpMode>
        break;
 8009de8:	e000      	b.n	8009dec <SX1276StartCad+0x44>
        break;
 8009dea:	bf00      	nop
    }
}
 8009dec:	bf00      	nop
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	200004b4 	.word	0x200004b4

08009df4 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 8009e02:	79fb      	ldrb	r3, [r7, #7]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <SX1276ReadRssi+0x1a>
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d00a      	beq.n	8009e22 <SX1276ReadRssi+0x2e>
 8009e0c:	e01f      	b.n	8009e4e <SX1276ReadRssi+0x5a>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8009e0e:	2011      	movs	r0, #17
 8009e10:	f000 f8d0 	bl	8009fb4 <SX1276Read>
 8009e14:	4603      	mov	r3, r0
 8009e16:	085b      	lsrs	r3, r3, #1
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	425b      	negs	r3, r3
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	81fb      	strh	r3, [r7, #14]
        break;
 8009e20:	e019      	b.n	8009e56 <SX1276ReadRssi+0x62>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8009e22:	4b10      	ldr	r3, [pc, #64]	@ (8009e64 <SX1276ReadRssi+0x70>)
 8009e24:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009e28:	4a0f      	ldr	r2, [pc, #60]	@ (8009e68 <SX1276ReadRssi+0x74>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d907      	bls.n	8009e3e <SX1276ReadRssi+0x4a>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8009e2e:	201b      	movs	r0, #27
 8009e30:	f000 f8c0 	bl	8009fb4 <SX1276Read>
 8009e34:	4603      	mov	r3, r0
 8009e36:	3b9d      	subs	r3, #157	@ 0x9d
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8009e3c:	e00b      	b.n	8009e56 <SX1276ReadRssi+0x62>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8009e3e:	201b      	movs	r0, #27
 8009e40:	f000 f8b8 	bl	8009fb4 <SX1276Read>
 8009e44:	4603      	mov	r3, r0
 8009e46:	3ba4      	subs	r3, #164	@ 0xa4
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	81fb      	strh	r3, [r7, #14]
        break;
 8009e4c:	e003      	b.n	8009e56 <SX1276ReadRssi+0x62>
    default:
        rssi = -1;
 8009e4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009e52:	81fb      	strh	r3, [r7, #14]
        break;
 8009e54:	bf00      	nop
    }
    return rssi;
 8009e56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	200004b4 	.word	0x200004b4
 8009e68:	1f4add40 	.word	0x1f4add40

08009e6c <SX1276Reset>:

void SX1276Reset( void )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af02      	add	r7, sp, #8
    // Set RESET pin to 0
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8009e72:	2300      	movs	r3, #0
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	2300      	movs	r3, #0
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	210b      	movs	r1, #11
 8009e80:	480a      	ldr	r0, [pc, #40]	@ (8009eac <SX1276Reset+0x40>)
 8009e82:	f7fd faaf 	bl	80073e4 <GpioInit>

    // Wait 1 ms
    DelayMs( 1 );
 8009e86:	2001      	movs	r0, #1
 8009e88:	f7fc ff9e 	bl	8006dc8 <DelayMs>

    // Configure RESET as input
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	9301      	str	r3, [sp, #4]
 8009e90:	2300      	movs	r3, #0
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	2300      	movs	r3, #0
 8009e96:	2200      	movs	r2, #0
 8009e98:	210b      	movs	r1, #11
 8009e9a:	4804      	ldr	r0, [pc, #16]	@ (8009eac <SX1276Reset+0x40>)
 8009e9c:	f7fd faa2 	bl	80073e4 <GpioInit>

    // Wait 6 ms
    DelayMs( 6 );
 8009ea0:	2006      	movs	r0, #6
 8009ea2:	f7fc ff91 	bl	8006dc8 <DelayMs>
}
 8009ea6:	bf00      	nop
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	200004b4 	.word	0x200004b4

08009eb0 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 8009eba:	79fb      	ldrb	r3, [r7, #7]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d103      	bne.n	8009ec8 <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	f7fe f951 	bl	8008168 <SX1276SetAntSwLowPower>
 8009ec6:	e00c      	b.n	8009ee2 <SX1276SetOpMode+0x32>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 8009ec8:	2000      	movs	r0, #0
 8009eca:	f7fe f94d 	bl	8008168 <SX1276SetAntSwLowPower>
        if( opMode == RF_OPMODE_TRANSMITTER )
 8009ece:	79fb      	ldrb	r3, [r7, #7]
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d103      	bne.n	8009edc <SX1276SetOpMode+0x2c>
        {
            SX1276SetAntSw( 1 );
 8009ed4:	2001      	movs	r0, #1
 8009ed6:	f7fe f9a1 	bl	800821c <SX1276SetAntSw>
 8009eda:	e002      	b.n	8009ee2 <SX1276SetOpMode+0x32>
        }
        else
        {
            SX1276SetAntSw( 0 );
 8009edc:	2000      	movs	r0, #0
 8009ede:	f7fe f99d 	bl	800821c <SX1276SetAntSw>
        }
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8009ee2:	2001      	movs	r0, #1
 8009ee4:	f000 f866 	bl	8009fb4 <SX1276Read>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	b25b      	sxtb	r3, r3
 8009eec:	f023 0307 	bic.w	r3, r3, #7
 8009ef0:	b25a      	sxtb	r2, r3
 8009ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	b25b      	sxtb	r3, r3
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	4619      	mov	r1, r3
 8009efe:	2001      	movs	r0, #1
 8009f00:	f000 f846 	bl	8009f90 <SX1276Write>
}
 8009f04:	bf00      	nop
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	4603      	mov	r3, r0
 8009f14:	71fb      	strb	r3, [r7, #7]
/*    if( SX1276.Settings.Modem == modem )
    {
        return;
    }
PKDEBUG */
    SX1276.Settings.Modem = modem;
 8009f16:	4a1d      	ldr	r2, [pc, #116]	@ (8009f8c <SX1276SetModem+0x80>)
 8009f18:	79fb      	ldrb	r3, [r7, #7]
 8009f1a:	f882 3115 	strb.w	r3, [r2, #277]	@ 0x115
    switch( SX1276.Settings.Modem )
 8009f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8009f8c <SX1276SetModem+0x80>)
 8009f20:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d016      	beq.n	8009f56 <SX1276SetModem+0x4a>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8009f28:	2000      	movs	r0, #0
 8009f2a:	f7ff ffc1 	bl	8009eb0 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8009f2e:	2001      	movs	r0, #1
 8009f30:	f000 f840 	bl	8009fb4 <SX1276Read>
 8009f34:	4603      	mov	r3, r0
 8009f36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	2001      	movs	r0, #1
 8009f40:	f000 f826 	bl	8009f90 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8009f44:	2100      	movs	r1, #0
 8009f46:	2040      	movs	r0, #64	@ 0x40
 8009f48:	f000 f822 	bl	8009f90 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8009f4c:	2130      	movs	r1, #48	@ 0x30
 8009f4e:	2041      	movs	r0, #65	@ 0x41
 8009f50:	f000 f81e 	bl	8009f90 <SX1276Write>
        break;
 8009f54:	e016      	b.n	8009f84 <SX1276SetModem+0x78>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8009f56:	2000      	movs	r0, #0
 8009f58:	f7ff ffaa 	bl	8009eb0 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	f000 f829 	bl	8009fb4 <SX1276Read>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	2001      	movs	r0, #1
 8009f6e:	f000 f80f 	bl	8009f90 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8009f72:	2100      	movs	r1, #0
 8009f74:	2040      	movs	r0, #64	@ 0x40
 8009f76:	f000 f80b 	bl	8009f90 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	2041      	movs	r0, #65	@ 0x41
 8009f7e:	f000 f807 	bl	8009f90 <SX1276Write>
        break;
 8009f82:	bf00      	nop
    }
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	200004b4 	.word	0x200004b4

08009f90 <SX1276Write>:

void SX1276Write( uint8_t addr, uint8_t data )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	460a      	mov	r2, r1
 8009f9a:	71fb      	strb	r3, [r7, #7]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	71bb      	strb	r3, [r7, #6]
    SX1276WriteBuffer( addr, &data, 1 );
 8009fa0:	1db9      	adds	r1, r7, #6
 8009fa2:	79fb      	ldrb	r3, [r7, #7]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 f816 	bl	8009fd8 <SX1276WriteBuffer>
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <SX1276Read>:

uint8_t SX1276Read( uint8_t addr )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	4603      	mov	r3, r0
 8009fbc:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8009fbe:	f107 010f 	add.w	r1, r7, #15
 8009fc2:	79fb      	ldrb	r3, [r7, #7]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 f832 	bl	800a030 <SX1276ReadBuffer>
    return data;
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
	...

08009fd8 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	6039      	str	r1, [r7, #0]
 8009fe2:	71fb      	strb	r3, [r7, #7]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	71bb      	strb	r3, [r7, #6]
//    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8009fe8:	2100      	movs	r1, #0
 8009fea:	480f      	ldr	r0, [pc, #60]	@ (800a028 <SX1276WriteBuffer+0x50>)
 8009fec:	f7fd fa39 	bl	8007462 <GpioWrite>
/*    SpiInOut( &SX1276.Spi, addr | 0x80 );
    for( i = 0; i < size; i++ )
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
    }    */
    addr |= 0x80;
 8009ff0:	79fb      	ldrb	r3, [r7, #7]
 8009ff2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit( &SX1276.Spi.Spi, &addr, 1, HAL_MAX_DELAY);
 8009ffa:	1df9      	adds	r1, r7, #7
 8009ffc:	f04f 33ff 	mov.w	r3, #4294967295
 800a000:	2201      	movs	r2, #1
 800a002:	480a      	ldr	r0, [pc, #40]	@ (800a02c <SX1276WriteBuffer+0x54>)
 800a004:	f7fc f89c 	bl	8006140 <HAL_SPI_Transmit>
    HAL_SPI_Transmit( &SX1276.Spi.Spi, buffer, size, HAL_MAX_DELAY);
 800a008:	79bb      	ldrb	r3, [r7, #6]
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	f04f 33ff 	mov.w	r3, #4294967295
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	4806      	ldr	r0, [pc, #24]	@ (800a02c <SX1276WriteBuffer+0x54>)
 800a014:	f7fc f894 	bl	8006140 <HAL_SPI_Transmit>

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800a018:	2101      	movs	r1, #1
 800a01a:	4803      	ldr	r0, [pc, #12]	@ (800a028 <SX1276WriteBuffer+0x50>)
 800a01c:	f7fd fa21 	bl	8007462 <GpioWrite>
}
 800a020:	bf00      	nop
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	200005bc 	.word	0x200005bc
 800a02c:	20000508 	.word	0x20000508

0800a030 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	6039      	str	r1, [r7, #0]
 800a03a:	71fb      	strb	r3, [r7, #7]
 800a03c:	4613      	mov	r3, r2
 800a03e:	71bb      	strb	r3, [r7, #6]
//    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 800a040:	2100      	movs	r1, #0
 800a042:	4816      	ldr	r0, [pc, #88]	@ (800a09c <SX1276ReadBuffer+0x6c>)
 800a044:	f7fd fa0d 	bl	8007462 <GpioWrite>

//    SpiInOut( &SX1276.Spi, addr & 0x7F );
    addr &= 0x7f;
 800a048:	79fb      	ldrb	r3, [r7, #7]
 800a04a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit( &SX1276.Spi.Spi, &addr, 1, HAL_MAX_DELAY);
 800a052:	1df9      	adds	r1, r7, #7
 800a054:	f04f 33ff 	mov.w	r3, #4294967295
 800a058:	2201      	movs	r2, #1
 800a05a:	4811      	ldr	r0, [pc, #68]	@ (800a0a0 <SX1276ReadBuffer+0x70>)
 800a05c:	f7fc f870 	bl	8006140 <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(&SX1276.Spi.Spi) != HAL_SPI_STATE_READY);
 800a060:	bf00      	nop
 800a062:	480f      	ldr	r0, [pc, #60]	@ (800a0a0 <SX1276ReadBuffer+0x70>)
 800a064:	f7fc fd1a 	bl	8006a9c <HAL_SPI_GetState>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d1f9      	bne.n	800a062 <SX1276ReadBuffer+0x32>
    HAL_SPI_Receive( &SX1276.Spi.Spi, buffer, size, HAL_MAX_DELAY);
 800a06e:	79bb      	ldrb	r3, [r7, #6]
 800a070:	b29a      	uxth	r2, r3
 800a072:	f04f 33ff 	mov.w	r3, #4294967295
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	4809      	ldr	r0, [pc, #36]	@ (800a0a0 <SX1276ReadBuffer+0x70>)
 800a07a:	f7fc fa75 	bl	8006568 <HAL_SPI_Receive>
    while(HAL_SPI_GetState(&SX1276.Spi.Spi) != HAL_SPI_STATE_READY);
 800a07e:	bf00      	nop
 800a080:	4807      	ldr	r0, [pc, #28]	@ (800a0a0 <SX1276ReadBuffer+0x70>)
 800a082:	f7fc fd0b 	bl	8006a9c <HAL_SPI_GetState>
 800a086:	4603      	mov	r3, r0
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d1f9      	bne.n	800a080 <SX1276ReadBuffer+0x50>
//    {
//        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
//    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800a08c:	2101      	movs	r1, #1
 800a08e:	4803      	ldr	r0, [pc, #12]	@ (800a09c <SX1276ReadBuffer+0x6c>)
 800a090:	f7fd f9e7 	bl	8007462 <GpioWrite>
}
 800a094:	bf00      	nop
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	200005bc 	.word	0x200005bc
 800a0a0:	20000508 	.word	0x20000508

0800a0a4 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 800a0b0:	78fb      	ldrb	r3, [r7, #3]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	6879      	ldr	r1, [r7, #4]
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	f7ff ff8e 	bl	8009fd8 <SX1276WriteBuffer>
}
 800a0bc:	bf00      	nop
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 800a0d0:	78fb      	ldrb	r3, [r7, #3]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	f7ff ffaa 	bl	800a030 <SX1276ReadBuffer>
}
 800a0dc:	bf00      	nop
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	460a      	mov	r2, r1
 800a0ee:	71fb      	strb	r3, [r7, #7]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff ff08 	bl	8009f0c <SX1276SetModem>

    switch( modem )
 800a0fc:	79fb      	ldrb	r3, [r7, #7]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d002      	beq.n	800a108 <SX1276SetMaxPayloadLength+0x24>
 800a102:	2b01      	cmp	r3, #1
 800a104:	d00e      	beq.n	800a124 <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 800a106:	e014      	b.n	800a132 <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 800a108:	4b0c      	ldr	r3, [pc, #48]	@ (800a13c <SX1276SetMaxPayloadLength+0x58>)
 800a10a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800a10e:	f083 0301 	eor.w	r3, r3, #1
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00b      	beq.n	800a130 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800a118:	79bb      	ldrb	r3, [r7, #6]
 800a11a:	4619      	mov	r1, r3
 800a11c:	2032      	movs	r0, #50	@ 0x32
 800a11e:	f7ff ff37 	bl	8009f90 <SX1276Write>
        break;
 800a122:	e005      	b.n	800a130 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800a124:	79bb      	ldrb	r3, [r7, #6]
 800a126:	4619      	mov	r1, r3
 800a128:	2023      	movs	r0, #35	@ 0x23
 800a12a:	f7ff ff31 	bl	8009f90 <SX1276Write>
        break;
 800a12e:	e000      	b.n	800a132 <SX1276SetMaxPayloadLength+0x4e>
        break;
 800a130:	bf00      	nop
}
 800a132:	bf00      	nop
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	200004b4 	.word	0x200004b4

0800a140 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800a144:	4b32      	ldr	r3, [pc, #200]	@ (800a210 <SX1276OnTimeoutIrq+0xd0>)
 800a146:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d002      	beq.n	800a154 <SX1276OnTimeoutIrq+0x14>
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d046      	beq.n	800a1e0 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 800a152:	e05a      	b.n	800a20a <SX1276OnTimeoutIrq+0xca>
        if( SX1276.Settings.Modem == MODEM_FSK )
 800a154:	4b2e      	ldr	r3, [pc, #184]	@ (800a210 <SX1276OnTimeoutIrq+0xd0>)
 800a156:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d132      	bne.n	800a1c4 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800a15e:	4b2c      	ldr	r3, [pc, #176]	@ (800a210 <SX1276OnTimeoutIrq+0xd0>)
 800a160:	2200      	movs	r2, #0
 800a162:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800a166:	4b2a      	ldr	r3, [pc, #168]	@ (800a210 <SX1276OnTimeoutIrq+0xd0>)
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800a16e:	4b28      	ldr	r3, [pc, #160]	@ (800a210 <SX1276OnTimeoutIrq+0xd0>)
 800a170:	2200      	movs	r2, #0
 800a172:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = 0;
 800a176:	4b26      	ldr	r3, [pc, #152]	@ (800a210 <SX1276OnTimeoutIrq+0xd0>)
 800a178:	2200      	movs	r2, #0
 800a17a:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800a17e:	210b      	movs	r1, #11
 800a180:	203e      	movs	r0, #62	@ 0x3e
 800a182:	f7ff ff05 	bl	8009f90 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800a186:	2110      	movs	r1, #16
 800a188:	203f      	movs	r0, #63	@ 0x3f
 800a18a:	f7ff ff01 	bl	8009f90 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800a18e:	4b20      	ldr	r3, [pc, #128]	@ (800a210 <SX1276OnTimeoutIrq+0xd0>)
 800a190:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00e      	beq.n	800a1b6 <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800a198:	200d      	movs	r0, #13
 800a19a:	f7ff ff0b 	bl	8009fb4 <SX1276Read>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	200d      	movs	r0, #13
 800a1aa:	f7ff fef1 	bl	8009f90 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 800a1ae:	4819      	ldr	r0, [pc, #100]	@ (800a214 <SX1276OnTimeoutIrq+0xd4>)
 800a1b0:	f7fe f87c 	bl	80082ac <TimerStart>
 800a1b4:	e006      	b.n	800a1c4 <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 800a1b6:	4b16      	ldr	r3, [pc, #88]	@ (800a210 <SX1276OnTimeoutIrq+0xd0>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                TimerStop( &RxTimeoutSyncWord );
 800a1be:	4815      	ldr	r0, [pc, #84]	@ (800a214 <SX1276OnTimeoutIrq+0xd4>)
 800a1c0:	f7fe f9bc 	bl	800853c <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a1c4:	4b14      	ldr	r3, [pc, #80]	@ (800a218 <SX1276OnTimeoutIrq+0xd8>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01b      	beq.n	800a204 <SX1276OnTimeoutIrq+0xc4>
 800a1cc:	4b12      	ldr	r3, [pc, #72]	@ (800a218 <SX1276OnTimeoutIrq+0xd8>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d016      	beq.n	800a204 <SX1276OnTimeoutIrq+0xc4>
            RadioEvents->RxTimeout( );
 800a1d6:	4b10      	ldr	r3, [pc, #64]	@ (800a218 <SX1276OnTimeoutIrq+0xd8>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	4798      	blx	r3
        break;
 800a1de:	e011      	b.n	800a204 <SX1276OnTimeoutIrq+0xc4>
        SX1276.Settings.State = RF_IDLE;
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a210 <SX1276OnTimeoutIrq+0xd0>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a1e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a218 <SX1276OnTimeoutIrq+0xd8>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00b      	beq.n	800a208 <SX1276OnTimeoutIrq+0xc8>
 800a1f0:	4b09      	ldr	r3, [pc, #36]	@ (800a218 <SX1276OnTimeoutIrq+0xd8>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d006      	beq.n	800a208 <SX1276OnTimeoutIrq+0xc8>
            RadioEvents->TxTimeout( );
 800a1fa:	4b07      	ldr	r3, [pc, #28]	@ (800a218 <SX1276OnTimeoutIrq+0xd8>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	4798      	blx	r3
        break;
 800a202:	e001      	b.n	800a208 <SX1276OnTimeoutIrq+0xc8>
        break;
 800a204:	bf00      	nop
 800a206:	e000      	b.n	800a20a <SX1276OnTimeoutIrq+0xca>
        break;
 800a208:	bf00      	nop
    }
}
 800a20a:	bf00      	nop
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	200004b4 	.word	0x200004b4
 800a214:	2000064c 	.word	0x2000064c
 800a218:	200003b0 	.word	0x200003b0

0800a21c <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 800a21c:	b590      	push	{r4, r7, lr}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	70fb      	strb	r3, [r7, #3]

    switch( SX1276.Settings.State )
 800a226:	4ba7      	ldr	r3, [pc, #668]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a228:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d003      	beq.n	800a238 <SX1276OnDio0Irq+0x1c>
 800a230:	2b02      	cmp	r3, #2
 800a232:	f000 81f0 	beq.w	800a616 <SX1276OnDio0Irq+0x3fa>
                }
                break;
            }
            break;
        default:
            break;
 800a236:	e20d      	b.n	800a654 <SX1276OnDio0Irq+0x438>
            switch( SX1276.Settings.Modem )
 800a238:	4ba2      	ldr	r3, [pc, #648]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a23a:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <SX1276OnDio0Irq+0x2e>
 800a242:	2b01      	cmp	r3, #1
 800a244:	f000 80ef 	beq.w	800a426 <SX1276OnDio0Irq+0x20a>
                break;
 800a248:	e1e4      	b.n	800a614 <SX1276OnDio0Irq+0x3f8>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800a24a:	4b9e      	ldr	r3, [pc, #632]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a24c:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800a250:	2b00      	cmp	r3, #0
 800a252:	d051      	beq.n	800a2f8 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800a254:	203f      	movs	r0, #63	@ 0x3f
 800a256:	f7ff fead 	bl	8009fb4 <SX1276Read>
 800a25a:	4603      	mov	r3, r0
 800a25c:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800a25e:	78fb      	ldrb	r3, [r7, #3]
 800a260:	b2db      	uxtb	r3, r3
 800a262:	f003 0302 	and.w	r3, r3, #2
 800a266:	2b02      	cmp	r3, #2
 800a268:	d046      	beq.n	800a2f8 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800a26a:	210b      	movs	r1, #11
 800a26c:	203e      	movs	r0, #62	@ 0x3e
 800a26e:	f7ff fe8f 	bl	8009f90 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800a272:	2110      	movs	r1, #16
 800a274:	203f      	movs	r0, #63	@ 0x3f
 800a276:	f7ff fe8b 	bl	8009f90 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800a27a:	4893      	ldr	r0, [pc, #588]	@ (800a4c8 <SX1276OnDio0Irq+0x2ac>)
 800a27c:	f7fe f95e 	bl	800853c <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800a280:	4b90      	ldr	r3, [pc, #576]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a282:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800a286:	f083 0301 	eor.w	r3, r3, #1
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d007      	beq.n	800a2a0 <SX1276OnDio0Irq+0x84>
                            TimerStop( &RxTimeoutSyncWord );
 800a290:	488e      	ldr	r0, [pc, #568]	@ (800a4cc <SX1276OnDio0Irq+0x2b0>)
 800a292:	f7fe f953 	bl	800853c <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800a296:	4b8b      	ldr	r3, [pc, #556]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 800a29e:	e00d      	b.n	800a2bc <SX1276OnDio0Irq+0xa0>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800a2a0:	200d      	movs	r0, #13
 800a2a2:	f7ff fe87 	bl	8009fb4 <SX1276Read>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	200d      	movs	r0, #13
 800a2b2:	f7ff fe6d 	bl	8009f90 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 800a2b6:	4885      	ldr	r0, [pc, #532]	@ (800a4cc <SX1276OnDio0Irq+0x2b0>)
 800a2b8:	f7fd fff8 	bl	80082ac <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800a2bc:	4b84      	ldr	r3, [pc, #528]	@ (800a4d0 <SX1276OnDio0Irq+0x2b4>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d008      	beq.n	800a2d6 <SX1276OnDio0Irq+0xba>
 800a2c4:	4b82      	ldr	r3, [pc, #520]	@ (800a4d0 <SX1276OnDio0Irq+0x2b4>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <SX1276OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 800a2ce:	4b80      	ldr	r3, [pc, #512]	@ (800a4d0 <SX1276OnDio0Irq+0x2b4>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800a2d6:	4b7b      	ldr	r3, [pc, #492]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800a2de:	4b79      	ldr	r3, [pc, #484]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800a2e6:	4b77      	ldr	r3, [pc, #476]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800a2ee:	4b75      	ldr	r3, [pc, #468]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                        break;
 800a2f6:	e18d      	b.n	800a614 <SX1276OnDio0Irq+0x3f8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800a2f8:	4b72      	ldr	r3, [pc, #456]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a2fa:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d133      	bne.n	800a36a <SX1276OnDio0Irq+0x14e>
 800a302:	4b70      	ldr	r3, [pc, #448]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a304:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d12e      	bne.n	800a36a <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800a30c:	4b6d      	ldr	r3, [pc, #436]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a30e:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800a312:	f083 0301 	eor.w	r3, r3, #1
 800a316:	b2db      	uxtb	r3, r3
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d004      	beq.n	800a326 <SX1276OnDio0Irq+0x10a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800a31c:	2101      	movs	r1, #1
 800a31e:	486d      	ldr	r0, [pc, #436]	@ (800a4d4 <SX1276OnDio0Irq+0x2b8>)
 800a320:	f7ff fed0 	bl	800a0c4 <SX1276ReadFifo>
 800a324:	e007      	b.n	800a336 <SX1276OnDio0Irq+0x11a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800a326:	2032      	movs	r0, #50	@ 0x32
 800a328:	f7ff fe44 	bl	8009fb4 <SX1276Read>
 800a32c:	4603      	mov	r3, r0
 800a32e:	461a      	mov	r2, r3
 800a330:	4b64      	ldr	r3, [pc, #400]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a332:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800a336:	4b63      	ldr	r3, [pc, #396]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a338:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a33c:	461a      	mov	r2, r3
 800a33e:	4b66      	ldr	r3, [pc, #408]	@ (800a4d8 <SX1276OnDio0Irq+0x2bc>)
 800a340:	18d0      	adds	r0, r2, r3
 800a342:	4b60      	ldr	r3, [pc, #384]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a344:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	4b5e      	ldr	r3, [pc, #376]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a34c:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a350:	b2db      	uxtb	r3, r3
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	b2db      	uxtb	r3, r3
 800a356:	4619      	mov	r1, r3
 800a358:	f7ff feb4 	bl	800a0c4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800a35c:	4b59      	ldr	r3, [pc, #356]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a35e:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 800a362:	4b58      	ldr	r3, [pc, #352]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a364:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
 800a368:	e018      	b.n	800a39c <SX1276OnDio0Irq+0x180>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800a36a:	4b56      	ldr	r3, [pc, #344]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a36c:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a370:	461a      	mov	r2, r3
 800a372:	4b59      	ldr	r3, [pc, #356]	@ (800a4d8 <SX1276OnDio0Irq+0x2bc>)
 800a374:	18d0      	adds	r0, r2, r3
 800a376:	4b53      	ldr	r3, [pc, #332]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a378:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	4b51      	ldr	r3, [pc, #324]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a380:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a384:	b2db      	uxtb	r3, r3
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	4619      	mov	r1, r3
 800a38c:	f7ff fe9a 	bl	800a0c4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800a390:	4b4c      	ldr	r3, [pc, #304]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a392:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 800a396:	4b4b      	ldr	r3, [pc, #300]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a398:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800a39c:	4b49      	ldr	r3, [pc, #292]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a39e:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800a3a2:	f083 0301 	eor.w	r3, r3, #1
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d007      	beq.n	800a3bc <SX1276OnDio0Irq+0x1a0>
                    SX1276.Settings.State = RF_IDLE;
 800a3ac:	4b45      	ldr	r3, [pc, #276]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    TimerStart( &RxTimeoutSyncWord );
 800a3b4:	4845      	ldr	r0, [pc, #276]	@ (800a4cc <SX1276OnDio0Irq+0x2b0>)
 800a3b6:	f7fd ff79 	bl	80082ac <TimerStart>
 800a3ba:	e00a      	b.n	800a3d2 <SX1276OnDio0Irq+0x1b6>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800a3bc:	200d      	movs	r0, #13
 800a3be:	f7ff fdf9 	bl	8009fb4 <SX1276Read>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	200d      	movs	r0, #13
 800a3ce:	f7ff fddf 	bl	8009f90 <SX1276Write>
                TimerStop( &RxTimeoutTimer );
 800a3d2:	483d      	ldr	r0, [pc, #244]	@ (800a4c8 <SX1276OnDio0Irq+0x2ac>)
 800a3d4:	f7fe f8b2 	bl	800853c <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800a3d8:	4b3d      	ldr	r3, [pc, #244]	@ (800a4d0 <SX1276OnDio0Irq+0x2b4>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d011      	beq.n	800a404 <SX1276OnDio0Irq+0x1e8>
 800a3e0:	4b3b      	ldr	r3, [pc, #236]	@ (800a4d0 <SX1276OnDio0Irq+0x2b4>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00c      	beq.n	800a404 <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800a3ea:	4b39      	ldr	r3, [pc, #228]	@ (800a4d0 <SX1276OnDio0Irq+0x2b4>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689c      	ldr	r4, [r3, #8]
 800a3f0:	4b34      	ldr	r3, [pc, #208]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a3f2:	f8b3 1146 	ldrh.w	r1, [r3, #326]	@ 0x146
 800a3f6:	4b33      	ldr	r3, [pc, #204]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a3f8:	f993 313e 	ldrsb.w	r3, [r3, #318]	@ 0x13e
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	2300      	movs	r3, #0
 800a400:	4835      	ldr	r0, [pc, #212]	@ (800a4d8 <SX1276OnDio0Irq+0x2bc>)
 800a402:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800a404:	4b2f      	ldr	r3, [pc, #188]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a406:	2200      	movs	r2, #0
 800a408:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800a40c:	4b2d      	ldr	r3, [pc, #180]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800a414:	4b2b      	ldr	r3, [pc, #172]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a416:	2200      	movs	r2, #0
 800a418:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                SX1276.Settings.FskPacketHandler.Size = 0;
 800a41c:	4b29      	ldr	r3, [pc, #164]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a41e:	2200      	movs	r2, #0
 800a420:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                break;
 800a424:	e0f6      	b.n	800a614 <SX1276OnDio0Irq+0x3f8>
                    int8_t snr = 0;
 800a426:	2300      	movs	r3, #0
 800a428:	71fb      	strb	r3, [r7, #7]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800a42a:	2140      	movs	r1, #64	@ 0x40
 800a42c:	2012      	movs	r0, #18
 800a42e:	f7ff fdaf 	bl	8009f90 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800a432:	2012      	movs	r0, #18
 800a434:	f7ff fdbe 	bl	8009fb4 <SX1276Read>
 800a438:	4603      	mov	r3, r0
 800a43a:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	f003 0320 	and.w	r3, r3, #32
 800a444:	2b20      	cmp	r3, #32
 800a446:	d122      	bne.n	800a48e <SX1276OnDio0Irq+0x272>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800a448:	2120      	movs	r1, #32
 800a44a:	2012      	movs	r0, #18
 800a44c:	f7ff fda0 	bl	8009f90 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800a450:	4b1c      	ldr	r3, [pc, #112]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a452:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 800a456:	f083 0301 	eor.w	r3, r3, #1
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d003      	beq.n	800a468 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 800a460:	4b18      	ldr	r3, [pc, #96]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a462:	2200      	movs	r2, #0
 800a464:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                        TimerStop( &RxTimeoutTimer );
 800a468:	4817      	ldr	r0, [pc, #92]	@ (800a4c8 <SX1276OnDio0Irq+0x2ac>)
 800a46a:	f7fe f867 	bl	800853c <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800a46e:	4b18      	ldr	r3, [pc, #96]	@ (800a4d0 <SX1276OnDio0Irq+0x2b4>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 80cb 	beq.w	800a60e <SX1276OnDio0Irq+0x3f2>
 800a478:	4b15      	ldr	r3, [pc, #84]	@ (800a4d0 <SX1276OnDio0Irq+0x2b4>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 80c5 	beq.w	800a60e <SX1276OnDio0Irq+0x3f2>
                            RadioEvents->RxError( );
 800a484:	4b12      	ldr	r3, [pc, #72]	@ (800a4d0 <SX1276OnDio0Irq+0x2b4>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	4798      	blx	r3
                        break;
 800a48c:	e0bf      	b.n	800a60e <SX1276OnDio0Irq+0x3f2>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 800a48e:	2019      	movs	r0, #25
 800a490:	f7ff fd90 	bl	8009fb4 <SX1276Read>
 800a494:	4603      	mov	r3, r0
 800a496:	b25a      	sxtb	r2, r3
 800a498:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a49a:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 800a49e:	4b09      	ldr	r3, [pc, #36]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a4a0:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	da19      	bge.n	800a4dc <SX1276OnDio0Irq+0x2c0>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 800a4a8:	4b06      	ldr	r3, [pc, #24]	@ (800a4c4 <SX1276OnDio0Irq+0x2a8>)
 800a4aa:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 800a4ae:	425b      	negs	r3, r3
 800a4b0:	109b      	asrs	r3, r3, #2
 800a4b2:	b25b      	sxtb	r3, r3
 800a4b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4b8:	71fb      	strb	r3, [r7, #7]
                        snr = -snr;
 800a4ba:	79fb      	ldrb	r3, [r7, #7]
 800a4bc:	425b      	negs	r3, r3
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	71fb      	strb	r3, [r7, #7]
 800a4c2:	e013      	b.n	800a4ec <SX1276OnDio0Irq+0x2d0>
 800a4c4:	200004b4 	.word	0x200004b4
 800a4c8:	20000638 	.word	0x20000638
 800a4cc:	2000064c 	.word	0x2000064c
 800a4d0:	200003b0 	.word	0x200003b0
 800a4d4:	200005fa 	.word	0x200005fa
 800a4d8:	200003b4 	.word	0x200003b4
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 800a4dc:	4b5f      	ldr	r3, [pc, #380]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a4de:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 800a4e2:	109b      	asrs	r3, r3, #2
 800a4e4:	b25b      	sxtb	r3, r3
 800a4e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4ea:	71fb      	strb	r3, [r7, #7]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800a4ec:	201a      	movs	r0, #26
 800a4ee:	f7ff fd61 	bl	8009fb4 <SX1276Read>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	80bb      	strh	r3, [r7, #4]
                    if( snr < 0 )
 800a4f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	da2d      	bge.n	800a55a <SX1276OnDio0Irq+0x33e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800a4fe:	4b57      	ldr	r3, [pc, #348]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a500:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800a504:	4a56      	ldr	r2, [pc, #344]	@ (800a660 <SX1276OnDio0Irq+0x444>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d913      	bls.n	800a532 <SX1276OnDio0Irq+0x316>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800a50a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a50e:	111b      	asrs	r3, r3, #4
 800a510:	b21b      	sxth	r3, r3
 800a512:	b29a      	uxth	r2, r3
 800a514:	88bb      	ldrh	r3, [r7, #4]
 800a516:	4413      	add	r3, r2
 800a518:	b29a      	uxth	r2, r3
 800a51a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a51e:	b29b      	uxth	r3, r3
 800a520:	4413      	add	r3, r2
 800a522:	b29b      	uxth	r3, r3
 800a524:	3b9d      	subs	r3, #157	@ 0x9d
 800a526:	b29b      	uxth	r3, r3
 800a528:	b21a      	sxth	r2, r3
 800a52a:	4b4c      	ldr	r3, [pc, #304]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a52c:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 800a530:	e036      	b.n	800a5a0 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800a532:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a536:	111b      	asrs	r3, r3, #4
 800a538:	b21b      	sxth	r3, r3
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	88bb      	ldrh	r3, [r7, #4]
 800a53e:	4413      	add	r3, r2
 800a540:	b29a      	uxth	r2, r3
 800a542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a546:	b29b      	uxth	r3, r3
 800a548:	4413      	add	r3, r2
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	3ba4      	subs	r3, #164	@ 0xa4
 800a54e:	b29b      	uxth	r3, r3
 800a550:	b21a      	sxth	r2, r3
 800a552:	4b42      	ldr	r3, [pc, #264]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a554:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 800a558:	e022      	b.n	800a5a0 <SX1276OnDio0Irq+0x384>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800a55a:	4b40      	ldr	r3, [pc, #256]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a55c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800a560:	4a3f      	ldr	r2, [pc, #252]	@ (800a660 <SX1276OnDio0Irq+0x444>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d90e      	bls.n	800a584 <SX1276OnDio0Irq+0x368>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800a566:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a56a:	111b      	asrs	r3, r3, #4
 800a56c:	b21b      	sxth	r3, r3
 800a56e:	b29a      	uxth	r2, r3
 800a570:	88bb      	ldrh	r3, [r7, #4]
 800a572:	4413      	add	r3, r2
 800a574:	b29b      	uxth	r3, r3
 800a576:	3b9d      	subs	r3, #157	@ 0x9d
 800a578:	b29b      	uxth	r3, r3
 800a57a:	b21a      	sxth	r2, r3
 800a57c:	4b37      	ldr	r3, [pc, #220]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a57e:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 800a582:	e00d      	b.n	800a5a0 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800a584:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a588:	111b      	asrs	r3, r3, #4
 800a58a:	b21b      	sxth	r3, r3
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	88bb      	ldrh	r3, [r7, #4]
 800a590:	4413      	add	r3, r2
 800a592:	b29b      	uxth	r3, r3
 800a594:	3ba4      	subs	r3, #164	@ 0xa4
 800a596:	b29b      	uxth	r3, r3
 800a598:	b21a      	sxth	r2, r3
 800a59a:	4b30      	ldr	r3, [pc, #192]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a59c:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800a5a0:	2013      	movs	r0, #19
 800a5a2:	f7ff fd07 	bl	8009fb4 <SX1276Read>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	4b2c      	ldr	r3, [pc, #176]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a5ac:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800a5b0:	4b2a      	ldr	r3, [pc, #168]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a5b2:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	482a      	ldr	r0, [pc, #168]	@ (800a664 <SX1276OnDio0Irq+0x448>)
 800a5ba:	f7ff fd83 	bl	800a0c4 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800a5be:	4b27      	ldr	r3, [pc, #156]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a5c0:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 800a5c4:	f083 0301 	eor.w	r3, r3, #1
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d003      	beq.n	800a5d6 <SX1276OnDio0Irq+0x3ba>
                        SX1276.Settings.State = RF_IDLE;
 800a5ce:	4b23      	ldr	r3, [pc, #140]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    TimerStop( &RxTimeoutTimer );
 800a5d6:	4824      	ldr	r0, [pc, #144]	@ (800a668 <SX1276OnDio0Irq+0x44c>)
 800a5d8:	f7fd ffb0 	bl	800853c <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800a5dc:	4b23      	ldr	r3, [pc, #140]	@ (800a66c <SX1276OnDio0Irq+0x450>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d016      	beq.n	800a612 <SX1276OnDio0Irq+0x3f6>
 800a5e4:	4b21      	ldr	r3, [pc, #132]	@ (800a66c <SX1276OnDio0Irq+0x450>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d011      	beq.n	800a612 <SX1276OnDio0Irq+0x3f6>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800a5ee:	4b1f      	ldr	r3, [pc, #124]	@ (800a66c <SX1276OnDio0Irq+0x450>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689c      	ldr	r4, [r3, #8]
 800a5f4:	4b19      	ldr	r3, [pc, #100]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a5f6:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4b17      	ldr	r3, [pc, #92]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a5fe:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	@ 0x16a
 800a602:	4b16      	ldr	r3, [pc, #88]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a604:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 800a608:	4816      	ldr	r0, [pc, #88]	@ (800a664 <SX1276OnDio0Irq+0x448>)
 800a60a:	47a0      	blx	r4
                break;
 800a60c:	e001      	b.n	800a612 <SX1276OnDio0Irq+0x3f6>
                        break;
 800a60e:	bf00      	nop
 800a610:	e020      	b.n	800a654 <SX1276OnDio0Irq+0x438>
                break;
 800a612:	bf00      	nop
            break;
 800a614:	e01e      	b.n	800a654 <SX1276OnDio0Irq+0x438>
            TimerStop( &TxTimeoutTimer );
 800a616:	4816      	ldr	r0, [pc, #88]	@ (800a670 <SX1276OnDio0Irq+0x454>)
 800a618:	f7fd ff90 	bl	800853c <TimerStop>
            switch( SX1276.Settings.Modem )
 800a61c:	4b0f      	ldr	r3, [pc, #60]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a61e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a622:	2b01      	cmp	r3, #1
 800a624:	d103      	bne.n	800a62e <SX1276OnDio0Irq+0x412>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800a626:	2108      	movs	r1, #8
 800a628:	2012      	movs	r0, #18
 800a62a:	f7ff fcb1 	bl	8009f90 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800a62e:	4b0b      	ldr	r3, [pc, #44]	@ (800a65c <SX1276OnDio0Irq+0x440>)
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800a636:	4b0d      	ldr	r3, [pc, #52]	@ (800a66c <SX1276OnDio0Irq+0x450>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d008      	beq.n	800a650 <SX1276OnDio0Irq+0x434>
 800a63e:	4b0b      	ldr	r3, [pc, #44]	@ (800a66c <SX1276OnDio0Irq+0x450>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d003      	beq.n	800a650 <SX1276OnDio0Irq+0x434>
                    RadioEvents->TxDone( );
 800a648:	4b08      	ldr	r3, [pc, #32]	@ (800a66c <SX1276OnDio0Irq+0x450>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4798      	blx	r3
                break;
 800a650:	bf00      	nop
            break;
 800a652:	bf00      	nop
    }
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd90      	pop	{r4, r7, pc}
 800a65c:	200004b4 	.word	0x200004b4
 800a660:	1f4add40 	.word	0x1f4add40
 800a664:	200003b4 	.word	0x200003b4
 800a668:	20000638 	.word	0x20000638
 800a66c:	200003b0 	.word	0x200003b0
 800a670:	20000624 	.word	0x20000624

0800a674 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800a678:	4b69      	ldr	r3, [pc, #420]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a67a:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d003      	beq.n	800a68a <SX1276OnDio1Irq+0x16>
 800a682:	2b02      	cmp	r3, #2
 800a684:	f000 8082 	beq.w	800a78c <SX1276OnDio1Irq+0x118>
            default:
                break;
            }
            break;
        default:
            break;
 800a688:	e0c8      	b.n	800a81c <SX1276OnDio1Irq+0x1a8>
            switch( SX1276.Settings.Modem )
 800a68a:	4b65      	ldr	r3, [pc, #404]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a68c:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a690:	2b00      	cmp	r3, #0
 800a692:	d002      	beq.n	800a69a <SX1276OnDio1Irq+0x26>
 800a694:	2b01      	cmp	r3, #1
 800a696:	d05f      	beq.n	800a758 <SX1276OnDio1Irq+0xe4>
                break;
 800a698:	e077      	b.n	800a78a <SX1276OnDio1Irq+0x116>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800a69a:	4b61      	ldr	r3, [pc, #388]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a69c:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d119      	bne.n	800a6d8 <SX1276OnDio1Irq+0x64>
 800a6a4:	4b5e      	ldr	r3, [pc, #376]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a6a6:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d114      	bne.n	800a6d8 <SX1276OnDio1Irq+0x64>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800a6ae:	4b5c      	ldr	r3, [pc, #368]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a6b0:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800a6b4:	f083 0301 	eor.w	r3, r3, #1
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d004      	beq.n	800a6c8 <SX1276OnDio1Irq+0x54>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800a6be:	2101      	movs	r1, #1
 800a6c0:	4858      	ldr	r0, [pc, #352]	@ (800a824 <SX1276OnDio1Irq+0x1b0>)
 800a6c2:	f7ff fcff 	bl	800a0c4 <SX1276ReadFifo>
 800a6c6:	e007      	b.n	800a6d8 <SX1276OnDio1Irq+0x64>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800a6c8:	2032      	movs	r0, #50	@ 0x32
 800a6ca:	f7ff fc73 	bl	8009fb4 <SX1276Read>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	4b53      	ldr	r3, [pc, #332]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a6d4:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 800a6d8:	4b51      	ldr	r3, [pc, #324]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a6da:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800a6de:	461a      	mov	r2, r3
 800a6e0:	4b4f      	ldr	r3, [pc, #316]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a6e2:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	4a4d      	ldr	r2, [pc, #308]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a6ea:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	dd18      	ble.n	800a724 <SX1276OnDio1Irq+0xb0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 800a6f2:	4b4b      	ldr	r3, [pc, #300]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a6f4:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	4b4b      	ldr	r3, [pc, #300]	@ (800a828 <SX1276OnDio1Irq+0x1b4>)
 800a6fc:	4413      	add	r3, r2
 800a6fe:	4a48      	ldr	r2, [pc, #288]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a700:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 800a704:	4611      	mov	r1, r2
 800a706:	4618      	mov	r0, r3
 800a708:	f7ff fcdc 	bl	800a0c4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 800a70c:	4b44      	ldr	r3, [pc, #272]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a70e:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a712:	4a43      	ldr	r2, [pc, #268]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a714:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 800a718:	4413      	add	r3, r2
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	4b40      	ldr	r3, [pc, #256]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a71e:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800a722:	e032      	b.n	800a78a <SX1276OnDio1Irq+0x116>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800a724:	4b3e      	ldr	r3, [pc, #248]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a726:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a72a:	461a      	mov	r2, r3
 800a72c:	4b3e      	ldr	r3, [pc, #248]	@ (800a828 <SX1276OnDio1Irq+0x1b4>)
 800a72e:	18d0      	adds	r0, r2, r3
 800a730:	4b3b      	ldr	r3, [pc, #236]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a732:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800a736:	b2da      	uxtb	r2, r3
 800a738:	4b39      	ldr	r3, [pc, #228]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a73a:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	b2db      	uxtb	r3, r3
 800a744:	4619      	mov	r1, r3
 800a746:	f7ff fcbd 	bl	800a0c4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800a74a:	4b35      	ldr	r3, [pc, #212]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a74c:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 800a750:	4b33      	ldr	r3, [pc, #204]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a752:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800a756:	e018      	b.n	800a78a <SX1276OnDio1Irq+0x116>
                TimerStop( &RxTimeoutTimer );
 800a758:	4834      	ldr	r0, [pc, #208]	@ (800a82c <SX1276OnDio1Irq+0x1b8>)
 800a75a:	f7fd feef 	bl	800853c <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800a75e:	2180      	movs	r1, #128	@ 0x80
 800a760:	2012      	movs	r0, #18
 800a762:	f7ff fc15 	bl	8009f90 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800a766:	4b2e      	ldr	r3, [pc, #184]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a76e:	4b30      	ldr	r3, [pc, #192]	@ (800a830 <SX1276OnDio1Irq+0x1bc>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d008      	beq.n	800a788 <SX1276OnDio1Irq+0x114>
 800a776:	4b2e      	ldr	r3, [pc, #184]	@ (800a830 <SX1276OnDio1Irq+0x1bc>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d003      	beq.n	800a788 <SX1276OnDio1Irq+0x114>
                    RadioEvents->RxTimeout( );
 800a780:	4b2b      	ldr	r3, [pc, #172]	@ (800a830 <SX1276OnDio1Irq+0x1bc>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	4798      	blx	r3
                break;
 800a788:	bf00      	nop
            break;
 800a78a:	e047      	b.n	800a81c <SX1276OnDio1Irq+0x1a8>
            switch( SX1276.Settings.Modem )
 800a78c:	4b24      	ldr	r3, [pc, #144]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a78e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <SX1276OnDio1Irq+0x126>
 800a796:	2b01      	cmp	r3, #1
                break;
 800a798:	e03f      	b.n	800a81a <SX1276OnDio1Irq+0x1a6>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800a79a:	4b21      	ldr	r3, [pc, #132]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a79c:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4b1f      	ldr	r3, [pc, #124]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a7a4:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	4a1d      	ldr	r2, [pc, #116]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a7ac:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	dd18      	ble.n	800a7e6 <SX1276OnDio1Irq+0x172>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800a7b4:	4b1a      	ldr	r3, [pc, #104]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a7b6:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	4b1a      	ldr	r3, [pc, #104]	@ (800a828 <SX1276OnDio1Irq+0x1b4>)
 800a7be:	4413      	add	r3, r2
 800a7c0:	4a17      	ldr	r2, [pc, #92]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a7c2:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7ff fc6b 	bl	800a0a4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800a7ce:	4b14      	ldr	r3, [pc, #80]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a7d0:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a7d4:	4a12      	ldr	r2, [pc, #72]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a7d6:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800a7da:	4413      	add	r3, r2
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	4b10      	ldr	r3, [pc, #64]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a7e0:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800a7e4:	e018      	b.n	800a818 <SX1276OnDio1Irq+0x1a4>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800a7e6:	4b0e      	ldr	r3, [pc, #56]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a7e8:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a828 <SX1276OnDio1Irq+0x1b4>)
 800a7f0:	18d0      	adds	r0, r2, r3
 800a7f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a7f4:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	4b09      	ldr	r3, [pc, #36]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a7fc:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a800:	b2db      	uxtb	r3, r3
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	b2db      	uxtb	r3, r3
 800a806:	4619      	mov	r1, r3
 800a808:	f7ff fc4c 	bl	800a0a4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800a80c:	4b04      	ldr	r3, [pc, #16]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a80e:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 800a812:	4b03      	ldr	r3, [pc, #12]	@ (800a820 <SX1276OnDio1Irq+0x1ac>)
 800a814:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800a818:	bf00      	nop
            break;
 800a81a:	bf00      	nop
    }
}
 800a81c:	bf00      	nop
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	200004b4 	.word	0x200004b4
 800a824:	200005fa 	.word	0x200005fa
 800a828:	200003b4 	.word	0x200003b4
 800a82c:	20000638 	.word	0x20000638
 800a830:	200003b0 	.word	0x200003b0
 800a834:	00000000 	.word	0x00000000

0800a838 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 800a838:	b598      	push	{r3, r4, r7, lr}
 800a83a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800a83c:	4b5a      	ldr	r3, [pc, #360]	@ (800a9a8 <SX1276OnDio2Irq+0x170>)
 800a83e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800a842:	2b01      	cmp	r3, #1
 800a844:	d002      	beq.n	800a84c <SX1276OnDio2Irq+0x14>
 800a846:	2b02      	cmp	r3, #2
 800a848:	d07b      	beq.n	800a942 <SX1276OnDio2Irq+0x10a>
            default:
                break;
            }
            break;
        default:
            break;
 800a84a:	e0a6      	b.n	800a99a <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 800a84c:	4b56      	ldr	r3, [pc, #344]	@ (800a9a8 <SX1276OnDio2Irq+0x170>)
 800a84e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a852:	2b00      	cmp	r3, #0
 800a854:	d002      	beq.n	800a85c <SX1276OnDio2Irq+0x24>
 800a856:	2b01      	cmp	r3, #1
 800a858:	d050      	beq.n	800a8fc <SX1276OnDio2Irq+0xc4>
                break;
 800a85a:	e071      	b.n	800a940 <SX1276OnDio2Irq+0x108>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 800a85c:	4b52      	ldr	r3, [pc, #328]	@ (800a9a8 <SX1276OnDio2Irq+0x170>)
 800a85e:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 800a862:	2b01      	cmp	r3, #1
 800a864:	d169      	bne.n	800a93a <SX1276OnDio2Irq+0x102>
 800a866:	4b50      	ldr	r3, [pc, #320]	@ (800a9a8 <SX1276OnDio2Irq+0x170>)
 800a868:	f893 313d 	ldrb.w	r3, [r3, #317]	@ 0x13d
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d164      	bne.n	800a93a <SX1276OnDio2Irq+0x102>
                    TimerStop( &RxTimeoutSyncWord );
 800a870:	484e      	ldr	r0, [pc, #312]	@ (800a9ac <SX1276OnDio2Irq+0x174>)
 800a872:	f7fd fe63 	bl	800853c <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800a876:	4b4c      	ldr	r3, [pc, #304]	@ (800a9a8 <SX1276OnDio2Irq+0x170>)
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800a87e:	2011      	movs	r0, #17
 800a880:	f7ff fb98 	bl	8009fb4 <SX1276Read>
 800a884:	4603      	mov	r3, r0
 800a886:	085b      	lsrs	r3, r3, #1
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	425b      	negs	r3, r3
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	b25a      	sxtb	r2, r3
 800a890:	4b45      	ldr	r3, [pc, #276]	@ (800a9a8 <SX1276OnDio2Irq+0x170>)
 800a892:	f883 213e 	strb.w	r2, [r3, #318]	@ 0x13e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800a896:	201b      	movs	r0, #27
 800a898:	f7ff fb8c 	bl	8009fb4 <SX1276Read>
 800a89c:	4603      	mov	r3, r0
 800a89e:	021c      	lsls	r4, r3, #8
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 800a8a0:	201c      	movs	r0, #28
 800a8a2:	f7ff fb87 	bl	8009fb4 <SX1276Read>
 800a8a6:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800a8a8:	4323      	orrs	r3, r4
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7f5 fe7e 	bl	80005ac <__aeabi_i2d>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	f7f6 f97c 	bl	8000bb4 <__aeabi_d2iz>
 800a8bc:	4603      	mov	r3, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7f5 fe74 	bl	80005ac <__aeabi_i2d>
 800a8c4:	a336      	add	r3, pc, #216	@ (adr r3, 800a9a0 <SX1276OnDio2Irq+0x168>)
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	f7f5 fed9 	bl	8000680 <__aeabi_dmul>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800a8d2:	4610      	mov	r0, r2
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	f7f6 f96d 	bl	8000bb4 <__aeabi_d2iz>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	4a32      	ldr	r2, [pc, #200]	@ (800a9a8 <SX1276OnDio2Irq+0x170>)
 800a8de:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800a8e2:	200c      	movs	r0, #12
 800a8e4:	f7ff fb66 	bl	8009fb4 <SX1276Read>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	095b      	lsrs	r3, r3, #5
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	f003 0307 	and.w	r3, r3, #7
 800a8f2:	b2da      	uxtb	r2, r3
 800a8f4:	4b2c      	ldr	r3, [pc, #176]	@ (800a9a8 <SX1276OnDio2Irq+0x170>)
 800a8f6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
                break;
 800a8fa:	e01e      	b.n	800a93a <SX1276OnDio2Irq+0x102>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800a8fc:	4b2a      	ldr	r3, [pc, #168]	@ (800a9a8 <SX1276OnDio2Irq+0x170>)
 800a8fe:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800a902:	2b00      	cmp	r3, #0
 800a904:	d01b      	beq.n	800a93e <SX1276OnDio2Irq+0x106>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800a906:	2102      	movs	r1, #2
 800a908:	2012      	movs	r0, #18
 800a90a:	f7ff fb41 	bl	8009f90 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800a90e:	4b28      	ldr	r3, [pc, #160]	@ (800a9b0 <SX1276OnDio2Irq+0x178>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d013      	beq.n	800a93e <SX1276OnDio2Irq+0x106>
 800a916:	4b26      	ldr	r3, [pc, #152]	@ (800a9b0 <SX1276OnDio2Irq+0x178>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	695b      	ldr	r3, [r3, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00e      	beq.n	800a93e <SX1276OnDio2Irq+0x106>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800a920:	4b23      	ldr	r3, [pc, #140]	@ (800a9b0 <SX1276OnDio2Irq+0x178>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	695c      	ldr	r4, [r3, #20]
 800a926:	201c      	movs	r0, #28
 800a928:	f7ff fb44 	bl	8009fb4 <SX1276Read>
 800a92c:	4603      	mov	r3, r0
 800a92e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a932:	b2db      	uxtb	r3, r3
 800a934:	4618      	mov	r0, r3
 800a936:	47a0      	blx	r4
                break;
 800a938:	e001      	b.n	800a93e <SX1276OnDio2Irq+0x106>
                break;
 800a93a:	bf00      	nop
 800a93c:	e02d      	b.n	800a99a <SX1276OnDio2Irq+0x162>
                break;
 800a93e:	bf00      	nop
            break;
 800a940:	e02b      	b.n	800a99a <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 800a942:	4b19      	ldr	r3, [pc, #100]	@ (800a9a8 <SX1276OnDio2Irq+0x170>)
 800a944:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d020      	beq.n	800a98e <SX1276OnDio2Irq+0x156>
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d120      	bne.n	800a992 <SX1276OnDio2Irq+0x15a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800a950:	4b15      	ldr	r3, [pc, #84]	@ (800a9a8 <SX1276OnDio2Irq+0x170>)
 800a952:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800a956:	2b00      	cmp	r3, #0
 800a958:	d01d      	beq.n	800a996 <SX1276OnDio2Irq+0x15e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800a95a:	2102      	movs	r1, #2
 800a95c:	2012      	movs	r0, #18
 800a95e:	f7ff fb17 	bl	8009f90 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800a962:	4b13      	ldr	r3, [pc, #76]	@ (800a9b0 <SX1276OnDio2Irq+0x178>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d015      	beq.n	800a996 <SX1276OnDio2Irq+0x15e>
 800a96a:	4b11      	ldr	r3, [pc, #68]	@ (800a9b0 <SX1276OnDio2Irq+0x178>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d010      	beq.n	800a996 <SX1276OnDio2Irq+0x15e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800a974:	4b0e      	ldr	r3, [pc, #56]	@ (800a9b0 <SX1276OnDio2Irq+0x178>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	695c      	ldr	r4, [r3, #20]
 800a97a:	201c      	movs	r0, #28
 800a97c:	f7ff fb1a 	bl	8009fb4 <SX1276Read>
 800a980:	4603      	mov	r3, r0
 800a982:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a986:	b2db      	uxtb	r3, r3
 800a988:	4618      	mov	r0, r3
 800a98a:	47a0      	blx	r4
                break;
 800a98c:	e003      	b.n	800a996 <SX1276OnDio2Irq+0x15e>
                break;
 800a98e:	bf00      	nop
 800a990:	e002      	b.n	800a998 <SX1276OnDio2Irq+0x160>
                break;
 800a992:	bf00      	nop
 800a994:	e000      	b.n	800a998 <SX1276OnDio2Irq+0x160>
                break;
 800a996:	bf00      	nop
            break;
 800a998:	bf00      	nop
    }
}
 800a99a:	bf00      	nop
 800a99c:	bd98      	pop	{r3, r4, r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	00000000 	.word	0x00000000
 800a9a4:	404e8480 	.word	0x404e8480
 800a9a8:	200004b4 	.word	0x200004b4
 800a9ac:	2000064c 	.word	0x2000064c
 800a9b0:	200003b0 	.word	0x200003b0

0800a9b4 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800a9b8:	4b1d      	ldr	r3, [pc, #116]	@ (800aa30 <SX1276OnDio3Irq+0x7c>)
 800a9ba:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d030      	beq.n	800aa24 <SX1276OnDio3Irq+0x70>
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d000      	beq.n	800a9c8 <SX1276OnDio3Irq+0x14>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 800a9c6:	e030      	b.n	800aa2a <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800a9c8:	2012      	movs	r0, #18
 800a9ca:	f7ff faf3 	bl	8009fb4 <SX1276Read>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d112      	bne.n	800a9fe <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800a9d8:	2105      	movs	r1, #5
 800a9da:	2012      	movs	r0, #18
 800a9dc:	f7ff fad8 	bl	8009f90 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a9e0:	4b14      	ldr	r3, [pc, #80]	@ (800aa34 <SX1276OnDio3Irq+0x80>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d01f      	beq.n	800aa28 <SX1276OnDio3Irq+0x74>
 800a9e8:	4b12      	ldr	r3, [pc, #72]	@ (800aa34 <SX1276OnDio3Irq+0x80>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d01a      	beq.n	800aa28 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 800a9f2:	4b10      	ldr	r3, [pc, #64]	@ (800aa34 <SX1276OnDio3Irq+0x80>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	2001      	movs	r0, #1
 800a9fa:	4798      	blx	r3
        break;
 800a9fc:	e014      	b.n	800aa28 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800a9fe:	2104      	movs	r1, #4
 800aa00:	2012      	movs	r0, #18
 800aa02:	f7ff fac5 	bl	8009f90 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800aa06:	4b0b      	ldr	r3, [pc, #44]	@ (800aa34 <SX1276OnDio3Irq+0x80>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00c      	beq.n	800aa28 <SX1276OnDio3Irq+0x74>
 800aa0e:	4b09      	ldr	r3, [pc, #36]	@ (800aa34 <SX1276OnDio3Irq+0x80>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d007      	beq.n	800aa28 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 800aa18:	4b06      	ldr	r3, [pc, #24]	@ (800aa34 <SX1276OnDio3Irq+0x80>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	699b      	ldr	r3, [r3, #24]
 800aa1e:	2000      	movs	r0, #0
 800aa20:	4798      	blx	r3
        break;
 800aa22:	e001      	b.n	800aa28 <SX1276OnDio3Irq+0x74>
        break;
 800aa24:	bf00      	nop
 800aa26:	e000      	b.n	800aa2a <SX1276OnDio3Irq+0x76>
        break;
 800aa28:	bf00      	nop
    }
}
 800aa2a:	bf00      	nop
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	200004b4 	.word	0x200004b4
 800aa34:	200003b0 	.word	0x200003b0

0800aa38 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 800aa38:	b480      	push	{r7}
 800aa3a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800aa3c:	4b0c      	ldr	r3, [pc, #48]	@ (800aa70 <SX1276OnDio4Irq+0x38>)
 800aa3e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d002      	beq.n	800aa4c <SX1276OnDio4Irq+0x14>
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d00a      	beq.n	800aa60 <SX1276OnDio4Irq+0x28>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 800aa4a:	e00c      	b.n	800aa66 <SX1276OnDio4Irq+0x2e>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800aa4c:	4b08      	ldr	r3, [pc, #32]	@ (800aa70 <SX1276OnDio4Irq+0x38>)
 800aa4e:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d106      	bne.n	800aa64 <SX1276OnDio4Irq+0x2c>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800aa56:	4b06      	ldr	r3, [pc, #24]	@ (800aa70 <SX1276OnDio4Irq+0x38>)
 800aa58:	2201      	movs	r2, #1
 800aa5a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
        break;
 800aa5e:	e001      	b.n	800aa64 <SX1276OnDio4Irq+0x2c>
        break;
 800aa60:	bf00      	nop
 800aa62:	e000      	b.n	800aa66 <SX1276OnDio4Irq+0x2e>
        break;
 800aa64:	bf00      	nop
    }
}
 800aa66:	bf00      	nop
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	200004b4 	.word	0x200004b4

0800aa74 <atoi>:
 800aa74:	220a      	movs	r2, #10
 800aa76:	2100      	movs	r1, #0
 800aa78:	f000 b87a 	b.w	800ab70 <strtol>

0800aa7c <_strtol_l.constprop.0>:
 800aa7c:	2b24      	cmp	r3, #36	@ 0x24
 800aa7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa82:	4686      	mov	lr, r0
 800aa84:	4690      	mov	r8, r2
 800aa86:	d801      	bhi.n	800aa8c <_strtol_l.constprop.0+0x10>
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d106      	bne.n	800aa9a <_strtol_l.constprop.0+0x1e>
 800aa8c:	f000 fb06 	bl	800b09c <__errno>
 800aa90:	2316      	movs	r3, #22
 800aa92:	6003      	str	r3, [r0, #0]
 800aa94:	2000      	movs	r0, #0
 800aa96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa9a:	460d      	mov	r5, r1
 800aa9c:	4833      	ldr	r0, [pc, #204]	@ (800ab6c <_strtol_l.constprop.0+0xf0>)
 800aa9e:	462a      	mov	r2, r5
 800aaa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaa4:	5d06      	ldrb	r6, [r0, r4]
 800aaa6:	f016 0608 	ands.w	r6, r6, #8
 800aaaa:	d1f8      	bne.n	800aa9e <_strtol_l.constprop.0+0x22>
 800aaac:	2c2d      	cmp	r4, #45	@ 0x2d
 800aaae:	d12d      	bne.n	800ab0c <_strtol_l.constprop.0+0x90>
 800aab0:	782c      	ldrb	r4, [r5, #0]
 800aab2:	2601      	movs	r6, #1
 800aab4:	1c95      	adds	r5, r2, #2
 800aab6:	f033 0210 	bics.w	r2, r3, #16
 800aaba:	d109      	bne.n	800aad0 <_strtol_l.constprop.0+0x54>
 800aabc:	2c30      	cmp	r4, #48	@ 0x30
 800aabe:	d12a      	bne.n	800ab16 <_strtol_l.constprop.0+0x9a>
 800aac0:	782a      	ldrb	r2, [r5, #0]
 800aac2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aac6:	2a58      	cmp	r2, #88	@ 0x58
 800aac8:	d125      	bne.n	800ab16 <_strtol_l.constprop.0+0x9a>
 800aaca:	786c      	ldrb	r4, [r5, #1]
 800aacc:	2310      	movs	r3, #16
 800aace:	3502      	adds	r5, #2
 800aad0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aad4:	2200      	movs	r2, #0
 800aad6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aada:	4610      	mov	r0, r2
 800aadc:	fbbc f9f3 	udiv	r9, ip, r3
 800aae0:	fb03 ca19 	mls	sl, r3, r9, ip
 800aae4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aae8:	2f09      	cmp	r7, #9
 800aaea:	d81b      	bhi.n	800ab24 <_strtol_l.constprop.0+0xa8>
 800aaec:	463c      	mov	r4, r7
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	dd27      	ble.n	800ab42 <_strtol_l.constprop.0+0xc6>
 800aaf2:	1c57      	adds	r7, r2, #1
 800aaf4:	d007      	beq.n	800ab06 <_strtol_l.constprop.0+0x8a>
 800aaf6:	4581      	cmp	r9, r0
 800aaf8:	d320      	bcc.n	800ab3c <_strtol_l.constprop.0+0xc0>
 800aafa:	d101      	bne.n	800ab00 <_strtol_l.constprop.0+0x84>
 800aafc:	45a2      	cmp	sl, r4
 800aafe:	db1d      	blt.n	800ab3c <_strtol_l.constprop.0+0xc0>
 800ab00:	fb00 4003 	mla	r0, r0, r3, r4
 800ab04:	2201      	movs	r2, #1
 800ab06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab0a:	e7eb      	b.n	800aae4 <_strtol_l.constprop.0+0x68>
 800ab0c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ab0e:	bf04      	itt	eq
 800ab10:	782c      	ldrbeq	r4, [r5, #0]
 800ab12:	1c95      	addeq	r5, r2, #2
 800ab14:	e7cf      	b.n	800aab6 <_strtol_l.constprop.0+0x3a>
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1da      	bne.n	800aad0 <_strtol_l.constprop.0+0x54>
 800ab1a:	2c30      	cmp	r4, #48	@ 0x30
 800ab1c:	bf0c      	ite	eq
 800ab1e:	2308      	moveq	r3, #8
 800ab20:	230a      	movne	r3, #10
 800ab22:	e7d5      	b.n	800aad0 <_strtol_l.constprop.0+0x54>
 800ab24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ab28:	2f19      	cmp	r7, #25
 800ab2a:	d801      	bhi.n	800ab30 <_strtol_l.constprop.0+0xb4>
 800ab2c:	3c37      	subs	r4, #55	@ 0x37
 800ab2e:	e7de      	b.n	800aaee <_strtol_l.constprop.0+0x72>
 800ab30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ab34:	2f19      	cmp	r7, #25
 800ab36:	d804      	bhi.n	800ab42 <_strtol_l.constprop.0+0xc6>
 800ab38:	3c57      	subs	r4, #87	@ 0x57
 800ab3a:	e7d8      	b.n	800aaee <_strtol_l.constprop.0+0x72>
 800ab3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab40:	e7e1      	b.n	800ab06 <_strtol_l.constprop.0+0x8a>
 800ab42:	1c53      	adds	r3, r2, #1
 800ab44:	d108      	bne.n	800ab58 <_strtol_l.constprop.0+0xdc>
 800ab46:	2322      	movs	r3, #34	@ 0x22
 800ab48:	4660      	mov	r0, ip
 800ab4a:	f8ce 3000 	str.w	r3, [lr]
 800ab4e:	f1b8 0f00 	cmp.w	r8, #0
 800ab52:	d0a0      	beq.n	800aa96 <_strtol_l.constprop.0+0x1a>
 800ab54:	1e69      	subs	r1, r5, #1
 800ab56:	e006      	b.n	800ab66 <_strtol_l.constprop.0+0xea>
 800ab58:	b106      	cbz	r6, 800ab5c <_strtol_l.constprop.0+0xe0>
 800ab5a:	4240      	negs	r0, r0
 800ab5c:	f1b8 0f00 	cmp.w	r8, #0
 800ab60:	d099      	beq.n	800aa96 <_strtol_l.constprop.0+0x1a>
 800ab62:	2a00      	cmp	r2, #0
 800ab64:	d1f6      	bne.n	800ab54 <_strtol_l.constprop.0+0xd8>
 800ab66:	f8c8 1000 	str.w	r1, [r8]
 800ab6a:	e794      	b.n	800aa96 <_strtol_l.constprop.0+0x1a>
 800ab6c:	0800c425 	.word	0x0800c425

0800ab70 <strtol>:
 800ab70:	4613      	mov	r3, r2
 800ab72:	460a      	mov	r2, r1
 800ab74:	4601      	mov	r1, r0
 800ab76:	4802      	ldr	r0, [pc, #8]	@ (800ab80 <strtol+0x10>)
 800ab78:	6800      	ldr	r0, [r0, #0]
 800ab7a:	f7ff bf7f 	b.w	800aa7c <_strtol_l.constprop.0>
 800ab7e:	bf00      	nop
 800ab80:	2000004c 	.word	0x2000004c

0800ab84 <std>:
 800ab84:	2300      	movs	r3, #0
 800ab86:	b510      	push	{r4, lr}
 800ab88:	4604      	mov	r4, r0
 800ab8a:	6083      	str	r3, [r0, #8]
 800ab8c:	8181      	strh	r1, [r0, #12]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab92:	81c2      	strh	r2, [r0, #14]
 800ab94:	2208      	movs	r2, #8
 800ab96:	6183      	str	r3, [r0, #24]
 800ab98:	e9c0 3300 	strd	r3, r3, [r0]
 800ab9c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aba0:	305c      	adds	r0, #92	@ 0x5c
 800aba2:	f000 fa2d 	bl	800b000 <memset>
 800aba6:	4b0d      	ldr	r3, [pc, #52]	@ (800abdc <std+0x58>)
 800aba8:	6224      	str	r4, [r4, #32]
 800abaa:	6263      	str	r3, [r4, #36]	@ 0x24
 800abac:	4b0c      	ldr	r3, [pc, #48]	@ (800abe0 <std+0x5c>)
 800abae:	62a3      	str	r3, [r4, #40]	@ 0x28
 800abb0:	4b0c      	ldr	r3, [pc, #48]	@ (800abe4 <std+0x60>)
 800abb2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800abb4:	4b0c      	ldr	r3, [pc, #48]	@ (800abe8 <std+0x64>)
 800abb6:	6323      	str	r3, [r4, #48]	@ 0x30
 800abb8:	4b0c      	ldr	r3, [pc, #48]	@ (800abec <std+0x68>)
 800abba:	429c      	cmp	r4, r3
 800abbc:	d006      	beq.n	800abcc <std+0x48>
 800abbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800abc2:	4294      	cmp	r4, r2
 800abc4:	d002      	beq.n	800abcc <std+0x48>
 800abc6:	33d0      	adds	r3, #208	@ 0xd0
 800abc8:	429c      	cmp	r4, r3
 800abca:	d105      	bne.n	800abd8 <std+0x54>
 800abcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800abd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abd4:	f000 ba8c 	b.w	800b0f0 <__retarget_lock_init_recursive>
 800abd8:	bd10      	pop	{r4, pc}
 800abda:	bf00      	nop
 800abdc:	0800ae51 	.word	0x0800ae51
 800abe0:	0800ae73 	.word	0x0800ae73
 800abe4:	0800aeab 	.word	0x0800aeab
 800abe8:	0800aecf 	.word	0x0800aecf
 800abec:	20000660 	.word	0x20000660

0800abf0 <stdio_exit_handler>:
 800abf0:	4a02      	ldr	r2, [pc, #8]	@ (800abfc <stdio_exit_handler+0xc>)
 800abf2:	4903      	ldr	r1, [pc, #12]	@ (800ac00 <stdio_exit_handler+0x10>)
 800abf4:	4803      	ldr	r0, [pc, #12]	@ (800ac04 <stdio_exit_handler+0x14>)
 800abf6:	f000 b869 	b.w	800accc <_fwalk_sglue>
 800abfa:	bf00      	nop
 800abfc:	20000040 	.word	0x20000040
 800ac00:	0800bc49 	.word	0x0800bc49
 800ac04:	20000050 	.word	0x20000050

0800ac08 <cleanup_stdio>:
 800ac08:	6841      	ldr	r1, [r0, #4]
 800ac0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ac3c <cleanup_stdio+0x34>)
 800ac0c:	4299      	cmp	r1, r3
 800ac0e:	b510      	push	{r4, lr}
 800ac10:	4604      	mov	r4, r0
 800ac12:	d001      	beq.n	800ac18 <cleanup_stdio+0x10>
 800ac14:	f001 f818 	bl	800bc48 <_fflush_r>
 800ac18:	68a1      	ldr	r1, [r4, #8]
 800ac1a:	4b09      	ldr	r3, [pc, #36]	@ (800ac40 <cleanup_stdio+0x38>)
 800ac1c:	4299      	cmp	r1, r3
 800ac1e:	d002      	beq.n	800ac26 <cleanup_stdio+0x1e>
 800ac20:	4620      	mov	r0, r4
 800ac22:	f001 f811 	bl	800bc48 <_fflush_r>
 800ac26:	68e1      	ldr	r1, [r4, #12]
 800ac28:	4b06      	ldr	r3, [pc, #24]	@ (800ac44 <cleanup_stdio+0x3c>)
 800ac2a:	4299      	cmp	r1, r3
 800ac2c:	d004      	beq.n	800ac38 <cleanup_stdio+0x30>
 800ac2e:	4620      	mov	r0, r4
 800ac30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac34:	f001 b808 	b.w	800bc48 <_fflush_r>
 800ac38:	bd10      	pop	{r4, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20000660 	.word	0x20000660
 800ac40:	200006c8 	.word	0x200006c8
 800ac44:	20000730 	.word	0x20000730

0800ac48 <global_stdio_init.part.0>:
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac78 <global_stdio_init.part.0+0x30>)
 800ac4c:	2104      	movs	r1, #4
 800ac4e:	4c0b      	ldr	r4, [pc, #44]	@ (800ac7c <global_stdio_init.part.0+0x34>)
 800ac50:	4a0b      	ldr	r2, [pc, #44]	@ (800ac80 <global_stdio_init.part.0+0x38>)
 800ac52:	4620      	mov	r0, r4
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f7ff ff94 	bl	800ab84 <std>
 800ac5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac60:	2201      	movs	r2, #1
 800ac62:	2109      	movs	r1, #9
 800ac64:	f7ff ff8e 	bl	800ab84 <std>
 800ac68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac6c:	2202      	movs	r2, #2
 800ac6e:	2112      	movs	r1, #18
 800ac70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac74:	f7ff bf86 	b.w	800ab84 <std>
 800ac78:	20000798 	.word	0x20000798
 800ac7c:	20000660 	.word	0x20000660
 800ac80:	0800abf1 	.word	0x0800abf1

0800ac84 <__sfp_lock_acquire>:
 800ac84:	4801      	ldr	r0, [pc, #4]	@ (800ac8c <__sfp_lock_acquire+0x8>)
 800ac86:	f000 ba34 	b.w	800b0f2 <__retarget_lock_acquire_recursive>
 800ac8a:	bf00      	nop
 800ac8c:	200007a1 	.word	0x200007a1

0800ac90 <__sfp_lock_release>:
 800ac90:	4801      	ldr	r0, [pc, #4]	@ (800ac98 <__sfp_lock_release+0x8>)
 800ac92:	f000 ba2f 	b.w	800b0f4 <__retarget_lock_release_recursive>
 800ac96:	bf00      	nop
 800ac98:	200007a1 	.word	0x200007a1

0800ac9c <__sinit>:
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	4604      	mov	r4, r0
 800aca0:	f7ff fff0 	bl	800ac84 <__sfp_lock_acquire>
 800aca4:	6a23      	ldr	r3, [r4, #32]
 800aca6:	b11b      	cbz	r3, 800acb0 <__sinit+0x14>
 800aca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acac:	f7ff bff0 	b.w	800ac90 <__sfp_lock_release>
 800acb0:	4b04      	ldr	r3, [pc, #16]	@ (800acc4 <__sinit+0x28>)
 800acb2:	6223      	str	r3, [r4, #32]
 800acb4:	4b04      	ldr	r3, [pc, #16]	@ (800acc8 <__sinit+0x2c>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1f5      	bne.n	800aca8 <__sinit+0xc>
 800acbc:	f7ff ffc4 	bl	800ac48 <global_stdio_init.part.0>
 800acc0:	e7f2      	b.n	800aca8 <__sinit+0xc>
 800acc2:	bf00      	nop
 800acc4:	0800ac09 	.word	0x0800ac09
 800acc8:	20000798 	.word	0x20000798

0800accc <_fwalk_sglue>:
 800accc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acd0:	4607      	mov	r7, r0
 800acd2:	4688      	mov	r8, r1
 800acd4:	4614      	mov	r4, r2
 800acd6:	2600      	movs	r6, #0
 800acd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acdc:	f1b9 0901 	subs.w	r9, r9, #1
 800ace0:	d505      	bpl.n	800acee <_fwalk_sglue+0x22>
 800ace2:	6824      	ldr	r4, [r4, #0]
 800ace4:	2c00      	cmp	r4, #0
 800ace6:	d1f7      	bne.n	800acd8 <_fwalk_sglue+0xc>
 800ace8:	4630      	mov	r0, r6
 800acea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acee:	89ab      	ldrh	r3, [r5, #12]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d907      	bls.n	800ad04 <_fwalk_sglue+0x38>
 800acf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acf8:	3301      	adds	r3, #1
 800acfa:	d003      	beq.n	800ad04 <_fwalk_sglue+0x38>
 800acfc:	4629      	mov	r1, r5
 800acfe:	4638      	mov	r0, r7
 800ad00:	47c0      	blx	r8
 800ad02:	4306      	orrs	r6, r0
 800ad04:	3568      	adds	r5, #104	@ 0x68
 800ad06:	e7e9      	b.n	800acdc <_fwalk_sglue+0x10>

0800ad08 <iprintf>:
 800ad08:	b40f      	push	{r0, r1, r2, r3}
 800ad0a:	b507      	push	{r0, r1, r2, lr}
 800ad0c:	4906      	ldr	r1, [pc, #24]	@ (800ad28 <iprintf+0x20>)
 800ad0e:	ab04      	add	r3, sp, #16
 800ad10:	6808      	ldr	r0, [r1, #0]
 800ad12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad16:	6881      	ldr	r1, [r0, #8]
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	f000 fc67 	bl	800b5ec <_vfiprintf_r>
 800ad1e:	b003      	add	sp, #12
 800ad20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad24:	b004      	add	sp, #16
 800ad26:	4770      	bx	lr
 800ad28:	2000004c 	.word	0x2000004c

0800ad2c <_puts_r>:
 800ad2c:	6a03      	ldr	r3, [r0, #32]
 800ad2e:	b570      	push	{r4, r5, r6, lr}
 800ad30:	4605      	mov	r5, r0
 800ad32:	460e      	mov	r6, r1
 800ad34:	6884      	ldr	r4, [r0, #8]
 800ad36:	b90b      	cbnz	r3, 800ad3c <_puts_r+0x10>
 800ad38:	f7ff ffb0 	bl	800ac9c <__sinit>
 800ad3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad3e:	07db      	lsls	r3, r3, #31
 800ad40:	d405      	bmi.n	800ad4e <_puts_r+0x22>
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	0598      	lsls	r0, r3, #22
 800ad46:	d402      	bmi.n	800ad4e <_puts_r+0x22>
 800ad48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad4a:	f000 f9d2 	bl	800b0f2 <__retarget_lock_acquire_recursive>
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	0719      	lsls	r1, r3, #28
 800ad52:	d502      	bpl.n	800ad5a <_puts_r+0x2e>
 800ad54:	6923      	ldr	r3, [r4, #16]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d135      	bne.n	800adc6 <_puts_r+0x9a>
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	f000 f8f9 	bl	800af54 <__swsetup_r>
 800ad62:	b380      	cbz	r0, 800adc6 <_puts_r+0x9a>
 800ad64:	f04f 35ff 	mov.w	r5, #4294967295
 800ad68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad6a:	07da      	lsls	r2, r3, #31
 800ad6c:	d405      	bmi.n	800ad7a <_puts_r+0x4e>
 800ad6e:	89a3      	ldrh	r3, [r4, #12]
 800ad70:	059b      	lsls	r3, r3, #22
 800ad72:	d402      	bmi.n	800ad7a <_puts_r+0x4e>
 800ad74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad76:	f000 f9bd 	bl	800b0f4 <__retarget_lock_release_recursive>
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	bd70      	pop	{r4, r5, r6, pc}
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	da04      	bge.n	800ad8c <_puts_r+0x60>
 800ad82:	69a2      	ldr	r2, [r4, #24]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	dc17      	bgt.n	800adb8 <_puts_r+0x8c>
 800ad88:	290a      	cmp	r1, #10
 800ad8a:	d015      	beq.n	800adb8 <_puts_r+0x8c>
 800ad8c:	6823      	ldr	r3, [r4, #0]
 800ad8e:	1c5a      	adds	r2, r3, #1
 800ad90:	6022      	str	r2, [r4, #0]
 800ad92:	7019      	strb	r1, [r3, #0]
 800ad94:	68a3      	ldr	r3, [r4, #8]
 800ad96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	60a3      	str	r3, [r4, #8]
 800ad9e:	2900      	cmp	r1, #0
 800ada0:	d1ed      	bne.n	800ad7e <_puts_r+0x52>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	da11      	bge.n	800adca <_puts_r+0x9e>
 800ada6:	4622      	mov	r2, r4
 800ada8:	210a      	movs	r1, #10
 800adaa:	4628      	mov	r0, r5
 800adac:	f000 f893 	bl	800aed6 <__swbuf_r>
 800adb0:	3001      	adds	r0, #1
 800adb2:	d0d7      	beq.n	800ad64 <_puts_r+0x38>
 800adb4:	250a      	movs	r5, #10
 800adb6:	e7d7      	b.n	800ad68 <_puts_r+0x3c>
 800adb8:	4622      	mov	r2, r4
 800adba:	4628      	mov	r0, r5
 800adbc:	f000 f88b 	bl	800aed6 <__swbuf_r>
 800adc0:	3001      	adds	r0, #1
 800adc2:	d1e7      	bne.n	800ad94 <_puts_r+0x68>
 800adc4:	e7ce      	b.n	800ad64 <_puts_r+0x38>
 800adc6:	3e01      	subs	r6, #1
 800adc8:	e7e4      	b.n	800ad94 <_puts_r+0x68>
 800adca:	6823      	ldr	r3, [r4, #0]
 800adcc:	1c5a      	adds	r2, r3, #1
 800adce:	6022      	str	r2, [r4, #0]
 800add0:	220a      	movs	r2, #10
 800add2:	701a      	strb	r2, [r3, #0]
 800add4:	e7ee      	b.n	800adb4 <_puts_r+0x88>
	...

0800add8 <puts>:
 800add8:	4b02      	ldr	r3, [pc, #8]	@ (800ade4 <puts+0xc>)
 800adda:	4601      	mov	r1, r0
 800addc:	6818      	ldr	r0, [r3, #0]
 800adde:	f7ff bfa5 	b.w	800ad2c <_puts_r>
 800ade2:	bf00      	nop
 800ade4:	2000004c 	.word	0x2000004c

0800ade8 <sniprintf>:
 800ade8:	b40c      	push	{r2, r3}
 800adea:	4b18      	ldr	r3, [pc, #96]	@ (800ae4c <sniprintf+0x64>)
 800adec:	b530      	push	{r4, r5, lr}
 800adee:	1e0c      	subs	r4, r1, #0
 800adf0:	b09d      	sub	sp, #116	@ 0x74
 800adf2:	681d      	ldr	r5, [r3, #0]
 800adf4:	da08      	bge.n	800ae08 <sniprintf+0x20>
 800adf6:	238b      	movs	r3, #139	@ 0x8b
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295
 800adfc:	602b      	str	r3, [r5, #0]
 800adfe:	b01d      	add	sp, #116	@ 0x74
 800ae00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae04:	b002      	add	sp, #8
 800ae06:	4770      	bx	lr
 800ae08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ae0c:	9002      	str	r0, [sp, #8]
 800ae0e:	9006      	str	r0, [sp, #24]
 800ae10:	a902      	add	r1, sp, #8
 800ae12:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ae16:	bf14      	ite	ne
 800ae18:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ae1c:	4623      	moveq	r3, r4
 800ae1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ae20:	4628      	mov	r0, r5
 800ae22:	9304      	str	r3, [sp, #16]
 800ae24:	9307      	str	r3, [sp, #28]
 800ae26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae2a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae2e:	ab21      	add	r3, sp, #132	@ 0x84
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	f000 fab5 	bl	800b3a0 <_svfiprintf_r>
 800ae36:	1c43      	adds	r3, r0, #1
 800ae38:	bfbc      	itt	lt
 800ae3a:	238b      	movlt	r3, #139	@ 0x8b
 800ae3c:	602b      	strlt	r3, [r5, #0]
 800ae3e:	2c00      	cmp	r4, #0
 800ae40:	d0dd      	beq.n	800adfe <sniprintf+0x16>
 800ae42:	9b02      	ldr	r3, [sp, #8]
 800ae44:	2200      	movs	r2, #0
 800ae46:	701a      	strb	r2, [r3, #0]
 800ae48:	e7d9      	b.n	800adfe <sniprintf+0x16>
 800ae4a:	bf00      	nop
 800ae4c:	2000004c 	.word	0x2000004c

0800ae50 <__sread>:
 800ae50:	b510      	push	{r4, lr}
 800ae52:	460c      	mov	r4, r1
 800ae54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae58:	f000 f8fc 	bl	800b054 <_read_r>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	bfab      	itete	ge
 800ae60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae62:	89a3      	ldrhlt	r3, [r4, #12]
 800ae64:	181b      	addge	r3, r3, r0
 800ae66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae6a:	bfac      	ite	ge
 800ae6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae6e:	81a3      	strhlt	r3, [r4, #12]
 800ae70:	bd10      	pop	{r4, pc}

0800ae72 <__swrite>:
 800ae72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae76:	461f      	mov	r7, r3
 800ae78:	898b      	ldrh	r3, [r1, #12]
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	460c      	mov	r4, r1
 800ae7e:	05db      	lsls	r3, r3, #23
 800ae80:	4616      	mov	r6, r2
 800ae82:	d505      	bpl.n	800ae90 <__swrite+0x1e>
 800ae84:	2302      	movs	r3, #2
 800ae86:	2200      	movs	r2, #0
 800ae88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae8c:	f000 f8d0 	bl	800b030 <_lseek_r>
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	4632      	mov	r2, r6
 800ae94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae9e:	81a3      	strh	r3, [r4, #12]
 800aea0:	463b      	mov	r3, r7
 800aea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aea6:	f000 b8e7 	b.w	800b078 <_write_r>

0800aeaa <__sseek>:
 800aeaa:	b510      	push	{r4, lr}
 800aeac:	460c      	mov	r4, r1
 800aeae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb2:	f000 f8bd 	bl	800b030 <_lseek_r>
 800aeb6:	1c43      	adds	r3, r0, #1
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	bf15      	itete	ne
 800aebc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aebe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aec2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aec6:	81a3      	strheq	r3, [r4, #12]
 800aec8:	bf18      	it	ne
 800aeca:	81a3      	strhne	r3, [r4, #12]
 800aecc:	bd10      	pop	{r4, pc}

0800aece <__sclose>:
 800aece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed2:	f000 b89d 	b.w	800b010 <_close_r>

0800aed6 <__swbuf_r>:
 800aed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed8:	460e      	mov	r6, r1
 800aeda:	4614      	mov	r4, r2
 800aedc:	4605      	mov	r5, r0
 800aede:	b118      	cbz	r0, 800aee8 <__swbuf_r+0x12>
 800aee0:	6a03      	ldr	r3, [r0, #32]
 800aee2:	b90b      	cbnz	r3, 800aee8 <__swbuf_r+0x12>
 800aee4:	f7ff feda 	bl	800ac9c <__sinit>
 800aee8:	69a3      	ldr	r3, [r4, #24]
 800aeea:	60a3      	str	r3, [r4, #8]
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	071a      	lsls	r2, r3, #28
 800aef0:	d501      	bpl.n	800aef6 <__swbuf_r+0x20>
 800aef2:	6923      	ldr	r3, [r4, #16]
 800aef4:	b943      	cbnz	r3, 800af08 <__swbuf_r+0x32>
 800aef6:	4621      	mov	r1, r4
 800aef8:	4628      	mov	r0, r5
 800aefa:	f000 f82b 	bl	800af54 <__swsetup_r>
 800aefe:	b118      	cbz	r0, 800af08 <__swbuf_r+0x32>
 800af00:	f04f 37ff 	mov.w	r7, #4294967295
 800af04:	4638      	mov	r0, r7
 800af06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	b2f6      	uxtb	r6, r6
 800af0c:	6922      	ldr	r2, [r4, #16]
 800af0e:	4637      	mov	r7, r6
 800af10:	1a98      	subs	r0, r3, r2
 800af12:	6963      	ldr	r3, [r4, #20]
 800af14:	4283      	cmp	r3, r0
 800af16:	dc05      	bgt.n	800af24 <__swbuf_r+0x4e>
 800af18:	4621      	mov	r1, r4
 800af1a:	4628      	mov	r0, r5
 800af1c:	f000 fe94 	bl	800bc48 <_fflush_r>
 800af20:	2800      	cmp	r0, #0
 800af22:	d1ed      	bne.n	800af00 <__swbuf_r+0x2a>
 800af24:	68a3      	ldr	r3, [r4, #8]
 800af26:	3b01      	subs	r3, #1
 800af28:	60a3      	str	r3, [r4, #8]
 800af2a:	6823      	ldr	r3, [r4, #0]
 800af2c:	1c5a      	adds	r2, r3, #1
 800af2e:	6022      	str	r2, [r4, #0]
 800af30:	701e      	strb	r6, [r3, #0]
 800af32:	1c43      	adds	r3, r0, #1
 800af34:	6962      	ldr	r2, [r4, #20]
 800af36:	429a      	cmp	r2, r3
 800af38:	d004      	beq.n	800af44 <__swbuf_r+0x6e>
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	07db      	lsls	r3, r3, #31
 800af3e:	d5e1      	bpl.n	800af04 <__swbuf_r+0x2e>
 800af40:	2e0a      	cmp	r6, #10
 800af42:	d1df      	bne.n	800af04 <__swbuf_r+0x2e>
 800af44:	4621      	mov	r1, r4
 800af46:	4628      	mov	r0, r5
 800af48:	f000 fe7e 	bl	800bc48 <_fflush_r>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d0d9      	beq.n	800af04 <__swbuf_r+0x2e>
 800af50:	e7d6      	b.n	800af00 <__swbuf_r+0x2a>
	...

0800af54 <__swsetup_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4b29      	ldr	r3, [pc, #164]	@ (800affc <__swsetup_r+0xa8>)
 800af58:	4605      	mov	r5, r0
 800af5a:	460c      	mov	r4, r1
 800af5c:	6818      	ldr	r0, [r3, #0]
 800af5e:	b118      	cbz	r0, 800af68 <__swsetup_r+0x14>
 800af60:	6a03      	ldr	r3, [r0, #32]
 800af62:	b90b      	cbnz	r3, 800af68 <__swsetup_r+0x14>
 800af64:	f7ff fe9a 	bl	800ac9c <__sinit>
 800af68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af6c:	0719      	lsls	r1, r3, #28
 800af6e:	d422      	bmi.n	800afb6 <__swsetup_r+0x62>
 800af70:	06da      	lsls	r2, r3, #27
 800af72:	d407      	bmi.n	800af84 <__swsetup_r+0x30>
 800af74:	2209      	movs	r2, #9
 800af76:	602a      	str	r2, [r5, #0]
 800af78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af7c:	f04f 30ff 	mov.w	r0, #4294967295
 800af80:	81a3      	strh	r3, [r4, #12]
 800af82:	e033      	b.n	800afec <__swsetup_r+0x98>
 800af84:	0758      	lsls	r0, r3, #29
 800af86:	d512      	bpl.n	800afae <__swsetup_r+0x5a>
 800af88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af8a:	b141      	cbz	r1, 800af9e <__swsetup_r+0x4a>
 800af8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af90:	4299      	cmp	r1, r3
 800af92:	d002      	beq.n	800af9a <__swsetup_r+0x46>
 800af94:	4628      	mov	r0, r5
 800af96:	f000 f8af 	bl	800b0f8 <_free_r>
 800af9a:	2300      	movs	r3, #0
 800af9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800afa4:	81a3      	strh	r3, [r4, #12]
 800afa6:	2300      	movs	r3, #0
 800afa8:	6063      	str	r3, [r4, #4]
 800afaa:	6923      	ldr	r3, [r4, #16]
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	89a3      	ldrh	r3, [r4, #12]
 800afb0:	f043 0308 	orr.w	r3, r3, #8
 800afb4:	81a3      	strh	r3, [r4, #12]
 800afb6:	6923      	ldr	r3, [r4, #16]
 800afb8:	b94b      	cbnz	r3, 800afce <__swsetup_r+0x7a>
 800afba:	89a3      	ldrh	r3, [r4, #12]
 800afbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800afc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afc4:	d003      	beq.n	800afce <__swsetup_r+0x7a>
 800afc6:	4621      	mov	r1, r4
 800afc8:	4628      	mov	r0, r5
 800afca:	f000 fe8a 	bl	800bce2 <__smakebuf_r>
 800afce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afd2:	f013 0201 	ands.w	r2, r3, #1
 800afd6:	d00a      	beq.n	800afee <__swsetup_r+0x9a>
 800afd8:	2200      	movs	r2, #0
 800afda:	60a2      	str	r2, [r4, #8]
 800afdc:	6962      	ldr	r2, [r4, #20]
 800afde:	4252      	negs	r2, r2
 800afe0:	61a2      	str	r2, [r4, #24]
 800afe2:	6922      	ldr	r2, [r4, #16]
 800afe4:	b942      	cbnz	r2, 800aff8 <__swsetup_r+0xa4>
 800afe6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800afea:	d1c5      	bne.n	800af78 <__swsetup_r+0x24>
 800afec:	bd38      	pop	{r3, r4, r5, pc}
 800afee:	0799      	lsls	r1, r3, #30
 800aff0:	bf58      	it	pl
 800aff2:	6962      	ldrpl	r2, [r4, #20]
 800aff4:	60a2      	str	r2, [r4, #8]
 800aff6:	e7f4      	b.n	800afe2 <__swsetup_r+0x8e>
 800aff8:	2000      	movs	r0, #0
 800affa:	e7f7      	b.n	800afec <__swsetup_r+0x98>
 800affc:	2000004c 	.word	0x2000004c

0800b000 <memset>:
 800b000:	4402      	add	r2, r0
 800b002:	4603      	mov	r3, r0
 800b004:	4293      	cmp	r3, r2
 800b006:	d100      	bne.n	800b00a <memset+0xa>
 800b008:	4770      	bx	lr
 800b00a:	f803 1b01 	strb.w	r1, [r3], #1
 800b00e:	e7f9      	b.n	800b004 <memset+0x4>

0800b010 <_close_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	2300      	movs	r3, #0
 800b014:	4d05      	ldr	r5, [pc, #20]	@ (800b02c <_close_r+0x1c>)
 800b016:	4604      	mov	r4, r0
 800b018:	4608      	mov	r0, r1
 800b01a:	602b      	str	r3, [r5, #0]
 800b01c:	f7f6 fed4 	bl	8001dc8 <_close>
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	d102      	bne.n	800b02a <_close_r+0x1a>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	b103      	cbz	r3, 800b02a <_close_r+0x1a>
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	bd38      	pop	{r3, r4, r5, pc}
 800b02c:	2000079c 	.word	0x2000079c

0800b030 <_lseek_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4604      	mov	r4, r0
 800b034:	4d06      	ldr	r5, [pc, #24]	@ (800b050 <_lseek_r+0x20>)
 800b036:	4608      	mov	r0, r1
 800b038:	4611      	mov	r1, r2
 800b03a:	2200      	movs	r2, #0
 800b03c:	602a      	str	r2, [r5, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	f7f6 fee9 	bl	8001e16 <_lseek>
 800b044:	1c43      	adds	r3, r0, #1
 800b046:	d102      	bne.n	800b04e <_lseek_r+0x1e>
 800b048:	682b      	ldr	r3, [r5, #0]
 800b04a:	b103      	cbz	r3, 800b04e <_lseek_r+0x1e>
 800b04c:	6023      	str	r3, [r4, #0]
 800b04e:	bd38      	pop	{r3, r4, r5, pc}
 800b050:	2000079c 	.word	0x2000079c

0800b054 <_read_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	4604      	mov	r4, r0
 800b058:	4d06      	ldr	r5, [pc, #24]	@ (800b074 <_read_r+0x20>)
 800b05a:	4608      	mov	r0, r1
 800b05c:	4611      	mov	r1, r2
 800b05e:	2200      	movs	r2, #0
 800b060:	602a      	str	r2, [r5, #0]
 800b062:	461a      	mov	r2, r3
 800b064:	f7f6 fe77 	bl	8001d56 <_read>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d102      	bne.n	800b072 <_read_r+0x1e>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	b103      	cbz	r3, 800b072 <_read_r+0x1e>
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	2000079c 	.word	0x2000079c

0800b078 <_write_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	4604      	mov	r4, r0
 800b07c:	4d06      	ldr	r5, [pc, #24]	@ (800b098 <_write_r+0x20>)
 800b07e:	4608      	mov	r0, r1
 800b080:	4611      	mov	r1, r2
 800b082:	2200      	movs	r2, #0
 800b084:	602a      	str	r2, [r5, #0]
 800b086:	461a      	mov	r2, r3
 800b088:	f7f6 fe82 	bl	8001d90 <_write>
 800b08c:	1c43      	adds	r3, r0, #1
 800b08e:	d102      	bne.n	800b096 <_write_r+0x1e>
 800b090:	682b      	ldr	r3, [r5, #0]
 800b092:	b103      	cbz	r3, 800b096 <_write_r+0x1e>
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	bd38      	pop	{r3, r4, r5, pc}
 800b098:	2000079c 	.word	0x2000079c

0800b09c <__errno>:
 800b09c:	4b01      	ldr	r3, [pc, #4]	@ (800b0a4 <__errno+0x8>)
 800b09e:	6818      	ldr	r0, [r3, #0]
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	2000004c 	.word	0x2000004c

0800b0a8 <__libc_init_array>:
 800b0a8:	b570      	push	{r4, r5, r6, lr}
 800b0aa:	4d0d      	ldr	r5, [pc, #52]	@ (800b0e0 <__libc_init_array+0x38>)
 800b0ac:	2600      	movs	r6, #0
 800b0ae:	4c0d      	ldr	r4, [pc, #52]	@ (800b0e4 <__libc_init_array+0x3c>)
 800b0b0:	1b64      	subs	r4, r4, r5
 800b0b2:	10a4      	asrs	r4, r4, #2
 800b0b4:	42a6      	cmp	r6, r4
 800b0b6:	d109      	bne.n	800b0cc <__libc_init_array+0x24>
 800b0b8:	4d0b      	ldr	r5, [pc, #44]	@ (800b0e8 <__libc_init_array+0x40>)
 800b0ba:	2600      	movs	r6, #0
 800b0bc:	4c0b      	ldr	r4, [pc, #44]	@ (800b0ec <__libc_init_array+0x44>)
 800b0be:	f001 f82d 	bl	800c11c <_init>
 800b0c2:	1b64      	subs	r4, r4, r5
 800b0c4:	10a4      	asrs	r4, r4, #2
 800b0c6:	42a6      	cmp	r6, r4
 800b0c8:	d105      	bne.n	800b0d6 <__libc_init_array+0x2e>
 800b0ca:	bd70      	pop	{r4, r5, r6, pc}
 800b0cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0d0:	3601      	adds	r6, #1
 800b0d2:	4798      	blx	r3
 800b0d4:	e7ee      	b.n	800b0b4 <__libc_init_array+0xc>
 800b0d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0da:	3601      	adds	r6, #1
 800b0dc:	4798      	blx	r3
 800b0de:	e7f2      	b.n	800b0c6 <__libc_init_array+0x1e>
 800b0e0:	0800c560 	.word	0x0800c560
 800b0e4:	0800c560 	.word	0x0800c560
 800b0e8:	0800c560 	.word	0x0800c560
 800b0ec:	0800c564 	.word	0x0800c564

0800b0f0 <__retarget_lock_init_recursive>:
 800b0f0:	4770      	bx	lr

0800b0f2 <__retarget_lock_acquire_recursive>:
 800b0f2:	4770      	bx	lr

0800b0f4 <__retarget_lock_release_recursive>:
 800b0f4:	4770      	bx	lr
	...

0800b0f8 <_free_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	4605      	mov	r5, r0
 800b0fc:	2900      	cmp	r1, #0
 800b0fe:	d041      	beq.n	800b184 <_free_r+0x8c>
 800b100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b104:	1f0c      	subs	r4, r1, #4
 800b106:	2b00      	cmp	r3, #0
 800b108:	bfb8      	it	lt
 800b10a:	18e4      	addlt	r4, r4, r3
 800b10c:	f000 f8e0 	bl	800b2d0 <__malloc_lock>
 800b110:	4a1d      	ldr	r2, [pc, #116]	@ (800b188 <_free_r+0x90>)
 800b112:	6813      	ldr	r3, [r2, #0]
 800b114:	b933      	cbnz	r3, 800b124 <_free_r+0x2c>
 800b116:	6063      	str	r3, [r4, #4]
 800b118:	6014      	str	r4, [r2, #0]
 800b11a:	4628      	mov	r0, r5
 800b11c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b120:	f000 b8dc 	b.w	800b2dc <__malloc_unlock>
 800b124:	42a3      	cmp	r3, r4
 800b126:	d908      	bls.n	800b13a <_free_r+0x42>
 800b128:	6820      	ldr	r0, [r4, #0]
 800b12a:	1821      	adds	r1, r4, r0
 800b12c:	428b      	cmp	r3, r1
 800b12e:	bf01      	itttt	eq
 800b130:	6819      	ldreq	r1, [r3, #0]
 800b132:	685b      	ldreq	r3, [r3, #4]
 800b134:	1809      	addeq	r1, r1, r0
 800b136:	6021      	streq	r1, [r4, #0]
 800b138:	e7ed      	b.n	800b116 <_free_r+0x1e>
 800b13a:	461a      	mov	r2, r3
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	b10b      	cbz	r3, 800b144 <_free_r+0x4c>
 800b140:	42a3      	cmp	r3, r4
 800b142:	d9fa      	bls.n	800b13a <_free_r+0x42>
 800b144:	6811      	ldr	r1, [r2, #0]
 800b146:	1850      	adds	r0, r2, r1
 800b148:	42a0      	cmp	r0, r4
 800b14a:	d10b      	bne.n	800b164 <_free_r+0x6c>
 800b14c:	6820      	ldr	r0, [r4, #0]
 800b14e:	4401      	add	r1, r0
 800b150:	1850      	adds	r0, r2, r1
 800b152:	6011      	str	r1, [r2, #0]
 800b154:	4283      	cmp	r3, r0
 800b156:	d1e0      	bne.n	800b11a <_free_r+0x22>
 800b158:	6818      	ldr	r0, [r3, #0]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	4408      	add	r0, r1
 800b15e:	6053      	str	r3, [r2, #4]
 800b160:	6010      	str	r0, [r2, #0]
 800b162:	e7da      	b.n	800b11a <_free_r+0x22>
 800b164:	d902      	bls.n	800b16c <_free_r+0x74>
 800b166:	230c      	movs	r3, #12
 800b168:	602b      	str	r3, [r5, #0]
 800b16a:	e7d6      	b.n	800b11a <_free_r+0x22>
 800b16c:	6820      	ldr	r0, [r4, #0]
 800b16e:	1821      	adds	r1, r4, r0
 800b170:	428b      	cmp	r3, r1
 800b172:	bf02      	ittt	eq
 800b174:	6819      	ldreq	r1, [r3, #0]
 800b176:	685b      	ldreq	r3, [r3, #4]
 800b178:	1809      	addeq	r1, r1, r0
 800b17a:	6063      	str	r3, [r4, #4]
 800b17c:	bf08      	it	eq
 800b17e:	6021      	streq	r1, [r4, #0]
 800b180:	6054      	str	r4, [r2, #4]
 800b182:	e7ca      	b.n	800b11a <_free_r+0x22>
 800b184:	bd38      	pop	{r3, r4, r5, pc}
 800b186:	bf00      	nop
 800b188:	200007a8 	.word	0x200007a8

0800b18c <sbrk_aligned>:
 800b18c:	b570      	push	{r4, r5, r6, lr}
 800b18e:	4e0f      	ldr	r6, [pc, #60]	@ (800b1cc <sbrk_aligned+0x40>)
 800b190:	460c      	mov	r4, r1
 800b192:	4605      	mov	r5, r0
 800b194:	6831      	ldr	r1, [r6, #0]
 800b196:	b911      	cbnz	r1, 800b19e <sbrk_aligned+0x12>
 800b198:	f000 fe1c 	bl	800bdd4 <_sbrk_r>
 800b19c:	6030      	str	r0, [r6, #0]
 800b19e:	4621      	mov	r1, r4
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	f000 fe17 	bl	800bdd4 <_sbrk_r>
 800b1a6:	1c43      	adds	r3, r0, #1
 800b1a8:	d103      	bne.n	800b1b2 <sbrk_aligned+0x26>
 800b1aa:	f04f 34ff 	mov.w	r4, #4294967295
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	bd70      	pop	{r4, r5, r6, pc}
 800b1b2:	1cc4      	adds	r4, r0, #3
 800b1b4:	f024 0403 	bic.w	r4, r4, #3
 800b1b8:	42a0      	cmp	r0, r4
 800b1ba:	d0f8      	beq.n	800b1ae <sbrk_aligned+0x22>
 800b1bc:	1a21      	subs	r1, r4, r0
 800b1be:	4628      	mov	r0, r5
 800b1c0:	f000 fe08 	bl	800bdd4 <_sbrk_r>
 800b1c4:	3001      	adds	r0, #1
 800b1c6:	d1f2      	bne.n	800b1ae <sbrk_aligned+0x22>
 800b1c8:	e7ef      	b.n	800b1aa <sbrk_aligned+0x1e>
 800b1ca:	bf00      	nop
 800b1cc:	200007a4 	.word	0x200007a4

0800b1d0 <_malloc_r>:
 800b1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1d4:	1ccd      	adds	r5, r1, #3
 800b1d6:	4606      	mov	r6, r0
 800b1d8:	f025 0503 	bic.w	r5, r5, #3
 800b1dc:	3508      	adds	r5, #8
 800b1de:	2d0c      	cmp	r5, #12
 800b1e0:	bf38      	it	cc
 800b1e2:	250c      	movcc	r5, #12
 800b1e4:	2d00      	cmp	r5, #0
 800b1e6:	db01      	blt.n	800b1ec <_malloc_r+0x1c>
 800b1e8:	42a9      	cmp	r1, r5
 800b1ea:	d904      	bls.n	800b1f6 <_malloc_r+0x26>
 800b1ec:	230c      	movs	r3, #12
 800b1ee:	6033      	str	r3, [r6, #0]
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b2cc <_malloc_r+0xfc>
 800b1fa:	f000 f869 	bl	800b2d0 <__malloc_lock>
 800b1fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b202:	461c      	mov	r4, r3
 800b204:	bb44      	cbnz	r4, 800b258 <_malloc_r+0x88>
 800b206:	4629      	mov	r1, r5
 800b208:	4630      	mov	r0, r6
 800b20a:	f7ff ffbf 	bl	800b18c <sbrk_aligned>
 800b20e:	1c43      	adds	r3, r0, #1
 800b210:	4604      	mov	r4, r0
 800b212:	d158      	bne.n	800b2c6 <_malloc_r+0xf6>
 800b214:	f8d8 4000 	ldr.w	r4, [r8]
 800b218:	4627      	mov	r7, r4
 800b21a:	2f00      	cmp	r7, #0
 800b21c:	d143      	bne.n	800b2a6 <_malloc_r+0xd6>
 800b21e:	2c00      	cmp	r4, #0
 800b220:	d04b      	beq.n	800b2ba <_malloc_r+0xea>
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	4639      	mov	r1, r7
 800b226:	4630      	mov	r0, r6
 800b228:	eb04 0903 	add.w	r9, r4, r3
 800b22c:	f000 fdd2 	bl	800bdd4 <_sbrk_r>
 800b230:	4581      	cmp	r9, r0
 800b232:	d142      	bne.n	800b2ba <_malloc_r+0xea>
 800b234:	6821      	ldr	r1, [r4, #0]
 800b236:	4630      	mov	r0, r6
 800b238:	1a6d      	subs	r5, r5, r1
 800b23a:	4629      	mov	r1, r5
 800b23c:	f7ff ffa6 	bl	800b18c <sbrk_aligned>
 800b240:	3001      	adds	r0, #1
 800b242:	d03a      	beq.n	800b2ba <_malloc_r+0xea>
 800b244:	6823      	ldr	r3, [r4, #0]
 800b246:	442b      	add	r3, r5
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	f8d8 3000 	ldr.w	r3, [r8]
 800b24e:	685a      	ldr	r2, [r3, #4]
 800b250:	bb62      	cbnz	r2, 800b2ac <_malloc_r+0xdc>
 800b252:	f8c8 7000 	str.w	r7, [r8]
 800b256:	e00f      	b.n	800b278 <_malloc_r+0xa8>
 800b258:	6822      	ldr	r2, [r4, #0]
 800b25a:	1b52      	subs	r2, r2, r5
 800b25c:	d420      	bmi.n	800b2a0 <_malloc_r+0xd0>
 800b25e:	2a0b      	cmp	r2, #11
 800b260:	d917      	bls.n	800b292 <_malloc_r+0xc2>
 800b262:	1961      	adds	r1, r4, r5
 800b264:	42a3      	cmp	r3, r4
 800b266:	6025      	str	r5, [r4, #0]
 800b268:	bf18      	it	ne
 800b26a:	6059      	strne	r1, [r3, #4]
 800b26c:	6863      	ldr	r3, [r4, #4]
 800b26e:	bf08      	it	eq
 800b270:	f8c8 1000 	streq.w	r1, [r8]
 800b274:	5162      	str	r2, [r4, r5]
 800b276:	604b      	str	r3, [r1, #4]
 800b278:	4630      	mov	r0, r6
 800b27a:	f000 f82f 	bl	800b2dc <__malloc_unlock>
 800b27e:	f104 000b 	add.w	r0, r4, #11
 800b282:	1d23      	adds	r3, r4, #4
 800b284:	f020 0007 	bic.w	r0, r0, #7
 800b288:	1ac2      	subs	r2, r0, r3
 800b28a:	bf1c      	itt	ne
 800b28c:	1a1b      	subne	r3, r3, r0
 800b28e:	50a3      	strne	r3, [r4, r2]
 800b290:	e7af      	b.n	800b1f2 <_malloc_r+0x22>
 800b292:	6862      	ldr	r2, [r4, #4]
 800b294:	42a3      	cmp	r3, r4
 800b296:	bf0c      	ite	eq
 800b298:	f8c8 2000 	streq.w	r2, [r8]
 800b29c:	605a      	strne	r2, [r3, #4]
 800b29e:	e7eb      	b.n	800b278 <_malloc_r+0xa8>
 800b2a0:	4623      	mov	r3, r4
 800b2a2:	6864      	ldr	r4, [r4, #4]
 800b2a4:	e7ae      	b.n	800b204 <_malloc_r+0x34>
 800b2a6:	463c      	mov	r4, r7
 800b2a8:	687f      	ldr	r7, [r7, #4]
 800b2aa:	e7b6      	b.n	800b21a <_malloc_r+0x4a>
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	42a3      	cmp	r3, r4
 800b2b2:	d1fb      	bne.n	800b2ac <_malloc_r+0xdc>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	6053      	str	r3, [r2, #4]
 800b2b8:	e7de      	b.n	800b278 <_malloc_r+0xa8>
 800b2ba:	230c      	movs	r3, #12
 800b2bc:	4630      	mov	r0, r6
 800b2be:	6033      	str	r3, [r6, #0]
 800b2c0:	f000 f80c 	bl	800b2dc <__malloc_unlock>
 800b2c4:	e794      	b.n	800b1f0 <_malloc_r+0x20>
 800b2c6:	6005      	str	r5, [r0, #0]
 800b2c8:	e7d6      	b.n	800b278 <_malloc_r+0xa8>
 800b2ca:	bf00      	nop
 800b2cc:	200007a8 	.word	0x200007a8

0800b2d0 <__malloc_lock>:
 800b2d0:	4801      	ldr	r0, [pc, #4]	@ (800b2d8 <__malloc_lock+0x8>)
 800b2d2:	f7ff bf0e 	b.w	800b0f2 <__retarget_lock_acquire_recursive>
 800b2d6:	bf00      	nop
 800b2d8:	200007a0 	.word	0x200007a0

0800b2dc <__malloc_unlock>:
 800b2dc:	4801      	ldr	r0, [pc, #4]	@ (800b2e4 <__malloc_unlock+0x8>)
 800b2de:	f7ff bf09 	b.w	800b0f4 <__retarget_lock_release_recursive>
 800b2e2:	bf00      	nop
 800b2e4:	200007a0 	.word	0x200007a0

0800b2e8 <__ssputs_r>:
 800b2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2ec:	461f      	mov	r7, r3
 800b2ee:	688e      	ldr	r6, [r1, #8]
 800b2f0:	4682      	mov	sl, r0
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	42be      	cmp	r6, r7
 800b2f6:	4690      	mov	r8, r2
 800b2f8:	680b      	ldr	r3, [r1, #0]
 800b2fa:	d82d      	bhi.n	800b358 <__ssputs_r+0x70>
 800b2fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b300:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b304:	d026      	beq.n	800b354 <__ssputs_r+0x6c>
 800b306:	6965      	ldr	r5, [r4, #20]
 800b308:	6909      	ldr	r1, [r1, #16]
 800b30a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b30e:	eba3 0901 	sub.w	r9, r3, r1
 800b312:	1c7b      	adds	r3, r7, #1
 800b314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b318:	444b      	add	r3, r9
 800b31a:	106d      	asrs	r5, r5, #1
 800b31c:	429d      	cmp	r5, r3
 800b31e:	bf38      	it	cc
 800b320:	461d      	movcc	r5, r3
 800b322:	0553      	lsls	r3, r2, #21
 800b324:	d527      	bpl.n	800b376 <__ssputs_r+0x8e>
 800b326:	4629      	mov	r1, r5
 800b328:	f7ff ff52 	bl	800b1d0 <_malloc_r>
 800b32c:	4606      	mov	r6, r0
 800b32e:	b360      	cbz	r0, 800b38a <__ssputs_r+0xa2>
 800b330:	464a      	mov	r2, r9
 800b332:	6921      	ldr	r1, [r4, #16]
 800b334:	f000 fd6c 	bl	800be10 <memcpy>
 800b338:	89a3      	ldrh	r3, [r4, #12]
 800b33a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b33e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b342:	81a3      	strh	r3, [r4, #12]
 800b344:	6126      	str	r6, [r4, #16]
 800b346:	444e      	add	r6, r9
 800b348:	6165      	str	r5, [r4, #20]
 800b34a:	eba5 0509 	sub.w	r5, r5, r9
 800b34e:	6026      	str	r6, [r4, #0]
 800b350:	463e      	mov	r6, r7
 800b352:	60a5      	str	r5, [r4, #8]
 800b354:	42be      	cmp	r6, r7
 800b356:	d900      	bls.n	800b35a <__ssputs_r+0x72>
 800b358:	463e      	mov	r6, r7
 800b35a:	4632      	mov	r2, r6
 800b35c:	4641      	mov	r1, r8
 800b35e:	6820      	ldr	r0, [r4, #0]
 800b360:	f000 fcfb 	bl	800bd5a <memmove>
 800b364:	68a3      	ldr	r3, [r4, #8]
 800b366:	2000      	movs	r0, #0
 800b368:	1b9b      	subs	r3, r3, r6
 800b36a:	60a3      	str	r3, [r4, #8]
 800b36c:	6823      	ldr	r3, [r4, #0]
 800b36e:	4433      	add	r3, r6
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b376:	462a      	mov	r2, r5
 800b378:	f000 fd57 	bl	800be2a <_realloc_r>
 800b37c:	4606      	mov	r6, r0
 800b37e:	2800      	cmp	r0, #0
 800b380:	d1e0      	bne.n	800b344 <__ssputs_r+0x5c>
 800b382:	6921      	ldr	r1, [r4, #16]
 800b384:	4650      	mov	r0, sl
 800b386:	f7ff feb7 	bl	800b0f8 <_free_r>
 800b38a:	230c      	movs	r3, #12
 800b38c:	f04f 30ff 	mov.w	r0, #4294967295
 800b390:	f8ca 3000 	str.w	r3, [sl]
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b39a:	81a3      	strh	r3, [r4, #12]
 800b39c:	e7e9      	b.n	800b372 <__ssputs_r+0x8a>
	...

0800b3a0 <_svfiprintf_r>:
 800b3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	4698      	mov	r8, r3
 800b3a6:	898b      	ldrh	r3, [r1, #12]
 800b3a8:	b09d      	sub	sp, #116	@ 0x74
 800b3aa:	4607      	mov	r7, r0
 800b3ac:	061b      	lsls	r3, r3, #24
 800b3ae:	460d      	mov	r5, r1
 800b3b0:	4614      	mov	r4, r2
 800b3b2:	d510      	bpl.n	800b3d6 <_svfiprintf_r+0x36>
 800b3b4:	690b      	ldr	r3, [r1, #16]
 800b3b6:	b973      	cbnz	r3, 800b3d6 <_svfiprintf_r+0x36>
 800b3b8:	2140      	movs	r1, #64	@ 0x40
 800b3ba:	f7ff ff09 	bl	800b1d0 <_malloc_r>
 800b3be:	6028      	str	r0, [r5, #0]
 800b3c0:	6128      	str	r0, [r5, #16]
 800b3c2:	b930      	cbnz	r0, 800b3d2 <_svfiprintf_r+0x32>
 800b3c4:	230c      	movs	r3, #12
 800b3c6:	603b      	str	r3, [r7, #0]
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	b01d      	add	sp, #116	@ 0x74
 800b3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d2:	2340      	movs	r3, #64	@ 0x40
 800b3d4:	616b      	str	r3, [r5, #20]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3dc:	f04f 0901 	mov.w	r9, #1
 800b3e0:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b584 <_svfiprintf_r+0x1e4>
 800b3e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3e6:	2320      	movs	r3, #32
 800b3e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3ec:	2330      	movs	r3, #48	@ 0x30
 800b3ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3f2:	4623      	mov	r3, r4
 800b3f4:	469a      	mov	sl, r3
 800b3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3fa:	b10a      	cbz	r2, 800b400 <_svfiprintf_r+0x60>
 800b3fc:	2a25      	cmp	r2, #37	@ 0x25
 800b3fe:	d1f9      	bne.n	800b3f4 <_svfiprintf_r+0x54>
 800b400:	ebba 0b04 	subs.w	fp, sl, r4
 800b404:	d00b      	beq.n	800b41e <_svfiprintf_r+0x7e>
 800b406:	465b      	mov	r3, fp
 800b408:	4622      	mov	r2, r4
 800b40a:	4629      	mov	r1, r5
 800b40c:	4638      	mov	r0, r7
 800b40e:	f7ff ff6b 	bl	800b2e8 <__ssputs_r>
 800b412:	3001      	adds	r0, #1
 800b414:	f000 80a7 	beq.w	800b566 <_svfiprintf_r+0x1c6>
 800b418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b41a:	445a      	add	r2, fp
 800b41c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b41e:	f89a 3000 	ldrb.w	r3, [sl]
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 809f 	beq.w	800b566 <_svfiprintf_r+0x1c6>
 800b428:	2300      	movs	r3, #0
 800b42a:	f04f 32ff 	mov.w	r2, #4294967295
 800b42e:	f10a 0a01 	add.w	sl, sl, #1
 800b432:	9304      	str	r3, [sp, #16]
 800b434:	9307      	str	r3, [sp, #28]
 800b436:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b43a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b43c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b440:	4654      	mov	r4, sl
 800b442:	2205      	movs	r2, #5
 800b444:	484f      	ldr	r0, [pc, #316]	@ (800b584 <_svfiprintf_r+0x1e4>)
 800b446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b44a:	f000 fcd3 	bl	800bdf4 <memchr>
 800b44e:	9a04      	ldr	r2, [sp, #16]
 800b450:	b9d8      	cbnz	r0, 800b48a <_svfiprintf_r+0xea>
 800b452:	06d0      	lsls	r0, r2, #27
 800b454:	bf44      	itt	mi
 800b456:	2320      	movmi	r3, #32
 800b458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b45c:	0711      	lsls	r1, r2, #28
 800b45e:	bf44      	itt	mi
 800b460:	232b      	movmi	r3, #43	@ 0x2b
 800b462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b466:	f89a 3000 	ldrb.w	r3, [sl]
 800b46a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b46c:	d015      	beq.n	800b49a <_svfiprintf_r+0xfa>
 800b46e:	9a07      	ldr	r2, [sp, #28]
 800b470:	4654      	mov	r4, sl
 800b472:	2000      	movs	r0, #0
 800b474:	f04f 0c0a 	mov.w	ip, #10
 800b478:	4621      	mov	r1, r4
 800b47a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b47e:	3b30      	subs	r3, #48	@ 0x30
 800b480:	2b09      	cmp	r3, #9
 800b482:	d94b      	bls.n	800b51c <_svfiprintf_r+0x17c>
 800b484:	b1b0      	cbz	r0, 800b4b4 <_svfiprintf_r+0x114>
 800b486:	9207      	str	r2, [sp, #28]
 800b488:	e014      	b.n	800b4b4 <_svfiprintf_r+0x114>
 800b48a:	eba0 0308 	sub.w	r3, r0, r8
 800b48e:	46a2      	mov	sl, r4
 800b490:	fa09 f303 	lsl.w	r3, r9, r3
 800b494:	4313      	orrs	r3, r2
 800b496:	9304      	str	r3, [sp, #16]
 800b498:	e7d2      	b.n	800b440 <_svfiprintf_r+0xa0>
 800b49a:	9b03      	ldr	r3, [sp, #12]
 800b49c:	1d19      	adds	r1, r3, #4
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	9103      	str	r1, [sp, #12]
 800b4a4:	bfbb      	ittet	lt
 800b4a6:	425b      	neglt	r3, r3
 800b4a8:	f042 0202 	orrlt.w	r2, r2, #2
 800b4ac:	9307      	strge	r3, [sp, #28]
 800b4ae:	9307      	strlt	r3, [sp, #28]
 800b4b0:	bfb8      	it	lt
 800b4b2:	9204      	strlt	r2, [sp, #16]
 800b4b4:	7823      	ldrb	r3, [r4, #0]
 800b4b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4b8:	d10a      	bne.n	800b4d0 <_svfiprintf_r+0x130>
 800b4ba:	7863      	ldrb	r3, [r4, #1]
 800b4bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4be:	d132      	bne.n	800b526 <_svfiprintf_r+0x186>
 800b4c0:	9b03      	ldr	r3, [sp, #12]
 800b4c2:	3402      	adds	r4, #2
 800b4c4:	1d1a      	adds	r2, r3, #4
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4cc:	9203      	str	r2, [sp, #12]
 800b4ce:	9305      	str	r3, [sp, #20]
 800b4d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b594 <_svfiprintf_r+0x1f4>
 800b4d4:	2203      	movs	r2, #3
 800b4d6:	7821      	ldrb	r1, [r4, #0]
 800b4d8:	4650      	mov	r0, sl
 800b4da:	f000 fc8b 	bl	800bdf4 <memchr>
 800b4de:	b138      	cbz	r0, 800b4f0 <_svfiprintf_r+0x150>
 800b4e0:	eba0 000a 	sub.w	r0, r0, sl
 800b4e4:	2240      	movs	r2, #64	@ 0x40
 800b4e6:	9b04      	ldr	r3, [sp, #16]
 800b4e8:	3401      	adds	r4, #1
 800b4ea:	4082      	lsls	r2, r0
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	9304      	str	r3, [sp, #16]
 800b4f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f4:	2206      	movs	r2, #6
 800b4f6:	4824      	ldr	r0, [pc, #144]	@ (800b588 <_svfiprintf_r+0x1e8>)
 800b4f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4fc:	f000 fc7a 	bl	800bdf4 <memchr>
 800b500:	2800      	cmp	r0, #0
 800b502:	d036      	beq.n	800b572 <_svfiprintf_r+0x1d2>
 800b504:	4b21      	ldr	r3, [pc, #132]	@ (800b58c <_svfiprintf_r+0x1ec>)
 800b506:	bb1b      	cbnz	r3, 800b550 <_svfiprintf_r+0x1b0>
 800b508:	9b03      	ldr	r3, [sp, #12]
 800b50a:	3307      	adds	r3, #7
 800b50c:	f023 0307 	bic.w	r3, r3, #7
 800b510:	3308      	adds	r3, #8
 800b512:	9303      	str	r3, [sp, #12]
 800b514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b516:	4433      	add	r3, r6
 800b518:	9309      	str	r3, [sp, #36]	@ 0x24
 800b51a:	e76a      	b.n	800b3f2 <_svfiprintf_r+0x52>
 800b51c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b520:	460c      	mov	r4, r1
 800b522:	2001      	movs	r0, #1
 800b524:	e7a8      	b.n	800b478 <_svfiprintf_r+0xd8>
 800b526:	2300      	movs	r3, #0
 800b528:	3401      	adds	r4, #1
 800b52a:	f04f 0c0a 	mov.w	ip, #10
 800b52e:	4619      	mov	r1, r3
 800b530:	9305      	str	r3, [sp, #20]
 800b532:	4620      	mov	r0, r4
 800b534:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b538:	3a30      	subs	r2, #48	@ 0x30
 800b53a:	2a09      	cmp	r2, #9
 800b53c:	d903      	bls.n	800b546 <_svfiprintf_r+0x1a6>
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0c6      	beq.n	800b4d0 <_svfiprintf_r+0x130>
 800b542:	9105      	str	r1, [sp, #20]
 800b544:	e7c4      	b.n	800b4d0 <_svfiprintf_r+0x130>
 800b546:	fb0c 2101 	mla	r1, ip, r1, r2
 800b54a:	4604      	mov	r4, r0
 800b54c:	2301      	movs	r3, #1
 800b54e:	e7f0      	b.n	800b532 <_svfiprintf_r+0x192>
 800b550:	ab03      	add	r3, sp, #12
 800b552:	462a      	mov	r2, r5
 800b554:	a904      	add	r1, sp, #16
 800b556:	4638      	mov	r0, r7
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	4b0d      	ldr	r3, [pc, #52]	@ (800b590 <_svfiprintf_r+0x1f0>)
 800b55c:	f3af 8000 	nop.w
 800b560:	1c42      	adds	r2, r0, #1
 800b562:	4606      	mov	r6, r0
 800b564:	d1d6      	bne.n	800b514 <_svfiprintf_r+0x174>
 800b566:	89ab      	ldrh	r3, [r5, #12]
 800b568:	065b      	lsls	r3, r3, #25
 800b56a:	f53f af2d 	bmi.w	800b3c8 <_svfiprintf_r+0x28>
 800b56e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b570:	e72c      	b.n	800b3cc <_svfiprintf_r+0x2c>
 800b572:	ab03      	add	r3, sp, #12
 800b574:	462a      	mov	r2, r5
 800b576:	a904      	add	r1, sp, #16
 800b578:	4638      	mov	r0, r7
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	4b04      	ldr	r3, [pc, #16]	@ (800b590 <_svfiprintf_r+0x1f0>)
 800b57e:	f000 f9bf 	bl	800b900 <_printf_i>
 800b582:	e7ed      	b.n	800b560 <_svfiprintf_r+0x1c0>
 800b584:	0800c525 	.word	0x0800c525
 800b588:	0800c52f 	.word	0x0800c52f
 800b58c:	00000000 	.word	0x00000000
 800b590:	0800b2e9 	.word	0x0800b2e9
 800b594:	0800c52b 	.word	0x0800c52b

0800b598 <__sfputc_r>:
 800b598:	6893      	ldr	r3, [r2, #8]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	6093      	str	r3, [r2, #8]
 800b5a0:	b410      	push	{r4}
 800b5a2:	da08      	bge.n	800b5b6 <__sfputc_r+0x1e>
 800b5a4:	6994      	ldr	r4, [r2, #24]
 800b5a6:	42a3      	cmp	r3, r4
 800b5a8:	db01      	blt.n	800b5ae <__sfputc_r+0x16>
 800b5aa:	290a      	cmp	r1, #10
 800b5ac:	d103      	bne.n	800b5b6 <__sfputc_r+0x1e>
 800b5ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5b2:	f7ff bc90 	b.w	800aed6 <__swbuf_r>
 800b5b6:	6813      	ldr	r3, [r2, #0]
 800b5b8:	1c58      	adds	r0, r3, #1
 800b5ba:	6010      	str	r0, [r2, #0]
 800b5bc:	4608      	mov	r0, r1
 800b5be:	7019      	strb	r1, [r3, #0]
 800b5c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <__sfputs_r>:
 800b5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c8:	4606      	mov	r6, r0
 800b5ca:	460f      	mov	r7, r1
 800b5cc:	4614      	mov	r4, r2
 800b5ce:	18d5      	adds	r5, r2, r3
 800b5d0:	42ac      	cmp	r4, r5
 800b5d2:	d101      	bne.n	800b5d8 <__sfputs_r+0x12>
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	e007      	b.n	800b5e8 <__sfputs_r+0x22>
 800b5d8:	463a      	mov	r2, r7
 800b5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5de:	4630      	mov	r0, r6
 800b5e0:	f7ff ffda 	bl	800b598 <__sfputc_r>
 800b5e4:	1c43      	adds	r3, r0, #1
 800b5e6:	d1f3      	bne.n	800b5d0 <__sfputs_r+0xa>
 800b5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5ec <_vfiprintf_r>:
 800b5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	b09d      	sub	sp, #116	@ 0x74
 800b5f4:	4614      	mov	r4, r2
 800b5f6:	4698      	mov	r8, r3
 800b5f8:	4606      	mov	r6, r0
 800b5fa:	b118      	cbz	r0, 800b604 <_vfiprintf_r+0x18>
 800b5fc:	6a03      	ldr	r3, [r0, #32]
 800b5fe:	b90b      	cbnz	r3, 800b604 <_vfiprintf_r+0x18>
 800b600:	f7ff fb4c 	bl	800ac9c <__sinit>
 800b604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b606:	07d9      	lsls	r1, r3, #31
 800b608:	d405      	bmi.n	800b616 <_vfiprintf_r+0x2a>
 800b60a:	89ab      	ldrh	r3, [r5, #12]
 800b60c:	059a      	lsls	r2, r3, #22
 800b60e:	d402      	bmi.n	800b616 <_vfiprintf_r+0x2a>
 800b610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b612:	f7ff fd6e 	bl	800b0f2 <__retarget_lock_acquire_recursive>
 800b616:	89ab      	ldrh	r3, [r5, #12]
 800b618:	071b      	lsls	r3, r3, #28
 800b61a:	d501      	bpl.n	800b620 <_vfiprintf_r+0x34>
 800b61c:	692b      	ldr	r3, [r5, #16]
 800b61e:	b99b      	cbnz	r3, 800b648 <_vfiprintf_r+0x5c>
 800b620:	4629      	mov	r1, r5
 800b622:	4630      	mov	r0, r6
 800b624:	f7ff fc96 	bl	800af54 <__swsetup_r>
 800b628:	b170      	cbz	r0, 800b648 <_vfiprintf_r+0x5c>
 800b62a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b62c:	07dc      	lsls	r4, r3, #31
 800b62e:	d504      	bpl.n	800b63a <_vfiprintf_r+0x4e>
 800b630:	f04f 30ff 	mov.w	r0, #4294967295
 800b634:	b01d      	add	sp, #116	@ 0x74
 800b636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63a:	89ab      	ldrh	r3, [r5, #12]
 800b63c:	0598      	lsls	r0, r3, #22
 800b63e:	d4f7      	bmi.n	800b630 <_vfiprintf_r+0x44>
 800b640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b642:	f7ff fd57 	bl	800b0f4 <__retarget_lock_release_recursive>
 800b646:	e7f3      	b.n	800b630 <_vfiprintf_r+0x44>
 800b648:	2300      	movs	r3, #0
 800b64a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b64e:	f04f 0901 	mov.w	r9, #1
 800b652:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800b808 <_vfiprintf_r+0x21c>
 800b656:	9309      	str	r3, [sp, #36]	@ 0x24
 800b658:	2320      	movs	r3, #32
 800b65a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b65e:	2330      	movs	r3, #48	@ 0x30
 800b660:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b664:	4623      	mov	r3, r4
 800b666:	469a      	mov	sl, r3
 800b668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b66c:	b10a      	cbz	r2, 800b672 <_vfiprintf_r+0x86>
 800b66e:	2a25      	cmp	r2, #37	@ 0x25
 800b670:	d1f9      	bne.n	800b666 <_vfiprintf_r+0x7a>
 800b672:	ebba 0b04 	subs.w	fp, sl, r4
 800b676:	d00b      	beq.n	800b690 <_vfiprintf_r+0xa4>
 800b678:	465b      	mov	r3, fp
 800b67a:	4622      	mov	r2, r4
 800b67c:	4629      	mov	r1, r5
 800b67e:	4630      	mov	r0, r6
 800b680:	f7ff ffa1 	bl	800b5c6 <__sfputs_r>
 800b684:	3001      	adds	r0, #1
 800b686:	f000 80a7 	beq.w	800b7d8 <_vfiprintf_r+0x1ec>
 800b68a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b68c:	445a      	add	r2, fp
 800b68e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b690:	f89a 3000 	ldrb.w	r3, [sl]
 800b694:	2b00      	cmp	r3, #0
 800b696:	f000 809f 	beq.w	800b7d8 <_vfiprintf_r+0x1ec>
 800b69a:	2300      	movs	r3, #0
 800b69c:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a0:	f10a 0a01 	add.w	sl, sl, #1
 800b6a4:	9304      	str	r3, [sp, #16]
 800b6a6:	9307      	str	r3, [sp, #28]
 800b6a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6b2:	4654      	mov	r4, sl
 800b6b4:	2205      	movs	r2, #5
 800b6b6:	4854      	ldr	r0, [pc, #336]	@ (800b808 <_vfiprintf_r+0x21c>)
 800b6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6bc:	f000 fb9a 	bl	800bdf4 <memchr>
 800b6c0:	9a04      	ldr	r2, [sp, #16]
 800b6c2:	b9d8      	cbnz	r0, 800b6fc <_vfiprintf_r+0x110>
 800b6c4:	06d1      	lsls	r1, r2, #27
 800b6c6:	bf44      	itt	mi
 800b6c8:	2320      	movmi	r3, #32
 800b6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6ce:	0713      	lsls	r3, r2, #28
 800b6d0:	bf44      	itt	mi
 800b6d2:	232b      	movmi	r3, #43	@ 0x2b
 800b6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b6dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6de:	d015      	beq.n	800b70c <_vfiprintf_r+0x120>
 800b6e0:	9a07      	ldr	r2, [sp, #28]
 800b6e2:	4654      	mov	r4, sl
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	f04f 0c0a 	mov.w	ip, #10
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6f0:	3b30      	subs	r3, #48	@ 0x30
 800b6f2:	2b09      	cmp	r3, #9
 800b6f4:	d94b      	bls.n	800b78e <_vfiprintf_r+0x1a2>
 800b6f6:	b1b0      	cbz	r0, 800b726 <_vfiprintf_r+0x13a>
 800b6f8:	9207      	str	r2, [sp, #28]
 800b6fa:	e014      	b.n	800b726 <_vfiprintf_r+0x13a>
 800b6fc:	eba0 0308 	sub.w	r3, r0, r8
 800b700:	46a2      	mov	sl, r4
 800b702:	fa09 f303 	lsl.w	r3, r9, r3
 800b706:	4313      	orrs	r3, r2
 800b708:	9304      	str	r3, [sp, #16]
 800b70a:	e7d2      	b.n	800b6b2 <_vfiprintf_r+0xc6>
 800b70c:	9b03      	ldr	r3, [sp, #12]
 800b70e:	1d19      	adds	r1, r3, #4
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	9103      	str	r1, [sp, #12]
 800b716:	bfbb      	ittet	lt
 800b718:	425b      	neglt	r3, r3
 800b71a:	f042 0202 	orrlt.w	r2, r2, #2
 800b71e:	9307      	strge	r3, [sp, #28]
 800b720:	9307      	strlt	r3, [sp, #28]
 800b722:	bfb8      	it	lt
 800b724:	9204      	strlt	r2, [sp, #16]
 800b726:	7823      	ldrb	r3, [r4, #0]
 800b728:	2b2e      	cmp	r3, #46	@ 0x2e
 800b72a:	d10a      	bne.n	800b742 <_vfiprintf_r+0x156>
 800b72c:	7863      	ldrb	r3, [r4, #1]
 800b72e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b730:	d132      	bne.n	800b798 <_vfiprintf_r+0x1ac>
 800b732:	9b03      	ldr	r3, [sp, #12]
 800b734:	3402      	adds	r4, #2
 800b736:	1d1a      	adds	r2, r3, #4
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b73e:	9203      	str	r2, [sp, #12]
 800b740:	9305      	str	r3, [sp, #20]
 800b742:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b818 <_vfiprintf_r+0x22c>
 800b746:	2203      	movs	r2, #3
 800b748:	7821      	ldrb	r1, [r4, #0]
 800b74a:	4650      	mov	r0, sl
 800b74c:	f000 fb52 	bl	800bdf4 <memchr>
 800b750:	b138      	cbz	r0, 800b762 <_vfiprintf_r+0x176>
 800b752:	eba0 000a 	sub.w	r0, r0, sl
 800b756:	2240      	movs	r2, #64	@ 0x40
 800b758:	9b04      	ldr	r3, [sp, #16]
 800b75a:	3401      	adds	r4, #1
 800b75c:	4082      	lsls	r2, r0
 800b75e:	4313      	orrs	r3, r2
 800b760:	9304      	str	r3, [sp, #16]
 800b762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b766:	2206      	movs	r2, #6
 800b768:	4828      	ldr	r0, [pc, #160]	@ (800b80c <_vfiprintf_r+0x220>)
 800b76a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b76e:	f000 fb41 	bl	800bdf4 <memchr>
 800b772:	2800      	cmp	r0, #0
 800b774:	d03f      	beq.n	800b7f6 <_vfiprintf_r+0x20a>
 800b776:	4b26      	ldr	r3, [pc, #152]	@ (800b810 <_vfiprintf_r+0x224>)
 800b778:	bb1b      	cbnz	r3, 800b7c2 <_vfiprintf_r+0x1d6>
 800b77a:	9b03      	ldr	r3, [sp, #12]
 800b77c:	3307      	adds	r3, #7
 800b77e:	f023 0307 	bic.w	r3, r3, #7
 800b782:	3308      	adds	r3, #8
 800b784:	9303      	str	r3, [sp, #12]
 800b786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b788:	443b      	add	r3, r7
 800b78a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b78c:	e76a      	b.n	800b664 <_vfiprintf_r+0x78>
 800b78e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b792:	460c      	mov	r4, r1
 800b794:	2001      	movs	r0, #1
 800b796:	e7a8      	b.n	800b6ea <_vfiprintf_r+0xfe>
 800b798:	2300      	movs	r3, #0
 800b79a:	3401      	adds	r4, #1
 800b79c:	f04f 0c0a 	mov.w	ip, #10
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	9305      	str	r3, [sp, #20]
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7aa:	3a30      	subs	r2, #48	@ 0x30
 800b7ac:	2a09      	cmp	r2, #9
 800b7ae:	d903      	bls.n	800b7b8 <_vfiprintf_r+0x1cc>
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d0c6      	beq.n	800b742 <_vfiprintf_r+0x156>
 800b7b4:	9105      	str	r1, [sp, #20]
 800b7b6:	e7c4      	b.n	800b742 <_vfiprintf_r+0x156>
 800b7b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7bc:	4604      	mov	r4, r0
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e7f0      	b.n	800b7a4 <_vfiprintf_r+0x1b8>
 800b7c2:	ab03      	add	r3, sp, #12
 800b7c4:	462a      	mov	r2, r5
 800b7c6:	a904      	add	r1, sp, #16
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	4b11      	ldr	r3, [pc, #68]	@ (800b814 <_vfiprintf_r+0x228>)
 800b7ce:	f3af 8000 	nop.w
 800b7d2:	4607      	mov	r7, r0
 800b7d4:	1c78      	adds	r0, r7, #1
 800b7d6:	d1d6      	bne.n	800b786 <_vfiprintf_r+0x19a>
 800b7d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7da:	07d9      	lsls	r1, r3, #31
 800b7dc:	d405      	bmi.n	800b7ea <_vfiprintf_r+0x1fe>
 800b7de:	89ab      	ldrh	r3, [r5, #12]
 800b7e0:	059a      	lsls	r2, r3, #22
 800b7e2:	d402      	bmi.n	800b7ea <_vfiprintf_r+0x1fe>
 800b7e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7e6:	f7ff fc85 	bl	800b0f4 <__retarget_lock_release_recursive>
 800b7ea:	89ab      	ldrh	r3, [r5, #12]
 800b7ec:	065b      	lsls	r3, r3, #25
 800b7ee:	f53f af1f 	bmi.w	800b630 <_vfiprintf_r+0x44>
 800b7f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7f4:	e71e      	b.n	800b634 <_vfiprintf_r+0x48>
 800b7f6:	ab03      	add	r3, sp, #12
 800b7f8:	462a      	mov	r2, r5
 800b7fa:	a904      	add	r1, sp, #16
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	4b04      	ldr	r3, [pc, #16]	@ (800b814 <_vfiprintf_r+0x228>)
 800b802:	f000 f87d 	bl	800b900 <_printf_i>
 800b806:	e7e4      	b.n	800b7d2 <_vfiprintf_r+0x1e6>
 800b808:	0800c525 	.word	0x0800c525
 800b80c:	0800c52f 	.word	0x0800c52f
 800b810:	00000000 	.word	0x00000000
 800b814:	0800b5c7 	.word	0x0800b5c7
 800b818:	0800c52b 	.word	0x0800c52b

0800b81c <_printf_common>:
 800b81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b820:	4616      	mov	r6, r2
 800b822:	4698      	mov	r8, r3
 800b824:	688a      	ldr	r2, [r1, #8]
 800b826:	4607      	mov	r7, r0
 800b828:	690b      	ldr	r3, [r1, #16]
 800b82a:	460c      	mov	r4, r1
 800b82c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b830:	4293      	cmp	r3, r2
 800b832:	bfb8      	it	lt
 800b834:	4613      	movlt	r3, r2
 800b836:	6033      	str	r3, [r6, #0]
 800b838:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b83c:	b10a      	cbz	r2, 800b842 <_printf_common+0x26>
 800b83e:	3301      	adds	r3, #1
 800b840:	6033      	str	r3, [r6, #0]
 800b842:	6823      	ldr	r3, [r4, #0]
 800b844:	0699      	lsls	r1, r3, #26
 800b846:	bf42      	ittt	mi
 800b848:	6833      	ldrmi	r3, [r6, #0]
 800b84a:	3302      	addmi	r3, #2
 800b84c:	6033      	strmi	r3, [r6, #0]
 800b84e:	6825      	ldr	r5, [r4, #0]
 800b850:	f015 0506 	ands.w	r5, r5, #6
 800b854:	d106      	bne.n	800b864 <_printf_common+0x48>
 800b856:	f104 0a19 	add.w	sl, r4, #25
 800b85a:	68e3      	ldr	r3, [r4, #12]
 800b85c:	6832      	ldr	r2, [r6, #0]
 800b85e:	1a9b      	subs	r3, r3, r2
 800b860:	42ab      	cmp	r3, r5
 800b862:	dc2b      	bgt.n	800b8bc <_printf_common+0xa0>
 800b864:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b868:	6822      	ldr	r2, [r4, #0]
 800b86a:	3b00      	subs	r3, #0
 800b86c:	bf18      	it	ne
 800b86e:	2301      	movne	r3, #1
 800b870:	0692      	lsls	r2, r2, #26
 800b872:	d430      	bmi.n	800b8d6 <_printf_common+0xba>
 800b874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b878:	4641      	mov	r1, r8
 800b87a:	4638      	mov	r0, r7
 800b87c:	47c8      	blx	r9
 800b87e:	3001      	adds	r0, #1
 800b880:	d023      	beq.n	800b8ca <_printf_common+0xae>
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	341a      	adds	r4, #26
 800b886:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b88a:	f003 0306 	and.w	r3, r3, #6
 800b88e:	2b04      	cmp	r3, #4
 800b890:	bf0a      	itet	eq
 800b892:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b896:	2500      	movne	r5, #0
 800b898:	6833      	ldreq	r3, [r6, #0]
 800b89a:	f04f 0600 	mov.w	r6, #0
 800b89e:	bf08      	it	eq
 800b8a0:	1aed      	subeq	r5, r5, r3
 800b8a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b8a6:	bf08      	it	eq
 800b8a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	bfc4      	itt	gt
 800b8b0:	1a9b      	subgt	r3, r3, r2
 800b8b2:	18ed      	addgt	r5, r5, r3
 800b8b4:	42b5      	cmp	r5, r6
 800b8b6:	d11a      	bne.n	800b8ee <_printf_common+0xd2>
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	e008      	b.n	800b8ce <_printf_common+0xb2>
 800b8bc:	2301      	movs	r3, #1
 800b8be:	4652      	mov	r2, sl
 800b8c0:	4641      	mov	r1, r8
 800b8c2:	4638      	mov	r0, r7
 800b8c4:	47c8      	blx	r9
 800b8c6:	3001      	adds	r0, #1
 800b8c8:	d103      	bne.n	800b8d2 <_printf_common+0xb6>
 800b8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d2:	3501      	adds	r5, #1
 800b8d4:	e7c1      	b.n	800b85a <_printf_common+0x3e>
 800b8d6:	18e1      	adds	r1, r4, r3
 800b8d8:	1c5a      	adds	r2, r3, #1
 800b8da:	2030      	movs	r0, #48	@ 0x30
 800b8dc:	3302      	adds	r3, #2
 800b8de:	4422      	add	r2, r4
 800b8e0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8ec:	e7c2      	b.n	800b874 <_printf_common+0x58>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	4622      	mov	r2, r4
 800b8f2:	4641      	mov	r1, r8
 800b8f4:	4638      	mov	r0, r7
 800b8f6:	47c8      	blx	r9
 800b8f8:	3001      	adds	r0, #1
 800b8fa:	d0e6      	beq.n	800b8ca <_printf_common+0xae>
 800b8fc:	3601      	adds	r6, #1
 800b8fe:	e7d9      	b.n	800b8b4 <_printf_common+0x98>

0800b900 <_printf_i>:
 800b900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b904:	7e0f      	ldrb	r7, [r1, #24]
 800b906:	4691      	mov	r9, r2
 800b908:	4680      	mov	r8, r0
 800b90a:	460c      	mov	r4, r1
 800b90c:	2f78      	cmp	r7, #120	@ 0x78
 800b90e:	469a      	mov	sl, r3
 800b910:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b912:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b916:	d807      	bhi.n	800b928 <_printf_i+0x28>
 800b918:	2f62      	cmp	r7, #98	@ 0x62
 800b91a:	d80a      	bhi.n	800b932 <_printf_i+0x32>
 800b91c:	2f00      	cmp	r7, #0
 800b91e:	f000 80d2 	beq.w	800bac6 <_printf_i+0x1c6>
 800b922:	2f58      	cmp	r7, #88	@ 0x58
 800b924:	f000 80b9 	beq.w	800ba9a <_printf_i+0x19a>
 800b928:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b92c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b930:	e03a      	b.n	800b9a8 <_printf_i+0xa8>
 800b932:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b936:	2b15      	cmp	r3, #21
 800b938:	d8f6      	bhi.n	800b928 <_printf_i+0x28>
 800b93a:	a101      	add	r1, pc, #4	@ (adr r1, 800b940 <_printf_i+0x40>)
 800b93c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b940:	0800b999 	.word	0x0800b999
 800b944:	0800b9ad 	.word	0x0800b9ad
 800b948:	0800b929 	.word	0x0800b929
 800b94c:	0800b929 	.word	0x0800b929
 800b950:	0800b929 	.word	0x0800b929
 800b954:	0800b929 	.word	0x0800b929
 800b958:	0800b9ad 	.word	0x0800b9ad
 800b95c:	0800b929 	.word	0x0800b929
 800b960:	0800b929 	.word	0x0800b929
 800b964:	0800b929 	.word	0x0800b929
 800b968:	0800b929 	.word	0x0800b929
 800b96c:	0800baad 	.word	0x0800baad
 800b970:	0800b9d7 	.word	0x0800b9d7
 800b974:	0800ba67 	.word	0x0800ba67
 800b978:	0800b929 	.word	0x0800b929
 800b97c:	0800b929 	.word	0x0800b929
 800b980:	0800bacf 	.word	0x0800bacf
 800b984:	0800b929 	.word	0x0800b929
 800b988:	0800b9d7 	.word	0x0800b9d7
 800b98c:	0800b929 	.word	0x0800b929
 800b990:	0800b929 	.word	0x0800b929
 800b994:	0800ba6f 	.word	0x0800ba6f
 800b998:	6833      	ldr	r3, [r6, #0]
 800b99a:	1d1a      	adds	r2, r3, #4
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	6032      	str	r2, [r6, #0]
 800b9a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e09d      	b.n	800bae8 <_printf_i+0x1e8>
 800b9ac:	6833      	ldr	r3, [r6, #0]
 800b9ae:	6820      	ldr	r0, [r4, #0]
 800b9b0:	1d19      	adds	r1, r3, #4
 800b9b2:	6031      	str	r1, [r6, #0]
 800b9b4:	0606      	lsls	r6, r0, #24
 800b9b6:	d501      	bpl.n	800b9bc <_printf_i+0xbc>
 800b9b8:	681d      	ldr	r5, [r3, #0]
 800b9ba:	e003      	b.n	800b9c4 <_printf_i+0xc4>
 800b9bc:	0645      	lsls	r5, r0, #25
 800b9be:	d5fb      	bpl.n	800b9b8 <_printf_i+0xb8>
 800b9c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9c4:	2d00      	cmp	r5, #0
 800b9c6:	da03      	bge.n	800b9d0 <_printf_i+0xd0>
 800b9c8:	232d      	movs	r3, #45	@ 0x2d
 800b9ca:	426d      	negs	r5, r5
 800b9cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9d0:	4859      	ldr	r0, [pc, #356]	@ (800bb38 <_printf_i+0x238>)
 800b9d2:	230a      	movs	r3, #10
 800b9d4:	e011      	b.n	800b9fa <_printf_i+0xfa>
 800b9d6:	6821      	ldr	r1, [r4, #0]
 800b9d8:	6833      	ldr	r3, [r6, #0]
 800b9da:	0608      	lsls	r0, r1, #24
 800b9dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b9e0:	d402      	bmi.n	800b9e8 <_printf_i+0xe8>
 800b9e2:	0649      	lsls	r1, r1, #25
 800b9e4:	bf48      	it	mi
 800b9e6:	b2ad      	uxthmi	r5, r5
 800b9e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9ea:	6033      	str	r3, [r6, #0]
 800b9ec:	4852      	ldr	r0, [pc, #328]	@ (800bb38 <_printf_i+0x238>)
 800b9ee:	bf14      	ite	ne
 800b9f0:	230a      	movne	r3, #10
 800b9f2:	2308      	moveq	r3, #8
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9fa:	6866      	ldr	r6, [r4, #4]
 800b9fc:	2e00      	cmp	r6, #0
 800b9fe:	60a6      	str	r6, [r4, #8]
 800ba00:	bfa2      	ittt	ge
 800ba02:	6821      	ldrge	r1, [r4, #0]
 800ba04:	f021 0104 	bicge.w	r1, r1, #4
 800ba08:	6021      	strge	r1, [r4, #0]
 800ba0a:	b90d      	cbnz	r5, 800ba10 <_printf_i+0x110>
 800ba0c:	2e00      	cmp	r6, #0
 800ba0e:	d04b      	beq.n	800baa8 <_printf_i+0x1a8>
 800ba10:	4616      	mov	r6, r2
 800ba12:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba16:	fb03 5711 	mls	r7, r3, r1, r5
 800ba1a:	5dc7      	ldrb	r7, [r0, r7]
 800ba1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba20:	462f      	mov	r7, r5
 800ba22:	460d      	mov	r5, r1
 800ba24:	42bb      	cmp	r3, r7
 800ba26:	d9f4      	bls.n	800ba12 <_printf_i+0x112>
 800ba28:	2b08      	cmp	r3, #8
 800ba2a:	d10b      	bne.n	800ba44 <_printf_i+0x144>
 800ba2c:	6823      	ldr	r3, [r4, #0]
 800ba2e:	07df      	lsls	r7, r3, #31
 800ba30:	d508      	bpl.n	800ba44 <_printf_i+0x144>
 800ba32:	6923      	ldr	r3, [r4, #16]
 800ba34:	6861      	ldr	r1, [r4, #4]
 800ba36:	4299      	cmp	r1, r3
 800ba38:	bfde      	ittt	le
 800ba3a:	2330      	movle	r3, #48	@ 0x30
 800ba3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba40:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba44:	1b92      	subs	r2, r2, r6
 800ba46:	6122      	str	r2, [r4, #16]
 800ba48:	464b      	mov	r3, r9
 800ba4a:	aa03      	add	r2, sp, #12
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	4640      	mov	r0, r8
 800ba50:	f8cd a000 	str.w	sl, [sp]
 800ba54:	f7ff fee2 	bl	800b81c <_printf_common>
 800ba58:	3001      	adds	r0, #1
 800ba5a:	d14a      	bne.n	800baf2 <_printf_i+0x1f2>
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	b004      	add	sp, #16
 800ba62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	f043 0320 	orr.w	r3, r3, #32
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	2778      	movs	r7, #120	@ 0x78
 800ba70:	4832      	ldr	r0, [pc, #200]	@ (800bb3c <_printf_i+0x23c>)
 800ba72:	6823      	ldr	r3, [r4, #0]
 800ba74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba78:	061f      	lsls	r7, r3, #24
 800ba7a:	6831      	ldr	r1, [r6, #0]
 800ba7c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba80:	d402      	bmi.n	800ba88 <_printf_i+0x188>
 800ba82:	065f      	lsls	r7, r3, #25
 800ba84:	bf48      	it	mi
 800ba86:	b2ad      	uxthmi	r5, r5
 800ba88:	6031      	str	r1, [r6, #0]
 800ba8a:	07d9      	lsls	r1, r3, #31
 800ba8c:	bf44      	itt	mi
 800ba8e:	f043 0320 	orrmi.w	r3, r3, #32
 800ba92:	6023      	strmi	r3, [r4, #0]
 800ba94:	b11d      	cbz	r5, 800ba9e <_printf_i+0x19e>
 800ba96:	2310      	movs	r3, #16
 800ba98:	e7ac      	b.n	800b9f4 <_printf_i+0xf4>
 800ba9a:	4827      	ldr	r0, [pc, #156]	@ (800bb38 <_printf_i+0x238>)
 800ba9c:	e7e9      	b.n	800ba72 <_printf_i+0x172>
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	f023 0320 	bic.w	r3, r3, #32
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	e7f6      	b.n	800ba96 <_printf_i+0x196>
 800baa8:	4616      	mov	r6, r2
 800baaa:	e7bd      	b.n	800ba28 <_printf_i+0x128>
 800baac:	6833      	ldr	r3, [r6, #0]
 800baae:	6825      	ldr	r5, [r4, #0]
 800bab0:	1d18      	adds	r0, r3, #4
 800bab2:	6961      	ldr	r1, [r4, #20]
 800bab4:	6030      	str	r0, [r6, #0]
 800bab6:	062e      	lsls	r6, r5, #24
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	d501      	bpl.n	800bac0 <_printf_i+0x1c0>
 800babc:	6019      	str	r1, [r3, #0]
 800babe:	e002      	b.n	800bac6 <_printf_i+0x1c6>
 800bac0:	0668      	lsls	r0, r5, #25
 800bac2:	d5fb      	bpl.n	800babc <_printf_i+0x1bc>
 800bac4:	8019      	strh	r1, [r3, #0]
 800bac6:	2300      	movs	r3, #0
 800bac8:	4616      	mov	r6, r2
 800baca:	6123      	str	r3, [r4, #16]
 800bacc:	e7bc      	b.n	800ba48 <_printf_i+0x148>
 800bace:	6833      	ldr	r3, [r6, #0]
 800bad0:	2100      	movs	r1, #0
 800bad2:	1d1a      	adds	r2, r3, #4
 800bad4:	6032      	str	r2, [r6, #0]
 800bad6:	681e      	ldr	r6, [r3, #0]
 800bad8:	6862      	ldr	r2, [r4, #4]
 800bada:	4630      	mov	r0, r6
 800badc:	f000 f98a 	bl	800bdf4 <memchr>
 800bae0:	b108      	cbz	r0, 800bae6 <_printf_i+0x1e6>
 800bae2:	1b80      	subs	r0, r0, r6
 800bae4:	6060      	str	r0, [r4, #4]
 800bae6:	6863      	ldr	r3, [r4, #4]
 800bae8:	6123      	str	r3, [r4, #16]
 800baea:	2300      	movs	r3, #0
 800baec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baf0:	e7aa      	b.n	800ba48 <_printf_i+0x148>
 800baf2:	6923      	ldr	r3, [r4, #16]
 800baf4:	4632      	mov	r2, r6
 800baf6:	4649      	mov	r1, r9
 800baf8:	4640      	mov	r0, r8
 800bafa:	47d0      	blx	sl
 800bafc:	3001      	adds	r0, #1
 800bafe:	d0ad      	beq.n	800ba5c <_printf_i+0x15c>
 800bb00:	6823      	ldr	r3, [r4, #0]
 800bb02:	079b      	lsls	r3, r3, #30
 800bb04:	d413      	bmi.n	800bb2e <_printf_i+0x22e>
 800bb06:	68e0      	ldr	r0, [r4, #12]
 800bb08:	9b03      	ldr	r3, [sp, #12]
 800bb0a:	4298      	cmp	r0, r3
 800bb0c:	bfb8      	it	lt
 800bb0e:	4618      	movlt	r0, r3
 800bb10:	e7a6      	b.n	800ba60 <_printf_i+0x160>
 800bb12:	2301      	movs	r3, #1
 800bb14:	4632      	mov	r2, r6
 800bb16:	4649      	mov	r1, r9
 800bb18:	4640      	mov	r0, r8
 800bb1a:	47d0      	blx	sl
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	d09d      	beq.n	800ba5c <_printf_i+0x15c>
 800bb20:	3501      	adds	r5, #1
 800bb22:	68e3      	ldr	r3, [r4, #12]
 800bb24:	9903      	ldr	r1, [sp, #12]
 800bb26:	1a5b      	subs	r3, r3, r1
 800bb28:	42ab      	cmp	r3, r5
 800bb2a:	dcf2      	bgt.n	800bb12 <_printf_i+0x212>
 800bb2c:	e7eb      	b.n	800bb06 <_printf_i+0x206>
 800bb2e:	2500      	movs	r5, #0
 800bb30:	f104 0619 	add.w	r6, r4, #25
 800bb34:	e7f5      	b.n	800bb22 <_printf_i+0x222>
 800bb36:	bf00      	nop
 800bb38:	0800c536 	.word	0x0800c536
 800bb3c:	0800c547 	.word	0x0800c547

0800bb40 <__sflush_r>:
 800bb40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb48:	0716      	lsls	r6, r2, #28
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	d454      	bmi.n	800bbfa <__sflush_r+0xba>
 800bb50:	684b      	ldr	r3, [r1, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	dc02      	bgt.n	800bb5c <__sflush_r+0x1c>
 800bb56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	dd48      	ble.n	800bbee <__sflush_r+0xae>
 800bb5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb5e:	2e00      	cmp	r6, #0
 800bb60:	d045      	beq.n	800bbee <__sflush_r+0xae>
 800bb62:	2300      	movs	r3, #0
 800bb64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb68:	682f      	ldr	r7, [r5, #0]
 800bb6a:	6a21      	ldr	r1, [r4, #32]
 800bb6c:	602b      	str	r3, [r5, #0]
 800bb6e:	d030      	beq.n	800bbd2 <__sflush_r+0x92>
 800bb70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb72:	89a3      	ldrh	r3, [r4, #12]
 800bb74:	0759      	lsls	r1, r3, #29
 800bb76:	d505      	bpl.n	800bb84 <__sflush_r+0x44>
 800bb78:	6863      	ldr	r3, [r4, #4]
 800bb7a:	1ad2      	subs	r2, r2, r3
 800bb7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb7e:	b10b      	cbz	r3, 800bb84 <__sflush_r+0x44>
 800bb80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb82:	1ad2      	subs	r2, r2, r3
 800bb84:	2300      	movs	r3, #0
 800bb86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb88:	6a21      	ldr	r1, [r4, #32]
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	47b0      	blx	r6
 800bb8e:	1c43      	adds	r3, r0, #1
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	d106      	bne.n	800bba2 <__sflush_r+0x62>
 800bb94:	6829      	ldr	r1, [r5, #0]
 800bb96:	291d      	cmp	r1, #29
 800bb98:	d82b      	bhi.n	800bbf2 <__sflush_r+0xb2>
 800bb9a:	4a2a      	ldr	r2, [pc, #168]	@ (800bc44 <__sflush_r+0x104>)
 800bb9c:	410a      	asrs	r2, r1
 800bb9e:	07d6      	lsls	r6, r2, #31
 800bba0:	d427      	bmi.n	800bbf2 <__sflush_r+0xb2>
 800bba2:	2200      	movs	r2, #0
 800bba4:	04d9      	lsls	r1, r3, #19
 800bba6:	6062      	str	r2, [r4, #4]
 800bba8:	6922      	ldr	r2, [r4, #16]
 800bbaa:	6022      	str	r2, [r4, #0]
 800bbac:	d504      	bpl.n	800bbb8 <__sflush_r+0x78>
 800bbae:	1c42      	adds	r2, r0, #1
 800bbb0:	d101      	bne.n	800bbb6 <__sflush_r+0x76>
 800bbb2:	682b      	ldr	r3, [r5, #0]
 800bbb4:	b903      	cbnz	r3, 800bbb8 <__sflush_r+0x78>
 800bbb6:	6560      	str	r0, [r4, #84]	@ 0x54
 800bbb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbba:	602f      	str	r7, [r5, #0]
 800bbbc:	b1b9      	cbz	r1, 800bbee <__sflush_r+0xae>
 800bbbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbc2:	4299      	cmp	r1, r3
 800bbc4:	d002      	beq.n	800bbcc <__sflush_r+0x8c>
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f7ff fa96 	bl	800b0f8 <_free_r>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbd0:	e00d      	b.n	800bbee <__sflush_r+0xae>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	47b0      	blx	r6
 800bbd8:	4602      	mov	r2, r0
 800bbda:	1c50      	adds	r0, r2, #1
 800bbdc:	d1c9      	bne.n	800bb72 <__sflush_r+0x32>
 800bbde:	682b      	ldr	r3, [r5, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d0c6      	beq.n	800bb72 <__sflush_r+0x32>
 800bbe4:	2b1d      	cmp	r3, #29
 800bbe6:	d001      	beq.n	800bbec <__sflush_r+0xac>
 800bbe8:	2b16      	cmp	r3, #22
 800bbea:	d11d      	bne.n	800bc28 <__sflush_r+0xe8>
 800bbec:	602f      	str	r7, [r5, #0]
 800bbee:	2000      	movs	r0, #0
 800bbf0:	e021      	b.n	800bc36 <__sflush_r+0xf6>
 800bbf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbf6:	b21b      	sxth	r3, r3
 800bbf8:	e01a      	b.n	800bc30 <__sflush_r+0xf0>
 800bbfa:	690f      	ldr	r7, [r1, #16]
 800bbfc:	2f00      	cmp	r7, #0
 800bbfe:	d0f6      	beq.n	800bbee <__sflush_r+0xae>
 800bc00:	0793      	lsls	r3, r2, #30
 800bc02:	680e      	ldr	r6, [r1, #0]
 800bc04:	600f      	str	r7, [r1, #0]
 800bc06:	bf0c      	ite	eq
 800bc08:	694b      	ldreq	r3, [r1, #20]
 800bc0a:	2300      	movne	r3, #0
 800bc0c:	eba6 0807 	sub.w	r8, r6, r7
 800bc10:	608b      	str	r3, [r1, #8]
 800bc12:	f1b8 0f00 	cmp.w	r8, #0
 800bc16:	ddea      	ble.n	800bbee <__sflush_r+0xae>
 800bc18:	4643      	mov	r3, r8
 800bc1a:	463a      	mov	r2, r7
 800bc1c:	6a21      	ldr	r1, [r4, #32]
 800bc1e:	4628      	mov	r0, r5
 800bc20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc22:	47b0      	blx	r6
 800bc24:	2800      	cmp	r0, #0
 800bc26:	dc08      	bgt.n	800bc3a <__sflush_r+0xfa>
 800bc28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc30:	f04f 30ff 	mov.w	r0, #4294967295
 800bc34:	81a3      	strh	r3, [r4, #12]
 800bc36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc3a:	4407      	add	r7, r0
 800bc3c:	eba8 0800 	sub.w	r8, r8, r0
 800bc40:	e7e7      	b.n	800bc12 <__sflush_r+0xd2>
 800bc42:	bf00      	nop
 800bc44:	dfbffffe 	.word	0xdfbffffe

0800bc48 <_fflush_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	690b      	ldr	r3, [r1, #16]
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	460c      	mov	r4, r1
 800bc50:	b913      	cbnz	r3, 800bc58 <_fflush_r+0x10>
 800bc52:	2500      	movs	r5, #0
 800bc54:	4628      	mov	r0, r5
 800bc56:	bd38      	pop	{r3, r4, r5, pc}
 800bc58:	b118      	cbz	r0, 800bc62 <_fflush_r+0x1a>
 800bc5a:	6a03      	ldr	r3, [r0, #32]
 800bc5c:	b90b      	cbnz	r3, 800bc62 <_fflush_r+0x1a>
 800bc5e:	f7ff f81d 	bl	800ac9c <__sinit>
 800bc62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d0f3      	beq.n	800bc52 <_fflush_r+0xa>
 800bc6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc6c:	07d0      	lsls	r0, r2, #31
 800bc6e:	d404      	bmi.n	800bc7a <_fflush_r+0x32>
 800bc70:	0599      	lsls	r1, r3, #22
 800bc72:	d402      	bmi.n	800bc7a <_fflush_r+0x32>
 800bc74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc76:	f7ff fa3c 	bl	800b0f2 <__retarget_lock_acquire_recursive>
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	f7ff ff5f 	bl	800bb40 <__sflush_r>
 800bc82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc84:	4605      	mov	r5, r0
 800bc86:	07da      	lsls	r2, r3, #31
 800bc88:	d4e4      	bmi.n	800bc54 <_fflush_r+0xc>
 800bc8a:	89a3      	ldrh	r3, [r4, #12]
 800bc8c:	059b      	lsls	r3, r3, #22
 800bc8e:	d4e1      	bmi.n	800bc54 <_fflush_r+0xc>
 800bc90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc92:	f7ff fa2f 	bl	800b0f4 <__retarget_lock_release_recursive>
 800bc96:	e7dd      	b.n	800bc54 <_fflush_r+0xc>

0800bc98 <__swhatbuf_r>:
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca0:	b096      	sub	sp, #88	@ 0x58
 800bca2:	4615      	mov	r5, r2
 800bca4:	2900      	cmp	r1, #0
 800bca6:	461e      	mov	r6, r3
 800bca8:	da0c      	bge.n	800bcc4 <__swhatbuf_r+0x2c>
 800bcaa:	89a3      	ldrh	r3, [r4, #12]
 800bcac:	2100      	movs	r1, #0
 800bcae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bcb2:	bf14      	ite	ne
 800bcb4:	2340      	movne	r3, #64	@ 0x40
 800bcb6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bcba:	2000      	movs	r0, #0
 800bcbc:	6031      	str	r1, [r6, #0]
 800bcbe:	602b      	str	r3, [r5, #0]
 800bcc0:	b016      	add	sp, #88	@ 0x58
 800bcc2:	bd70      	pop	{r4, r5, r6, pc}
 800bcc4:	466a      	mov	r2, sp
 800bcc6:	f000 f863 	bl	800bd90 <_fstat_r>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	dbed      	blt.n	800bcaa <__swhatbuf_r+0x12>
 800bcce:	9901      	ldr	r1, [sp, #4]
 800bcd0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bcd4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcd8:	4259      	negs	r1, r3
 800bcda:	4159      	adcs	r1, r3
 800bcdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bce0:	e7eb      	b.n	800bcba <__swhatbuf_r+0x22>

0800bce2 <__smakebuf_r>:
 800bce2:	898b      	ldrh	r3, [r1, #12]
 800bce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bce6:	079d      	lsls	r5, r3, #30
 800bce8:	4606      	mov	r6, r0
 800bcea:	460c      	mov	r4, r1
 800bcec:	d507      	bpl.n	800bcfe <__smakebuf_r+0x1c>
 800bcee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bcf2:	6023      	str	r3, [r4, #0]
 800bcf4:	6123      	str	r3, [r4, #16]
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	6163      	str	r3, [r4, #20]
 800bcfa:	b003      	add	sp, #12
 800bcfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcfe:	ab01      	add	r3, sp, #4
 800bd00:	466a      	mov	r2, sp
 800bd02:	f7ff ffc9 	bl	800bc98 <__swhatbuf_r>
 800bd06:	9f00      	ldr	r7, [sp, #0]
 800bd08:	4605      	mov	r5, r0
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	4639      	mov	r1, r7
 800bd0e:	f7ff fa5f 	bl	800b1d0 <_malloc_r>
 800bd12:	b948      	cbnz	r0, 800bd28 <__smakebuf_r+0x46>
 800bd14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd18:	059a      	lsls	r2, r3, #22
 800bd1a:	d4ee      	bmi.n	800bcfa <__smakebuf_r+0x18>
 800bd1c:	f023 0303 	bic.w	r3, r3, #3
 800bd20:	f043 0302 	orr.w	r3, r3, #2
 800bd24:	81a3      	strh	r3, [r4, #12]
 800bd26:	e7e2      	b.n	800bcee <__smakebuf_r+0xc>
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	6020      	str	r0, [r4, #0]
 800bd2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd30:	81a3      	strh	r3, [r4, #12]
 800bd32:	9b01      	ldr	r3, [sp, #4]
 800bd34:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd38:	b15b      	cbz	r3, 800bd52 <__smakebuf_r+0x70>
 800bd3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f000 f838 	bl	800bdb4 <_isatty_r>
 800bd44:	b128      	cbz	r0, 800bd52 <__smakebuf_r+0x70>
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	f023 0303 	bic.w	r3, r3, #3
 800bd4c:	f043 0301 	orr.w	r3, r3, #1
 800bd50:	81a3      	strh	r3, [r4, #12]
 800bd52:	89a3      	ldrh	r3, [r4, #12]
 800bd54:	431d      	orrs	r5, r3
 800bd56:	81a5      	strh	r5, [r4, #12]
 800bd58:	e7cf      	b.n	800bcfa <__smakebuf_r+0x18>

0800bd5a <memmove>:
 800bd5a:	4288      	cmp	r0, r1
 800bd5c:	b510      	push	{r4, lr}
 800bd5e:	eb01 0402 	add.w	r4, r1, r2
 800bd62:	d902      	bls.n	800bd6a <memmove+0x10>
 800bd64:	4284      	cmp	r4, r0
 800bd66:	4623      	mov	r3, r4
 800bd68:	d807      	bhi.n	800bd7a <memmove+0x20>
 800bd6a:	1e43      	subs	r3, r0, #1
 800bd6c:	42a1      	cmp	r1, r4
 800bd6e:	d008      	beq.n	800bd82 <memmove+0x28>
 800bd70:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd74:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd78:	e7f8      	b.n	800bd6c <memmove+0x12>
 800bd7a:	4402      	add	r2, r0
 800bd7c:	4601      	mov	r1, r0
 800bd7e:	428a      	cmp	r2, r1
 800bd80:	d100      	bne.n	800bd84 <memmove+0x2a>
 800bd82:	bd10      	pop	{r4, pc}
 800bd84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd88:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd8c:	e7f7      	b.n	800bd7e <memmove+0x24>
	...

0800bd90 <_fstat_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	2300      	movs	r3, #0
 800bd94:	4d06      	ldr	r5, [pc, #24]	@ (800bdb0 <_fstat_r+0x20>)
 800bd96:	4604      	mov	r4, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	4611      	mov	r1, r2
 800bd9c:	602b      	str	r3, [r5, #0]
 800bd9e:	f7f6 f81f 	bl	8001de0 <_fstat>
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	d102      	bne.n	800bdac <_fstat_r+0x1c>
 800bda6:	682b      	ldr	r3, [r5, #0]
 800bda8:	b103      	cbz	r3, 800bdac <_fstat_r+0x1c>
 800bdaa:	6023      	str	r3, [r4, #0]
 800bdac:	bd38      	pop	{r3, r4, r5, pc}
 800bdae:	bf00      	nop
 800bdb0:	2000079c 	.word	0x2000079c

0800bdb4 <_isatty_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	4d05      	ldr	r5, [pc, #20]	@ (800bdd0 <_isatty_r+0x1c>)
 800bdba:	4604      	mov	r4, r0
 800bdbc:	4608      	mov	r0, r1
 800bdbe:	602b      	str	r3, [r5, #0]
 800bdc0:	f7f6 f81e 	bl	8001e00 <_isatty>
 800bdc4:	1c43      	adds	r3, r0, #1
 800bdc6:	d102      	bne.n	800bdce <_isatty_r+0x1a>
 800bdc8:	682b      	ldr	r3, [r5, #0]
 800bdca:	b103      	cbz	r3, 800bdce <_isatty_r+0x1a>
 800bdcc:	6023      	str	r3, [r4, #0]
 800bdce:	bd38      	pop	{r3, r4, r5, pc}
 800bdd0:	2000079c 	.word	0x2000079c

0800bdd4 <_sbrk_r>:
 800bdd4:	b538      	push	{r3, r4, r5, lr}
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	4d05      	ldr	r5, [pc, #20]	@ (800bdf0 <_sbrk_r+0x1c>)
 800bdda:	4604      	mov	r4, r0
 800bddc:	4608      	mov	r0, r1
 800bdde:	602b      	str	r3, [r5, #0]
 800bde0:	f7f6 f826 	bl	8001e30 <_sbrk>
 800bde4:	1c43      	adds	r3, r0, #1
 800bde6:	d102      	bne.n	800bdee <_sbrk_r+0x1a>
 800bde8:	682b      	ldr	r3, [r5, #0]
 800bdea:	b103      	cbz	r3, 800bdee <_sbrk_r+0x1a>
 800bdec:	6023      	str	r3, [r4, #0]
 800bdee:	bd38      	pop	{r3, r4, r5, pc}
 800bdf0:	2000079c 	.word	0x2000079c

0800bdf4 <memchr>:
 800bdf4:	b2c9      	uxtb	r1, r1
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	4402      	add	r2, r0
 800bdfa:	b510      	push	{r4, lr}
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	4618      	mov	r0, r3
 800be00:	d101      	bne.n	800be06 <memchr+0x12>
 800be02:	2000      	movs	r0, #0
 800be04:	e003      	b.n	800be0e <memchr+0x1a>
 800be06:	7804      	ldrb	r4, [r0, #0]
 800be08:	3301      	adds	r3, #1
 800be0a:	428c      	cmp	r4, r1
 800be0c:	d1f6      	bne.n	800bdfc <memchr+0x8>
 800be0e:	bd10      	pop	{r4, pc}

0800be10 <memcpy>:
 800be10:	440a      	add	r2, r1
 800be12:	1e43      	subs	r3, r0, #1
 800be14:	4291      	cmp	r1, r2
 800be16:	d100      	bne.n	800be1a <memcpy+0xa>
 800be18:	4770      	bx	lr
 800be1a:	b510      	push	{r4, lr}
 800be1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be20:	4291      	cmp	r1, r2
 800be22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be26:	d1f9      	bne.n	800be1c <memcpy+0xc>
 800be28:	bd10      	pop	{r4, pc}

0800be2a <_realloc_r>:
 800be2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be2e:	4680      	mov	r8, r0
 800be30:	4615      	mov	r5, r2
 800be32:	460c      	mov	r4, r1
 800be34:	b921      	cbnz	r1, 800be40 <_realloc_r+0x16>
 800be36:	4611      	mov	r1, r2
 800be38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be3c:	f7ff b9c8 	b.w	800b1d0 <_malloc_r>
 800be40:	b92a      	cbnz	r2, 800be4e <_realloc_r+0x24>
 800be42:	f7ff f959 	bl	800b0f8 <_free_r>
 800be46:	2400      	movs	r4, #0
 800be48:	4620      	mov	r0, r4
 800be4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be4e:	f000 f81a 	bl	800be86 <_malloc_usable_size_r>
 800be52:	4285      	cmp	r5, r0
 800be54:	4606      	mov	r6, r0
 800be56:	d802      	bhi.n	800be5e <_realloc_r+0x34>
 800be58:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800be5c:	d8f4      	bhi.n	800be48 <_realloc_r+0x1e>
 800be5e:	4629      	mov	r1, r5
 800be60:	4640      	mov	r0, r8
 800be62:	f7ff f9b5 	bl	800b1d0 <_malloc_r>
 800be66:	4607      	mov	r7, r0
 800be68:	2800      	cmp	r0, #0
 800be6a:	d0ec      	beq.n	800be46 <_realloc_r+0x1c>
 800be6c:	42b5      	cmp	r5, r6
 800be6e:	462a      	mov	r2, r5
 800be70:	4621      	mov	r1, r4
 800be72:	bf28      	it	cs
 800be74:	4632      	movcs	r2, r6
 800be76:	f7ff ffcb 	bl	800be10 <memcpy>
 800be7a:	4621      	mov	r1, r4
 800be7c:	4640      	mov	r0, r8
 800be7e:	463c      	mov	r4, r7
 800be80:	f7ff f93a 	bl	800b0f8 <_free_r>
 800be84:	e7e0      	b.n	800be48 <_realloc_r+0x1e>

0800be86 <_malloc_usable_size_r>:
 800be86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be8a:	1f18      	subs	r0, r3, #4
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	bfbc      	itt	lt
 800be90:	580b      	ldrlt	r3, [r1, r0]
 800be92:	18c0      	addlt	r0, r0, r3
 800be94:	4770      	bx	lr
	...

0800be98 <ceil>:
 800be98:	ec51 0b10 	vmov	r0, r1, d0
 800be9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800bea8:	460c      	mov	r4, r1
 800beaa:	4605      	mov	r5, r0
 800beac:	4680      	mov	r8, r0
 800beae:	2e13      	cmp	r6, #19
 800beb0:	dc2f      	bgt.n	800bf12 <ceil+0x7a>
 800beb2:	2e00      	cmp	r6, #0
 800beb4:	da11      	bge.n	800beda <ceil+0x42>
 800beb6:	a332      	add	r3, pc, #200	@ (adr r3, 800bf80 <ceil+0xe8>)
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	f7f4 fa2a 	bl	8000314 <__adddf3>
 800bec0:	2200      	movs	r2, #0
 800bec2:	2300      	movs	r3, #0
 800bec4:	f7f4 fe6c 	bl	8000ba0 <__aeabi_dcmpgt>
 800bec8:	b120      	cbz	r0, 800bed4 <ceil+0x3c>
 800beca:	2c00      	cmp	r4, #0
 800becc:	db50      	blt.n	800bf70 <ceil+0xd8>
 800bece:	4325      	orrs	r5, r4
 800bed0:	d152      	bne.n	800bf78 <ceil+0xe0>
 800bed2:	462c      	mov	r4, r5
 800bed4:	4621      	mov	r1, r4
 800bed6:	4628      	mov	r0, r5
 800bed8:	e024      	b.n	800bf24 <ceil+0x8c>
 800beda:	4f2b      	ldr	r7, [pc, #172]	@ (800bf88 <ceil+0xf0>)
 800bedc:	4137      	asrs	r7, r6
 800bede:	ea01 0307 	and.w	r3, r1, r7
 800bee2:	4303      	orrs	r3, r0
 800bee4:	d01e      	beq.n	800bf24 <ceil+0x8c>
 800bee6:	a326      	add	r3, pc, #152	@ (adr r3, 800bf80 <ceil+0xe8>)
 800bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beec:	f7f4 fa12 	bl	8000314 <__adddf3>
 800bef0:	2200      	movs	r2, #0
 800bef2:	2300      	movs	r3, #0
 800bef4:	f7f4 fe54 	bl	8000ba0 <__aeabi_dcmpgt>
 800bef8:	2800      	cmp	r0, #0
 800befa:	d0eb      	beq.n	800bed4 <ceil+0x3c>
 800befc:	2c00      	cmp	r4, #0
 800befe:	f04f 0500 	mov.w	r5, #0
 800bf02:	bfc2      	ittt	gt
 800bf04:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 800bf08:	4133      	asrgt	r3, r6
 800bf0a:	18e4      	addgt	r4, r4, r3
 800bf0c:	ea24 0407 	bic.w	r4, r4, r7
 800bf10:	e7e0      	b.n	800bed4 <ceil+0x3c>
 800bf12:	2e33      	cmp	r6, #51	@ 0x33
 800bf14:	dd0a      	ble.n	800bf2c <ceil+0x94>
 800bf16:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800bf1a:	d103      	bne.n	800bf24 <ceil+0x8c>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	f7f4 f9f8 	bl	8000314 <__adddf3>
 800bf24:	ec41 0b10 	vmov	d0, r0, r1
 800bf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf2c:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800bf30:	f04f 37ff 	mov.w	r7, #4294967295
 800bf34:	40df      	lsrs	r7, r3
 800bf36:	4238      	tst	r0, r7
 800bf38:	d0f4      	beq.n	800bf24 <ceil+0x8c>
 800bf3a:	a311      	add	r3, pc, #68	@ (adr r3, 800bf80 <ceil+0xe8>)
 800bf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf40:	f7f4 f9e8 	bl	8000314 <__adddf3>
 800bf44:	2200      	movs	r2, #0
 800bf46:	2300      	movs	r3, #0
 800bf48:	f7f4 fe2a 	bl	8000ba0 <__aeabi_dcmpgt>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d0c1      	beq.n	800bed4 <ceil+0x3c>
 800bf50:	2c00      	cmp	r4, #0
 800bf52:	dd0a      	ble.n	800bf6a <ceil+0xd2>
 800bf54:	2e14      	cmp	r6, #20
 800bf56:	d101      	bne.n	800bf5c <ceil+0xc4>
 800bf58:	3401      	adds	r4, #1
 800bf5a:	e006      	b.n	800bf6a <ceil+0xd2>
 800bf5c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800bf60:	2301      	movs	r3, #1
 800bf62:	40b3      	lsls	r3, r6
 800bf64:	441d      	add	r5, r3
 800bf66:	45a8      	cmp	r8, r5
 800bf68:	d8f6      	bhi.n	800bf58 <ceil+0xc0>
 800bf6a:	ea25 0507 	bic.w	r5, r5, r7
 800bf6e:	e7b1      	b.n	800bed4 <ceil+0x3c>
 800bf70:	2500      	movs	r5, #0
 800bf72:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800bf76:	e7ad      	b.n	800bed4 <ceil+0x3c>
 800bf78:	2500      	movs	r5, #0
 800bf7a:	4c04      	ldr	r4, [pc, #16]	@ (800bf8c <ceil+0xf4>)
 800bf7c:	e7aa      	b.n	800bed4 <ceil+0x3c>
 800bf7e:	bf00      	nop
 800bf80:	8800759c 	.word	0x8800759c
 800bf84:	7e37e43c 	.word	0x7e37e43c
 800bf88:	000fffff 	.word	0x000fffff
 800bf8c:	3ff00000 	.word	0x3ff00000

0800bf90 <floor>:
 800bf90:	ec51 0b10 	vmov	r0, r1, d0
 800bf94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bf98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800bfa0:	460c      	mov	r4, r1
 800bfa2:	4605      	mov	r5, r0
 800bfa4:	4680      	mov	r8, r0
 800bfa6:	2e13      	cmp	r6, #19
 800bfa8:	dc35      	bgt.n	800c016 <floor+0x86>
 800bfaa:	2e00      	cmp	r6, #0
 800bfac:	da17      	bge.n	800bfde <floor+0x4e>
 800bfae:	a334      	add	r3, pc, #208	@ (adr r3, 800c080 <floor+0xf0>)
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	f7f4 f9ae 	bl	8000314 <__adddf3>
 800bfb8:	2200      	movs	r2, #0
 800bfba:	2300      	movs	r3, #0
 800bfbc:	f7f4 fdf0 	bl	8000ba0 <__aeabi_dcmpgt>
 800bfc0:	b150      	cbz	r0, 800bfd8 <floor+0x48>
 800bfc2:	2c00      	cmp	r4, #0
 800bfc4:	da56      	bge.n	800c074 <floor+0xe4>
 800bfc6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800bfca:	432c      	orrs	r4, r5
 800bfcc:	2500      	movs	r5, #0
 800bfce:	42ac      	cmp	r4, r5
 800bfd0:	4c2d      	ldr	r4, [pc, #180]	@ (800c088 <floor+0xf8>)
 800bfd2:	bf08      	it	eq
 800bfd4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800bfd8:	4621      	mov	r1, r4
 800bfda:	4628      	mov	r0, r5
 800bfdc:	e024      	b.n	800c028 <floor+0x98>
 800bfde:	4f2b      	ldr	r7, [pc, #172]	@ (800c08c <floor+0xfc>)
 800bfe0:	4137      	asrs	r7, r6
 800bfe2:	ea01 0307 	and.w	r3, r1, r7
 800bfe6:	4303      	orrs	r3, r0
 800bfe8:	d01e      	beq.n	800c028 <floor+0x98>
 800bfea:	a325      	add	r3, pc, #148	@ (adr r3, 800c080 <floor+0xf0>)
 800bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff0:	f7f4 f990 	bl	8000314 <__adddf3>
 800bff4:	2200      	movs	r2, #0
 800bff6:	2300      	movs	r3, #0
 800bff8:	f7f4 fdd2 	bl	8000ba0 <__aeabi_dcmpgt>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d0eb      	beq.n	800bfd8 <floor+0x48>
 800c000:	2c00      	cmp	r4, #0
 800c002:	f04f 0500 	mov.w	r5, #0
 800c006:	bfbe      	ittt	lt
 800c008:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c00c:	4133      	asrlt	r3, r6
 800c00e:	18e4      	addlt	r4, r4, r3
 800c010:	ea24 0407 	bic.w	r4, r4, r7
 800c014:	e7e0      	b.n	800bfd8 <floor+0x48>
 800c016:	2e33      	cmp	r6, #51	@ 0x33
 800c018:	dd0a      	ble.n	800c030 <floor+0xa0>
 800c01a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c01e:	d103      	bne.n	800c028 <floor+0x98>
 800c020:	4602      	mov	r2, r0
 800c022:	460b      	mov	r3, r1
 800c024:	f7f4 f976 	bl	8000314 <__adddf3>
 800c028:	ec41 0b10 	vmov	d0, r0, r1
 800c02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c030:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c034:	f04f 37ff 	mov.w	r7, #4294967295
 800c038:	40df      	lsrs	r7, r3
 800c03a:	4207      	tst	r7, r0
 800c03c:	d0f4      	beq.n	800c028 <floor+0x98>
 800c03e:	a310      	add	r3, pc, #64	@ (adr r3, 800c080 <floor+0xf0>)
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	f7f4 f966 	bl	8000314 <__adddf3>
 800c048:	2200      	movs	r2, #0
 800c04a:	2300      	movs	r3, #0
 800c04c:	f7f4 fda8 	bl	8000ba0 <__aeabi_dcmpgt>
 800c050:	2800      	cmp	r0, #0
 800c052:	d0c1      	beq.n	800bfd8 <floor+0x48>
 800c054:	2c00      	cmp	r4, #0
 800c056:	da0a      	bge.n	800c06e <floor+0xde>
 800c058:	2e14      	cmp	r6, #20
 800c05a:	d101      	bne.n	800c060 <floor+0xd0>
 800c05c:	3401      	adds	r4, #1
 800c05e:	e006      	b.n	800c06e <floor+0xde>
 800c060:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c064:	2301      	movs	r3, #1
 800c066:	40b3      	lsls	r3, r6
 800c068:	441d      	add	r5, r3
 800c06a:	4545      	cmp	r5, r8
 800c06c:	d3f6      	bcc.n	800c05c <floor+0xcc>
 800c06e:	ea25 0507 	bic.w	r5, r5, r7
 800c072:	e7b1      	b.n	800bfd8 <floor+0x48>
 800c074:	2500      	movs	r5, #0
 800c076:	462c      	mov	r4, r5
 800c078:	e7ae      	b.n	800bfd8 <floor+0x48>
 800c07a:	bf00      	nop
 800c07c:	f3af 8000 	nop.w
 800c080:	8800759c 	.word	0x8800759c
 800c084:	7e37e43c 	.word	0x7e37e43c
 800c088:	bff00000 	.word	0xbff00000
 800c08c:	000fffff 	.word	0x000fffff

0800c090 <round>:
 800c090:	ec51 0b10 	vmov	r0, r1, d0
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800c09a:	460b      	mov	r3, r1
 800c09c:	4605      	mov	r5, r0
 800c09e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800c0a2:	2a13      	cmp	r2, #19
 800c0a4:	dc1b      	bgt.n	800c0de <round+0x4e>
 800c0a6:	2a00      	cmp	r2, #0
 800c0a8:	da0b      	bge.n	800c0c2 <round+0x32>
 800c0aa:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800c0ae:	3201      	adds	r2, #1
 800c0b0:	bf04      	itt	eq
 800c0b2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800c0b6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	4619      	mov	r1, r3
 800c0be:	4610      	mov	r0, r2
 800c0c0:	e015      	b.n	800c0ee <round+0x5e>
 800c0c2:	4c15      	ldr	r4, [pc, #84]	@ (800c118 <round+0x88>)
 800c0c4:	4114      	asrs	r4, r2
 800c0c6:	ea04 0601 	and.w	r6, r4, r1
 800c0ca:	4306      	orrs	r6, r0
 800c0cc:	d00f      	beq.n	800c0ee <round+0x5e>
 800c0ce:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800c0d2:	fa41 f202 	asr.w	r2, r1, r2
 800c0d6:	4413      	add	r3, r2
 800c0d8:	ea23 0304 	bic.w	r3, r3, r4
 800c0dc:	e7ed      	b.n	800c0ba <round+0x2a>
 800c0de:	2a33      	cmp	r2, #51	@ 0x33
 800c0e0:	dd08      	ble.n	800c0f4 <round+0x64>
 800c0e2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800c0e6:	d102      	bne.n	800c0ee <round+0x5e>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	f7f4 f913 	bl	8000314 <__adddf3>
 800c0ee:	ec41 0b10 	vmov	d0, r0, r1
 800c0f2:	bd70      	pop	{r4, r5, r6, pc}
 800c0f4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800c0f8:	f04f 34ff 	mov.w	r4, #4294967295
 800c0fc:	40f4      	lsrs	r4, r6
 800c0fe:	4204      	tst	r4, r0
 800c100:	d0f5      	beq.n	800c0ee <round+0x5e>
 800c102:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800c106:	2201      	movs	r2, #1
 800c108:	408a      	lsls	r2, r1
 800c10a:	1952      	adds	r2, r2, r5
 800c10c:	bf28      	it	cs
 800c10e:	3301      	addcs	r3, #1
 800c110:	ea22 0204 	bic.w	r2, r2, r4
 800c114:	e7d2      	b.n	800c0bc <round+0x2c>
 800c116:	bf00      	nop
 800c118:	000fffff 	.word	0x000fffff

0800c11c <_init>:
 800c11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11e:	bf00      	nop
 800c120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c122:	bc08      	pop	{r3}
 800c124:	469e      	mov	lr, r3
 800c126:	4770      	bx	lr

0800c128 <_fini>:
 800c128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12a:	bf00      	nop
 800c12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c12e:	bc08      	pop	{r3}
 800c130:	469e      	mov	lr, r3
 800c132:	4770      	bx	lr
