
HelloWorldWithAccount.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7f4  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800ba2c  0800ba2c  0000ca2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be28  0800be28  0000ce28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be30  0800be30  0000ce30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800be34  0800be34  0000ce34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000098  20000000  0800be38  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006a0  20000098  0800bed0  0000d098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000738  0800bed0  0000d738  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bba1  00000000  00000000  0000d0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044b8  00000000  00000000  00028c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016d0  00000000  00000000  0002d128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000111a  00000000  00000000  0002e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034466  00000000  00000000  0002f912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000209c7  00000000  00000000  00063d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012c187  00000000  00000000  0008473f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b08c6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067c0  00000000  00000000  001b090c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  001b70cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000098 	.word	0x20000098
 8000254:	00000000 	.word	0x00000000
 8000258:	0800ba14 	.word	0x0800ba14

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000009c 	.word	0x2000009c
 8000274:	0800ba14 	.word	0x0800ba14

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2iz>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b3c:	d215      	bcs.n	8000b6a <__aeabi_d2iz+0x36>
 8000b3e:	d511      	bpl.n	8000b64 <__aeabi_d2iz+0x30>
 8000b40:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d912      	bls.n	8000b70 <__aeabi_d2iz+0x3c>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d105      	bne.n	8000b7c <__aeabi_d2iz+0x48>
 8000b70:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	bf08      	it	eq
 8000b76:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_d2uiz>:
 8000b84:	004a      	lsls	r2, r1, #1
 8000b86:	d211      	bcs.n	8000bac <__aeabi_d2uiz+0x28>
 8000b88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b8c:	d211      	bcs.n	8000bb2 <__aeabi_d2uiz+0x2e>
 8000b8e:	d50d      	bpl.n	8000bac <__aeabi_d2uiz+0x28>
 8000b90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b98:	d40e      	bmi.n	8000bb8 <__aeabi_d2uiz+0x34>
 8000b9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d102      	bne.n	8000bbe <__aeabi_d2uiz+0x3a>
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	4770      	bx	lr
 8000bbe:	f04f 0000 	mov.w	r0, #0
 8000bc2:	4770      	bx	lr

08000bc4 <startSystem>:


#include "stm32u5xx_hal.h"


void startSystem() {
 8000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0


	int window1Status = checkWindow1Status();
 8000bca:	f000 f901 	bl	8000dd0 <checkWindow1Status>
 8000bce:	60f8      	str	r0, [r7, #12]
	int window2Status = checkWindow2Status();
 8000bd0:	f000 f910 	bl	8000df4 <checkWindow2Status>
 8000bd4:	60b8      	str	r0, [r7, #8]
	int window3Status = checkWindow3Status();
 8000bd6:	f000 f91d 	bl	8000e14 <checkWindow3Status>
 8000bda:	6078      	str	r0, [r7, #4]

	initialiseSystem();
 8000bdc:	f000 f89a 	bl	8000d14 <initialiseSystem>
	Radio.Rx(0);
 8000be0:	4b41      	ldr	r3, [pc, #260]	@ (8000ce8 <startSystem+0x124>)
 8000be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000be4:	2000      	movs	r0, #0
 8000be6:	4798      	blx	r3

	while (1) {

		if (!isEmpty(&message_queue)) {
 8000be8:	4840      	ldr	r0, [pc, #256]	@ (8000cec <startSystem+0x128>)
 8000bea:	f000 fa4e 	bl	800108a <isEmpty>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <startSystem+0x34>
			handleNewMessage();
 8000bf4:	f000 f91e 	bl	8000e34 <handleNewMessage>
		}

		if (checkWindow1Status() != window1Status && isSensor1Registered)
 8000bf8:	f000 f8ea 	bl	8000dd0 <checkWindow1Status>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d01c      	beq.n	8000c3e <startSystem+0x7a>
 8000c04:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf0 <startSystem+0x12c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d018      	beq.n	8000c3e <startSystem+0x7a>
		{
			window1Status = checkWindow1Status();
 8000c0c:	f000 f8e0 	bl	8000dd0 <checkWindow1Status>
 8000c10:	60f8      	str	r0, [r7, #12]
			send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, station1Id, sensor1Id, checkWindow1Status());
 8000c12:	4b38      	ldr	r3, [pc, #224]	@ (8000cf4 <startSystem+0x130>)
 8000c14:	681c      	ldr	r4, [r3, #0]
 8000c16:	4b38      	ldr	r3, [pc, #224]	@ (8000cf8 <startSystem+0x134>)
 8000c18:	681d      	ldr	r5, [r3, #0]
 8000c1a:	4b38      	ldr	r3, [pc, #224]	@ (8000cfc <startSystem+0x138>)
 8000c1c:	681e      	ldr	r6, [r3, #0]
 8000c1e:	f000 f8d7 	bl	8000dd0 <checkWindow1Status>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4632      	mov	r2, r6
 8000c26:	4629      	mov	r1, r5
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f000 fb13 	bl	8001254 <send_window_status_update>
			HAL_Delay(300);
 8000c2e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c32:	f001 f899 	bl	8001d68 <HAL_Delay>
			Radio.Rx(0);
 8000c36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce8 <startSystem+0x124>)
 8000c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	4798      	blx	r3
	    }
		if (checkWindow2Status() != window2Status  && isSensor2Registered)
 8000c3e:	f000 f8d9 	bl	8000df4 <checkWindow2Status>
 8000c42:	4602      	mov	r2, r0
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d01c      	beq.n	8000c84 <startSystem+0xc0>
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d00 <startSystem+0x13c>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d018      	beq.n	8000c84 <startSystem+0xc0>
		{
			window2Status = checkWindow2Status();
 8000c52:	f000 f8cf 	bl	8000df4 <checkWindow2Status>
 8000c56:	60b8      	str	r0, [r7, #8]
			send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, station1Id, sensor2Id, checkWindow2Status());
 8000c58:	4b26      	ldr	r3, [pc, #152]	@ (8000cf4 <startSystem+0x130>)
 8000c5a:	681c      	ldr	r4, [r3, #0]
 8000c5c:	4b26      	ldr	r3, [pc, #152]	@ (8000cf8 <startSystem+0x134>)
 8000c5e:	681d      	ldr	r5, [r3, #0]
 8000c60:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <startSystem+0x140>)
 8000c62:	681e      	ldr	r6, [r3, #0]
 8000c64:	f000 f8c6 	bl	8000df4 <checkWindow2Status>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4632      	mov	r2, r6
 8000c6c:	4629      	mov	r1, r5
 8000c6e:	4620      	mov	r0, r4
 8000c70:	f000 faf0 	bl	8001254 <send_window_status_update>
			HAL_Delay(300);
 8000c74:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c78:	f001 f876 	bl	8001d68 <HAL_Delay>
			Radio.Rx(0);
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <startSystem+0x124>)
 8000c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c80:	2000      	movs	r0, #0
 8000c82:	4798      	blx	r3
	    }
		if (checkWindow3Status() != window3Status  && isSensor3Registered)
 8000c84:	f000 f8c6 	bl	8000e14 <checkWindow3Status>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d01c      	beq.n	8000cca <startSystem+0x106>
 8000c90:	4b1d      	ldr	r3, [pc, #116]	@ (8000d08 <startSystem+0x144>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d018      	beq.n	8000cca <startSystem+0x106>
		{
			window3Status = checkWindow3Status();
 8000c98:	f000 f8bc 	bl	8000e14 <checkWindow3Status>
 8000c9c:	6078      	str	r0, [r7, #4]
			send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, station1Id, sensor3Id, checkWindow3Status());
 8000c9e:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <startSystem+0x130>)
 8000ca0:	681c      	ldr	r4, [r3, #0]
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <startSystem+0x134>)
 8000ca4:	681d      	ldr	r5, [r3, #0]
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <startSystem+0x148>)
 8000ca8:	681e      	ldr	r6, [r3, #0]
 8000caa:	f000 f8b3 	bl	8000e14 <checkWindow3Status>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4632      	mov	r2, r6
 8000cb2:	4629      	mov	r1, r5
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f000 facd 	bl	8001254 <send_window_status_update>
			HAL_Delay(300);
 8000cba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cbe:	f001 f853 	bl	8001d68 <HAL_Delay>
			Radio.Rx(0);
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <startSystem+0x124>)
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	4798      	blx	r3
	    }


		if (State == RX_TIMEOUT)
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <startSystem+0x14c>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d106      	bne.n	8000ce0 <startSystem+0x11c>
		{
			State = RX;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <startSystem+0x14c>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
			Radio.Rx(0);
 8000cd8:	4b03      	ldr	r3, [pc, #12]	@ (8000ce8 <startSystem+0x124>)
 8000cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cdc:	2000      	movs	r0, #0
 8000cde:	4798      	blx	r3
		}
		HAL_Delay(100);
 8000ce0:	2064      	movs	r0, #100	@ 0x64
 8000ce2:	f001 f841 	bl	8001d68 <HAL_Delay>
		if (!isEmpty(&message_queue)) {
 8000ce6:	e77f      	b.n	8000be8 <startSystem+0x24>
 8000ce8:	0800bbbc 	.word	0x0800bbbc
 8000cec:	200000c0 	.word	0x200000c0
 8000cf0:	200000bc 	.word	0x200000bc
 8000cf4:	20000010 	.word	0x20000010
 8000cf8:	2000000c 	.word	0x2000000c
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	200000bd 	.word	0x200000bd
 8000d04:	20000004 	.word	0x20000004
 8000d08:	200000be 	.word	0x200000be
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	200000b4 	.word	0x200000b4

08000d14 <initialiseSystem>:
	}
}


void initialiseSystem() {
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	af00      	add	r7, sp, #0


	initRadioCommunication();
 8000d18:	f000 fa2e 	bl	8001178 <initRadioCommunication>
	initQueue(&message_queue);
 8000d1c:	481b      	ldr	r0, [pc, #108]	@ (8000d8c <initialiseSystem+0x78>)
 8000d1e:	f000 f98f 	bl	8001040 <initQueue>

	//register sensors to given radio stations
	send_window_status_update(MESSAGE_TYPE_REGISTER, station1Id, sensor1Id,  checkWindow1Status());
 8000d22:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <initialiseSystem+0x7c>)
 8000d24:	681c      	ldr	r4, [r3, #0]
 8000d26:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <initialiseSystem+0x80>)
 8000d28:	681d      	ldr	r5, [r3, #0]
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <initialiseSystem+0x84>)
 8000d2c:	681e      	ldr	r6, [r3, #0]
 8000d2e:	f000 f84f 	bl	8000dd0 <checkWindow1Status>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4632      	mov	r2, r6
 8000d36:	4629      	mov	r1, r5
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f000 fa8b 	bl	8001254 <send_window_status_update>
	HAL_Delay(200);
 8000d3e:	20c8      	movs	r0, #200	@ 0xc8
 8000d40:	f001 f812 	bl	8001d68 <HAL_Delay>
	send_window_status_update(MESSAGE_TYPE_REGISTER, station1Id, sensor2Id,  checkWindow2Status());
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <initialiseSystem+0x7c>)
 8000d46:	681c      	ldr	r4, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <initialiseSystem+0x80>)
 8000d4a:	681d      	ldr	r5, [r3, #0]
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <initialiseSystem+0x88>)
 8000d4e:	681e      	ldr	r6, [r3, #0]
 8000d50:	f000 f850 	bl	8000df4 <checkWindow2Status>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4632      	mov	r2, r6
 8000d58:	4629      	mov	r1, r5
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f000 fa7a 	bl	8001254 <send_window_status_update>
	HAL_Delay(200);
 8000d60:	20c8      	movs	r0, #200	@ 0xc8
 8000d62:	f001 f801 	bl	8001d68 <HAL_Delay>
	send_window_status_update(MESSAGE_TYPE_REGISTER, station1Id, sensor3Id,  checkWindow3Status());
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <initialiseSystem+0x7c>)
 8000d68:	681c      	ldr	r4, [r3, #0]
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <initialiseSystem+0x80>)
 8000d6c:	681d      	ldr	r5, [r3, #0]
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <initialiseSystem+0x8c>)
 8000d70:	681e      	ldr	r6, [r3, #0]
 8000d72:	f000 f84f 	bl	8000e14 <checkWindow3Status>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4632      	mov	r2, r6
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f000 fa69 	bl	8001254 <send_window_status_update>
	HAL_Delay(200);
 8000d82:	20c8      	movs	r0, #200	@ 0xc8
 8000d84:	f000 fff0 	bl	8001d68 <HAL_Delay>

}
 8000d88:	bf00      	nop
 8000d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d8c:	200000c0 	.word	0x200000c0
 8000d90:	200000b8 	.word	0x200000b8
 8000d94:	2000000c 	.word	0x2000000c
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000004 	.word	0x20000004
 8000da0:	20000008 	.word	0x20000008

08000da4 <encode_message>:
#include "cryptography_module.h"

char* encode_message(char* message) {
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	return message; //not implemented yet on purpose
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <decode_message>:

uint8_t* decode_message(uint8_t* message) {
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
	return message; //not implemented yet on purpose
 8000dc2:	687b      	ldr	r3, [r7, #4]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <checkWindow1Status>:
#include "gpio_control.h"
#include "stm32u5xx_hal.h"// Include the STM32 HAL for GPIO functions

int checkWindow1Status(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET;
 8000dd4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd8:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <checkWindow1Status+0x20>)
 8000dda:	f001 fe15 	bl	8002a08 <HAL_GPIO_ReadPin>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	bf0c      	ite	eq
 8000de4:	2301      	moveq	r3, #1
 8000de6:	2300      	movne	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	42020800 	.word	0x42020800

08000df4 <checkWindow2Status>:

int checkWindow2Status(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_1) == GPIO_PIN_RESET;
 8000df8:	2102      	movs	r1, #2
 8000dfa:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <checkWindow2Status+0x1c>)
 8000dfc:	f001 fe04 	bl	8002a08 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	bf0c      	ite	eq
 8000e06:	2301      	moveq	r3, #1
 8000e08:	2300      	movne	r3, #0
 8000e0a:	b2db      	uxtb	r3, r3
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	42021c00 	.word	0x42021c00

08000e14 <checkWindow3Status>:

int checkWindow3Status(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET;
 8000e18:	2108      	movs	r1, #8
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <checkWindow3Status+0x1c>)
 8000e1c:	f001 fdf4 	bl	8002a08 <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bf0c      	ite	eq
 8000e26:	2301      	moveq	r3, #1
 8000e28:	2300      	movne	r3, #0
 8000e2a:	b2db      	uxtb	r3, r3
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	42020400 	.word	0x42020400

08000e34 <handleNewMessage>:
#include "message_handler.h"


void handleNewMessage()
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
	uint8_t* dequeuedItem = dequeue(&message_queue);
 8000e3a:	482b      	ldr	r0, [pc, #172]	@ (8000ee8 <handleNewMessage+0xb4>)
 8000e3c:	f000 f96a 	bl	8001114 <dequeue>
 8000e40:	6178      	str	r0, [r7, #20]
    uint8_t*  decoded_message = decode_message(dequeuedItem);
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f7ff ffb9 	bl	8000dba <decode_message>
 8000e48:	6138      	str	r0, [r7, #16]

    if (strlen((char *) decoded_message) != 5) {
 8000e4a:	6938      	ldr	r0, [r7, #16]
 8000e4c:	f7ff fa14 	bl	8000278 <strlen>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b05      	cmp	r3, #5
 8000e54:	d002      	beq.n	8000e5c <handleNewMessage+0x28>
        printf("Error: Input string must be exactly 5 characters long.\n");
 8000e56:	4825      	ldr	r0, [pc, #148]	@ (8000eec <handleNewMessage+0xb8>)
 8000e58:	f009 fc3a 	bl	800a6d0 <puts>
    char messageType[2];
    char stationId[3];
    char sensorId[3];


    messageType[0] = decoded_message[0];
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	733b      	strb	r3, [r7, #12]
    messageType[1] = '\0';
 8000e62:	2300      	movs	r3, #0
 8000e64:	737b      	strb	r3, [r7, #13]

    stationId[0] = decoded_message[1];
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	723b      	strb	r3, [r7, #8]
    stationId[1] = decoded_message[2];
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	3302      	adds	r3, #2
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	727b      	strb	r3, [r7, #9]
    stationId[2] = '\0';
 8000e76:	2300      	movs	r3, #0
 8000e78:	72bb      	strb	r3, [r7, #10]

    sensorId[0] = decoded_message[3];
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	3303      	adds	r3, #3
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	713b      	strb	r3, [r7, #4]
    sensorId[1] = decoded_message[4];
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	3304      	adds	r3, #4
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	717b      	strb	r3, [r7, #5]
    sensorId[2] = '\0';
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71bb      	strb	r3, [r7, #6]

    if (messageType[0] == MESSAGE_TYPE_ACKNOWLEDGEMENT) {
 8000e8e:	7b3a      	ldrb	r2, [r7, #12]
 8000e90:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <handleNewMessage+0xbc>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d10f      	bne.n	8000eb8 <handleNewMessage+0x84>
    	handleAcknowledgementMessage(atoi(stationId), atoi(sensorId));
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f009 fa65 	bl	800a36c <atoi>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f009 fa60 	bl	800a36c <atoi>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f000 f821 	bl	8000ef8 <handleAcknowledgementMessage>
    }
    else if ((messageType[0] == MESSAGE_TYPE_REQUEST_UPDATE)) {
    	handleUpdateStatusMessage(atoi(stationId), atoi(sensorId));
    }

}
 8000eb6:	e013      	b.n	8000ee0 <handleNewMessage+0xac>
    else if ((messageType[0] == MESSAGE_TYPE_REQUEST_UPDATE)) {
 8000eb8:	7b3a      	ldrb	r2, [r7, #12]
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <handleNewMessage+0xc0>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d10e      	bne.n	8000ee0 <handleNewMessage+0xac>
    	handleUpdateStatusMessage(atoi(stationId), atoi(sensorId));
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f009 fa50 	bl	800a36c <atoi>
 8000ecc:	4604      	mov	r4, r0
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f009 fa4b 	bl	800a36c <atoi>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4620      	mov	r0, r4
 8000edc:	f000 f848 	bl	8000f70 <handleUpdateStatusMessage>
}
 8000ee0:	bf00      	nop
 8000ee2:	371c      	adds	r7, #28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd90      	pop	{r4, r7, pc}
 8000ee8:	200000c0 	.word	0x200000c0
 8000eec:	0800ba2c 	.word	0x0800ba2c
 8000ef0:	20000014 	.word	0x20000014
 8000ef4:	20000015 	.word	0x20000015

08000ef8 <handleAcknowledgementMessage>:

void handleAcknowledgementMessage(int stationId, int sensorId) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]

	if (station1Id != stationId)
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <handleAcknowledgementMessage+0x5c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d11a      	bne.n	8000f42 <handleAcknowledgementMessage+0x4a>
		return;

	else if (sensorId == sensor1Id)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <handleAcknowledgementMessage+0x60>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d103      	bne.n	8000f1e <handleAcknowledgementMessage+0x26>
		isSensor1Registered = true;
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <handleAcknowledgementMessage+0x64>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
	else if (sensorId == sensor2Id)
		isSensor2Registered = true;
	else if (sensorId == sensor3Id)
		isSensor3Registered = true;

	return;
 8000f1c:	e013      	b.n	8000f46 <handleAcknowledgementMessage+0x4e>
	else if (sensorId == sensor2Id)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <handleAcknowledgementMessage+0x68>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d103      	bne.n	8000f30 <handleAcknowledgementMessage+0x38>
		isSensor2Registered = true;
 8000f28:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <handleAcknowledgementMessage+0x6c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
	return;
 8000f2e:	e00a      	b.n	8000f46 <handleAcknowledgementMessage+0x4e>
	else if (sensorId == sensor3Id)
 8000f30:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <handleAcknowledgementMessage+0x70>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d105      	bne.n	8000f46 <handleAcknowledgementMessage+0x4e>
		isSensor3Registered = true;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <handleAcknowledgementMessage+0x74>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
	return;
 8000f40:	e001      	b.n	8000f46 <handleAcknowledgementMessage+0x4e>
		return;
 8000f42:	bf00      	nop
 8000f44:	e000      	b.n	8000f48 <handleAcknowledgementMessage+0x50>
	return;
 8000f46:	bf00      	nop
}
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	2000000c 	.word	0x2000000c
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	200000bc 	.word	0x200000bc
 8000f60:	20000004 	.word	0x20000004
 8000f64:	200000bd 	.word	0x200000bd
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	200000be 	.word	0x200000be

08000f70 <handleUpdateStatusMessage>:

void handleUpdateStatusMessage(int stationId, int sensorId) {
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]

	if (station1Id != stationId)
 8000f7a:	4b28      	ldr	r3, [pc, #160]	@ (800101c <handleUpdateStatusMessage+0xac>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d147      	bne.n	8001014 <handleUpdateStatusMessage+0xa4>
		return;

	if (sensorId == sensor1Id && isSensor1Registered)
 8000f84:	4b26      	ldr	r3, [pc, #152]	@ (8001020 <handleUpdateStatusMessage+0xb0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d10f      	bne.n	8000fae <handleUpdateStatusMessage+0x3e>
 8000f8e:	4b25      	ldr	r3, [pc, #148]	@ (8001024 <handleUpdateStatusMessage+0xb4>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00b      	beq.n	8000fae <handleUpdateStatusMessage+0x3e>
	{
		send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, stationId, sensor1Id, checkWindow1Status());
 8000f96:	4b24      	ldr	r3, [pc, #144]	@ (8001028 <handleUpdateStatusMessage+0xb8>)
 8000f98:	681c      	ldr	r4, [r3, #0]
 8000f9a:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <handleUpdateStatusMessage+0xb0>)
 8000f9c:	681d      	ldr	r5, [r3, #0]
 8000f9e:	f7ff ff17 	bl	8000dd0 <checkWindow1Status>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	462a      	mov	r2, r5
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f000 f953 	bl	8001254 <send_window_status_update>

    }
	if (sensorId == sensor2Id && isSensor2Registered)
 8000fae:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <handleUpdateStatusMessage+0xbc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d10f      	bne.n	8000fd8 <handleUpdateStatusMessage+0x68>
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <handleUpdateStatusMessage+0xc0>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00b      	beq.n	8000fd8 <handleUpdateStatusMessage+0x68>
	{
		send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, stationId, sensor2Id, checkWindow2Status());
 8000fc0:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <handleUpdateStatusMessage+0xb8>)
 8000fc2:	681c      	ldr	r4, [r3, #0]
 8000fc4:	4b19      	ldr	r3, [pc, #100]	@ (800102c <handleUpdateStatusMessage+0xbc>)
 8000fc6:	681d      	ldr	r5, [r3, #0]
 8000fc8:	f7ff ff14 	bl	8000df4 <checkWindow2Status>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	462a      	mov	r2, r5
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f000 f93e 	bl	8001254 <send_window_status_update>
    }
	if (sensorId == sensor3Id  && isSensor3Registered)
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <handleUpdateStatusMessage+0xc4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d10f      	bne.n	8001002 <handleUpdateStatusMessage+0x92>
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <handleUpdateStatusMessage+0xc8>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00b      	beq.n	8001002 <handleUpdateStatusMessage+0x92>
	{
		send_window_status_update(MESSAGE_TYPE_SEND_UPDATE, stationId, sensor3Id, checkWindow3Status());
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <handleUpdateStatusMessage+0xb8>)
 8000fec:	681c      	ldr	r4, [r3, #0]
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <handleUpdateStatusMessage+0xc4>)
 8000ff0:	681d      	ldr	r5, [r3, #0]
 8000ff2:	f7ff ff0f 	bl	8000e14 <checkWindow3Status>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	462a      	mov	r2, r5
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f000 f929 	bl	8001254 <send_window_status_update>
    }

	HAL_Delay(300);
 8001002:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001006:	f000 feaf 	bl	8001d68 <HAL_Delay>
	Radio.Rx(0);
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <handleUpdateStatusMessage+0xcc>)
 800100c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800100e:	2000      	movs	r0, #0
 8001010:	4798      	blx	r3
 8001012:	e000      	b.n	8001016 <handleUpdateStatusMessage+0xa6>
		return;
 8001014:	bf00      	nop
}
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bdb0      	pop	{r4, r5, r7, pc}
 800101c:	2000000c 	.word	0x2000000c
 8001020:	20000000 	.word	0x20000000
 8001024:	200000bc 	.word	0x200000bc
 8001028:	20000010 	.word	0x20000010
 800102c:	20000004 	.word	0x20000004
 8001030:	200000bd 	.word	0x200000bd
 8001034:	20000008 	.word	0x20000008
 8001038:	200000be 	.word	0x200000be
 800103c:	0800bbbc 	.word	0x0800bbbc

08001040 <initQueue>:
#include "pointer_queue.h"

void initQueue(PointerQueue* queue) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    queue->front = 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
    queue->rear = -1;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	619a      	str	r2, [r3, #24]
    queue->size = 0;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <isFull>:

int isFull(PointerQueue* queue) {
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    return queue->size == MAX_QUEUE_SIZE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	2b05      	cmp	r3, #5
 8001076:	bf0c      	ite	eq
 8001078:	2301      	moveq	r3, #1
 800107a:	2300      	movne	r3, #0
 800107c:	b2db      	uxtb	r3, r3
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <isEmpty>:

int isEmpty(PointerQueue* queue) {
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
    return queue->size == 0;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	2b00      	cmp	r3, #0
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <enqueue>:

int enqueue(PointerQueue* queue, uint8_t* element) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
    if (isFull(queue)) {
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffd6 	bl	8001068 <isFull>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d004      	beq.n	80010cc <enqueue+0x20>
        printf("Queue is full! Cannot enqueue.\n");
 80010c2:	4812      	ldr	r0, [pc, #72]	@ (800110c <enqueue+0x60>)
 80010c4:	f009 fb04 	bl	800a6d0 <puts>
        return 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e01a      	b.n	8001102 <enqueue+0x56>
    }
    queue->rear = (queue->rear + 1) % MAX_QUEUE_SIZE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	1c59      	adds	r1, r3, #1
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <enqueue+0x64>)
 80010d4:	fb83 2301 	smull	r2, r3, r3, r1
 80010d8:	105a      	asrs	r2, r3, #1
 80010da:	17cb      	asrs	r3, r1, #31
 80010dc:	1ad2      	subs	r2, r2, r3
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	1aca      	subs	r2, r1, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	619a      	str	r2, [r3, #24]
    queue->data[queue->rear] = element;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6839      	ldr	r1, [r7, #0]
 80010f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    queue->size++;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	61da      	str	r2, [r3, #28]
    return 1;
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	0800ba64 	.word	0x0800ba64
 8001110:	66666667 	.word	0x66666667

08001114 <dequeue>:

uint8_t* dequeue(PointerQueue* queue) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue)) {
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ffb4 	bl	800108a <isEmpty>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <dequeue+0x1e>
        printf("Queue is empty! Cannot dequeue.\n");
 8001128:	4811      	ldr	r0, [pc, #68]	@ (8001170 <dequeue+0x5c>)
 800112a:	f009 fad1 	bl	800a6d0 <puts>
        return NULL;
 800112e:	2300      	movs	r3, #0
 8001130:	e01a      	b.n	8001168 <dequeue+0x54>
    }
    uint8_t* element = queue->data[queue->front];
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113c:	60fb      	str	r3, [r7, #12]
    queue->front = (queue->front + 1) % MAX_QUEUE_SIZE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	1c59      	adds	r1, r3, #1
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <dequeue+0x60>)
 8001146:	fb83 2301 	smull	r2, r3, r3, r1
 800114a:	105a      	asrs	r2, r3, #1
 800114c:	17cb      	asrs	r3, r1, #31
 800114e:	1ad2      	subs	r2, r2, r3
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	1aca      	subs	r2, r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	615a      	str	r2, [r3, #20]
    queue->size--;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	1e5a      	subs	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	61da      	str	r2, [r3, #28]
    return element;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	0800ba84 	.word	0x0800ba84
 8001174:	66666667 	.word	0x66666667

08001178 <initRadioCommunication>:

/**
 * Main application entry point.
 */
void initRadioCommunication( void )
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08b      	sub	sp, #44	@ 0x2c
 800117c:	af0a      	add	r7, sp, #40	@ 0x28
    // Target board initialization
    BoardInitMcu( );
 800117e:	f005 fa79 	bl	8006674 <BoardInitMcu>
    BoardInitPeriph( );
 8001182:	f005 fa41 	bl	8006608 <BoardInitPeriph>

    // Radio initialization
    RadioEvents.TxDone = OnTxDone;
 8001186:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <initRadioCommunication+0xb8>)
 8001188:	4a2a      	ldr	r2, [pc, #168]	@ (8001234 <initRadioCommunication+0xbc>)
 800118a:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRxDone;
 800118c:	4b28      	ldr	r3, [pc, #160]	@ (8001230 <initRadioCommunication+0xb8>)
 800118e:	4a2a      	ldr	r2, [pc, #168]	@ (8001238 <initRadioCommunication+0xc0>)
 8001190:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 8001192:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <initRadioCommunication+0xb8>)
 8001194:	4a29      	ldr	r2, [pc, #164]	@ (800123c <initRadioCommunication+0xc4>)
 8001196:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 8001198:	4b25      	ldr	r3, [pc, #148]	@ (8001230 <initRadioCommunication+0xb8>)
 800119a:	4a29      	ldr	r2, [pc, #164]	@ (8001240 <initRadioCommunication+0xc8>)
 800119c:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRxError;
 800119e:	4b24      	ldr	r3, [pc, #144]	@ (8001230 <initRadioCommunication+0xb8>)
 80011a0:	4a28      	ldr	r2, [pc, #160]	@ (8001244 <initRadioCommunication+0xcc>)
 80011a2:	611a      	str	r2, [r3, #16]

    Radio.Init( &RadioEvents );
 80011a4:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <initRadioCommunication+0xd0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4821      	ldr	r0, [pc, #132]	@ (8001230 <initRadioCommunication+0xb8>)
 80011aa:	4798      	blx	r3

    Radio.SetChannel( RF_FREQUENCY );
 80011ac:	4b26      	ldr	r3, [pc, #152]	@ (8001248 <initRadioCommunication+0xd0>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	4826      	ldr	r0, [pc, #152]	@ (800124c <initRadioCommunication+0xd4>)
 80011b2:	4798      	blx	r3

    Radio.SetTxConfig(  MODEM_FSK,						/* Radio modem to be used [0: FSK, 1: LoRa] */
 80011b4:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <initRadioCommunication+0xd0>)
 80011b6:	69dc      	ldr	r4, [r3, #28]
 80011b8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80011bc:	9308      	str	r3, [sp, #32]
 80011be:	2300      	movs	r3, #0
 80011c0:	9307      	str	r3, [sp, #28]
 80011c2:	2300      	movs	r3, #0
 80011c4:	9306      	str	r3, [sp, #24]
 80011c6:	2300      	movs	r3, #0
 80011c8:	9305      	str	r3, [sp, #20]
 80011ca:	2301      	movs	r3, #1
 80011cc:	9304      	str	r3, [sp, #16]
 80011ce:	2300      	movs	r3, #0
 80011d0:	9303      	str	r3, [sp, #12]
 80011d2:	2305      	movs	r3, #5
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	2300      	movs	r3, #0
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	f24c 3350 	movw	r3, #50000	@ 0xc350
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2300      	movs	r3, #0
 80011e2:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80011e6:	2100      	movs	r1, #0
 80011e8:	2000      	movs	r0, #0
 80011ea:	47a0      	blx	r4
						0,								/* Number of symbols bewteen each hop. FSK: N/A ( set to 0 ) */
						0,								/* Inverts IQ signals (LoRa only). FSK: N/A ( set to 0 ) */
						3000							/* Transmission timeout [ms] */
	);

    Radio.SetRxConfig(  MODEM_FSK,						/* Radio modem to be used [0: FSK, 1: LoRa] */
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <initRadioCommunication+0xd0>)
 80011ee:	699c      	ldr	r4, [r3, #24]
 80011f0:	2301      	movs	r3, #1
 80011f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80011f4:	2300      	movs	r3, #0
 80011f6:	9308      	str	r3, [sp, #32]
 80011f8:	2300      	movs	r3, #0
 80011fa:	9307      	str	r3, [sp, #28]
 80011fc:	2300      	movs	r3, #0
 80011fe:	9306      	str	r3, [sp, #24]
 8001200:	2301      	movs	r3, #1
 8001202:	9305      	str	r3, [sp, #20]
 8001204:	2300      	movs	r3, #0
 8001206:	9304      	str	r3, [sp, #16]
 8001208:	2300      	movs	r3, #0
 800120a:	9303      	str	r3, [sp, #12]
 800120c:	2300      	movs	r3, #0
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2305      	movs	r3, #5
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <initRadioCommunication+0xd8>)
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2300      	movs	r3, #0
 800121a:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800121e:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8001222:	2000      	movs	r0, #0
 8001224:	47a0      	blx	r4
	);




}
 8001226:	bf00      	nop
 8001228:	3704      	adds	r7, #4
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}
 800122e:	bf00      	nop
 8001230:	200000f4 	.word	0x200000f4
 8001234:	08001315 	.word	0x08001315
 8001238:	0800133d 	.word	0x0800133d
 800123c:	08001385 	.word	0x08001385
 8001240:	080013b1 	.word	0x080013b1
 8001244:	080013d9 	.word	0x080013d9
 8001248:	0800bbbc 	.word	0x0800bbbc
 800124c:	33bca100 	.word	0x33bca100
 8001250:	00014585 	.word	0x00014585

08001254 <send_window_status_update>:

int send_window_status_update(int messageType, int stationId, int sensorId, int windowStatus)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	@ 0x30
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	603b      	str	r3, [r7, #0]
	if (stationId >= 100 || sensorId >= 100)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b63      	cmp	r3, #99	@ 0x63
 8001266:	dc02      	bgt.n	800126e <send_window_status_update+0x1a>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b63      	cmp	r3, #99	@ 0x63
 800126c:	dd01      	ble.n	8001272 <send_window_status_update+0x1e>
			return 0;
 800126e:	2300      	movs	r3, #0
 8001270:	e045      	b.n	80012fe <send_window_status_update+0xaa>
	if (messageType != 0 && messageType != 3)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d004      	beq.n	8001282 <send_window_status_update+0x2e>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d001      	beq.n	8001282 <send_window_status_update+0x2e>
		return 0;
 800127e:	2300      	movs	r3, #0
 8001280:	e03d      	b.n	80012fe <send_window_status_update+0xaa>
	char stationIdMessage[3];
	char sensorIdMessage[3];
	char windowStatusMessage[2];


    snprintf(stationIdMessage, sizeof(stationIdMessage), "%02d", stationId);
 8001282:	f107 001c 	add.w	r0, r7, #28
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	4a1f      	ldr	r2, [pc, #124]	@ (8001308 <send_window_status_update+0xb4>)
 800128a:	2103      	movs	r1, #3
 800128c:	f009 fa28 	bl	800a6e0 <sniprintf>
    snprintf(sensorIdMessage, sizeof(sensorIdMessage), "%02d", sensorId);
 8001290:	f107 0018 	add.w	r0, r7, #24
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a1c      	ldr	r2, [pc, #112]	@ (8001308 <send_window_status_update+0xb4>)
 8001298:	2103      	movs	r1, #3
 800129a:	f009 fa21 	bl	800a6e0 <sniprintf>
    snprintf(windowStatusMessage, sizeof(windowStatusMessage), "%d", windowStatus);
 800129e:	f107 0014 	add.w	r0, r7, #20
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	@ (800130c <send_window_status_update+0xb8>)
 80012a6:	2102      	movs	r1, #2
 80012a8:	f009 fa1a 	bl	800a6e0 <sniprintf>
    snprintf(messageTypeMessage, sizeof(messageTypeMessage), "%d", messageType);
 80012ac:	f107 0020 	add.w	r0, r7, #32
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4a16      	ldr	r2, [pc, #88]	@ (800130c <send_window_status_update+0xb8>)
 80012b4:	2102      	movs	r1, #2
 80012b6:	f009 fa13 	bl	800a6e0 <sniprintf>

    message[0] = messageTypeMessage[0];
 80012ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    message[1] = stationIdMessage[0];
 80012c2:	7f3b      	ldrb	r3, [r7, #28]
 80012c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    message[2] = stationIdMessage[1];
 80012c8:	7f7b      	ldrb	r3, [r7, #29]
 80012ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    message[3] = sensorIdMessage[0];
 80012ce:	7e3b      	ldrb	r3, [r7, #24]
 80012d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    message[4] = sensorIdMessage[1];
 80012d4:	7e7b      	ldrb	r3, [r7, #25]
 80012d6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    message[5] = windowStatusMessage[0];
 80012da:	7d3b      	ldrb	r3, [r7, #20]
 80012dc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    message[6] = windowStatusMessage[1];
 80012e0:	7d7b      	ldrb	r3, [r7, #21]
 80012e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    char* encoded_message = encode_message(message);
 80012e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fd5a 	bl	8000da4 <encode_message>
 80012f0:	62f8      	str	r0, [r7, #44]	@ 0x2c

    Radio.Send( encoded_message, 7 );
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <send_window_status_update+0xbc>)
 80012f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f6:	2107      	movs	r1, #7
 80012f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012fa:	4798      	blx	r3
    return 1;
 80012fc:	2301      	movs	r3, #1
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3730      	adds	r7, #48	@ 0x30
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	0800baa4 	.word	0x0800baa4
 800130c:	0800baac 	.word	0x0800baac
 8001310:	0800bbbc 	.word	0x0800bbbc

08001314 <OnTxDone>:



void OnTxDone( void )
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
    State = TX;
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <OnTxDone+0x20>)
 800131a:	2205      	movs	r2, #5
 800131c:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.txdone++;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <OnTxDone+0x24>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	3301      	adds	r3, #1
 8001324:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <OnTxDone+0x24>)
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200000b4 	.word	0x200000b4
 8001338:	200000e0 	.word	0x200000e0

0800133c <OnRxDone>:

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	4608      	mov	r0, r1
 8001346:	4611      	mov	r1, r2
 8001348:	461a      	mov	r2, r3
 800134a:	4603      	mov	r3, r0
 800134c:	817b      	strh	r3, [r7, #10]
 800134e:	460b      	mov	r3, r1
 8001350:	813b      	strh	r3, [r7, #8]
 8001352:	4613      	mov	r3, r2
 8001354:	71fb      	strb	r3, [r7, #7]
	enqueue(&message_queue, payload);
 8001356:	68f9      	ldr	r1, [r7, #12]
 8001358:	4807      	ldr	r0, [pc, #28]	@ (8001378 <OnRxDone+0x3c>)
 800135a:	f7ff fea7 	bl	80010ac <enqueue>
    State = RX_DONE;
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <OnRxDone+0x40>)
 8001360:	2202      	movs	r2, #2
 8001362:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxdone++;
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <OnRxDone+0x44>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <OnRxDone+0x44>)
 800136c:	6013      	str	r3, [r2, #0]
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000c0 	.word	0x200000c0
 800137c:	200000b4 	.word	0x200000b4
 8001380:	200000e0 	.word	0x200000e0

08001384 <OnTxTimeout>:



void OnTxTimeout( void )
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <OnTxTimeout+0x20>)
 800138a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138c:	4798      	blx	r3
    State = TX_TIMEOUT;
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <OnTxTimeout+0x24>)
 8001390:	2206      	movs	r2, #6
 8001392:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.txtimeout++;
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <OnTxTimeout+0x28>)
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	3301      	adds	r3, #1
 800139a:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <OnTxTimeout+0x28>)
 800139c:	6113      	str	r3, [r2, #16]
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	0800bbbc 	.word	0x0800bbbc
 80013a8:	200000b4 	.word	0x200000b4
 80013ac:	200000e0 	.word	0x200000e0

080013b0 <OnRxTimeout>:

void OnRxTimeout( void )
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
    State = RX_TIMEOUT;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <OnRxTimeout+0x20>)
 80013b6:	2203      	movs	r2, #3
 80013b8:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxtimeout++;
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <OnRxTimeout+0x24>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	3301      	adds	r3, #1
 80013c0:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <OnRxTimeout+0x24>)
 80013c2:	6053      	str	r3, [r2, #4]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	200000b4 	.word	0x200000b4
 80013d4:	200000e0 	.word	0x200000e0

080013d8 <OnRxError>:

void OnRxError( void )
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    State = RX_ERROR;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <OnRxError+0x20>)
 80013de:	2204      	movs	r2, #4
 80013e0:	701a      	strb	r2, [r3, #0]
    trx_events_cnt.rxerror++;
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <OnRxError+0x24>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <OnRxError+0x24>)
 80013ea:	6093      	str	r3, [r2, #8]
    Radio.Rx(0);
 80013ec:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <OnRxError+0x28>)
 80013ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f0:	2000      	movs	r0, #0
 80013f2:	4798      	blx	r3
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200000b4 	.word	0x200000b4
 80013fc:	200000e0 	.word	0x200000e0
 8001400:	0800bbbc 	.word	0x0800bbbc

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001408:	f000 fbe8 	bl	8001bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140c:	f000 f80f 	bl	800142e <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8001410:	f000 f85b 	bl	80014ca <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001414:	f000 f960 	bl	80016d8 <MX_GPIO_Init>
  MX_LPDMA1_Init();
 8001418:	f000 f864 	bl	80014e4 <MX_LPDMA1_Init>
  MX_RTC_Init();
 800141c:	f000 f8a0 	bl	8001560 <MX_RTC_Init>
  MX_SPI1_Init();
 8001420:	f000 f8ec 	bl	80015fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  startSystem();
 8001424:	f7ff fbce 	bl	8000bc4 <startSystem>
 8001428:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}

0800142e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b09e      	sub	sp, #120	@ 0x78
 8001432:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001434:	f107 0318 	add.w	r3, r7, #24
 8001438:	2260      	movs	r2, #96	@ 0x60
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f009 fa5b 	bl	800a8f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001442:	463b      	mov	r3, r7
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
 8001450:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8001452:	2000      	movs	r0, #0
 8001454:	f001 fb3a 	bl	8002acc <HAL_PWREx_ControlVoltageScaling>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800145e:	f000 f9b3 	bl	80017c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001462:	2318      	movs	r3, #24
 8001464:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001466:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800146c:	2301      	movs	r3, #1
 800146e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001470:	2310      	movs	r3, #16
 8001472:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001474:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001478:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800147e:	2300      	movs	r3, #0
 8001480:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001482:	f107 0318 	add.w	r3, r7, #24
 8001486:	4618      	mov	r0, r3
 8001488:	f001 fbfc 	bl	8002c84 <HAL_RCC_OscConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001492:	f000 f999 	bl	80017c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001496:	231f      	movs	r3, #31
 8001498:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fac2 	bl	8003a3c <HAL_RCC_ClockConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014be:	f000 f983 	bl	80017c8 <Error_Handler>
  }
}
 80014c2:	bf00      	nop
 80014c4:	3778      	adds	r7, #120	@ 0x78
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80014ce:	2002      	movs	r0, #2
 80014d0:	f001 fb88 	bl	8002be4 <HAL_PWREx_ConfigSupply>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemPower_Config+0x14>
  {
    Error_Handler();
 80014da:	f000 f975 	bl	80017c8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <MX_LPDMA1_Init>:
  * @brief LPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPDMA1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPDMA1_Init 0 */

  /* USER CODE END LPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_LPDMA1_CLK_ENABLE();
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_LPDMA1_Init+0x70>)
 80014ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014f0:	4a18      	ldr	r2, [pc, #96]	@ (8001554 <MX_LPDMA1_Init+0x70>)
 80014f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <MX_LPDMA1_Init+0x70>)
 80014fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN LPDMA1_Init 1 */

  /* USER CODE END LPDMA1_Init 1 */
  handle_LPDMA1_Channel0.Instance = LPDMA1_Channel0;
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <MX_LPDMA1_Init+0x74>)
 800150a:	4a14      	ldr	r2, [pc, #80]	@ (800155c <MX_LPDMA1_Init+0x78>)
 800150c:	601a      	str	r2, [r3, #0]
  handle_LPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800150e:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <MX_LPDMA1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_LPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001514:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <MX_LPDMA1_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_LPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <MX_LPDMA1_Init+0x74>)
 800151c:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8001520:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_LPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_NORMAL;
 8001522:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <MX_LPDMA1_Init+0x74>)
 8001524:	2280      	movs	r2, #128	@ 0x80
 8001526:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_LPDMA1_Channel0) != HAL_OK)
 8001528:	480b      	ldr	r0, [pc, #44]	@ (8001558 <MX_LPDMA1_Init+0x74>)
 800152a:	f000 fe11 	bl	8002150 <HAL_DMAEx_List_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_LPDMA1_Init+0x54>
  {
    Error_Handler();
 8001534:	f000 f948 	bl	80017c8 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_LPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001538:	2110      	movs	r1, #16
 800153a:	4807      	ldr	r0, [pc, #28]	@ (8001558 <MX_LPDMA1_Init+0x74>)
 800153c:	f000 fdcc 	bl	80020d8 <HAL_DMA_ConfigChannelAttributes>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_LPDMA1_Init+0x66>
  {
    Error_Handler();
 8001546:	f000 f93f 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPDMA1_Init 2 */

  /* USER CODE END LPDMA1_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	46020c00 	.word	0x46020c00
 8001558:	20000110 	.word	0x20000110
 800155c:	46025050 	.word	0x46025050

08001560 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
 8001574:	615a      	str	r2, [r3, #20]
 8001576:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001578:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <MX_RTC_Init+0x94>)
 800157a:	4a1f      	ldr	r2, [pc, #124]	@ (80015f8 <MX_RTC_Init+0x98>)
 800157c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800157e:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <MX_RTC_Init+0x94>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <MX_RTC_Init+0x94>)
 8001586:	227f      	movs	r2, #127	@ 0x7f
 8001588:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <MX_RTC_Init+0x94>)
 800158c:	22ff      	movs	r2, #255	@ 0xff
 800158e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001590:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <MX_RTC_Init+0x94>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001596:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <MX_RTC_Init+0x94>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800159c:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <MX_RTC_Init+0x94>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <MX_RTC_Init+0x94>)
 80015a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015a8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80015aa:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <MX_RTC_Init+0x94>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80015b0:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <MX_RTC_Init+0x94>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015b6:	480f      	ldr	r0, [pc, #60]	@ (80015f4 <MX_RTC_Init+0x94>)
 80015b8:	f003 fc42 	bl	8004e40 <HAL_RTC_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80015c2:	f000 f901 	bl	80017c8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	@ (80015f4 <MX_RTC_Init+0x94>)
 80015dc:	f004 f9e6 	bl	80059ac <HAL_RTCEx_PrivilegeModeSet>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80015e6:	f000 f8ef 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000188 	.word	0x20000188
 80015f8:	46007800 	.word	0x46007800

080015fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800160c:	4b30      	ldr	r3, [pc, #192]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 800160e:	4a31      	ldr	r2, [pc, #196]	@ (80016d4 <MX_SPI1_Init+0xd8>)
 8001610:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001612:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001614:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001618:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800161a:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001620:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001622:	2203      	movs	r2, #3
 8001624:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001626:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800162c:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001632:	4b27      	ldr	r3, [pc, #156]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001634:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001638:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800163a:	4b25      	ldr	r3, [pc, #148]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 800163c:	2200      	movs	r2, #0
 800163e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001640:	4b23      	ldr	r3, [pc, #140]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001646:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800164c:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 800164e:	2200      	movs	r2, #0
 8001650:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001652:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001654:	2207      	movs	r2, #7
 8001656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001658:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 800165a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800165e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001662:	2200      	movs	r2, #0
 8001664:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001668:	2200      	movs	r2, #0
 800166a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800166c:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 800166e:	2200      	movs	r2, #0
 8001670:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001672:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001674:	2200      	movs	r2, #0
 8001676:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001678:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 800167a:	2200      	movs	r2, #0
 800167c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800167e:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001680:	2200      	movs	r2, #0
 8001682:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001686:	2200      	movs	r2, #0
 8001688:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 800168c:	2200      	movs	r2, #0
 800168e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001690:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001692:	2200      	movs	r2, #0
 8001694:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001696:	480e      	ldr	r0, [pc, #56]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 8001698:	f004 f9b6 	bl	8005a08 <HAL_SPI_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 80016a2:	f000 f891 	bl	80017c8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80016aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80016ae:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_SPI1_Init+0xd4>)
 80016ba:	f004 ff64 	bl	8006586 <HAL_SPIEx_SetConfigAutonomousMode>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 80016c4:	f000 f880 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200001b8 	.word	0x200001b8
 80016d4:	40013000 	.word	0x40013000

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b32      	ldr	r3, [pc, #200]	@ (80017b8 <MX_GPIO_Init+0xe0>)
 80016f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f4:	4a30      	ldr	r2, [pc, #192]	@ (80017b8 <MX_GPIO_Init+0xe0>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016fe:	4b2e      	ldr	r3, [pc, #184]	@ (80017b8 <MX_GPIO_Init+0xe0>)
 8001700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170c:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <MX_GPIO_Init+0xe0>)
 800170e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001712:	4a29      	ldr	r2, [pc, #164]	@ (80017b8 <MX_GPIO_Init+0xe0>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001718:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800171c:	4b26      	ldr	r3, [pc, #152]	@ (80017b8 <MX_GPIO_Init+0xe0>)
 800171e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b23      	ldr	r3, [pc, #140]	@ (80017b8 <MX_GPIO_Init+0xe0>)
 800172c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001730:	4a21      	ldr	r2, [pc, #132]	@ (80017b8 <MX_GPIO_Init+0xe0>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800173a:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <MX_GPIO_Init+0xe0>)
 800173c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <MX_GPIO_Init+0xe0>)
 800174a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800174e:	4a1a      	ldr	r2, [pc, #104]	@ (80017b8 <MX_GPIO_Init+0xe0>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001758:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <MX_GPIO_Init+0xe0>)
 800175a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001766:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	4810      	ldr	r0, [pc, #64]	@ (80017bc <MX_GPIO_Init+0xe4>)
 800177c:	f000 ff6c 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001780:	2302      	movs	r3, #2
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	480b      	ldr	r0, [pc, #44]	@ (80017c0 <MX_GPIO_Init+0xe8>)
 8001794:	f000 ff60 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001798:	2308      	movs	r3, #8
 800179a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4619      	mov	r1, r3
 80017aa:	4806      	ldr	r0, [pc, #24]	@ (80017c4 <MX_GPIO_Init+0xec>)
 80017ac:	f000 ff54 	bl	8002658 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017b0:	bf00      	nop
 80017b2:	3728      	adds	r7, #40	@ 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	46020c00 	.word	0x46020c00
 80017bc:	42020800 	.word	0x42020800
 80017c0:	42021c00 	.word	0x42021c00
 80017c4:	42020400 	.word	0x42020400

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
}
 80017ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <Error_Handler+0x8>

080017d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <HAL_MspInit+0x30>)
 80017dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017e0:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <HAL_MspInit+0x30>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_MspInit+0x30>)
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	46020c00 	.word	0x46020c00

08001808 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b0b4      	sub	sp, #208	@ 0xd0
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	22c0      	movs	r2, #192	@ 0xc0
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f009 f86d 	bl	800a8f8 <memset>
  if(hrtc->Instance==RTC)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a1d      	ldr	r2, [pc, #116]	@ (8001898 <HAL_RTC_MspInit+0x90>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d132      	bne.n	800188e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001828:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001838:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f002 fc8f 	bl	8004164 <HAL_RCCEx_PeriphCLKConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800184c:	f7ff ffbc 	bl	80017c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_RTC_MspInit+0x94>)
 8001852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001856:	4a11      	ldr	r2, [pc, #68]	@ (800189c <HAL_RTC_MspInit+0x94>)
 8001858:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800185c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001860:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <HAL_RTC_MspInit+0x94>)
 8001862:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001866:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <HAL_RTC_MspInit+0x94>)
 8001868:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800186c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001870:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <HAL_RTC_MspInit+0x94>)
 8001872:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001876:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <HAL_RTC_MspInit+0x94>)
 8001880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001884:	4a05      	ldr	r2, [pc, #20]	@ (800189c <HAL_RTC_MspInit+0x94>)
 8001886:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800188a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800188e:	bf00      	nop
 8001890:	37d0      	adds	r7, #208	@ 0xd0
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	46007800 	.word	0x46007800
 800189c:	46020c00 	.word	0x46020c00

080018a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b0ba      	sub	sp, #232	@ 0xe8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	22c0      	movs	r2, #192	@ 0xc0
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f009 f819 	bl	800a8f8 <memset>
  if(hspi->Instance==SPI1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a27      	ldr	r2, [pc, #156]	@ (8001968 <HAL_SPI_MspInit+0xc8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d146      	bne.n	800195e <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80018d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80018dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80018e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 fc3b 	bl	8004164 <HAL_RCCEx_PeriphCLKConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80018f4:	f7ff ff68 	bl	80017c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018f8:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <HAL_SPI_MspInit+0xcc>)
 80018fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80018fe:	4a1b      	ldr	r2, [pc, #108]	@ (800196c <HAL_SPI_MspInit+0xcc>)
 8001900:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001904:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001908:	4b18      	ldr	r3, [pc, #96]	@ (800196c <HAL_SPI_MspInit+0xcc>)
 800190a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800190e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	4b15      	ldr	r3, [pc, #84]	@ (800196c <HAL_SPI_MspInit+0xcc>)
 8001918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800191c:	4a13      	ldr	r2, [pc, #76]	@ (800196c <HAL_SPI_MspInit+0xcc>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001926:	4b11      	ldr	r3, [pc, #68]	@ (800196c <HAL_SPI_MspInit+0xcc>)
 8001928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001934:	23e0      	movs	r3, #224	@ 0xe0
 8001936:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800194c:	2305      	movs	r3, #5
 800194e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001956:	4619      	mov	r1, r3
 8001958:	4805      	ldr	r0, [pc, #20]	@ (8001970 <HAL_SPI_MspInit+0xd0>)
 800195a:	f000 fe7d 	bl	8002658 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800195e:	bf00      	nop
 8001960:	37e8      	adds	r7, #232	@ 0xe8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40013000 	.word	0x40013000
 800196c:	46020c00 	.word	0x46020c00
 8001970:	42020000 	.word	0x42020000

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <NMI_Handler+0x4>

0800197c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <MemManage_Handler+0x4>

0800198c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <BusFault_Handler+0x4>

08001994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <UsageFault_Handler+0x4>

0800199c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ca:	f000 f9ad 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e00a      	b.n	80019fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019e4:	f3af 8000 	nop.w
 80019e8:	4601      	mov	r1, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	60ba      	str	r2, [r7, #8]
 80019f0:	b2ca      	uxtb	r2, r1
 80019f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dbf0      	blt.n	80019e4 <_read+0x12>
  }

  return len;
 8001a02:	687b      	ldr	r3, [r7, #4]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e009      	b.n	8001a32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	60ba      	str	r2, [r7, #8]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	dbf1      	blt.n	8001a1e <_write+0x12>
  }
  return len;
 8001a3a:	687b      	ldr	r3, [r7, #4]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_close>:

int _close(int file)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_isatty>:

int _isatty(int file)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a84:	2301      	movs	r3, #1
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab4:	4a14      	ldr	r2, [pc, #80]	@ (8001b08 <_sbrk+0x5c>)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <_sbrk+0x60>)
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <_sbrk+0x64>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <_sbrk+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d207      	bcs.n	8001aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001adc:	f008 ff5a 	bl	800a994 <__errno>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	e009      	b.n	8001b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af2:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <_sbrk+0x64>)
 8001afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20040000 	.word	0x20040000
 8001b0c:	00000400 	.word	0x00000400
 8001b10:	20000248 	.word	0x20000248
 8001b14:	20000738 	.word	0x20000738

08001b18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b1c:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <SystemInit+0x68>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b22:	4a17      	ldr	r2, [pc, #92]	@ (8001b80 <SystemInit+0x68>)
 8001b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <SystemInit+0x6c>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001b32:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <SystemInit+0x6c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <SystemInit+0x6c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <SystemInit+0x6c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001b44:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <SystemInit+0x6c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0e      	ldr	r2, [pc, #56]	@ (8001b84 <SystemInit+0x6c>)
 8001b4a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001b4e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001b52:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <SystemInit+0x6c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <SystemInit+0x6c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <SystemInit+0x6c>)
 8001b60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001b66:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <SystemInit+0x6c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b6c:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <SystemInit+0x68>)
 8001b6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b72:	609a      	str	r2, [r3, #8]
  #endif
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00
 8001b84:	46020c00 	.word	0x46020c00

08001b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b88:	480d      	ldr	r0, [pc, #52]	@ (8001bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b8a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b8c:	f7ff ffc4 	bl	8001b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b90:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b92:	490d      	ldr	r1, [pc, #52]	@ (8001bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b94:	4a0d      	ldr	r2, [pc, #52]	@ (8001bcc <LoopForever+0xe>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd4 <LoopForever+0x16>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bb6:	f008 fef3 	bl	800a9a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bba:	f7ff fc23 	bl	8001404 <main>

08001bbe <LoopForever>:

LoopForever:
    b LoopForever
 8001bbe:	e7fe      	b.n	8001bbe <LoopForever>
  ldr   r0, =_estack
 8001bc0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001bcc:	0800be38 	.word	0x0800be38
  ldr r2, =_sbss
 8001bd0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001bd4:	20000738 	.word	0x20000738

08001bd8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC1_IRQHandler>
	...

08001bdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_Init+0x50>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a11      	ldr	r2, [pc, #68]	@ (8001c2c <HAL_Init+0x50>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 f98c 	bl	8001f0a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001bf2:	f002 f915 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c30 <HAL_Init+0x54>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <HAL_Init+0x58>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
 8001c08:	4a0b      	ldr	r2, [pc, #44]	@ (8001c38 <HAL_Init+0x5c>)
 8001c0a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001c0c:	2004      	movs	r0, #4
 8001c0e:	f000 f9d1 	bl	8001fb4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c12:	200f      	movs	r0, #15
 8001c14:	f000 f812 	bl	8001c3c <HAL_InitTick>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e002      	b.n	8001c28 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c22:	f7ff fdd7 	bl	80017d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40022000 	.word	0x40022000
 8001c30:	46020c00 	.word	0x46020c00
 8001c34:	0800bad4 	.word	0x0800bad4
 8001c38:	20000018 	.word	0x20000018

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001c48:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <HAL_InitTick+0xdc>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e05c      	b.n	8001d0e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001c54:	4b31      	ldr	r3, [pc, #196]	@ (8001d1c <HAL_InitTick+0xe0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d10c      	bne.n	8001c7a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001c60:	4b2f      	ldr	r3, [pc, #188]	@ (8001d20 <HAL_InitTick+0xe4>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b2c      	ldr	r3, [pc, #176]	@ (8001d18 <HAL_InitTick+0xdc>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	e037      	b.n	8001cea <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001c7a:	f000 f9f3 	bl	8002064 <HAL_SYSTICK_GetCLKSourceConfig>
 8001c7e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d023      	beq.n	8001cce <HAL_InitTick+0x92>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d82d      	bhi.n	8001ce8 <HAL_InitTick+0xac>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_InitTick+0x5e>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d00d      	beq.n	8001cb4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001c98:	e026      	b.n	8001ce8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001c9a:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <HAL_InitTick+0xe4>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <HAL_InitTick+0xdc>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001ca8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	60fb      	str	r3, [r7, #12]
        break;
 8001cb2:	e01a      	b.n	8001cea <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001cb4:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <HAL_InitTick+0xdc>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cc2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	60fb      	str	r3, [r7, #12]
        break;
 8001ccc:	e00d      	b.n	8001cea <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001cce:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <HAL_InitTick+0xdc>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cdc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	60fb      	str	r3, [r7, #12]
        break;
 8001ce6:	e000      	b.n	8001cea <HAL_InitTick+0xae>
        break;
 8001ce8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f940 	bl	8001f70 <HAL_SYSTICK_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e009      	b.n	8001d0e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8001d02:	f000 f90d 	bl	8001f20 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001d06:	4a07      	ldr	r2, [pc, #28]	@ (8001d24 <HAL_InitTick+0xe8>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000020 	.word	0x20000020
 8001d1c:	e000e010 	.word	0xe000e010
 8001d20:	20000018 	.word	0x20000018
 8001d24:	2000001c 	.word	0x2000001c

08001d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_IncTick+0x20>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_IncTick+0x24>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <HAL_IncTick+0x24>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000020 	.word	0x20000020
 8001d4c:	2000024c 	.word	0x2000024c

08001d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b03      	ldr	r3, [pc, #12]	@ (8001d64 <HAL_GetTick+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	2000024c 	.word	0x2000024c

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff ffee 	bl	8001d50 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d005      	beq.n	8001d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <HAL_Delay+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d8e:	bf00      	nop
 8001d90:	f7ff ffde 	bl	8001d50 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f7      	bhi.n	8001d90 <HAL_Delay+0x28>
  {
  }


}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000020 	.word	0x20000020

08001db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	@ (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db0b      	blt.n	8001e3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4907      	ldr	r1, [pc, #28]	@ (8001e4c <__NVIC_EnableIRQ+0x38>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100

08001e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db0a      	blt.n	8001e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	490c      	ldr	r1, [pc, #48]	@ (8001e9c <__NVIC_SetPriority+0x4c>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	440b      	add	r3, r1
 8001e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e78:	e00a      	b.n	8001e90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4908      	ldr	r1, [pc, #32]	@ (8001ea0 <__NVIC_SetPriority+0x50>)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	3b04      	subs	r3, #4
 8001e88:	0112      	lsls	r2, r2, #4
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	761a      	strb	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	@ 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f1c3 0307 	rsb	r3, r3, #7
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	bf28      	it	cs
 8001ec2:	2304      	movcs	r3, #4
 8001ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d902      	bls.n	8001ed4 <NVIC_EncodePriority+0x30>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3b03      	subs	r3, #3
 8001ed2:	e000      	b.n	8001ed6 <NVIC_EncodePriority+0x32>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	4313      	orrs	r3, r2
         );
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	@ 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ff4c 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2e:	f7ff ff63 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	6978      	ldr	r0, [r7, #20]
 8001f3a:	f7ff ffb3 	bl	8001ea4 <NVIC_EncodePriority>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff82 	bl	8001e50 <__NVIC_SetPriority>
}
 8001f4c:	bf00      	nop
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff56 	bl	8001e14 <__NVIC_EnableIRQ>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f80:	d301      	bcc.n	8001f86 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00d      	b.n	8001fa2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <HAL_SYSTICK_Config+0x40>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <HAL_SYSTICK_Config+0x40>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_SYSTICK_Config+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a05      	ldr	r2, [pc, #20]	@ (8001fb0 <HAL_SYSTICK_Config+0x40>)
 8001f9a:	f043 0303 	orr.w	r3, r3, #3
 8001f9e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d844      	bhi.n	800204c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08001feb 	.word	0x08001feb
 8001fcc:	08002009 	.word	0x08002009
 8001fd0:	0800202b 	.word	0x0800202b
 8001fd4:	0800204d 	.word	0x0800204d
 8001fd8:	08001fdd 	.word	0x08001fdd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800205c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800205c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6013      	str	r3, [r2, #0]
      break;
 8001fe8:	e031      	b.n	800204e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001fea:	4b1c      	ldr	r3, [pc, #112]	@ (800205c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1b      	ldr	r2, [pc, #108]	@ (800205c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ffc:	4a18      	ldr	r2, [pc, #96]	@ (8002060 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ffe:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002006:	e022      	b.n	800204e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002008:	4b14      	ldr	r3, [pc, #80]	@ (800205c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a13      	ldr	r2, [pc, #76]	@ (800205c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800200e:	f023 0304 	bic.w	r3, r3, #4
 8002012:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002014:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800201e:	4a10      	ldr	r2, [pc, #64]	@ (8002060 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002020:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002024:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002028:	e011      	b.n	800204e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800202a:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a0b      	ldr	r2, [pc, #44]	@ (800205c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002036:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800203c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002040:	4a07      	ldr	r2, [pc, #28]	@ (8002060 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002042:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002046:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800204a:	e000      	b.n	800204e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800204c:	bf00      	nop
  }
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010
 8002060:	46020c00 	.word	0x46020c00

08002064 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800206a:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002076:	2304      	movs	r3, #4
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	e021      	b.n	80020c0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800207c:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800207e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002082:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002086:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800208e:	d011      	beq.n	80020b4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002096:	d810      	bhi.n	80020ba <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020a4:	d003      	beq.n	80020ae <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80020a6:	e008      	b.n	80020ba <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80020a8:	2300      	movs	r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
        break;
 80020ac:	e008      	b.n	80020c0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80020ae:	2301      	movs	r3, #1
 80020b0:	607b      	str	r3, [r7, #4]
        break;
 80020b2:	e005      	b.n	80020c0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80020b4:	2302      	movs	r3, #2
 80020b6:	607b      	str	r3, [r7, #4]
        break;
 80020b8:	e002      	b.n	80020c0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
        break;
 80020be:	bf00      	nop
    }
  }
  return systick_source;
 80020c0:	687b      	ldr	r3, [r7, #4]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010
 80020d4:	46020c00 	.word	0x46020c00

080020d8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e02b      	b.n	8002144 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80020f4:	f023 030f 	bic.w	r3, r3, #15
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002102:	3b50      	subs	r3, #80	@ 0x50
 8002104:	09db      	lsrs	r3, r3, #7
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	2201      	movs	r2, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b00      	cmp	r3, #0
 800211a:	d012      	beq.n	8002142 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f003 0311 	and.w	r3, r3, #17
 8002122:	2b11      	cmp	r3, #17
 8002124:	d106      	bne.n	8002134 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	431a      	orrs	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	e006      	b.n	8002142 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	43db      	mvns	r3, r3
 800213c:	401a      	ands	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002158:	f7ff fdfa 	bl	8001d50 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0db      	b.n	8002320 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a6e      	ldr	r2, [pc, #440]	@ (8002328 <HAL_DMAEx_List_Init+0x1d8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	f000 809f 	beq.w	80022b2 <HAL_DMAEx_List_Init+0x162>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a6c      	ldr	r2, [pc, #432]	@ (800232c <HAL_DMAEx_List_Init+0x1dc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	f000 8099 	beq.w	80022b2 <HAL_DMAEx_List_Init+0x162>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a6a      	ldr	r2, [pc, #424]	@ (8002330 <HAL_DMAEx_List_Init+0x1e0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	f000 8093 	beq.w	80022b2 <HAL_DMAEx_List_Init+0x162>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a68      	ldr	r2, [pc, #416]	@ (8002334 <HAL_DMAEx_List_Init+0x1e4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	f000 808d 	beq.w	80022b2 <HAL_DMAEx_List_Init+0x162>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a66      	ldr	r2, [pc, #408]	@ (8002338 <HAL_DMAEx_List_Init+0x1e8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	f000 8087 	beq.w	80022b2 <HAL_DMAEx_List_Init+0x162>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a64      	ldr	r2, [pc, #400]	@ (800233c <HAL_DMAEx_List_Init+0x1ec>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	f000 8081 	beq.w	80022b2 <HAL_DMAEx_List_Init+0x162>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a62      	ldr	r2, [pc, #392]	@ (8002340 <HAL_DMAEx_List_Init+0x1f0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d07b      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a61      	ldr	r2, [pc, #388]	@ (8002344 <HAL_DMAEx_List_Init+0x1f4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d076      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a5f      	ldr	r2, [pc, #380]	@ (8002348 <HAL_DMAEx_List_Init+0x1f8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d071      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a5e      	ldr	r2, [pc, #376]	@ (800234c <HAL_DMAEx_List_Init+0x1fc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d06c      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a5c      	ldr	r2, [pc, #368]	@ (8002350 <HAL_DMAEx_List_Init+0x200>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d067      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002354 <HAL_DMAEx_List_Init+0x204>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d062      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a59      	ldr	r2, [pc, #356]	@ (8002358 <HAL_DMAEx_List_Init+0x208>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d05d      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a58      	ldr	r2, [pc, #352]	@ (800235c <HAL_DMAEx_List_Init+0x20c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d058      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a56      	ldr	r2, [pc, #344]	@ (8002360 <HAL_DMAEx_List_Init+0x210>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d053      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a55      	ldr	r2, [pc, #340]	@ (8002364 <HAL_DMAEx_List_Init+0x214>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d04e      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a53      	ldr	r2, [pc, #332]	@ (8002368 <HAL_DMAEx_List_Init+0x218>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d049      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a52      	ldr	r2, [pc, #328]	@ (800236c <HAL_DMAEx_List_Init+0x21c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d044      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a50      	ldr	r2, [pc, #320]	@ (8002370 <HAL_DMAEx_List_Init+0x220>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d03f      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a4f      	ldr	r2, [pc, #316]	@ (8002374 <HAL_DMAEx_List_Init+0x224>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d03a      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a4d      	ldr	r2, [pc, #308]	@ (8002378 <HAL_DMAEx_List_Init+0x228>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d035      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a4c      	ldr	r2, [pc, #304]	@ (800237c <HAL_DMAEx_List_Init+0x22c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d030      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a4a      	ldr	r2, [pc, #296]	@ (8002380 <HAL_DMAEx_List_Init+0x230>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02b      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a49      	ldr	r2, [pc, #292]	@ (8002384 <HAL_DMAEx_List_Init+0x234>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d026      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a47      	ldr	r2, [pc, #284]	@ (8002388 <HAL_DMAEx_List_Init+0x238>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d021      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a46      	ldr	r2, [pc, #280]	@ (800238c <HAL_DMAEx_List_Init+0x23c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d01c      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a44      	ldr	r2, [pc, #272]	@ (8002390 <HAL_DMAEx_List_Init+0x240>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d017      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a43      	ldr	r2, [pc, #268]	@ (8002394 <HAL_DMAEx_List_Init+0x244>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d012      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a41      	ldr	r2, [pc, #260]	@ (8002398 <HAL_DMAEx_List_Init+0x248>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a40      	ldr	r2, [pc, #256]	@ (800239c <HAL_DMAEx_List_Init+0x24c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d008      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a3e      	ldr	r2, [pc, #248]	@ (80023a0 <HAL_DMAEx_List_Init+0x250>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d003      	beq.n	80022b2 <HAL_DMAEx_List_Init+0x162>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a3d      	ldr	r2, [pc, #244]	@ (80023a4 <HAL_DMAEx_List_Init+0x254>)
 80022b0:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2202      	movs	r2, #2
 80022be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0206 	orr.w	r2, r2, #6
 80022d0:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80022d2:	e00f      	b.n	80022f4 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80022d4:	f7ff fd3c 	bl	8001d50 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d908      	bls.n	80022f4 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2210      	movs	r2, #16
 80022e6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2203      	movs	r2, #3
 80022ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e015      	b.n	8002320 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1e8      	bne.n	80022d4 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f850 	bl	80023a8 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40020050 	.word	0x40020050
 800232c:	50020050 	.word	0x50020050
 8002330:	400200d0 	.word	0x400200d0
 8002334:	500200d0 	.word	0x500200d0
 8002338:	40020150 	.word	0x40020150
 800233c:	50020150 	.word	0x50020150
 8002340:	400201d0 	.word	0x400201d0
 8002344:	500201d0 	.word	0x500201d0
 8002348:	40020250 	.word	0x40020250
 800234c:	50020250 	.word	0x50020250
 8002350:	400202d0 	.word	0x400202d0
 8002354:	500202d0 	.word	0x500202d0
 8002358:	40020350 	.word	0x40020350
 800235c:	50020350 	.word	0x50020350
 8002360:	400203d0 	.word	0x400203d0
 8002364:	500203d0 	.word	0x500203d0
 8002368:	40020450 	.word	0x40020450
 800236c:	50020450 	.word	0x50020450
 8002370:	400204d0 	.word	0x400204d0
 8002374:	500204d0 	.word	0x500204d0
 8002378:	40020550 	.word	0x40020550
 800237c:	50020550 	.word	0x50020550
 8002380:	400205d0 	.word	0x400205d0
 8002384:	500205d0 	.word	0x500205d0
 8002388:	40020650 	.word	0x40020650
 800238c:	50020650 	.word	0x50020650
 8002390:	400206d0 	.word	0x400206d0
 8002394:	500206d0 	.word	0x500206d0
 8002398:	40020750 	.word	0x40020750
 800239c:	50020750 	.word	0x50020750
 80023a0:	400207d0 	.word	0x400207d0
 80023a4:	500207d0 	.word	0x500207d0

080023a8 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a85      	ldr	r2, [pc, #532]	@ (80025d8 <DMA_List_Init+0x230>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	f000 80a0 	beq.w	8002508 <DMA_List_Init+0x160>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a83      	ldr	r2, [pc, #524]	@ (80025dc <DMA_List_Init+0x234>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	f000 809a 	beq.w	8002508 <DMA_List_Init+0x160>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a81      	ldr	r2, [pc, #516]	@ (80025e0 <DMA_List_Init+0x238>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	f000 8094 	beq.w	8002508 <DMA_List_Init+0x160>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a7f      	ldr	r2, [pc, #508]	@ (80025e4 <DMA_List_Init+0x23c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	f000 808e 	beq.w	8002508 <DMA_List_Init+0x160>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a7d      	ldr	r2, [pc, #500]	@ (80025e8 <DMA_List_Init+0x240>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	f000 8088 	beq.w	8002508 <DMA_List_Init+0x160>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a7b      	ldr	r2, [pc, #492]	@ (80025ec <DMA_List_Init+0x244>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	f000 8082 	beq.w	8002508 <DMA_List_Init+0x160>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a79      	ldr	r2, [pc, #484]	@ (80025f0 <DMA_List_Init+0x248>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d07c      	beq.n	8002508 <DMA_List_Init+0x160>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a78      	ldr	r2, [pc, #480]	@ (80025f4 <DMA_List_Init+0x24c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d077      	beq.n	8002508 <DMA_List_Init+0x160>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a76      	ldr	r2, [pc, #472]	@ (80025f8 <DMA_List_Init+0x250>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d072      	beq.n	8002508 <DMA_List_Init+0x160>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a75      	ldr	r2, [pc, #468]	@ (80025fc <DMA_List_Init+0x254>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d06d      	beq.n	8002508 <DMA_List_Init+0x160>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a73      	ldr	r2, [pc, #460]	@ (8002600 <DMA_List_Init+0x258>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d068      	beq.n	8002508 <DMA_List_Init+0x160>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a72      	ldr	r2, [pc, #456]	@ (8002604 <DMA_List_Init+0x25c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d063      	beq.n	8002508 <DMA_List_Init+0x160>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a70      	ldr	r2, [pc, #448]	@ (8002608 <DMA_List_Init+0x260>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d05e      	beq.n	8002508 <DMA_List_Init+0x160>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6f      	ldr	r2, [pc, #444]	@ (800260c <DMA_List_Init+0x264>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d059      	beq.n	8002508 <DMA_List_Init+0x160>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a6d      	ldr	r2, [pc, #436]	@ (8002610 <DMA_List_Init+0x268>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d054      	beq.n	8002508 <DMA_List_Init+0x160>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6c      	ldr	r2, [pc, #432]	@ (8002614 <DMA_List_Init+0x26c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d04f      	beq.n	8002508 <DMA_List_Init+0x160>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a6a      	ldr	r2, [pc, #424]	@ (8002618 <DMA_List_Init+0x270>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d04a      	beq.n	8002508 <DMA_List_Init+0x160>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a69      	ldr	r2, [pc, #420]	@ (800261c <DMA_List_Init+0x274>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d045      	beq.n	8002508 <DMA_List_Init+0x160>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a67      	ldr	r2, [pc, #412]	@ (8002620 <DMA_List_Init+0x278>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d040      	beq.n	8002508 <DMA_List_Init+0x160>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a66      	ldr	r2, [pc, #408]	@ (8002624 <DMA_List_Init+0x27c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d03b      	beq.n	8002508 <DMA_List_Init+0x160>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a64      	ldr	r2, [pc, #400]	@ (8002628 <DMA_List_Init+0x280>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d036      	beq.n	8002508 <DMA_List_Init+0x160>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a63      	ldr	r2, [pc, #396]	@ (800262c <DMA_List_Init+0x284>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d031      	beq.n	8002508 <DMA_List_Init+0x160>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a61      	ldr	r2, [pc, #388]	@ (8002630 <DMA_List_Init+0x288>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d02c      	beq.n	8002508 <DMA_List_Init+0x160>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a60      	ldr	r2, [pc, #384]	@ (8002634 <DMA_List_Init+0x28c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d027      	beq.n	8002508 <DMA_List_Init+0x160>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002638 <DMA_List_Init+0x290>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d022      	beq.n	8002508 <DMA_List_Init+0x160>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a5d      	ldr	r2, [pc, #372]	@ (800263c <DMA_List_Init+0x294>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d01d      	beq.n	8002508 <DMA_List_Init+0x160>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a5b      	ldr	r2, [pc, #364]	@ (8002640 <DMA_List_Init+0x298>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d018      	beq.n	8002508 <DMA_List_Init+0x160>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a5a      	ldr	r2, [pc, #360]	@ (8002644 <DMA_List_Init+0x29c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d013      	beq.n	8002508 <DMA_List_Init+0x160>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a58      	ldr	r2, [pc, #352]	@ (8002648 <DMA_List_Init+0x2a0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00e      	beq.n	8002508 <DMA_List_Init+0x160>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a57      	ldr	r2, [pc, #348]	@ (800264c <DMA_List_Init+0x2a4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d009      	beq.n	8002508 <DMA_List_Init+0x160>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a55      	ldr	r2, [pc, #340]	@ (8002650 <DMA_List_Init+0x2a8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <DMA_List_Init+0x160>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a54      	ldr	r2, [pc, #336]	@ (8002654 <DMA_List_Init+0x2ac>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d101      	bne.n	800250c <DMA_List_Init+0x164>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <DMA_List_Init+0x166>
 800250c:	2300      	movs	r3, #0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	430a      	orrs	r2, r1
 800252e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2200      	movs	r2, #0
 8002536:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002540:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2200      	movs	r2, #0
 8002548:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2200      	movs	r2, #0
 8002550:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2200      	movs	r2, #0
 8002558:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a36      	ldr	r2, [pc, #216]	@ (8002638 <DMA_List_Init+0x290>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d022      	beq.n	80025aa <DMA_List_Init+0x202>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a34      	ldr	r2, [pc, #208]	@ (800263c <DMA_List_Init+0x294>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d01d      	beq.n	80025aa <DMA_List_Init+0x202>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a33      	ldr	r2, [pc, #204]	@ (8002640 <DMA_List_Init+0x298>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d018      	beq.n	80025aa <DMA_List_Init+0x202>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a31      	ldr	r2, [pc, #196]	@ (8002644 <DMA_List_Init+0x29c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <DMA_List_Init+0x202>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a30      	ldr	r2, [pc, #192]	@ (8002648 <DMA_List_Init+0x2a0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d00e      	beq.n	80025aa <DMA_List_Init+0x202>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2e      	ldr	r2, [pc, #184]	@ (800264c <DMA_List_Init+0x2a4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d009      	beq.n	80025aa <DMA_List_Init+0x202>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a2d      	ldr	r2, [pc, #180]	@ (8002650 <DMA_List_Init+0x2a8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d004      	beq.n	80025aa <DMA_List_Init+0x202>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002654 <DMA_List_Init+0x2ac>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <DMA_List_Init+0x206>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <DMA_List_Init+0x208>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2200      	movs	r2, #0
 80025ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2200      	movs	r2, #0
 80025c2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2200      	movs	r2, #0
 80025ca:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40020050 	.word	0x40020050
 80025dc:	50020050 	.word	0x50020050
 80025e0:	400200d0 	.word	0x400200d0
 80025e4:	500200d0 	.word	0x500200d0
 80025e8:	40020150 	.word	0x40020150
 80025ec:	50020150 	.word	0x50020150
 80025f0:	400201d0 	.word	0x400201d0
 80025f4:	500201d0 	.word	0x500201d0
 80025f8:	40020250 	.word	0x40020250
 80025fc:	50020250 	.word	0x50020250
 8002600:	400202d0 	.word	0x400202d0
 8002604:	500202d0 	.word	0x500202d0
 8002608:	40020350 	.word	0x40020350
 800260c:	50020350 	.word	0x50020350
 8002610:	400203d0 	.word	0x400203d0
 8002614:	500203d0 	.word	0x500203d0
 8002618:	40020450 	.word	0x40020450
 800261c:	50020450 	.word	0x50020450
 8002620:	400204d0 	.word	0x400204d0
 8002624:	500204d0 	.word	0x500204d0
 8002628:	40020550 	.word	0x40020550
 800262c:	50020550 	.word	0x50020550
 8002630:	400205d0 	.word	0x400205d0
 8002634:	500205d0 	.word	0x500205d0
 8002638:	40020650 	.word	0x40020650
 800263c:	50020650 	.word	0x50020650
 8002640:	400206d0 	.word	0x400206d0
 8002644:	500206d0 	.word	0x500206d0
 8002648:	40020750 	.word	0x40020750
 800264c:	50020750 	.word	0x50020750
 8002650:	400207d0 	.word	0x400207d0
 8002654:	500207d0 	.word	0x500207d0

08002658 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	@ 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800266a:	e1ba      	b.n	80029e2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	fa01 f303 	lsl.w	r3, r1, r3
 8002678:	4013      	ands	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 81aa 	beq.w	80029dc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a55      	ldr	r2, [pc, #340]	@ (80027e0 <HAL_GPIO_Init+0x188>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d15d      	bne.n	800274c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002696:	2201      	movs	r2, #1
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0201 	and.w	r2, r3, #1
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80026c0:	4a48      	ldr	r2, [pc, #288]	@ (80027e4 <HAL_GPIO_Init+0x18c>)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026c8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80026ca:	4a46      	ldr	r2, [pc, #280]	@ (80027e4 <HAL_GPIO_Init+0x18c>)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	08da      	lsrs	r2, r3, #3
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	3208      	adds	r2, #8
 80026de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	220b      	movs	r2, #11
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	4313      	orrs	r3, r2
 800270c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	08da      	lsrs	r2, r3, #3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	3208      	adds	r2, #8
 8002716:	69f9      	ldr	r1, [r7, #28]
 8002718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	2203      	movs	r2, #3
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	4013      	ands	r3, r2
 8002732:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	2202      	movs	r2, #2
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	4313      	orrs	r3, r2
 8002742:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e067      	b.n	800281c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0x104>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b12      	cmp	r3, #18
 800275a:	d145      	bne.n	80027e8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	08da      	lsrs	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3208      	adds	r2, #8
 8002764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002768:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	4013      	ands	r3, r2
 800277e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	f003 020f 	and.w	r2, r3, #15
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	4313      	orrs	r3, r2
 8002798:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	69f9      	ldr	r1, [r7, #28]
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	4013      	ands	r3, r2
 80027be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e01e      	b.n	800281c <HAL_GPIO_Init+0x1c4>
 80027de:	bf00      	nop
 80027e0:	46020000 	.word	0x46020000
 80027e4:	0800bb24 	.word	0x0800bb24
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	4313      	orrs	r3, r2
 8002814:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d00b      	beq.n	800283c <HAL_GPIO_Init+0x1e4>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d007      	beq.n	800283c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002830:	2b11      	cmp	r3, #17
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b12      	cmp	r3, #18
 800283a:	d130      	bne.n	800289e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	4013      	ands	r3, r2
 8002852:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	4313      	orrs	r3, r2
 8002864:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002872:	2201      	movs	r2, #1
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	4013      	ands	r3, r2
 8002880:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 0201 	and.w	r2, r3, #1
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	4313      	orrs	r3, r2
 8002896:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d017      	beq.n	80028d6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	2203      	movs	r2, #3
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d07c      	beq.n	80029dc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80028e2:	4a47      	ldr	r2, [pc, #284]	@ (8002a00 <HAL_GPIO_Init+0x3a8>)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3318      	adds	r3, #24
 80028ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	4013      	ands	r3, r2
 8002904:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	0a9a      	lsrs	r2, r3, #10
 800290a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a04 <HAL_GPIO_Init+0x3ac>)
 800290c:	4013      	ands	r3, r2
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	f002 0203 	and.w	r2, r2, #3
 8002914:	00d2      	lsls	r2, r2, #3
 8002916:	4093      	lsls	r3, r2
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	4313      	orrs	r3, r2
 800291c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800291e:	4938      	ldr	r1, [pc, #224]	@ (8002a00 <HAL_GPIO_Init+0x3a8>)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3318      	adds	r3, #24
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800292c:	4b34      	ldr	r3, [pc, #208]	@ (8002a00 <HAL_GPIO_Init+0x3a8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	4013      	ands	r3, r2
 800293a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002950:	4a2b      	ldr	r2, [pc, #172]	@ (8002a00 <HAL_GPIO_Init+0x3a8>)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002956:	4b2a      	ldr	r3, [pc, #168]	@ (8002a00 <HAL_GPIO_Init+0x3a8>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	43db      	mvns	r3, r3
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	4013      	ands	r3, r2
 8002964:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800297a:	4a21      	ldr	r2, [pc, #132]	@ (8002a00 <HAL_GPIO_Init+0x3a8>)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002980:	4b1f      	ldr	r3, [pc, #124]	@ (8002a00 <HAL_GPIO_Init+0x3a8>)
 8002982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002986:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	43db      	mvns	r3, r3
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	4013      	ands	r3, r2
 8002990:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80029a6:	4a16      	ldr	r2, [pc, #88]	@ (8002a00 <HAL_GPIO_Init+0x3a8>)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80029ae:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <HAL_GPIO_Init+0x3a8>)
 80029b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	4013      	ands	r3, r2
 80029be:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80029d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a00 <HAL_GPIO_Init+0x3a8>)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3301      	adds	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f47f ae3d 	bne.w	800266c <HAL_GPIO_Init+0x14>
  }
}
 80029f2:	bf00      	nop
 80029f4:	bf00      	nop
 80029f6:	3724      	adds	r7, #36	@ 0x24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	46022000 	.word	0x46022000
 8002a04:	002f7f7f 	.word	0x002f7f7f

08002a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e001      	b.n	8002a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
 8002a44:	4613      	mov	r3, r2
 8002a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a48:	787b      	ldrb	r3, [r7, #1]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002a54:	e002      	b.n	8002a5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002a72:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f004 f904 	bl	8006c94 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002a8c:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002a98:	4a05      	ldr	r2, [pc, #20]	@ (8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 f807 	bl	8002ab4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	46022000 	.word	0x46022000

08002ab4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002ad4:	4b39      	ldr	r3, [pc, #228]	@ (8002bbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002adc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d10b      	bne.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aec:	d905      	bls.n	8002afa <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002aee:	4b33      	ldr	r3, [pc, #204]	@ (8002bbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	4a32      	ldr	r2, [pc, #200]	@ (8002bbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e057      	b.n	8002bae <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b04:	d90a      	bls.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002b06:	4b2d      	ldr	r3, [pc, #180]	@ (8002bbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	4a2a      	ldr	r2, [pc, #168]	@ (8002bbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b18:	60d3      	str	r3, [r2, #12]
 8002b1a:	e007      	b.n	8002b2c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002b1c:	4b27      	ldr	r3, [pc, #156]	@ (8002bbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002b24:	4925      	ldr	r1, [pc, #148]	@ (8002bbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002b2c:	4b24      	ldr	r3, [pc, #144]	@ (8002bc0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a24      	ldr	r2, [pc, #144]	@ (8002bc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	099b      	lsrs	r3, r3, #6
 8002b38:	2232      	movs	r2, #50	@ 0x32
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	4a21      	ldr	r2, [pc, #132]	@ (8002bc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	099b      	lsrs	r3, r3, #6
 8002b46:	3301      	adds	r3, #1
 8002b48:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002b4a:	e002      	b.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002b52:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d102      	bne.n	8002b64 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f3      	bne.n	8002b4c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01b      	beq.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a15      	ldr	r2, [pc, #84]	@ (8002bc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	2232      	movs	r2, #50	@ 0x32
 8002b78:	fb02 f303 	mul.w	r3, r2, r3
 8002b7c:	4a11      	ldr	r2, [pc, #68]	@ (8002bc4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	099b      	lsrs	r3, r3, #6
 8002b84:	3301      	adds	r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002b88:	e002      	b.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002b90:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f3      	bne.n	8002b8a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e000      	b.n	8002bae <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	46020800 	.word	0x46020800
 8002bc0:	20000018 	.word	0x20000018
 8002bc4:	10624dd3 	.word	0x10624dd3

08002bc8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002bcc:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	46020800 	.word	0x46020800

08002be4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002bec:	4b22      	ldr	r3, [pc, #136]	@ (8002c78 <HAL_PWREx_ConfigSupply+0x94>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a22      	ldr	r2, [pc, #136]	@ (8002c7c <HAL_PWREx_ConfigSupply+0x98>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	2232      	movs	r2, #50	@ 0x32
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8002c7c <HAL_PWREx_ConfigSupply+0x98>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	3301      	adds	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d113      	bne.n	8002c38 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002c10:	4b1b      	ldr	r3, [pc, #108]	@ (8002c80 <HAL_PWREx_ConfigSupply+0x9c>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a1a      	ldr	r2, [pc, #104]	@ (8002c80 <HAL_PWREx_ConfigSupply+0x9c>)
 8002c16:	f023 0302 	bic.w	r3, r3, #2
 8002c1a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002c1c:	e002      	b.n	8002c24 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002c24:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <HAL_PWREx_ConfigSupply+0x9c>)
 8002c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d116      	bne.n	8002c5e <HAL_PWREx_ConfigSupply+0x7a>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f3      	bne.n	8002c1e <HAL_PWREx_ConfigSupply+0x3a>
 8002c36:	e012      	b.n	8002c5e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002c38:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <HAL_PWREx_ConfigSupply+0x9c>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4a10      	ldr	r2, [pc, #64]	@ (8002c80 <HAL_PWREx_ConfigSupply+0x9c>)
 8002c3e:	f043 0302 	orr.w	r3, r3, #2
 8002c42:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002c44:	e002      	b.n	8002c4c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <HAL_PWREx_ConfigSupply+0x9c>)
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <HAL_PWREx_ConfigSupply+0x7a>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f3      	bne.n	8002c46 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e000      	b.n	8002c6a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000018 	.word	0x20000018
 8002c7c:	10624dd3 	.word	0x10624dd3
 8002c80:	46020800 	.word	0x46020800

08002c84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08e      	sub	sp, #56	@ 0x38
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	f000 bec8 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9e:	4b99      	ldr	r3, [pc, #612]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca8:	4b96      	ldr	r3, [pc, #600]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 816c 	beq.w	8002f98 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x52>
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc8:	2b0c      	cmp	r3, #12
 8002cca:	f040 80de 	bne.w	8002e8a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	f040 80da 	bne.w	8002e8a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f000 bea5 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce8:	4b86      	ldr	r3, [pc, #536]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <HAL_RCC_OscConfig+0x7a>
 8002cf4:	4b83      	ldr	r3, [pc, #524]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002cfc:	e005      	b.n	8002d0a <HAL_RCC_OscConfig+0x86>
 8002cfe:	4b81      	ldr	r3, [pc, #516]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d04:	041b      	lsls	r3, r3, #16
 8002d06:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d255      	bcs.n	8002dba <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 f99d 	bl	8004058 <RCC_SetFlashLatencyFromMSIRange>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f000 be82 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002d2a:	4b76      	ldr	r3, [pc, #472]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	4a75      	ldr	r2, [pc, #468]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002d30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d34:	6093      	str	r3, [r2, #8]
 8002d36:	4b73      	ldr	r3, [pc, #460]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	4970      	ldr	r1, [pc, #448]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002d50:	d309      	bcc.n	8002d66 <HAL_RCC_OscConfig+0xe2>
 8002d52:	4b6c      	ldr	r3, [pc, #432]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f023 021f 	bic.w	r2, r3, #31
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4969      	ldr	r1, [pc, #420]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60cb      	str	r3, [r1, #12]
 8002d64:	e07e      	b.n	8002e64 <HAL_RCC_OscConfig+0x1e0>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da0a      	bge.n	8002d84 <HAL_RCC_OscConfig+0x100>
 8002d6e:	4b65      	ldr	r3, [pc, #404]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	015b      	lsls	r3, r3, #5
 8002d7c:	4961      	ldr	r1, [pc, #388]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60cb      	str	r3, [r1, #12]
 8002d82:	e06f      	b.n	8002e64 <HAL_RCC_OscConfig+0x1e0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d8c:	d30a      	bcc.n	8002da4 <HAL_RCC_OscConfig+0x120>
 8002d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	029b      	lsls	r3, r3, #10
 8002d9c:	4959      	ldr	r1, [pc, #356]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60cb      	str	r3, [r1, #12]
 8002da2:	e05f      	b.n	8002e64 <HAL_RCC_OscConfig+0x1e0>
 8002da4:	4b57      	ldr	r3, [pc, #348]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	03db      	lsls	r3, r3, #15
 8002db2:	4954      	ldr	r1, [pc, #336]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60cb      	str	r3, [r1, #12]
 8002db8:	e054      	b.n	8002e64 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002dba:	4b52      	ldr	r3, [pc, #328]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4a51      	ldr	r2, [pc, #324]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dc4:	6093      	str	r3, [r2, #8]
 8002dc6:	4b4f      	ldr	r3, [pc, #316]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	494c      	ldr	r1, [pc, #304]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002de0:	d309      	bcc.n	8002df6 <HAL_RCC_OscConfig+0x172>
 8002de2:	4b48      	ldr	r3, [pc, #288]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f023 021f 	bic.w	r2, r3, #31
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4945      	ldr	r1, [pc, #276]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60cb      	str	r3, [r1, #12]
 8002df4:	e028      	b.n	8002e48 <HAL_RCC_OscConfig+0x1c4>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	da0a      	bge.n	8002e14 <HAL_RCC_OscConfig+0x190>
 8002dfe:	4b41      	ldr	r3, [pc, #260]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	015b      	lsls	r3, r3, #5
 8002e0c:	493d      	ldr	r1, [pc, #244]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60cb      	str	r3, [r1, #12]
 8002e12:	e019      	b.n	8002e48 <HAL_RCC_OscConfig+0x1c4>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1c:	d30a      	bcc.n	8002e34 <HAL_RCC_OscConfig+0x1b0>
 8002e1e:	4b39      	ldr	r3, [pc, #228]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	029b      	lsls	r3, r3, #10
 8002e2c:	4935      	ldr	r1, [pc, #212]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60cb      	str	r3, [r1, #12]
 8002e32:	e009      	b.n	8002e48 <HAL_RCC_OscConfig+0x1c4>
 8002e34:	4b33      	ldr	r3, [pc, #204]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	03db      	lsls	r3, r3, #15
 8002e42:	4930      	ldr	r1, [pc, #192]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10a      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	4618      	mov	r0, r3
 8002e54:	f001 f900 	bl	8004058 <RCC_SetFlashLatencyFromMSIRange>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	f000 bde5 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002e64:	f001 f8de 	bl	8004024 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e68:	4b27      	ldr	r3, [pc, #156]	@ (8002f08 <HAL_RCC_OscConfig+0x284>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe fee5 	bl	8001c3c <HAL_InitTick>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8002e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 808a 	beq.w	8002f96 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002e82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e86:	f000 bdd2 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d066      	beq.n	8002f60 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002e92:	4b1c      	ldr	r3, [pc, #112]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1b      	ldr	r2, [pc, #108]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e9e:	f7fe ff57 	bl	8001d50 <HAL_GetTick>
 8002ea2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002ea4:	e009      	b.n	8002eba <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ea6:	f7fe ff53 	bl	8001d50 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d902      	bls.n	8002eba <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	f000 bdba 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002eba:	4b12      	ldr	r3, [pc, #72]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0ef      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	4a0e      	ldr	r2, [pc, #56]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002ecc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ed0:	6093      	str	r3, [r2, #8]
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	4909      	ldr	r1, [pc, #36]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002eec:	d30e      	bcc.n	8002f0c <HAL_RCC_OscConfig+0x288>
 8002eee:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f023 021f 	bic.w	r2, r3, #31
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4902      	ldr	r1, [pc, #8]	@ (8002f04 <HAL_RCC_OscConfig+0x280>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60cb      	str	r3, [r1, #12]
 8002f00:	e04a      	b.n	8002f98 <HAL_RCC_OscConfig+0x314>
 8002f02:	bf00      	nop
 8002f04:	46020c00 	.word	0x46020c00
 8002f08:	2000001c 	.word	0x2000001c
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da0a      	bge.n	8002f2a <HAL_RCC_OscConfig+0x2a6>
 8002f14:	4b98      	ldr	r3, [pc, #608]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	015b      	lsls	r3, r3, #5
 8002f22:	4995      	ldr	r1, [pc, #596]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60cb      	str	r3, [r1, #12]
 8002f28:	e036      	b.n	8002f98 <HAL_RCC_OscConfig+0x314>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f32:	d30a      	bcc.n	8002f4a <HAL_RCC_OscConfig+0x2c6>
 8002f34:	4b90      	ldr	r3, [pc, #576]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	029b      	lsls	r3, r3, #10
 8002f42:	498d      	ldr	r1, [pc, #564]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60cb      	str	r3, [r1, #12]
 8002f48:	e026      	b.n	8002f98 <HAL_RCC_OscConfig+0x314>
 8002f4a:	4b8b      	ldr	r3, [pc, #556]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	03db      	lsls	r3, r3, #15
 8002f58:	4987      	ldr	r1, [pc, #540]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60cb      	str	r3, [r1, #12]
 8002f5e:	e01b      	b.n	8002f98 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002f60:	4b85      	ldr	r3, [pc, #532]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a84      	ldr	r2, [pc, #528]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f66:	f023 0301 	bic.w	r3, r3, #1
 8002f6a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f6c:	f7fe fef0 	bl	8001d50 <HAL_GetTick>
 8002f70:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002f72:	e009      	b.n	8002f88 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f74:	f7fe feec 	bl	8001d50 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d902      	bls.n	8002f88 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	f000 bd53 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002f88:	4b7b      	ldr	r3, [pc, #492]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1ef      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2f0>
 8002f94:	e000      	b.n	8002f98 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 808b 	beq.w	80030bc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x334>
 8002fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fae:	2b0c      	cmp	r3, #12
 8002fb0:	d109      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d17d      	bne.n	80030bc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f000 bd34 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x35a>
 8002fd0:	4b69      	ldr	r3, [pc, #420]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a68      	ldr	r2, [pc, #416]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	e041      	b.n	8003062 <HAL_RCC_OscConfig+0x3de>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fe6:	d112      	bne.n	800300e <HAL_RCC_OscConfig+0x38a>
 8002fe8:	4b63      	ldr	r3, [pc, #396]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a62      	ldr	r2, [pc, #392]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b60      	ldr	r3, [pc, #384]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a5f      	ldr	r2, [pc, #380]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002ffa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b5d      	ldr	r3, [pc, #372]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a5c      	ldr	r2, [pc, #368]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e029      	b.n	8003062 <HAL_RCC_OscConfig+0x3de>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003016:	d112      	bne.n	800303e <HAL_RCC_OscConfig+0x3ba>
 8003018:	4b57      	ldr	r3, [pc, #348]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a56      	ldr	r2, [pc, #344]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800301e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b54      	ldr	r3, [pc, #336]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a53      	ldr	r2, [pc, #332]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800302a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b51      	ldr	r3, [pc, #324]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a50      	ldr	r2, [pc, #320]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	e011      	b.n	8003062 <HAL_RCC_OscConfig+0x3de>
 800303e:	4b4e      	ldr	r3, [pc, #312]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a4d      	ldr	r2, [pc, #308]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b4b      	ldr	r3, [pc, #300]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a4a      	ldr	r2, [pc, #296]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003050:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b48      	ldr	r3, [pc, #288]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a47      	ldr	r2, [pc, #284]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800305c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003060:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d014      	beq.n	8003094 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800306a:	f7fe fe71 	bl	8001d50 <HAL_GetTick>
 800306e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003070:	e009      	b.n	8003086 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003072:	f7fe fe6d 	bl	8001d50 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b64      	cmp	r3, #100	@ 0x64
 800307e:	d902      	bls.n	8003086 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	f000 bcd4 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003086:	4b3c      	ldr	r3, [pc, #240]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0ef      	beq.n	8003072 <HAL_RCC_OscConfig+0x3ee>
 8003092:	e013      	b.n	80030bc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003094:	f7fe fe5c 	bl	8001d50 <HAL_GetTick>
 8003098:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800309a:	e009      	b.n	80030b0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309c:	f7fe fe58 	bl	8001d50 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	@ 0x64
 80030a8:	d902      	bls.n	80030b0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	f000 bcbf 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030b0:	4b31      	ldr	r3, [pc, #196]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1ef      	bne.n	800309c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d05f      	beq.n	8003188 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d005      	beq.n	80030da <HAL_RCC_OscConfig+0x456>
 80030ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	d114      	bne.n	80030fe <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d111      	bne.n	80030fe <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	f000 bca3 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80030e8:	4b23      	ldr	r3, [pc, #140]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	4920      	ldr	r1, [pc, #128]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80030fc:	e044      	b.n	8003188 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d024      	beq.n	8003150 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003106:	4b1c      	ldr	r3, [pc, #112]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1b      	ldr	r2, [pc, #108]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003110:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003112:	f7fe fe1d 	bl	8001d50 <HAL_GetTick>
 8003116:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003118:	e009      	b.n	800312e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311a:	f7fe fe19 	bl	8001d50 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d902      	bls.n	800312e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	f000 bc80 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800312e:	4b12      	ldr	r3, [pc, #72]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0ef      	beq.n	800311a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800313a:	4b0f      	ldr	r3, [pc, #60]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	041b      	lsls	r3, r3, #16
 8003148:	490b      	ldr	r1, [pc, #44]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	610b      	str	r3, [r1, #16]
 800314e:	e01b      	b.n	8003188 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003150:	4b09      	ldr	r3, [pc, #36]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a08      	ldr	r2, [pc, #32]	@ (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003156:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800315a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800315c:	f7fe fdf8 	bl	8001d50 <HAL_GetTick>
 8003160:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003164:	f7fe fdf4 	bl	8001d50 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d904      	bls.n	800317c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	f000 bc5b 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
 8003178:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800317c:	4baf      	ldr	r3, [pc, #700]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1ed      	bne.n	8003164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80c8 	beq.w	8003326 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003196:	2300      	movs	r3, #0
 8003198:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319c:	4ba7      	ldr	r3, [pc, #668]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 800319e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d111      	bne.n	80031ce <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	4ba4      	ldr	r3, [pc, #656]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80031ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031b0:	4aa2      	ldr	r2, [pc, #648]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80031ba:	4ba0      	ldr	r3, [pc, #640]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80031bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80031ce:	4b9c      	ldr	r3, [pc, #624]	@ (8003440 <HAL_RCC_OscConfig+0x7bc>)
 80031d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d119      	bne.n	800320e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80031da:	4b99      	ldr	r3, [pc, #612]	@ (8003440 <HAL_RCC_OscConfig+0x7bc>)
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	4a98      	ldr	r2, [pc, #608]	@ (8003440 <HAL_RCC_OscConfig+0x7bc>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e6:	f7fe fdb3 	bl	8001d50 <HAL_GetTick>
 80031ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80031ec:	e009      	b.n	8003202 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ee:	f7fe fdaf 	bl	8001d50 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d902      	bls.n	8003202 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	f000 bc16 	b.w	8003a2e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003202:	4b8f      	ldr	r3, [pc, #572]	@ (8003440 <HAL_RCC_OscConfig+0x7bc>)
 8003204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ef      	beq.n	80031ee <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d05f      	beq.n	80032d6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003216:	4b89      	ldr	r3, [pc, #548]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 8003218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800321c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003228:	429a      	cmp	r2, r3
 800322a:	d037      	beq.n	800329c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d006      	beq.n	8003244 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e3f4      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d01b      	beq.n	8003286 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800324e:	4b7b      	ldr	r3, [pc, #492]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 8003250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003254:	4a79      	ldr	r2, [pc, #484]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 8003256:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800325a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800325e:	f7fe fd77 	bl	8001d50 <HAL_GetTick>
 8003262:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003266:	f7fe fd73 	bl	8001d50 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b05      	cmp	r3, #5
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e3da      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003278:	4b70      	ldr	r3, [pc, #448]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 800327a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800327e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1ef      	bne.n	8003266 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003286:	4b6d      	ldr	r3, [pc, #436]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 8003288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800328c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	4969      	ldr	r1, [pc, #420]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800329c:	4b67      	ldr	r3, [pc, #412]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 800329e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032a2:	4a66      	ldr	r2, [pc, #408]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80032a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80032ac:	f7fe fd50 	bl	8001d50 <HAL_GetTick>
 80032b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fe fd4c 	bl	8001d50 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e3b3      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80032c6:	4b5d      	ldr	r3, [pc, #372]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80032c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0ef      	beq.n	80032b4 <HAL_RCC_OscConfig+0x630>
 80032d4:	e01b      	b.n	800330e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80032d6:	4b59      	ldr	r3, [pc, #356]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80032d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032dc:	4a57      	ldr	r2, [pc, #348]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80032de:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80032e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80032e6:	f7fe fd33 	bl	8001d50 <HAL_GetTick>
 80032ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ee:	f7fe fd2f 	bl	8001d50 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e396      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003300:	4b4e      	ldr	r3, [pc, #312]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 8003302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003306:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1ef      	bne.n	80032ee <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800330e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003312:	2b01      	cmp	r3, #1
 8003314:	d107      	bne.n	8003326 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003316:	4b49      	ldr	r3, [pc, #292]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 8003318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800331c:	4a47      	ldr	r2, [pc, #284]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 800331e:	f023 0304 	bic.w	r3, r3, #4
 8003322:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8111 	beq.w	8003556 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333a:	4b40      	ldr	r3, [pc, #256]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 800333c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d111      	bne.n	800336c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003348:	4b3c      	ldr	r3, [pc, #240]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 800334a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800334e:	4a3b      	ldr	r2, [pc, #236]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003358:	4b38      	ldr	r3, [pc, #224]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 800335a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800336c:	4b34      	ldr	r3, [pc, #208]	@ (8003440 <HAL_RCC_OscConfig+0x7bc>)
 800336e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d118      	bne.n	80033aa <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003378:	4b31      	ldr	r3, [pc, #196]	@ (8003440 <HAL_RCC_OscConfig+0x7bc>)
 800337a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337c:	4a30      	ldr	r2, [pc, #192]	@ (8003440 <HAL_RCC_OscConfig+0x7bc>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003384:	f7fe fce4 	bl	8001d50 <HAL_GetTick>
 8003388:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338c:	f7fe fce0 	bl	8001d50 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e347      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800339e:	4b28      	ldr	r3, [pc, #160]	@ (8003440 <HAL_RCC_OscConfig+0x7bc>)
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01f      	beq.n	80033f6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d010      	beq.n	80033e4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80033c2:	4b1e      	ldr	r3, [pc, #120]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80033c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033c8:	4a1c      	ldr	r2, [pc, #112]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80033ca:	f043 0304 	orr.w	r3, r3, #4
 80033ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033d2:	4b1a      	ldr	r3, [pc, #104]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80033d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033d8:	4a18      	ldr	r2, [pc, #96]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033e2:	e018      	b.n	8003416 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033e4:	4b15      	ldr	r3, [pc, #84]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80033e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033ea:	4a14      	ldr	r2, [pc, #80]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033f4:	e00f      	b.n	8003416 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033f6:	4b11      	ldr	r3, [pc, #68]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80033f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033fc:	4a0f      	ldr	r2, [pc, #60]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003406:	4b0d      	ldr	r3, [pc, #52]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 8003408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800340c:	4a0b      	ldr	r2, [pc, #44]	@ (800343c <HAL_RCC_OscConfig+0x7b8>)
 800340e:	f023 0304 	bic.w	r3, r3, #4
 8003412:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d057      	beq.n	80034ce <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800341e:	f7fe fc97 	bl	8001d50 <HAL_GetTick>
 8003422:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003424:	e00e      	b.n	8003444 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fe fc93 	bl	8001d50 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003434:	4293      	cmp	r3, r2
 8003436:	d905      	bls.n	8003444 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e2f8      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
 800343c:	46020c00 	.word	0x46020c00
 8003440:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003444:	4b9c      	ldr	r3, [pc, #624]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0e9      	beq.n	8003426 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01b      	beq.n	8003496 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800345e:	4b96      	ldr	r3, [pc, #600]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003464:	4a94      	ldr	r2, [pc, #592]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800346a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7fe fc6e 	bl	8001d50 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e2d3      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003486:	4b8c      	ldr	r3, [pc, #560]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800348c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0ed      	beq.n	8003470 <HAL_RCC_OscConfig+0x7ec>
 8003494:	e053      	b.n	800353e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003496:	4b88      	ldr	r3, [pc, #544]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800349c:	4a86      	ldr	r2, [pc, #536]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 800349e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fe fc52 	bl	8001d50 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e2b7      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034be:	4b7e      	ldr	r3, [pc, #504]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 80034c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ed      	bne.n	80034a8 <HAL_RCC_OscConfig+0x824>
 80034cc:	e037      	b.n	800353e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80034ce:	f7fe fc3f 	bl	8001d50 <HAL_GetTick>
 80034d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fe fc3b 	bl	8001d50 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e2a0      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034ec:	4b72      	ldr	r3, [pc, #456]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 80034ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ed      	bne.n	80034d6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80034fa:	4b6f      	ldr	r3, [pc, #444]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 80034fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01a      	beq.n	800353e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003508:	4b6b      	ldr	r3, [pc, #428]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 800350a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800350e:	4a6a      	ldr	r2, [pc, #424]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003510:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003514:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003518:	e00a      	b.n	8003530 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe fc19 	bl	8001d50 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e27e      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003530:	4b61      	ldr	r3, [pc, #388]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003536:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1ed      	bne.n	800351a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800353e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003542:	2b01      	cmp	r3, #1
 8003544:	d107      	bne.n	8003556 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003546:	4b5c      	ldr	r3, [pc, #368]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800354c:	4a5a      	ldr	r2, [pc, #360]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 800354e:	f023 0304 	bic.w	r3, r3, #4
 8003552:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d036      	beq.n	80035d0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d019      	beq.n	800359e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800356a:	4b53      	ldr	r3, [pc, #332]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a52      	ldr	r2, [pc, #328]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003570:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003574:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003576:	f7fe fbeb 	bl	8001d50 <HAL_GetTick>
 800357a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800357e:	f7fe fbe7 	bl	8001d50 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e24e      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003590:	4b49      	ldr	r3, [pc, #292]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x8fa>
 800359c:	e018      	b.n	80035d0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800359e:	4b46      	ldr	r3, [pc, #280]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a45      	ldr	r2, [pc, #276]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 80035a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035a8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80035aa:	f7fe fbd1 	bl	8001d50 <HAL_GetTick>
 80035ae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035b2:	f7fe fbcd 	bl	8001d50 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e234      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80035c4:	4b3c      	ldr	r3, [pc, #240]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f0      	bne.n	80035b2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d036      	beq.n	800364a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d019      	beq.n	8003618 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80035e4:	4b34      	ldr	r3, [pc, #208]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a33      	ldr	r2, [pc, #204]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 80035ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035ee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80035f0:	f7fe fbae 	bl	8001d50 <HAL_GetTick>
 80035f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80035f8:	f7fe fbaa 	bl	8001d50 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e211      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800360a:	4b2b      	ldr	r3, [pc, #172]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x974>
 8003616:	e018      	b.n	800364a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003618:	4b27      	ldr	r3, [pc, #156]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a26      	ldr	r2, [pc, #152]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 800361e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003622:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003624:	f7fe fb94 	bl	8001d50 <HAL_GetTick>
 8003628:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800362c:	f7fe fb90 	bl	8001d50 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e1f7      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800363e:	4b1e      	ldr	r3, [pc, #120]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d07f      	beq.n	8003756 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365a:	2b00      	cmp	r3, #0
 800365c:	d062      	beq.n	8003724 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800365e:	4b16      	ldr	r3, [pc, #88]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	4a15      	ldr	r2, [pc, #84]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003664:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003668:	6093      	str	r3, [r2, #8]
 800366a:	4b13      	ldr	r3, [pc, #76]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	4910      	ldr	r1, [pc, #64]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003684:	d309      	bcc.n	800369a <HAL_RCC_OscConfig+0xa16>
 8003686:	4b0c      	ldr	r3, [pc, #48]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f023 021f 	bic.w	r2, r3, #31
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4909      	ldr	r1, [pc, #36]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 8003694:	4313      	orrs	r3, r2
 8003696:	60cb      	str	r3, [r1, #12]
 8003698:	e02a      	b.n	80036f0 <HAL_RCC_OscConfig+0xa6c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	2b00      	cmp	r3, #0
 80036a0:	da0c      	bge.n	80036bc <HAL_RCC_OscConfig+0xa38>
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	015b      	lsls	r3, r3, #5
 80036b0:	4901      	ldr	r1, [pc, #4]	@ (80036b8 <HAL_RCC_OscConfig+0xa34>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60cb      	str	r3, [r1, #12]
 80036b6:	e01b      	b.n	80036f0 <HAL_RCC_OscConfig+0xa6c>
 80036b8:	46020c00 	.word	0x46020c00
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c4:	d30a      	bcc.n	80036dc <HAL_RCC_OscConfig+0xa58>
 80036c6:	4ba1      	ldr	r3, [pc, #644]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	029b      	lsls	r3, r3, #10
 80036d4:	499d      	ldr	r1, [pc, #628]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60cb      	str	r3, [r1, #12]
 80036da:	e009      	b.n	80036f0 <HAL_RCC_OscConfig+0xa6c>
 80036dc:	4b9b      	ldr	r3, [pc, #620]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	03db      	lsls	r3, r3, #15
 80036ea:	4998      	ldr	r1, [pc, #608]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80036f0:	4b96      	ldr	r3, [pc, #600]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a95      	ldr	r2, [pc, #596]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80036f6:	f043 0310 	orr.w	r3, r3, #16
 80036fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80036fc:	f7fe fb28 	bl	8001d50 <HAL_GetTick>
 8003700:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003704:	f7fe fb24 	bl	8001d50 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e18b      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003716:	4b8d      	ldr	r3, [pc, #564]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0xa80>
 8003722:	e018      	b.n	8003756 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003724:	4b89      	ldr	r3, [pc, #548]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a88      	ldr	r2, [pc, #544]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 800372a:	f023 0310 	bic.w	r3, r3, #16
 800372e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003730:	f7fe fb0e 	bl	8001d50 <HAL_GetTick>
 8003734:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003738:	f7fe fb0a 	bl	8001d50 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e171      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800374a:	4b80      	ldr	r3, [pc, #512]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8166 	beq.w	8003a2c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003760:	2300      	movs	r3, #0
 8003762:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003766:	4b79      	ldr	r3, [pc, #484]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b0c      	cmp	r3, #12
 8003770:	f000 80f2 	beq.w	8003958 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003778:	2b02      	cmp	r3, #2
 800377a:	f040 80c5 	bne.w	8003908 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800377e:	4b73      	ldr	r3, [pc, #460]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a72      	ldr	r2, [pc, #456]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003784:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003788:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800378a:	f7fe fae1 	bl	8001d50 <HAL_GetTick>
 800378e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003792:	f7fe fadd 	bl	8001d50 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e144      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80037a4:	4b69      	ldr	r3, [pc, #420]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f0      	bne.n	8003792 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b0:	4b66      	ldr	r3, [pc, #408]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80037b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d111      	bne.n	80037e2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	4b63      	ldr	r3, [pc, #396]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80037c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037c4:	4a61      	ldr	r2, [pc, #388]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80037c6:	f043 0304 	orr.w	r3, r3, #4
 80037ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80037ce:	4b5f      	ldr	r3, [pc, #380]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80037d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80037e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003950 <HAL_RCC_OscConfig+0xccc>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037ee:	d102      	bne.n	80037f6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80037f6:	4b56      	ldr	r3, [pc, #344]	@ (8003950 <HAL_RCC_OscConfig+0xccc>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	4a55      	ldr	r2, [pc, #340]	@ (8003950 <HAL_RCC_OscConfig+0xccc>)
 80037fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003800:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003802:	4b52      	ldr	r3, [pc, #328]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800380a:	f023 0303 	bic.w	r3, r3, #3
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003816:	3a01      	subs	r2, #1
 8003818:	0212      	lsls	r2, r2, #8
 800381a:	4311      	orrs	r1, r2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003820:	430a      	orrs	r2, r1
 8003822:	494a      	ldr	r1, [pc, #296]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003824:	4313      	orrs	r3, r2
 8003826:	628b      	str	r3, [r1, #40]	@ 0x28
 8003828:	4b48      	ldr	r3, [pc, #288]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 800382a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800382c:	4b49      	ldr	r3, [pc, #292]	@ (8003954 <HAL_RCC_OscConfig+0xcd0>)
 800382e:	4013      	ands	r3, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003834:	3a01      	subs	r2, #1
 8003836:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800383e:	3a01      	subs	r2, #1
 8003840:	0252      	lsls	r2, r2, #9
 8003842:	b292      	uxth	r2, r2
 8003844:	4311      	orrs	r1, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800384a:	3a01      	subs	r2, #1
 800384c:	0412      	lsls	r2, r2, #16
 800384e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003852:	4311      	orrs	r1, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003858:	3a01      	subs	r2, #1
 800385a:	0612      	lsls	r2, r2, #24
 800385c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003860:	430a      	orrs	r2, r1
 8003862:	493a      	ldr	r1, [pc, #232]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003864:	4313      	orrs	r3, r2
 8003866:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003868:	4b38      	ldr	r3, [pc, #224]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	4a37      	ldr	r2, [pc, #220]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 800386e:	f023 0310 	bic.w	r3, r3, #16
 8003872:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003878:	4a34      	ldr	r2, [pc, #208]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800387e:	4b33      	ldr	r3, [pc, #204]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003882:	4a32      	ldr	r2, [pc, #200]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003884:	f043 0310 	orr.w	r3, r3, #16
 8003888:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800388a:	4b30      	ldr	r3, [pc, #192]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	f023 020c 	bic.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003896:	492d      	ldr	r1, [pc, #180]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003898:	4313      	orrs	r3, r2
 800389a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800389c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80038a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003950 <HAL_RCC_OscConfig+0xccc>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4a29      	ldr	r2, [pc, #164]	@ (8003950 <HAL_RCC_OscConfig+0xccc>)
 80038aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ae:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80038b0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d107      	bne.n	80038c8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80038b8:	4b24      	ldr	r3, [pc, #144]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80038ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038be:	4a23      	ldr	r2, [pc, #140]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80038c0:	f023 0304 	bic.w	r3, r3, #4
 80038c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80038c8:	4b20      	ldr	r3, [pc, #128]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1f      	ldr	r2, [pc, #124]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80038ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038d2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80038d4:	f7fe fa3c 	bl	8001d50 <HAL_GetTick>
 80038d8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe fa38 	bl	8001d50 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e09f      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80038ee:	4b17      	ldr	r3, [pc, #92]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038fa:	4b14      	ldr	r3, [pc, #80]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 80038fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fe:	4a13      	ldr	r2, [pc, #76]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003904:	6293      	str	r3, [r2, #40]	@ 0x28
 8003906:	e091      	b.n	8003a2c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003908:	4b10      	ldr	r3, [pc, #64]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0f      	ldr	r2, [pc, #60]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 800390e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003912:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003914:	f7fe fa1c 	bl	8001d50 <HAL_GetTick>
 8003918:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe fa18 	bl	8001d50 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e07f      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800392e:	4b07      	ldr	r3, [pc, #28]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800393a:	4b04      	ldr	r3, [pc, #16]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 800393c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393e:	4a03      	ldr	r2, [pc, #12]	@ (800394c <HAL_RCC_OscConfig+0xcc8>)
 8003940:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003944:	f023 0303 	bic.w	r3, r3, #3
 8003948:	6293      	str	r3, [r2, #40]	@ 0x28
 800394a:	e06f      	b.n	8003a2c <HAL_RCC_OscConfig+0xda8>
 800394c:	46020c00 	.word	0x46020c00
 8003950:	46020800 	.word	0x46020800
 8003954:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003958:	4b37      	ldr	r3, [pc, #220]	@ (8003a38 <HAL_RCC_OscConfig+0xdb4>)
 800395a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800395e:	4b36      	ldr	r3, [pc, #216]	@ (8003a38 <HAL_RCC_OscConfig+0xdb4>)
 8003960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003962:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003968:	2b01      	cmp	r3, #1
 800396a:	d039      	beq.n	80039e0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0203 	and.w	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d132      	bne.n	80039e0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	0a1b      	lsrs	r3, r3, #8
 800397e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d129      	bne.n	80039e0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d122      	bne.n	80039e0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039a4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d11a      	bne.n	80039e0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	0a5b      	lsrs	r3, r3, #9
 80039ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d111      	bne.n	80039e0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d108      	bne.n	80039e0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	0e1b      	lsrs	r3, r3, #24
 80039d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039da:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e024      	b.n	8003a2e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80039e4:	4b14      	ldr	r3, [pc, #80]	@ (8003a38 <HAL_RCC_OscConfig+0xdb4>)
 80039e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e8:	08db      	lsrs	r3, r3, #3
 80039ea:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d01a      	beq.n	8003a2c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80039f6:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <HAL_RCC_OscConfig+0xdb4>)
 80039f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003a38 <HAL_RCC_OscConfig+0xdb4>)
 80039fc:	f023 0310 	bic.w	r3, r3, #16
 8003a00:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a02:	f7fe f9a5 	bl	8001d50 <HAL_GetTick>
 8003a06:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003a08:	bf00      	nop
 8003a0a:	f7fe f9a1 	bl	8001d50 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d0f9      	beq.n	8003a0a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1a:	4a07      	ldr	r2, [pc, #28]	@ (8003a38 <HAL_RCC_OscConfig+0xdb4>)
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003a20:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_RCC_OscConfig+0xdb4>)
 8003a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a24:	4a04      	ldr	r2, [pc, #16]	@ (8003a38 <HAL_RCC_OscConfig+0xdb4>)
 8003a26:	f043 0310 	orr.w	r3, r3, #16
 8003a2a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3738      	adds	r7, #56	@ 0x38
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	46020c00 	.word	0x46020c00

08003a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e1d9      	b.n	8003e04 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a50:	4b9b      	ldr	r3, [pc, #620]	@ (8003cc0 <HAL_RCC_ClockConfig+0x284>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d910      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b98      	ldr	r3, [pc, #608]	@ (8003cc0 <HAL_RCC_ClockConfig+0x284>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 020f 	bic.w	r2, r3, #15
 8003a66:	4996      	ldr	r1, [pc, #600]	@ (8003cc0 <HAL_RCC_ClockConfig+0x284>)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b94      	ldr	r3, [pc, #592]	@ (8003cc0 <HAL_RCC_ClockConfig+0x284>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e1c1      	b.n	8003e04 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d010      	beq.n	8003aae <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	4b8c      	ldr	r3, [pc, #560]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d908      	bls.n	8003aae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003a9c:	4b89      	ldr	r3, [pc, #548]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	4986      	ldr	r1, [pc, #536]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d012      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	4b81      	ldr	r3, [pc, #516]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d909      	bls.n	8003ae0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003acc:	4b7d      	ldr	r3, [pc, #500]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	497a      	ldr	r1, [pc, #488]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d010      	beq.n	8003b0e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	4b74      	ldr	r3, [pc, #464]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d908      	bls.n	8003b0e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003afc:	4b71      	ldr	r3, [pc, #452]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	496e      	ldr	r1, [pc, #440]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d010      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	4b69      	ldr	r3, [pc, #420]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d908      	bls.n	8003b3c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003b2a:	4b66      	ldr	r3, [pc, #408]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f023 020f 	bic.w	r2, r3, #15
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	4963      	ldr	r1, [pc, #396]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80d2 	beq.w	8003cee <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d143      	bne.n	8003bde <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4b5b      	ldr	r3, [pc, #364]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d110      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003b64:	4b57      	ldr	r3, [pc, #348]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b6a:	4a56      	ldr	r2, [pc, #344]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003b6c:	f043 0304 	orr.w	r3, r3, #4
 8003b70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003b74:	4b53      	ldr	r3, [pc, #332]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003b82:	2301      	movs	r3, #1
 8003b84:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003b86:	f7fe f8e3 	bl	8001d50 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003b8c:	4b4e      	ldr	r3, [pc, #312]	@ (8003cc8 <HAL_RCC_ClockConfig+0x28c>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00f      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003b9a:	f7fe f8d9 	bl	8001d50 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e12b      	b.n	8003e04 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003bac:	4b46      	ldr	r3, [pc, #280]	@ (8003cc8 <HAL_RCC_ClockConfig+0x28c>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d107      	bne.n	8003bce <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003bbe:	4b41      	ldr	r3, [pc, #260]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bc4:	4a3f      	ldr	r2, [pc, #252]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003bc6:	f023 0304 	bic.w	r3, r3, #4
 8003bca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003bce:	4b3d      	ldr	r3, [pc, #244]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d121      	bne.n	8003c1e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e112      	b.n	8003e04 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be6:	4b37      	ldr	r3, [pc, #220]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d115      	bne.n	8003c1e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e106      	b.n	8003e04 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003bfe:	4b31      	ldr	r3, [pc, #196]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e0fa      	b.n	8003e04 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e0f2      	b.n	8003e04 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003c1e:	4b29      	ldr	r3, [pc, #164]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f023 0203 	bic.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4926      	ldr	r1, [pc, #152]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003c30:	f7fe f88e 	bl	8001d50 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d112      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c40:	f7fe f886 	bl	8001d50 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0d6      	b.n	8003e04 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c56:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	d1ee      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x204>
 8003c62:	e044      	b.n	8003cee <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d112      	bne.n	8003c92 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c6c:	e00a      	b.n	8003c84 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6e:	f7fe f86f 	bl	8001d50 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e0bf      	b.n	8003e04 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c84:	4b0f      	ldr	r3, [pc, #60]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d1ee      	bne.n	8003c6e <HAL_RCC_ClockConfig+0x232>
 8003c90:	e02d      	b.n	8003cee <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d123      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c9c:	f7fe f858 	bl	8001d50 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0a8      	b.n	8003e04 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003cb2:	4b04      	ldr	r3, [pc, #16]	@ (8003cc4 <HAL_RCC_ClockConfig+0x288>)
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ee      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x260>
 8003cbe:	e016      	b.n	8003cee <HAL_RCC_ClockConfig+0x2b2>
 8003cc0:	40022000 	.word	0x40022000
 8003cc4:	46020c00 	.word	0x46020c00
 8003cc8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ccc:	f7fe f840 	bl	8001d50 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e090      	b.n	8003e04 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d1ee      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d010      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	4b43      	ldr	r3, [pc, #268]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d208      	bcs.n	8003d1c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003d0a:	4b40      	ldr	r3, [pc, #256]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f023 020f 	bic.w	r2, r3, #15
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	493d      	ldr	r1, [pc, #244]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003e10 <HAL_RCC_ClockConfig+0x3d4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d210      	bcs.n	8003d4c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2a:	4b39      	ldr	r3, [pc, #228]	@ (8003e10 <HAL_RCC_ClockConfig+0x3d4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 020f 	bic.w	r2, r3, #15
 8003d32:	4937      	ldr	r1, [pc, #220]	@ (8003e10 <HAL_RCC_ClockConfig+0x3d4>)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3a:	4b35      	ldr	r3, [pc, #212]	@ (8003e10 <HAL_RCC_ClockConfig+0x3d4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e05b      	b.n	8003e04 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d010      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d208      	bcs.n	8003d7a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003d68:	4b28      	ldr	r3, [pc, #160]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4925      	ldr	r1, [pc, #148]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d012      	beq.n	8003dac <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	4b20      	ldr	r3, [pc, #128]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d209      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003d98:	4b1c      	ldr	r3, [pc, #112]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	4919      	ldr	r1, [pc, #100]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d010      	beq.n	8003dda <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	4b13      	ldr	r3, [pc, #76]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d208      	bcs.n	8003dda <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003dc8:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dcc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	490d      	ldr	r1, [pc, #52]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003dda:	f000 f821 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8003dde:	4602      	mov	r2, r0
 8003de0:	4b0a      	ldr	r3, [pc, #40]	@ (8003e0c <HAL_RCC_ClockConfig+0x3d0>)
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	490a      	ldr	r1, [pc, #40]	@ (8003e14 <HAL_RCC_ClockConfig+0x3d8>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
 8003df0:	4a09      	ldr	r2, [pc, #36]	@ (8003e18 <HAL_RCC_ClockConfig+0x3dc>)
 8003df2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003df4:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <HAL_RCC_ClockConfig+0x3e0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd ff1f 	bl	8001c3c <HAL_InitTick>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	73fb      	strb	r3, [r7, #15]

  return status;
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	46020c00 	.word	0x46020c00
 8003e10:	40022000 	.word	0x40022000
 8003e14:	0800bad4 	.word	0x0800bad4
 8003e18:	20000018 	.word	0x20000018
 8003e1c:	2000001c 	.word	0x2000001c

08003e20 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b08b      	sub	sp, #44	@ 0x2c
 8003e24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2e:	4b78      	ldr	r3, [pc, #480]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e38:	4b75      	ldr	r3, [pc, #468]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x34>
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b0c      	cmp	r3, #12
 8003e4c:	d121      	bne.n	8003e92 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d11e      	bne.n	8003e92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003e54:	4b6e      	ldr	r3, [pc, #440]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d107      	bne.n	8003e70 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003e60:	4b6b      	ldr	r3, [pc, #428]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e66:	0b1b      	lsrs	r3, r3, #12
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e6e:	e005      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003e70:	4b67      	ldr	r3, [pc, #412]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	0f1b      	lsrs	r3, r3, #28
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e7c:	4a65      	ldr	r2, [pc, #404]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d110      	bne.n	8003eae <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e90:	e00d      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e92:	4b5f      	ldr	r3, [pc, #380]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d102      	bne.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e9e:	4b5e      	ldr	r3, [pc, #376]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003ea0:	623b      	str	r3, [r7, #32]
 8003ea2:	e004      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003eac:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b0c      	cmp	r3, #12
 8003eb2:	f040 80a5 	bne.w	8004000 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003eb6:	4b56      	ldr	r3, [pc, #344]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003ec0:	4b53      	ldr	r3, [pc, #332]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec4:	0a1b      	lsrs	r3, r3, #8
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003ece:	4b50      	ldr	r3, [pc, #320]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003eda:	4b4d      	ldr	r3, [pc, #308]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ede:	08db      	lsrs	r3, r3, #3
 8003ee0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d003      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0xe4>
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d022      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x128>
 8003f02:	e043      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800401c <HAL_RCC_GetSysClockFreq+0x1fc>
 8003f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f16:	4b3e      	ldr	r3, [pc, #248]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f26:	ed97 6a01 	vldr	s12, [r7, #4]
 8003f2a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004020 <HAL_RCC_GetSysClockFreq+0x200>
 8003f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f46:	e046      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f52:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800401c <HAL_RCC_GetSysClockFreq+0x1fc>
 8003f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f62:	ee07 3a90 	vmov	s15, r3
 8003f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f6a:	ed97 6a01 	vldr	s12, [r7, #4]
 8003f6e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004020 <HAL_RCC_GetSysClockFreq+0x200>
 8003f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f8a:	e024      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fac:	ee07 3a90 	vmov	s15, r3
 8003fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003fb4:	ed97 6a01 	vldr	s12, [r7, #4]
 8003fb8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004020 <HAL_RCC_GetSysClockFreq+0x200>
 8003fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003fc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fd4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fda:	0e1b      	lsrs	r3, r3, #24
 8003fdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ffa:	ee17 3a90 	vmov	r3, s15
 8003ffe:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004000:	6a3b      	ldr	r3, [r7, #32]
}
 8004002:	4618      	mov	r0, r3
 8004004:	372c      	adds	r7, #44	@ 0x2c
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	46020c00 	.word	0x46020c00
 8004014:	0800bae4 	.word	0x0800bae4
 8004018:	00f42400 	.word	0x00f42400
 800401c:	4b742400 	.word	0x4b742400
 8004020:	46000000 	.word	0x46000000

08004024 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004028:	f7ff fefa 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 800402c:	4602      	mov	r2, r0
 800402e:	4b07      	ldr	r3, [pc, #28]	@ (800404c <HAL_RCC_GetHCLKFreq+0x28>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	4906      	ldr	r1, [pc, #24]	@ (8004050 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004038:	5ccb      	ldrb	r3, [r1, r3]
 800403a:	fa22 f303 	lsr.w	r3, r2, r3
 800403e:	4a05      	ldr	r2, [pc, #20]	@ (8004054 <HAL_RCC_GetHCLKFreq+0x30>)
 8004040:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004042:	4b04      	ldr	r3, [pc, #16]	@ (8004054 <HAL_RCC_GetHCLKFreq+0x30>)
 8004044:	681b      	ldr	r3, [r3, #0]
}
 8004046:	4618      	mov	r0, r3
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	46020c00 	.word	0x46020c00
 8004050:	0800bad4 	.word	0x0800bad4
 8004054:	20000018 	.word	0x20000018

08004058 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004060:	4b3e      	ldr	r3, [pc, #248]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800406e:	f7fe fdab 	bl	8002bc8 <HAL_PWREx_GetVoltageRange>
 8004072:	6178      	str	r0, [r7, #20]
 8004074:	e019      	b.n	80040aa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004076:	4b39      	ldr	r3, [pc, #228]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800407c:	4a37      	ldr	r2, [pc, #220]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800407e:	f043 0304 	orr.w	r3, r3, #4
 8004082:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004086:	4b35      	ldr	r3, [pc, #212]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004094:	f7fe fd98 	bl	8002bc8 <HAL_PWREx_GetVoltageRange>
 8004098:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4b30      	ldr	r3, [pc, #192]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800409c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a0:	4a2e      	ldr	r2, [pc, #184]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80040a2:	f023 0304 	bic.w	r3, r3, #4
 80040a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040b0:	d003      	beq.n	80040ba <RCC_SetFlashLatencyFromMSIRange+0x62>
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040b8:	d109      	bne.n	80040ce <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040c0:	d202      	bcs.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80040c2:	2301      	movs	r3, #1
 80040c4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80040c6:	e033      	b.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80040cc:	e030      	b.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040d4:	d208      	bcs.n	80040e8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040dc:	d102      	bne.n	80040e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80040de:	2303      	movs	r3, #3
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	e025      	b.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e035      	b.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ee:	d90f      	bls.n	8004110 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040fc:	d902      	bls.n	8004104 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	e015      	b.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004104:	2301      	movs	r3, #1
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	e012      	b.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	e00f      	b.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004116:	d109      	bne.n	800412c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800411e:	d102      	bne.n	8004126 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004120:	2301      	movs	r3, #1
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	e004      	b.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004126:	2302      	movs	r3, #2
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	e001      	b.n	8004130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800412c:	2301      	movs	r3, #1
 800412e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f023 020f 	bic.w	r2, r3, #15
 8004138:	4909      	ldr	r1, [pc, #36]	@ (8004160 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004140:	4b07      	ldr	r3, [pc, #28]	@ (8004160 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	429a      	cmp	r2, r3
 800414c:	d001      	beq.n	8004152 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	46020c00 	.word	0x46020c00
 8004160:	40022000 	.word	0x40022000

08004164 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004168:	b0b6      	sub	sp, #216	@ 0xd8
 800416a:	af00      	add	r7, sp, #0
 800416c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004170:	2300      	movs	r3, #0
 8004172:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004176:	2300      	movs	r3, #0
 8004178:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800417c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f002 0401 	and.w	r4, r2, #1
 8004188:	2500      	movs	r5, #0
 800418a:	ea54 0305 	orrs.w	r3, r4, r5
 800418e:	d00b      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004190:	4bc5      	ldr	r3, [pc, #788]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004196:	f023 0103 	bic.w	r1, r3, #3
 800419a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800419e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a0:	4ac1      	ldr	r2, [pc, #772]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80041a2:	430b      	orrs	r3, r1
 80041a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	f002 0804 	and.w	r8, r2, #4
 80041b4:	f04f 0900 	mov.w	r9, #0
 80041b8:	ea58 0309 	orrs.w	r3, r8, r9
 80041bc:	d00b      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80041be:	4bba      	ldr	r3, [pc, #744]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80041c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80041c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ce:	4ab6      	ldr	r2, [pc, #728]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80041d0:	430b      	orrs	r3, r1
 80041d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	f002 0a08 	and.w	sl, r2, #8
 80041e2:	f04f 0b00 	mov.w	fp, #0
 80041e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80041ea:	d00b      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80041ec:	4bae      	ldr	r3, [pc, #696]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80041ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fc:	4aaa      	ldr	r2, [pc, #680]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80041fe:	430b      	orrs	r3, r1
 8004200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f002 0310 	and.w	r3, r2, #16
 8004210:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800421a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800421e:	460b      	mov	r3, r1
 8004220:	4313      	orrs	r3, r2
 8004222:	d00b      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004224:	4ba0      	ldr	r3, [pc, #640]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800422a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800422e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004234:	4a9c      	ldr	r2, [pc, #624]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004236:	430b      	orrs	r3, r1
 8004238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800423c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f002 0320 	and.w	r3, r2, #32
 8004248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800424c:	2300      	movs	r3, #0
 800424e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004252:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004256:	460b      	mov	r3, r1
 8004258:	4313      	orrs	r3, r2
 800425a:	d00b      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800425c:	4b92      	ldr	r3, [pc, #584]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800425e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004262:	f023 0107 	bic.w	r1, r3, #7
 8004266:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800426a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426c:	4a8e      	ldr	r2, [pc, #568]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800426e:	430b      	orrs	r3, r1
 8004270:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004274:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800428a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800428e:	460b      	mov	r3, r1
 8004290:	4313      	orrs	r3, r2
 8004292:	d00b      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004294:	4b84      	ldr	r3, [pc, #528]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800429a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800429e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042a4:	4a80      	ldr	r2, [pc, #512]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80042a6:	430b      	orrs	r3, r1
 80042a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80042b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042bc:	2300      	movs	r3, #0
 80042be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80042c2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4313      	orrs	r3, r2
 80042ca:	d00b      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80042cc:	4b76      	ldr	r3, [pc, #472]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80042ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042dc:	4a72      	ldr	r2, [pc, #456]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80042de:	430b      	orrs	r3, r1
 80042e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80042f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042f4:	2300      	movs	r3, #0
 80042f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80042fe:	460b      	mov	r3, r1
 8004300:	4313      	orrs	r3, r2
 8004302:	d00b      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004304:	4b68      	ldr	r3, [pc, #416]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800430a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800430e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004314:	4a64      	ldr	r2, [pc, #400]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004316:	430b      	orrs	r3, r1
 8004318:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800431c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004328:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004332:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004336:	460b      	mov	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	d00b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800433c:	4b5a      	ldr	r3, [pc, #360]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800433e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004342:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800434a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434c:	4a56      	ldr	r2, [pc, #344]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800434e:	430b      	orrs	r3, r1
 8004350:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004360:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004364:	2300      	movs	r3, #0
 8004366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800436a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800436e:	460b      	mov	r3, r1
 8004370:	4313      	orrs	r3, r2
 8004372:	d00b      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004374:	4b4c      	ldr	r3, [pc, #304]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004376:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800437a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800437e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004384:	4a48      	ldr	r2, [pc, #288]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004386:	430b      	orrs	r3, r1
 8004388:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800438c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004398:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800439c:	2300      	movs	r3, #0
 800439e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80043a6:	460b      	mov	r3, r1
 80043a8:	4313      	orrs	r3, r2
 80043aa:	d00b      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80043ac:	4b3e      	ldr	r3, [pc, #248]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80043ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043b2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80043b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043bc:	4a3a      	ldr	r2, [pc, #232]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80043be:	430b      	orrs	r3, r1
 80043c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80043c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80043d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043d2:	2300      	movs	r3, #0
 80043d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043d6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80043da:	460b      	mov	r3, r1
 80043dc:	4313      	orrs	r3, r2
 80043de:	d00b      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80043e0:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80043e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043f0:	4a2d      	ldr	r2, [pc, #180]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80043f2:	430b      	orrs	r3, r1
 80043f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004404:	673b      	str	r3, [r7, #112]	@ 0x70
 8004406:	2300      	movs	r3, #0
 8004408:	677b      	str	r3, [r7, #116]	@ 0x74
 800440a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800440e:	460b      	mov	r3, r1
 8004410:	4313      	orrs	r3, r2
 8004412:	d04f      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800441c:	2b80      	cmp	r3, #128	@ 0x80
 800441e:	d02d      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004420:	2b80      	cmp	r3, #128	@ 0x80
 8004422:	d827      	bhi.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004424:	2b60      	cmp	r3, #96	@ 0x60
 8004426:	d02b      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004428:	2b60      	cmp	r3, #96	@ 0x60
 800442a:	d823      	bhi.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800442c:	2b40      	cmp	r3, #64	@ 0x40
 800442e:	d006      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004430:	2b40      	cmp	r3, #64	@ 0x40
 8004432:	d81f      	bhi.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004434:	2b00      	cmp	r3, #0
 8004436:	d009      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004438:	2b20      	cmp	r3, #32
 800443a:	d011      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800443c:	e01a      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800443e:	4b1a      	ldr	r3, [pc, #104]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004442:	4a19      	ldr	r2, [pc, #100]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004448:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800444a:	e01a      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800444c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004450:	3308      	adds	r3, #8
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fbc4 	bl	8004be0 <RCCEx_PLL2_Config>
 8004458:	4603      	mov	r3, r0
 800445a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800445e:	e010      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004460:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004464:	332c      	adds	r3, #44	@ 0x2c
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fc52 	bl	8004d10 <RCCEx_PLL3_Config>
 800446c:	4603      	mov	r3, r0
 800446e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004472:	e006      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800447a:	e002      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8004480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004482:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d110      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800448a:	4b07      	ldr	r3, [pc, #28]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800448c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004490:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004494:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800449c:	4a02      	ldr	r2, [pc, #8]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800449e:	430b      	orrs	r3, r1
 80044a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80044a4:	e006      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80044a6:	bf00      	nop
 80044a8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80044b0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80044b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80044c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044c2:	2300      	movs	r3, #0
 80044c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80044ca:	460b      	mov	r3, r1
 80044cc:	4313      	orrs	r3, r2
 80044ce:	d046      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80044d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044d8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80044dc:	d028      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80044de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80044e2:	d821      	bhi.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80044e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044e8:	d022      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80044ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044ee:	d81b      	bhi.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80044f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044f4:	d01c      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80044f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044fa:	d815      	bhi.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80044fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004500:	d008      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004506:	d80f      	bhi.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004508:	2b00      	cmp	r3, #0
 800450a:	d011      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800450c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004510:	d00e      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004512:	e009      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004518:	3308      	adds	r3, #8
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fb60 	bl	8004be0 <RCCEx_PLL2_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004526:	e004      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800452e:	e000      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8004530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004532:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10d      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800453a:	4bb6      	ldr	r3, [pc, #728]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800453c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004540:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004548:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800454c:	4ab1      	ldr	r2, [pc, #708]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800454e:	430b      	orrs	r3, r1
 8004550:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004554:	e003      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004556:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800455a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800455e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800456a:	663b      	str	r3, [r7, #96]	@ 0x60
 800456c:	2300      	movs	r3, #0
 800456e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004570:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004574:	460b      	mov	r3, r1
 8004576:	4313      	orrs	r3, r2
 8004578:	d03e      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800457a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800457e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004582:	2b04      	cmp	r3, #4
 8004584:	d81d      	bhi.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8004586:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	080045cb 	.word	0x080045cb
 8004590:	080045a1 	.word	0x080045a1
 8004594:	080045af 	.word	0x080045af
 8004598:	080045cb 	.word	0x080045cb
 800459c:	080045cb 	.word	0x080045cb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045a0:	4b9c      	ldr	r3, [pc, #624]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80045a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a4:	4a9b      	ldr	r2, [pc, #620]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80045a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045aa:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80045ac:	e00e      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045b2:	332c      	adds	r3, #44	@ 0x2c
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fbab 	bl	8004d10 <RCCEx_PLL3_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80045c0:	e004      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80045c8:	e000      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 80045ca:	bf00      	nop
    }
    if (ret == HAL_OK)
 80045cc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10d      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80045d4:	4b8f      	ldr	r3, [pc, #572]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80045d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80045da:	f023 0107 	bic.w	r1, r3, #7
 80045de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e6:	4a8b      	ldr	r2, [pc, #556]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80045e8:	430b      	orrs	r3, r1
 80045ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80045ee:	e003      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80045f4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80045f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004604:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004606:	2300      	movs	r3, #0
 8004608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800460a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800460e:	460b      	mov	r3, r1
 8004610:	4313      	orrs	r3, r2
 8004612:	d04a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004620:	d028      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004622:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004626:	d821      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004628:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800462c:	d024      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800462e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004632:	d81b      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004634:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004638:	d00e      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800463a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800463e:	d815      	bhi.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01b      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004648:	d110      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800464a:	4b72      	ldr	r3, [pc, #456]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800464c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464e:	4a71      	ldr	r2, [pc, #452]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004654:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004656:	e012      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800465c:	332c      	adds	r3, #44	@ 0x2c
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fb56 	bl	8004d10 <RCCEx_PLL3_Config>
 8004664:	4603      	mov	r3, r0
 8004666:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800466a:	e008      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004672:	e004      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8004674:	bf00      	nop
 8004676:	e002      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8004678:	bf00      	nop
 800467a:	e000      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 800467c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800467e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10d      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004686:	4b63      	ldr	r3, [pc, #396]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800468c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004690:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004698:	4a5e      	ldr	r2, [pc, #376]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800469a:	430b      	orrs	r3, r1
 800469c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80046a0:	e003      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80046a6:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80046b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80046b8:	2300      	movs	r3, #0
 80046ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80046bc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80046c0:	460b      	mov	r3, r1
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f000 80ba 	beq.w	800483c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ce:	4b51      	ldr	r3, [pc, #324]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80046d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d113      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046dc:	4b4d      	ldr	r3, [pc, #308]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80046de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e2:	4a4c      	ldr	r2, [pc, #304]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80046e4:	f043 0304 	orr.w	r3, r3, #4
 80046e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80046ec:	4b49      	ldr	r3, [pc, #292]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80046ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004704:	4b44      	ldr	r3, [pc, #272]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004708:	4a43      	ldr	r2, [pc, #268]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004710:	f7fd fb1e 	bl	8001d50 <HAL_GetTick>
 8004714:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004718:	e00b      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471a:	f7fd fb19 	bl	8001d50 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d903      	bls.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004730:	e005      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004732:	4b39      	ldr	r3, [pc, #228]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8004734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0ed      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 800473e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d16a      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004746:	4b33      	ldr	r3, [pc, #204]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800474c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004750:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d023      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x640>
 800475c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004760:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004764:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004768:	4293      	cmp	r3, r2
 800476a:	d01b      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800476c:	4b29      	ldr	r3, [pc, #164]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800476e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004776:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800477a:	4b26      	ldr	r3, [pc, #152]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800477c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004780:	4a24      	ldr	r2, [pc, #144]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004786:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800478a:	4b22      	ldr	r3, [pc, #136]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800478c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004790:	4a20      	ldr	r2, [pc, #128]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004796:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800479a:	4a1e      	ldr	r2, [pc, #120]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800479c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d019      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fd face 	bl	8001d50 <HAL_GetTick>
 80047b4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b8:	e00d      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ba:	f7fd fac9 	bl	8001d50 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047c4:	1ad2      	subs	r2, r2, r3
 80047c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d903      	bls.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 80047d4:	e006      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80047d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0ea      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 80047e4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10d      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80047ec:	4b09      	ldr	r3, [pc, #36]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80047ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80047fe:	4a05      	ldr	r2, [pc, #20]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8004800:	430b      	orrs	r3, r1
 8004802:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004806:	e00d      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004808:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800480c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 8004810:	e008      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8004812:	bf00      	nop
 8004814:	46020c00 	.word	0x46020c00
 8004818:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004820:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004824:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8004828:	2b01      	cmp	r3, #1
 800482a:	d107      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482c:	4bb2      	ldr	r3, [pc, #712]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800482e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004832:	4ab1      	ldr	r2, [pc, #708]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800483c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004848:	64bb      	str	r3, [r7, #72]	@ 0x48
 800484a:	2300      	movs	r3, #0
 800484c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800484e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	d042      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004858:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800485c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004860:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004864:	d022      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004866:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800486a:	d81b      	bhi.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800486c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004870:	d011      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8004872:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004876:	d815      	bhi.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004878:	2b00      	cmp	r3, #0
 800487a:	d019      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800487c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004880:	d110      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004882:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004886:	3308      	adds	r3, #8
 8004888:	4618      	mov	r0, r3
 800488a:	f000 f9a9 	bl	8004be0 <RCCEx_PLL2_Config>
 800488e:	4603      	mov	r3, r0
 8004890:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004894:	e00d      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004896:	4b98      	ldr	r3, [pc, #608]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489a:	4a97      	ldr	r2, [pc, #604]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800489c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048a0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80048a2:	e006      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80048aa:	e002      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80048ac:	bf00      	nop
 80048ae:	e000      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80048b0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80048b2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10d      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80048ba:	4b8f      	ldr	r3, [pc, #572]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80048bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048c0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80048c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048cc:	4a8a      	ldr	r2, [pc, #552]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80048ce:	430b      	orrs	r3, r1
 80048d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048d4:	e003      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80048da:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80048ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80048ec:	2300      	movs	r3, #0
 80048ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80048f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80048f4:	460b      	mov	r3, r1
 80048f6:	4313      	orrs	r3, r2
 80048f8:	d02d      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80048fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004906:	d00b      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800490c:	d804      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004916:	d007      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800491e:	e004      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004920:	bf00      	nop
 8004922:	e002      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004924:	bf00      	nop
 8004926:	e000      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8004928:	bf00      	nop
    }
    if (ret == HAL_OK)
 800492a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10d      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004932:	4b71      	ldr	r3, [pc, #452]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004934:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004938:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800493c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004944:	4a6c      	ldr	r2, [pc, #432]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004946:	430b      	orrs	r3, r1
 8004948:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800494c:	e003      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004952:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004956:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004962:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004964:	2300      	movs	r3, #0
 8004966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004968:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800496c:	460b      	mov	r3, r1
 800496e:	4313      	orrs	r3, r2
 8004970:	d00c      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004972:	4b61      	ldr	r3, [pc, #388]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004974:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004978:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800497c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004984:	4a5c      	ldr	r2, [pc, #368]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004986:	430b      	orrs	r3, r1
 8004988:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800498c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004998:	633b      	str	r3, [r7, #48]	@ 0x30
 800499a:	2300      	movs	r3, #0
 800499c:	637b      	str	r3, [r7, #52]	@ 0x34
 800499e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80049a2:	460b      	mov	r3, r1
 80049a4:	4313      	orrs	r3, r2
 80049a6:	d019      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80049a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049b4:	d105      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049b6:	4b50      	ldr	r3, [pc, #320]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	4a4f      	ldr	r2, [pc, #316]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c0:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80049c2:	4b4d      	ldr	r3, [pc, #308]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80049c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049c8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80049cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049d4:	4a48      	ldr	r2, [pc, #288]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80049d6:	430b      	orrs	r3, r1
 80049d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80049dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80049e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ea:	2300      	movs	r3, #0
 80049ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80049f2:	460b      	mov	r3, r1
 80049f4:	4313      	orrs	r3, r2
 80049f6:	d00c      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80049f8:	4b3f      	ldr	r3, [pc, #252]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80049fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a0a:	493b      	ldr	r1, [pc, #236]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004a12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004a1e:	623b      	str	r3, [r7, #32]
 8004a20:	2300      	movs	r3, #0
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a24:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	d00c      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004a2e:	4b32      	ldr	r3, [pc, #200]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004a40:	492d      	ldr	r1, [pc, #180]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4313      	orrs	r3, r2
 8004a62:	d00c      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004a64:	4b24      	ldr	r3, [pc, #144]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004a66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a6a:	f023 0218 	bic.w	r2, r3, #24
 8004a6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004a76:	4920      	ldr	r1, [pc, #128]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a94:	460b      	mov	r3, r1
 8004a96:	4313      	orrs	r3, r2
 8004a98:	d034      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004aa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004aa6:	d105      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa8:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aac:	4a12      	ldr	r2, [pc, #72]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ab8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004abc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ac0:	d108      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f889 	bl	8004be0 <RCCEx_PLL2_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8004ad4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10f      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004adc:	4b06      	ldr	r3, [pc, #24]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004ade:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ae2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004aea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004aee:	4902      	ldr	r1, [pc, #8]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004af6:	e005      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004af8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004b00:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004b04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	d03a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004b20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b2c:	d00e      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004b2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b32:	d815      	bhi.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d017      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b3c:	d110      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3e:	4b27      	ldr	r3, [pc, #156]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b42:	4a26      	ldr	r2, [pc, #152]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b48:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004b4a:	e00e      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b50:	3308      	adds	r3, #8
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 f844 	bl	8004be0 <RCCEx_PLL2_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004b5e:	e004      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004b66:	e000      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8004b68:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004b6a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10d      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004b72:	4b1a      	ldr	r3, [pc, #104]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b78:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b84:	4915      	ldr	r1, [pc, #84]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004b8c:	e003      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004b92:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004b96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	607b      	str	r3, [r7, #4]
 8004ba8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004bac:	460b      	mov	r3, r1
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	d00c      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004bb8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004bbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004bc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bc4:	4905      	ldr	r1, [pc, #20]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004bcc:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	37d8      	adds	r7, #216	@ 0xd8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bda:	bf00      	nop
 8004bdc:	46020c00 	.word	0x46020c00

08004be0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004be8:	4b47      	ldr	r3, [pc, #284]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a46      	ldr	r2, [pc, #280]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004bee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bf2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004bf4:	f7fd f8ac 	bl	8001d50 <HAL_GetTick>
 8004bf8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bfa:	e008      	b.n	8004c0e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bfc:	f7fd f8a8 	bl	8001d50 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e077      	b.n	8004cfe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c22:	f023 0303 	bic.w	r3, r3, #3
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6811      	ldr	r1, [r2, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6852      	ldr	r2, [r2, #4]
 8004c2e:	3a01      	subs	r2, #1
 8004c30:	0212      	lsls	r2, r2, #8
 8004c32:	430a      	orrs	r2, r1
 8004c34:	4934      	ldr	r1, [pc, #208]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004c3a:	4b33      	ldr	r3, [pc, #204]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004c3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c3e:	4b33      	ldr	r3, [pc, #204]	@ (8004d0c <RCCEx_PLL2_Config+0x12c>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6892      	ldr	r2, [r2, #8]
 8004c46:	3a01      	subs	r2, #1
 8004c48:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	68d2      	ldr	r2, [r2, #12]
 8004c50:	3a01      	subs	r2, #1
 8004c52:	0252      	lsls	r2, r2, #9
 8004c54:	b292      	uxth	r2, r2
 8004c56:	4311      	orrs	r1, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6912      	ldr	r2, [r2, #16]
 8004c5c:	3a01      	subs	r2, #1
 8004c5e:	0412      	lsls	r2, r2, #16
 8004c60:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004c64:	4311      	orrs	r1, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6952      	ldr	r2, [r2, #20]
 8004c6a:	3a01      	subs	r2, #1
 8004c6c:	0612      	lsls	r2, r2, #24
 8004c6e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004c72:	430a      	orrs	r2, r1
 8004c74:	4924      	ldr	r1, [pc, #144]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004c7a:	4b23      	ldr	r3, [pc, #140]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	f023 020c 	bic.w	r2, r3, #12
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	4920      	ldr	r1, [pc, #128]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	491c      	ldr	r1, [pc, #112]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004ca0:	f023 0310 	bic.w	r3, r3, #16
 8004ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ca6:	4b18      	ldr	r3, [pc, #96]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	69d2      	ldr	r2, [r2, #28]
 8004cb6:	00d2      	lsls	r2, r2, #3
 8004cb8:	4913      	ldr	r1, [pc, #76]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004cbe:	4b12      	ldr	r3, [pc, #72]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc2:	4a11      	ldr	r2, [pc, #68]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004cc4:	f043 0310 	orr.w	r3, r3, #16
 8004cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004cca:	4b0f      	ldr	r3, [pc, #60]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a0e      	ldr	r2, [pc, #56]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004cd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cd4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cd6:	f7fd f83b 	bl	8001d50 <HAL_GetTick>
 8004cda:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cdc:	e008      	b.n	8004cf0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cde:	f7fd f837 	bl	8001d50 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e006      	b.n	8004cfe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <RCCEx_PLL2_Config+0x128>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0

}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	46020c00 	.word	0x46020c00
 8004d0c:	80800000 	.word	0x80800000

08004d10 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004d18:	4b47      	ldr	r3, [pc, #284]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a46      	ldr	r2, [pc, #280]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d22:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d24:	f7fd f814 	bl	8001d50 <HAL_GetTick>
 8004d28:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d2a:	e008      	b.n	8004d3e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d2c:	f7fd f810 	bl	8001d50 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e077      	b.n	8004e2e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d52:	f023 0303 	bic.w	r3, r3, #3
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6811      	ldr	r1, [r2, #0]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6852      	ldr	r2, [r2, #4]
 8004d5e:	3a01      	subs	r2, #1
 8004d60:	0212      	lsls	r2, r2, #8
 8004d62:	430a      	orrs	r2, r1
 8004d64:	4934      	ldr	r1, [pc, #208]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	630b      	str	r3, [r1, #48]	@ 0x30
 8004d6a:	4b33      	ldr	r3, [pc, #204]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d6e:	4b33      	ldr	r3, [pc, #204]	@ (8004e3c <RCCEx_PLL3_Config+0x12c>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6892      	ldr	r2, [r2, #8]
 8004d76:	3a01      	subs	r2, #1
 8004d78:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	68d2      	ldr	r2, [r2, #12]
 8004d80:	3a01      	subs	r2, #1
 8004d82:	0252      	lsls	r2, r2, #9
 8004d84:	b292      	uxth	r2, r2
 8004d86:	4311      	orrs	r1, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6912      	ldr	r2, [r2, #16]
 8004d8c:	3a01      	subs	r2, #1
 8004d8e:	0412      	lsls	r2, r2, #16
 8004d90:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004d94:	4311      	orrs	r1, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6952      	ldr	r2, [r2, #20]
 8004d9a:	3a01      	subs	r2, #1
 8004d9c:	0612      	lsls	r2, r2, #24
 8004d9e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004da2:	430a      	orrs	r2, r1
 8004da4:	4924      	ldr	r1, [pc, #144]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004daa:	4b23      	ldr	r3, [pc, #140]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	f023 020c 	bic.w	r2, r3, #12
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	4920      	ldr	r1, [pc, #128]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004dbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	491c      	ldr	r1, [pc, #112]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004dca:	4b1b      	ldr	r3, [pc, #108]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dce:	4a1a      	ldr	r2, [pc, #104]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004dd0:	f023 0310 	bic.w	r3, r3, #16
 8004dd4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dd6:	4b18      	ldr	r3, [pc, #96]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dde:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	69d2      	ldr	r2, [r2, #28]
 8004de6:	00d2      	lsls	r2, r2, #3
 8004de8:	4913      	ldr	r1, [pc, #76]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004dee:	4b12      	ldr	r3, [pc, #72]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df2:	4a11      	ldr	r2, [pc, #68]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004df4:	f043 0310 	orr.w	r3, r3, #16
 8004df8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e04:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e06:	f7fc ffa3 	bl	8001d50 <HAL_GetTick>
 8004e0a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e0c:	e008      	b.n	8004e20 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e0e:	f7fc ff9f 	bl	8001d50 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e006      	b.n	8004e2e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e20:	4b05      	ldr	r3, [pc, #20]	@ (8004e38 <RCCEx_PLL3_Config+0x128>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	46020c00 	.word	0x46020c00
 8004e3c:	80800000 	.word	0x80800000

08004e40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d071      	beq.n	8004f36 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fc fcce 	bl	8001808 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004e74:	4b32      	ldr	r3, [pc, #200]	@ (8004f40 <HAL_RTC_Init+0x100>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d051      	beq.n	8004f24 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e80:	4b2f      	ldr	r3, [pc, #188]	@ (8004f40 <HAL_RTC_Init+0x100>)
 8004e82:	22ca      	movs	r2, #202	@ 0xca
 8004e84:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e86:	4b2e      	ldr	r3, [pc, #184]	@ (8004f40 <HAL_RTC_Init+0x100>)
 8004e88:	2253      	movs	r2, #83	@ 0x53
 8004e8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fc9f 	bl	80057d0 <RTC_EnterInitMode>
 8004e92:	4603      	mov	r3, r0
 8004e94:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d13f      	bne.n	8004f1c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004e9c:	4b28      	ldr	r3, [pc, #160]	@ (8004f40 <HAL_RTC_Init+0x100>)
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	4a27      	ldr	r2, [pc, #156]	@ (8004f40 <HAL_RTC_Init+0x100>)
 8004ea2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8004ea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eaa:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004eac:	4b24      	ldr	r3, [pc, #144]	@ (8004f40 <HAL_RTC_Init+0x100>)
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6859      	ldr	r1, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	4319      	orrs	r1, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	491f      	ldr	r1, [pc, #124]	@ (8004f40 <HAL_RTC_Init+0x100>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	041b      	lsls	r3, r3, #16
 8004ed0:	491b      	ldr	r1, [pc, #108]	@ (8004f40 <HAL_RTC_Init+0x100>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f40 <HAL_RTC_Init+0x100>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	4915      	ldr	r1, [pc, #84]	@ (8004f40 <HAL_RTC_Init+0x100>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fcaa 	bl	8005848 <RTC_ExitInitMode>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10e      	bne.n	8004f1c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8004efe:	4b10      	ldr	r3, [pc, #64]	@ (8004f40 <HAL_RTC_Init+0x100>)
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a19      	ldr	r1, [r3, #32]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	4319      	orrs	r1, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	430b      	orrs	r3, r1
 8004f16:	490a      	ldr	r1, [pc, #40]	@ (8004f40 <HAL_RTC_Init+0x100>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f1c:	4b08      	ldr	r3, [pc, #32]	@ (8004f40 <HAL_RTC_Init+0x100>)
 8004f1e:	22ff      	movs	r2, #255	@ 0xff
 8004f20:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f22:	e001      	b.n	8004f28 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d103      	bne.n	8004f36 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	46007800 	.word	0x46007800

08004f44 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f44:	b590      	push	{r4, r7, lr}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_RTC_SetTime+0x1a>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e088      	b.n	8005070 <HAL_RTC_SetTime+0x12c>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f6e:	4b42      	ldr	r3, [pc, #264]	@ (8005078 <HAL_RTC_SetTime+0x134>)
 8004f70:	22ca      	movs	r2, #202	@ 0xca
 8004f72:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f74:	4b40      	ldr	r3, [pc, #256]	@ (8005078 <HAL_RTC_SetTime+0x134>)
 8004f76:	2253      	movs	r2, #83	@ 0x53
 8004f78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 fc28 	bl	80057d0 <RTC_EnterInitMode>
 8004f80:	4603      	mov	r3, r0
 8004f82:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004f84:	7cfb      	ldrb	r3, [r7, #19]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d163      	bne.n	8005052 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8005078 <HAL_RTC_SetTime+0x134>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f96:	d057      	beq.n	8005048 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d125      	bne.n	8004fea <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004f9e:	4b36      	ldr	r3, [pc, #216]	@ (8005078 <HAL_RTC_SetTime+0x134>)
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2200      	movs	r2, #0
 8004fae:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fc85 	bl	80058c4 <RTC_ByteToBcd2>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fc7e 	bl	80058c4 <RTC_ByteToBcd2>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fcc:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	789b      	ldrb	r3, [r3, #2]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fc76 	bl	80058c4 <RTC_ByteToBcd2>
 8004fd8:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fda:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	78db      	ldrb	r3, [r3, #3]
 8004fe2:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	e017      	b.n	800501a <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004fea:	4b23      	ldr	r3, [pc, #140]	@ (8005078 <HAL_RTC_SetTime+0x134>)
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	785b      	ldrb	r3, [r3, #1]
 8005006:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005008:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800500e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	78db      	ldrb	r3, [r3, #3]
 8005014:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800501a:	4a17      	ldr	r2, [pc, #92]	@ (8005078 <HAL_RTC_SetTime+0x134>)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005022:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005026:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8005028:	4b13      	ldr	r3, [pc, #76]	@ (8005078 <HAL_RTC_SetTime+0x134>)
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	4a12      	ldr	r2, [pc, #72]	@ (8005078 <HAL_RTC_SetTime+0x134>)
 800502e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005032:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005034:	4b10      	ldr	r3, [pc, #64]	@ (8005078 <HAL_RTC_SetTime+0x134>)
 8005036:	699a      	ldr	r2, [r3, #24]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	68d9      	ldr	r1, [r3, #12]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	430b      	orrs	r3, r1
 8005042:	490d      	ldr	r1, [pc, #52]	@ (8005078 <HAL_RTC_SetTime+0x134>)
 8005044:	4313      	orrs	r3, r2
 8005046:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 fbfd 	bl	8005848 <RTC_ExitInitMode>
 800504e:	4603      	mov	r3, r0
 8005050:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005052:	4b09      	ldr	r3, [pc, #36]	@ (8005078 <HAL_RTC_SetTime+0x134>)
 8005054:	22ff      	movs	r2, #255	@ 0xff
 8005056:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005058:	7cfb      	ldrb	r3, [r7, #19]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d103      	bne.n	8005066 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800506e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005070:	4618      	mov	r0, r3
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	bd90      	pop	{r4, r7, pc}
 8005078:	46007800 	.word	0x46007800

0800507c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8005088:	4b34      	ldr	r3, [pc, #208]	@ (800515c <HAL_RTC_GetTime+0xe0>)
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8005090:	4b32      	ldr	r3, [pc, #200]	@ (800515c <HAL_RTC_GetTime+0xe0>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800509c:	d04a      	beq.n	8005134 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800509e:	4b2f      	ldr	r3, [pc, #188]	@ (800515c <HAL_RTC_GetTime+0xe0>)
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80050aa:	4b2c      	ldr	r3, [pc, #176]	@ (800515c <HAL_RTC_GetTime+0xe0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80050b2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80050b6:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	0c1b      	lsrs	r3, r3, #16
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	0d9b      	lsrs	r3, r3, #22
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d12a      	bne.n	8005152 <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fbff 	bl	8005904 <RTC_Bcd2ToByte>
 8005106:	4603      	mov	r3, r0
 8005108:	461a      	mov	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fbf6 	bl	8005904 <RTC_Bcd2ToByte>
 8005118:	4603      	mov	r3, r0
 800511a:	461a      	mov	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	789b      	ldrb	r3, [r3, #2]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fbed 	bl	8005904 <RTC_Bcd2ToByte>
 800512a:	4603      	mov	r3, r0
 800512c:	461a      	mov	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	709a      	strb	r2, [r3, #2]
 8005132:	e00e      	b.n	8005152 <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2200      	movs	r2, #0
 800513e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2200      	movs	r2, #0
 8005144:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2200      	movs	r2, #0
 800514a:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2200      	movs	r2, #0
 8005150:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	46007800 	.word	0x46007800

08005160 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_RTC_SetDate+0x1a>
 8005176:	2302      	movs	r3, #2
 8005178:	e071      	b.n	800525e <HAL_RTC_SetDate+0xfe>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2202      	movs	r2, #2
 8005186:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10e      	bne.n	80051ae <HAL_RTC_SetDate+0x4e>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	d008      	beq.n	80051ae <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	f023 0310 	bic.w	r3, r3, #16
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	330a      	adds	r3, #10
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d11c      	bne.n	80051ee <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	78db      	ldrb	r3, [r3, #3]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fb83 	bl	80058c4 <RTC_ByteToBcd2>
 80051be:	4603      	mov	r3, r0
 80051c0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fb7c 	bl	80058c4 <RTC_ByteToBcd2>
 80051cc:	4603      	mov	r3, r0
 80051ce:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80051d0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	789b      	ldrb	r3, [r3, #2]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fb74 	bl	80058c4 <RTC_ByteToBcd2>
 80051dc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051de:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e00e      	b.n	800520c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	78db      	ldrb	r3, [r3, #3]
 80051f2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80051fa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005200:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800520c:	4b16      	ldr	r3, [pc, #88]	@ (8005268 <HAL_RTC_SetDate+0x108>)
 800520e:	22ca      	movs	r2, #202	@ 0xca
 8005210:	625a      	str	r2, [r3, #36]	@ 0x24
 8005212:	4b15      	ldr	r3, [pc, #84]	@ (8005268 <HAL_RTC_SetDate+0x108>)
 8005214:	2253      	movs	r2, #83	@ 0x53
 8005216:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fad9 	bl	80057d0 <RTC_EnterInitMode>
 800521e:	4603      	mov	r3, r0
 8005220:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005222:	7cfb      	ldrb	r3, [r7, #19]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10b      	bne.n	8005240 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8005228:	4a0f      	ldr	r2, [pc, #60]	@ (8005268 <HAL_RTC_SetDate+0x108>)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005230:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005234:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 fb06 	bl	8005848 <RTC_ExitInitMode>
 800523c:	4603      	mov	r3, r0
 800523e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005240:	4b09      	ldr	r3, [pc, #36]	@ (8005268 <HAL_RTC_SetDate+0x108>)
 8005242:	22ff      	movs	r2, #255	@ 0xff
 8005244:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005246:	7cfb      	ldrb	r3, [r7, #19]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d103      	bne.n	8005254 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800525c:	7cfb      	ldrb	r3, [r7, #19]
}
 800525e:	4618      	mov	r0, r3
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	bd90      	pop	{r4, r7, pc}
 8005266:	bf00      	nop
 8005268:	46007800 	.word	0x46007800

0800526c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8005278:	4b22      	ldr	r3, [pc, #136]	@ (8005304 <HAL_RTC_GetDate+0x98>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005280:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005284:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	b2da      	uxtb	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	b2da      	uxtb	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	0b5b      	lsrs	r3, r3, #13
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d11a      	bne.n	80052fa <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	78db      	ldrb	r3, [r3, #3]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fb1b 	bl	8005904 <RTC_Bcd2ToByte>
 80052ce:	4603      	mov	r3, r0
 80052d0:	461a      	mov	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	785b      	ldrb	r3, [r3, #1]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fb12 	bl	8005904 <RTC_Bcd2ToByte>
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	789b      	ldrb	r3, [r3, #2]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fb09 	bl	8005904 <RTC_Bcd2ToByte>
 80052f2:	4603      	mov	r3, r0
 80052f4:	461a      	mov	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	46007800 	.word	0x46007800

08005308 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005308:	b590      	push	{r4, r7, lr}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_RTC_SetAlarm_IT+0x1e>
 8005322:	2302      	movs	r3, #2
 8005324:	e0ea      	b.n	80054fc <HAL_RTC_SetAlarm_IT+0x1f4>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                 (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif /* USE_FULL_ASSERT */

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005336:	4b73      	ldr	r3, [pc, #460]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800533e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005346:	d05c      	beq.n	8005402 <HAL_RTC_SetAlarm_IT+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d136      	bne.n	80053bc <HAL_RTC_SetAlarm_IT+0xb4>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800534e:	4b6d      	ldr	r3, [pc, #436]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d102      	bne.n	8005360 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2200      	movs	r2, #0
 800535e:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f000 faad 	bl	80058c4 <RTC_ByteToBcd2>
 800536a:	4603      	mov	r3, r0
 800536c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	785b      	ldrb	r3, [r3, #1]
 8005372:	4618      	mov	r0, r3
 8005374:	f000 faa6 	bl	80058c4 <RTC_ByteToBcd2>
 8005378:	4603      	mov	r3, r0
 800537a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800537c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	789b      	ldrb	r3, [r3, #2]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fa9e 	bl	80058c4 <RTC_ByteToBcd2>
 8005388:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800538a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	78db      	ldrb	r3, [r3, #3]
 8005392:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005394:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fa90 	bl	80058c4 <RTC_ByteToBcd2>
 80053a4:	4603      	mov	r3, r0
 80053a6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80053a8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053b0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e022      	b.n	8005402 <HAL_RTC_SetAlarm_IT+0xfa>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80053bc:	4b51      	ldr	r3, [pc, #324]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <HAL_RTC_SetAlarm_IT+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2200      	movs	r2, #0
 80053cc:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	785b      	ldrb	r3, [r3, #1]
 80053d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053da:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80053e0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	78db      	ldrb	r3, [r3, #3]
 80053e6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80053e8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053f0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80053f2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80053f8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
    }
  }


  /* Configure the Alarm registers */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800540a:	d137      	bne.n	800547c <HAL_RTC_SetAlarm_IT+0x174>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800540c:	4b3d      	ldr	r3, [pc, #244]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	4a3c      	ldr	r2, [pc, #240]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005412:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005416:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005418:	4b3a      	ldr	r3, [pc, #232]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800541a:	2201      	movs	r2, #1
 800541c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005424:	d107      	bne.n	8005436 <HAL_RTC_SetAlarm_IT+0x12e>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	4935      	ldr	r1, [pc, #212]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005430:	4313      	orrs	r3, r2
 8005432:	644b      	str	r3, [r1, #68]	@ 0x44
 8005434:	e006      	b.n	8005444 <HAL_RTC_SetAlarm_IT+0x13c>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005436:	4a33      	ldr	r2, [pc, #204]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800543c:	4a31      	ldr	r2, [pc, #196]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005444:	4a2f      	ldr	r2, [pc, #188]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	6713      	str	r3, [r2, #112]	@ 0x70

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	2b01      	cmp	r3, #1
 8005452:	d106      	bne.n	8005462 <HAL_RTC_SetAlarm_IT+0x15a>
    {
      /* Configure the  Alarm A output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8005454:	4b2b      	ldr	r3, [pc, #172]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	4a2a      	ldr	r2, [pc, #168]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800545a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800545e:	6193      	str	r3, [r2, #24]
 8005460:	e005      	b.n	800546e <HAL_RTC_SetAlarm_IT+0x166>
    }
    else
    {
      /* Disable the  Alarm A output clear*/
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 8005462:	4b28      	ldr	r3, [pc, #160]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	4a27      	ldr	r2, [pc, #156]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005468:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800546c:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800546e:	4b25      	ldr	r3, [pc, #148]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	4a24      	ldr	r2, [pc, #144]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005474:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8005478:	6193      	str	r3, [r2, #24]
 800547a:	e036      	b.n	80054ea <HAL_RTC_SetAlarm_IT+0x1e2>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800547c:	4b21      	ldr	r3, [pc, #132]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	4a20      	ldr	r2, [pc, #128]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 8005482:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8005486:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005488:	4b1e      	ldr	r3, [pc, #120]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 800548a:	2202      	movs	r2, #2
 800548c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005494:	d107      	bne.n	80054a6 <HAL_RTC_SetAlarm_IT+0x19e>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	4919      	ldr	r1, [pc, #100]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80054a4:	e006      	b.n	80054b4 <HAL_RTC_SetAlarm_IT+0x1ac>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80054a6:	4a17      	ldr	r2, [pc, #92]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80054ac:	4a15      	ldr	r2, [pc, #84]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80054b4:	4a13      	ldr	r2, [pc, #76]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	6753      	str	r3, [r2, #116]	@ 0x74

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d106      	bne.n	80054d2 <HAL_RTC_SetAlarm_IT+0x1ca>
    {
      /* Configure the  Alarm B Output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 80054c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	4a0e      	ldr	r2, [pc, #56]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80054ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ce:	6193      	str	r3, [r2, #24]
 80054d0:	e005      	b.n	80054de <HAL_RTC_SetAlarm_IT+0x1d6>
    }
    else
    {
      /* Disable the  Alarm B Output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 80054d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	4a0b      	ldr	r2, [pc, #44]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80054d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054dc:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80054de:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	4a08      	ldr	r2, [pc, #32]	@ (8005504 <HAL_RTC_SetAlarm_IT+0x1fc>)
 80054e4:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80054e8:	6193      	str	r3, [r2, #24]
  }


  hrtc->State = HAL_RTC_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	bd90      	pop	{r4, r7, pc}
 8005504:	46007800 	.word	0x46007800

08005508 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_RTC_DeactivateAlarm+0x18>
 800551c:	2302      	movs	r3, #2
 800551e:	e02d      	b.n	800557c <HAL_RTC_DeactivateAlarm+0x74>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* In case of interrupt mode is used, the interrupt source must disabled */
  if (Alarm == RTC_ALARM_A)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005536:	d10c      	bne.n	8005552 <HAL_RTC_DeactivateAlarm+0x4a>
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005538:	4b13      	ldr	r3, [pc, #76]	@ (8005588 <HAL_RTC_DeactivateAlarm+0x80>)
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	4a12      	ldr	r2, [pc, #72]	@ (8005588 <HAL_RTC_DeactivateAlarm+0x80>)
 800553e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005542:	6193      	str	r3, [r2, #24]
    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005544:	4b10      	ldr	r3, [pc, #64]	@ (8005588 <HAL_RTC_DeactivateAlarm+0x80>)
 8005546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005548:	4a0f      	ldr	r2, [pc, #60]	@ (8005588 <HAL_RTC_DeactivateAlarm+0x80>)
 800554a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800554e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005550:	e00b      	b.n	800556a <HAL_RTC_DeactivateAlarm+0x62>
  }
  else
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005552:	4b0d      	ldr	r3, [pc, #52]	@ (8005588 <HAL_RTC_DeactivateAlarm+0x80>)
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	4a0c      	ldr	r2, [pc, #48]	@ (8005588 <HAL_RTC_DeactivateAlarm+0x80>)
 8005558:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800555c:	6193      	str	r3, [r2, #24]
    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800555e:	4b0a      	ldr	r3, [pc, #40]	@ (8005588 <HAL_RTC_DeactivateAlarm+0x80>)
 8005560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005562:	4a09      	ldr	r2, [pc, #36]	@ (8005588 <HAL_RTC_DeactivateAlarm+0x80>)
 8005564:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005568:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }


  hrtc->State = HAL_RTC_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	46007800 	.word	0x46007800

0800558c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(const RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm,
                                   uint32_t Format)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055a0:	d141      	bne.n	8005626 <HAL_RTC_GetAlarm+0x9a>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    tmpreg = READ_REG(RTC->ALRMAR);
 80055aa:	4b56      	ldr	r3, [pc, #344]	@ (8005704 <HAL_RTC_GetAlarm+0x178>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 80055b0:	4b54      	ldr	r3, [pc, #336]	@ (8005704 <HAL_RTC_GetAlarm+0x178>)
 80055b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80055b8:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	0d9b      	lsrs	r3, r3, #22
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	0e1b      	lsrs	r3, r3, #24
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005608:	b2da      	uxtb	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	615a      	str	r2, [r3, #20]
 8005624:	e040      	b.n	80056a8 <HAL_RTC_GetAlarm+0x11c>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800562c:	62da      	str	r2, [r3, #44]	@ 0x2c

    tmpreg = READ_REG(RTC->ALRMBR);
 800562e:	4b35      	ldr	r3, [pc, #212]	@ (8005704 <HAL_RTC_GetAlarm+0x178>)
 8005630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005632:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005634:	4b33      	ldr	r3, [pc, #204]	@ (8005704 <HAL_RTC_GetAlarm+0x178>)
 8005636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005638:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800563c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	0c1b      	lsrs	r3, r3, #16
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005648:	b2da      	uxtb	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	0a1b      	lsrs	r3, r3, #8
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005658:	b2da      	uxtb	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005666:	b2da      	uxtb	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	0d9b      	lsrs	r3, r3, #22
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	0e1b      	lsrs	r3, r3, #24
 8005686:	b2db      	uxtb	r3, r3
 8005688:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800568c:	b2da      	uxtb	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d125      	bne.n	80056fa <HAL_RTC_GetAlarm+0x16e>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f926 	bl	8005904 <RTC_Bcd2ToByte>
 80056b8:	4603      	mov	r3, r0
 80056ba:	461a      	mov	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 f91d 	bl	8005904 <RTC_Bcd2ToByte>
 80056ca:	4603      	mov	r3, r0
 80056cc:	461a      	mov	r2, r3
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	789b      	ldrb	r3, [r3, #2]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f914 	bl	8005904 <RTC_Bcd2ToByte>
 80056dc:	4603      	mov	r3, r0
 80056de:	461a      	mov	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 f90a 	bl	8005904 <RTC_Bcd2ToByte>
 80056f0:	4603      	mov	r3, r0
 80056f2:	461a      	mov	r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	46007800 	.word	0x46007800

08005708 <HAL_RTC_AlarmIRQHandler>:
  * @note   Alarm non-secure is available in non-secure driver.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);
 8005710:	4b10      	ldr	r3, [pc, #64]	@ (8005754 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8005712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005714:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <HAL_RTC_AlarmIRQHandler+0x24>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005720:	4b0c      	ldr	r3, [pc, #48]	@ (8005754 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8005722:	2201      	movs	r2, #1
 8005724:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f816 	bl	8005758 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005736:	4b07      	ldr	r3, [pc, #28]	@ (8005754 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8005738:	2202      	movs	r2, #2
 800573a:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f92b 	bl	8005998 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	46007800 	.word	0x46007800

08005758 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A secure secure callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the secure secure callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005774:	4b15      	ldr	r3, [pc, #84]	@ (80057cc <HAL_RTC_WaitForSynchro+0x60>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	4a14      	ldr	r2, [pc, #80]	@ (80057cc <HAL_RTC_WaitForSynchro+0x60>)
 800577a:	f023 0320 	bic.w	r3, r3, #32
 800577e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005780:	f7fc fae6 	bl	8001d50 <HAL_GetTick>
 8005784:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005786:	e013      	b.n	80057b0 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005788:	f7fc fae2 	bl	8001d50 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005796:	d90b      	bls.n	80057b0 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005798:	4b0c      	ldr	r3, [pc, #48]	@ (80057cc <HAL_RTC_WaitForSynchro+0x60>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10c      	bne.n	80057be <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2203      	movs	r2, #3
 80057a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e008      	b.n	80057c2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80057b0:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <HAL_RTC_WaitForSynchro+0x60>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0e5      	beq.n	8005788 <HAL_RTC_WaitForSynchro+0x1c>
 80057bc:	e000      	b.n	80057c0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 80057be:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	46007800 	.word	0x46007800

080057d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80057dc:	4b19      	ldr	r3, [pc, #100]	@ (8005844 <RTC_EnterInitMode+0x74>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d128      	bne.n	800583a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80057e8:	4b16      	ldr	r3, [pc, #88]	@ (8005844 <RTC_EnterInitMode+0x74>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4a15      	ldr	r2, [pc, #84]	@ (8005844 <RTC_EnterInitMode+0x74>)
 80057ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80057f4:	f7fc faac 	bl	8001d50 <HAL_GetTick>
 80057f8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80057fa:	e013      	b.n	8005824 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80057fc:	f7fc faa8 	bl	8001d50 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800580a:	d90b      	bls.n	8005824 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800580c:	4b0d      	ldr	r3, [pc, #52]	@ (8005844 <RTC_EnterInitMode+0x74>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10f      	bne.n	8005838 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2203      	movs	r2, #3
 8005820:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005824:	4b07      	ldr	r3, [pc, #28]	@ (8005844 <RTC_EnterInitMode+0x74>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d104      	bne.n	800583a <RTC_EnterInitMode+0x6a>
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d1e2      	bne.n	80057fc <RTC_EnterInitMode+0x2c>
 8005836:	e000      	b.n	800583a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8005838:	bf00      	nop
        }
      }
    }
  }

  return status;
 800583a:	7bfb      	ldrb	r3, [r7, #15]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	46007800 	.word	0x46007800

08005848 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005854:	4b1a      	ldr	r3, [pc, #104]	@ (80058c0 <RTC_ExitInitMode+0x78>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	4a19      	ldr	r2, [pc, #100]	@ (80058c0 <RTC_ExitInitMode+0x78>)
 800585a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800585e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005860:	4b17      	ldr	r3, [pc, #92]	@ (80058c0 <RTC_ExitInitMode+0x78>)
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10c      	bne.n	8005886 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff ff7d 	bl	800576c <HAL_RTC_WaitForSynchro>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01e      	beq.n	80058b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2203      	movs	r2, #3
 800587c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	e017      	b.n	80058b6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005886:	4b0e      	ldr	r3, [pc, #56]	@ (80058c0 <RTC_ExitInitMode+0x78>)
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	4a0d      	ldr	r2, [pc, #52]	@ (80058c0 <RTC_ExitInitMode+0x78>)
 800588c:	f023 0320 	bic.w	r3, r3, #32
 8005890:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff ff6a 	bl	800576c <HAL_RTC_WaitForSynchro>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2203      	movs	r2, #3
 80058a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80058aa:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <RTC_ExitInitMode+0x78>)
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	4a04      	ldr	r2, [pc, #16]	@ (80058c0 <RTC_ExitInitMode+0x78>)
 80058b0:	f043 0320 	orr.w	r3, r3, #32
 80058b4:	6193      	str	r3, [r2, #24]
  }
  return status;
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	46007800 	.word	0x46007800

080058c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80058d6:	e005      	b.n	80058e4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80058de:	7afb      	ldrb	r3, [r7, #11]
 80058e0:	3b0a      	subs	r3, #10
 80058e2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80058e4:	7afb      	ldrb	r3, [r7, #11]
 80058e6:	2b09      	cmp	r3, #9
 80058e8:	d8f6      	bhi.n	80058d8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	7afb      	ldrb	r3, [r7, #11]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	b2db      	uxtb	r3, r3
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	b2db      	uxtb	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	b2da      	uxtb	r2, r3
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	b2db      	uxtb	r3, r3
 800592c:	4413      	add	r3, r2
 800592e:	b2db      	uxtb	r3, r3
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800594e:	2302      	movs	r3, #2
 8005950:	e019      	b.n	8005986 <HAL_RTCEx_DeactivateWakeUpTimer+0x4a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8005962:	4b0c      	ldr	r3, [pc, #48]	@ (8005994 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	4a0b      	ldr	r2, [pc, #44]	@ (8005994 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 8005968:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 800596c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800596e:	4b09      	ldr	r3, [pc, #36]	@ (8005994 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 8005970:	22ff      	movs	r2, #255	@ 0xff
 8005972:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	46007800 	.word	0x46007800

08005998 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	4910      	ldr	r1, [pc, #64]	@ (8005a00 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	431a      	orrs	r2, r3
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	490c      	ldr	r1, [pc, #48]	@ (8005a04 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 80059d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a04 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	6919      	ldr	r1, [r3, #16]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	041b      	lsls	r3, r3, #16
 80059ea:	430b      	orrs	r3, r1
 80059ec:	4905      	ldr	r1, [pc, #20]	@ (8005a04 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	46007800 	.word	0x46007800
 8005a04:	46007c00 	.word	0x46007c00

08005a08 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e0fb      	b.n	8005c12 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a7f      	ldr	r2, [pc, #508]	@ (8005c1c <HAL_SPI_Init+0x214>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_SPI_Init+0x26>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a7d      	ldr	r2, [pc, #500]	@ (8005c20 <HAL_SPI_Init+0x218>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	e000      	b.n	8005a30 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8005a2e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a78      	ldr	r2, [pc, #480]	@ (8005c1c <HAL_SPI_Init+0x214>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_SPI_Init+0x42>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a76      	ldr	r2, [pc, #472]	@ (8005c20 <HAL_SPI_Init+0x218>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d105      	bne.n	8005a56 <HAL_SPI_Init+0x4e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	2b0f      	cmp	r3, #15
 8005a50:	d901      	bls.n	8005a56 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e0dd      	b.n	8005c12 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fd7a 	bl	8006550 <SPI_GetPacketSize>
 8005a5c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a6e      	ldr	r2, [pc, #440]	@ (8005c1c <HAL_SPI_Init+0x214>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d004      	beq.n	8005a72 <HAL_SPI_Init+0x6a>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a6c      	ldr	r2, [pc, #432]	@ (8005c20 <HAL_SPI_Init+0x218>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d102      	bne.n	8005a78 <HAL_SPI_Init+0x70>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d816      	bhi.n	8005aa6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005a7c:	4a69      	ldr	r2, [pc, #420]	@ (8005c24 <HAL_SPI_Init+0x21c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00e      	beq.n	8005aa0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a68      	ldr	r2, [pc, #416]	@ (8005c28 <HAL_SPI_Init+0x220>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d009      	beq.n	8005aa0 <HAL_SPI_Init+0x98>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a66      	ldr	r2, [pc, #408]	@ (8005c2c <HAL_SPI_Init+0x224>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <HAL_SPI_Init+0x98>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a65      	ldr	r2, [pc, #404]	@ (8005c30 <HAL_SPI_Init+0x228>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d104      	bne.n	8005aaa <HAL_SPI_Init+0xa2>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b10      	cmp	r3, #16
 8005aa4:	d901      	bls.n	8005aaa <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e0b3      	b.n	8005c12 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fb feee 	bl	80018a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0201 	bic.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005ae6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005af0:	d119      	bne.n	8005b26 <HAL_SPI_Init+0x11e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005afa:	d103      	bne.n	8005b04 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10c      	bne.n	8005b26 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b14:	d107      	bne.n	8005b26 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b24:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00f      	beq.n	8005b52 <HAL_SPI_Init+0x14a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	2b06      	cmp	r3, #6
 8005b38:	d90b      	bls.n	8005b52 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	e007      	b.n	8005b62 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69da      	ldr	r2, [r3, #28]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b74:	ea42 0103 	orr.w	r1, r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bce:	ea42 0103 	orr.w	r1, r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	46002000 	.word	0x46002000
 8005c20:	56002000 	.word	0x56002000
 8005c24:	40013000 	.word	0x40013000
 8005c28:	50013000 	.word	0x50013000
 8005c2c:	40003800 	.word	0x40003800
 8005c30:	50003800 	.word	0x50003800

08005c34 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	4613      	mov	r3, r2
 8005c42:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3320      	adds	r3, #32
 8005c4a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c4c:	f7fc f880 	bl	8001d50 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d001      	beq.n	8005c62 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e1f3      	b.n	800604a <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_SPI_Transmit+0x3a>
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e1eb      	b.n	800604a <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_SPI_Transmit+0x4c>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e1e4      	b.n	800604a <HAL_SPI_Transmit+0x416>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	88fa      	ldrh	r2, [r7, #6]
 8005ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	88fa      	ldrh	r2, [r7, #6]
 8005caa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005cd8:	d108      	bne.n	8005cec <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e009      	b.n	8005d00 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005cfe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	0c1b      	lsrs	r3, r3, #16
 8005d08:	041b      	lsls	r3, r3, #16
 8005d0a:	88f9      	ldrh	r1, [r7, #6]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10c      	bne.n	8005d4c <HAL_SPI_Transmit+0x118>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d3a:	d107      	bne.n	8005d4c <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	2b0f      	cmp	r3, #15
 8005d52:	d95b      	bls.n	8005e0c <HAL_SPI_Transmit+0x1d8>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a8f      	ldr	r2, [pc, #572]	@ (8005f98 <HAL_SPI_Transmit+0x364>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d04f      	beq.n	8005dfe <HAL_SPI_Transmit+0x1ca>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a8e      	ldr	r2, [pc, #568]	@ (8005f9c <HAL_SPI_Transmit+0x368>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d04a      	beq.n	8005dfe <HAL_SPI_Transmit+0x1ca>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a8c      	ldr	r2, [pc, #560]	@ (8005fa0 <HAL_SPI_Transmit+0x36c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d045      	beq.n	8005dfe <HAL_SPI_Transmit+0x1ca>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a8b      	ldr	r2, [pc, #556]	@ (8005fa4 <HAL_SPI_Transmit+0x370>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d147      	bne.n	8005e0c <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005d7c:	e03f      	b.n	8005dfe <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d114      	bne.n	8005db6 <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d9c:	1d1a      	adds	r2, r3, #4
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005db4:	e023      	b.n	8005dfe <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db6:	f7fb ffcb 	bl	8001d50 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d803      	bhi.n	8005dce <HAL_SPI_Transmit+0x19a>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d102      	bne.n	8005dd4 <HAL_SPI_Transmit+0x1a0>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d114      	bne.n	8005dfe <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 faed 	bl	80063b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005de0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e125      	b.n	800604a <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1b9      	bne.n	8005d7e <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8005e0a:	e0f8      	b.n	8005ffe <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	2b07      	cmp	r3, #7
 8005e12:	f240 80ed 	bls.w	8005ff0 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005e16:	e05d      	b.n	8005ed4 <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d132      	bne.n	8005e8c <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d918      	bls.n	8005e64 <HAL_SPI_Transmit+0x230>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d014      	beq.n	8005e64 <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e4a:	1d1a      	adds	r2, r3, #4
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b02      	subs	r3, #2
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005e62:	e037      	b.n	8005ed4 <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e68:	881a      	ldrh	r2, [r3, #0]
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e72:	1c9a      	adds	r2, r3, #2
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005e8a:	e023      	b.n	8005ed4 <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e8c:	f7fb ff60 	bl	8001d50 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d803      	bhi.n	8005ea4 <HAL_SPI_Transmit+0x270>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea2:	d102      	bne.n	8005eaa <HAL_SPI_Transmit+0x276>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d114      	bne.n	8005ed4 <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 fa82 	bl	80063b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005eb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e0ba      	b.n	800604a <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d19b      	bne.n	8005e18 <HAL_SPI_Transmit+0x1e4>
 8005ee0:	e08d      	b.n	8005ffe <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d15b      	bne.n	8005fa8 <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d918      	bls.n	8005f2e <HAL_SPI_Transmit+0x2fa>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f00:	2b40      	cmp	r3, #64	@ 0x40
 8005f02:	d914      	bls.n	8005f2e <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6812      	ldr	r2, [r2, #0]
 8005f0e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f14:	1d1a      	adds	r2, r3, #4
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b04      	subs	r3, #4
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005f2c:	e060      	b.n	8005ff0 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d917      	bls.n	8005f6a <HAL_SPI_Transmit+0x336>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d013      	beq.n	8005f6a <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f46:	881a      	ldrh	r2, [r3, #0]
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f50:	1c9a      	adds	r2, r3, #2
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b02      	subs	r3, #2
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005f68:	e042      	b.n	8005ff0 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3320      	adds	r3, #32
 8005f74:	7812      	ldrb	r2, [r2, #0]
 8005f76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005f94:	e02c      	b.n	8005ff0 <HAL_SPI_Transmit+0x3bc>
 8005f96:	bf00      	nop
 8005f98:	40013000 	.word	0x40013000
 8005f9c:	50013000 	.word	0x50013000
 8005fa0:	40003800 	.word	0x40003800
 8005fa4:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fa8:	f7fb fed2 	bl	8001d50 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d803      	bhi.n	8005fc0 <HAL_SPI_Transmit+0x38c>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbe:	d102      	bne.n	8005fc6 <HAL_SPI_Transmit+0x392>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d114      	bne.n	8005ff0 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f9f4 	bl	80063b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fd2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e02c      	b.n	800604a <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f47f af72 	bne.w	8005ee2 <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2200      	movs	r2, #0
 8006006:	2108      	movs	r1, #8
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 fa73 	bl	80064f4 <SPI_WaitOnFlagUntilTimeout>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800601a:	f043 0220 	orr.w	r2, r3, #32
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f9c5 	bl	80063b4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 8006048:	2300      	movs	r3, #0
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop

08006054 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4613      	mov	r3, r2
 8006062:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3330      	adds	r3, #48	@ 0x30
 800606a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800606c:	f7fb fe70 	bl	8001d50 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b01      	cmp	r3, #1
 800607c:	d001      	beq.n	8006082 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800607e:	2302      	movs	r3, #2
 8006080:	e17e      	b.n	8006380 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <HAL_SPI_Receive+0x3a>
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e176      	b.n	8006380 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_SPI_Receive+0x4c>
 800609c:	2302      	movs	r3, #2
 800609e:	e16f      	b.n	8006380 <HAL_SPI_Receive+0x32c>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2204      	movs	r2, #4
 80060ac:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	88fa      	ldrh	r2, [r7, #6]
 80060c2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	88fa      	ldrh	r2, [r7, #6]
 80060ca:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80060f8:	d108      	bne.n	800610c <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	e009      	b.n	8006120 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800611e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	0c1b      	lsrs	r3, r3, #16
 8006128:	041b      	lsls	r3, r3, #16
 800612a:	88f9      	ldrh	r1, [r7, #6]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	430b      	orrs	r3, r1
 8006132:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10c      	bne.n	800616c <HAL_SPI_Receive+0x118>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800615a:	d107      	bne.n	800616c <HAL_SPI_Receive+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800616a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2b0f      	cmp	r3, #15
 8006172:	d95c      	bls.n	800622e <HAL_SPI_Receive+0x1da>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a83      	ldr	r2, [pc, #524]	@ (8006388 <HAL_SPI_Receive+0x334>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d050      	beq.n	8006220 <HAL_SPI_Receive+0x1cc>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a82      	ldr	r2, [pc, #520]	@ (800638c <HAL_SPI_Receive+0x338>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d04b      	beq.n	8006220 <HAL_SPI_Receive+0x1cc>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a80      	ldr	r2, [pc, #512]	@ (8006390 <HAL_SPI_Receive+0x33c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d046      	beq.n	8006220 <HAL_SPI_Receive+0x1cc>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a7f      	ldr	r2, [pc, #508]	@ (8006394 <HAL_SPI_Receive+0x340>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d148      	bne.n	800622e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800619c:	e040      	b.n	8006220 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695a      	ldr	r2, [r3, #20]
 80061a4:	f248 0308 	movw	r3, #32776	@ 0x8008
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d014      	beq.n	80061d8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80061b8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061be:	1d1a      	adds	r2, r3, #4
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80061d6:	e023      	b.n	8006220 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061d8:	f7fb fdba 	bl	8001d50 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d803      	bhi.n	80061f0 <HAL_SPI_Receive+0x19c>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d102      	bne.n	80061f6 <HAL_SPI_Receive+0x1a2>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d114      	bne.n	8006220 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f8dc 	bl	80063b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006202:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e0af      	b.n	8006380 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1b8      	bne.n	800619e <HAL_SPI_Receive+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800622c:	e095      	b.n	800635a <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	2b07      	cmp	r3, #7
 8006234:	f240 808b 	bls.w	800634e <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006238:	e03f      	b.n	80062ba <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b01      	cmp	r3, #1
 8006246:	d114      	bne.n	8006272 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	8812      	ldrh	r2, [r2, #0]
 8006250:	b292      	uxth	r2, r2
 8006252:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006258:	1c9a      	adds	r2, r3, #2
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006270:	e023      	b.n	80062ba <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006272:	f7fb fd6d 	bl	8001d50 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d803      	bhi.n	800628a <HAL_SPI_Receive+0x236>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006288:	d102      	bne.n	8006290 <HAL_SPI_Receive+0x23c>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d114      	bne.n	80062ba <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f88f 	bl	80063b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800629c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e062      	b.n	8006380 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1b9      	bne.n	800623a <HAL_SPI_Receive+0x1e6>
 80062c6:	e048      	b.n	800635a <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d117      	bne.n	8006306 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062e2:	7812      	ldrb	r2, [r2, #0]
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006304:	e023      	b.n	800634e <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006306:	f7fb fd23 	bl	8001d50 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d803      	bhi.n	800631e <HAL_SPI_Receive+0x2ca>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631c:	d102      	bne.n	8006324 <HAL_SPI_Receive+0x2d0>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d114      	bne.n	800634e <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f845 	bl	80063b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006330:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e018      	b.n	8006380 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1b6      	bne.n	80062c8 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f82a 	bl	80063b4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <HAL_SPI_Receive+0x32c>
  }
  else
  {
    return HAL_OK;
 800637e:	2300      	movs	r3, #0
  }
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40013000 	.word	0x40013000
 800638c:	50013000 	.word	0x50013000
 8006390:	40003800 	.word	0x40003800
 8006394:	50003800 	.word	0x50003800

08006398 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80063a6:	b2db      	uxtb	r3, r3
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0208 	orr.w	r2, r2, #8
 80063d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0210 	orr.w	r2, r2, #16
 80063e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0201 	bic.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006416:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b04      	cmp	r3, #4
 8006422:	d014      	beq.n	800644e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00f      	beq.n	800644e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006434:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699a      	ldr	r2, [r3, #24]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0220 	orr.w	r2, r2, #32
 800644c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b03      	cmp	r3, #3
 8006458:	d014      	beq.n	8006484 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00f      	beq.n	8006484 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800646a:	f043 0204 	orr.w	r2, r3, #4
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006482:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00f      	beq.n	80064ae <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006494:	f043 0201 	orr.w	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699a      	ldr	r2, [r3, #24]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064ac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00f      	beq.n	80064d8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064be:	f043 0208 	orr.w	r2, r3, #8
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064d6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	4613      	mov	r3, r2
 8006502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006504:	e010      	b.n	8006528 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006506:	f7fb fc23 	bl	8001d50 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d803      	bhi.n	800651e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d102      	bne.n	8006524 <SPI_WaitOnFlagUntilTimeout+0x30>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e00f      	b.n	8006548 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695a      	ldr	r2, [r3, #20]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4013      	ands	r3, r2
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	429a      	cmp	r2, r3
 8006536:	bf0c      	ite	eq
 8006538:	2301      	moveq	r3, #1
 800653a:	2300      	movne	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	79fb      	ldrb	r3, [r7, #7]
 8006542:	429a      	cmp	r2, r3
 8006544:	d0df      	beq.n	8006506 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	3301      	adds	r3, #1
 8006568:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	3307      	adds	r3, #7
 800656e:	08db      	lsrs	r3, r3, #3
 8006570:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	fb02 f303 	mul.w	r3, r2, r3
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	d12e      	bne.n	80065fa <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e028      	b.n	80065fc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2202      	movs	r2, #2
 80065b6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0201 	bic.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80065d6:	ea42 0103 	orr.w	r1, r2, r3
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	e000      	b.n	80065fc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
  }
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <BoardInitPeriph>:
//{
//    SystemWakeupTimeCalibrated = true;
//}

void BoardInitPeriph( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af02      	add	r7, sp, #8
    /* Init the GPIO extender pins */
#if ( USE_POTENTIOMETER == 0 )
    GpioInit( &Led1, LED_1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
#endif
    GpioInit( &Led2, LED_2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800660e:	2301      	movs	r3, #1
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	2300      	movs	r3, #0
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	2300      	movs	r3, #0
 8006618:	2201      	movs	r2, #1
 800661a:	2100      	movs	r1, #0
 800661c:	4812      	ldr	r0, [pc, #72]	@ (8006668 <BoardInitPeriph+0x60>)
 800661e:	f000 fb5f 	bl	8006ce0 <GpioInit>
    GpioInit( &Led3, LED_3, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8006622:	2301      	movs	r3, #1
 8006624:	9301      	str	r3, [sp, #4]
 8006626:	2300      	movs	r3, #0
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	2300      	movs	r3, #0
 800662c:	2201      	movs	r2, #1
 800662e:	2101      	movs	r1, #1
 8006630:	480e      	ldr	r0, [pc, #56]	@ (800666c <BoardInitPeriph+0x64>)
 8006632:	f000 fb55 	bl	8006ce0 <GpioInit>
    GpioInit( &Led4, LED_4, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8006636:	2301      	movs	r3, #1
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	2300      	movs	r3, #0
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	2300      	movs	r3, #0
 8006640:	2201      	movs	r2, #1
 8006642:	2108      	movs	r1, #8
 8006644:	480a      	ldr	r0, [pc, #40]	@ (8006670 <BoardInitPeriph+0x68>)
 8006646:	f000 fb4b 	bl	8006ce0 <GpioInit>

    // Switch LED 1, 2, 3, 4 OFF
#if ( USE_POTENTIOMETER == 0 )
    GpioWrite( &Led1, 0 );
#endif
    GpioWrite( &Led2, 0 );
 800664a:	2100      	movs	r1, #0
 800664c:	4806      	ldr	r0, [pc, #24]	@ (8006668 <BoardInitPeriph+0x60>)
 800664e:	f000 fb86 	bl	8006d5e <GpioWrite>
    GpioWrite( &Led3, 0 );
 8006652:	2100      	movs	r1, #0
 8006654:	4805      	ldr	r0, [pc, #20]	@ (800666c <BoardInitPeriph+0x64>)
 8006656:	f000 fb82 	bl	8006d5e <GpioWrite>
    GpioWrite( &Led4, 0 );
 800665a:	2100      	movs	r1, #0
 800665c:	4804      	ldr	r0, [pc, #16]	@ (8006670 <BoardInitPeriph+0x68>)
 800665e:	f000 fb7e 	bl	8006d5e <GpioWrite>
}
 8006662:	bf00      	nop
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	20000250 	.word	0x20000250
 800666c:	2000025c 	.word	0x2000025c
 8006670:	20000268 	.word	0x20000268

08006674 <BoardInitMcu>:

void BoardInitMcu( void )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af02      	add	r7, sp, #8
    if( McuInitialized == false )
 800667a:	4b10      	ldr	r3, [pc, #64]	@ (80066bc <BoardInitMcu+0x48>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	f083 0301 	eor.w	r3, r3, #1
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <BoardInitMcu+0x18>
#endif
//        HAL_Init( );

//        SystemClockConfig( );

        RtcInit( );
 8006688:	f000 fb7e 	bl	8006d88 <RtcInit>
//        SystemClockReConfig( );
    }

//    AdcInit( &Adc, POTI );

    SpiInit( &SX1276.Spi, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
 800668c:	f04f 33ff 	mov.w	r3, #4294967295
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	2305      	movs	r3, #5
 8006694:	2206      	movs	r2, #6
 8006696:	2107      	movs	r1, #7
 8006698:	4809      	ldr	r0, [pc, #36]	@ (80066c0 <BoardInitMcu+0x4c>)
 800669a:	f001 f845 	bl	8007728 <SpiInit>
    SX1276IoInit( );
 800669e:	f001 f935 	bl	800790c <SX1276IoInit>

    if( McuInitialized == false )
 80066a2:	4b06      	ldr	r3, [pc, #24]	@ (80066bc <BoardInitMcu+0x48>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	f083 0301 	eor.w	r3, r3, #1
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <BoardInitMcu+0x42>
    {
        McuInitialized = true;
 80066b0:	4b02      	ldr	r3, [pc, #8]	@ (80066bc <BoardInitMcu+0x48>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	701a      	strb	r2, [r3, #0]
//        if( GetBoardPowerSource( ) == BATTERY_POWER )
//        {
//            CalibrateSystemWakeupTime( );
//        }
    }
}
 80066b6:	bf00      	nop
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20000274 	.word	0x20000274
 80066c0:	20000494 	.word	0x20000494

080066c4 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
    HAL_Delay( ms );
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7fb fb4b 	bl	8001d68 <HAL_Delay>
}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <GpioMcuInit>:
#include "gpio-board.h"

static GpioIrqHandler *GpioIrq[16];

void GpioMcuInit( Gpio_t *obj, PinNames pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08c      	sub	sp, #48	@ 0x30
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	4608      	mov	r0, r1
 80066e6:	4611      	mov	r1, r2
 80066e8:	461a      	mov	r2, r3
 80066ea:	4603      	mov	r3, r0
 80066ec:	70fb      	strb	r3, [r7, #3]
 80066ee:	460b      	mov	r3, r1
 80066f0:	70bb      	strb	r3, [r7, #2]
 80066f2:	4613      	mov	r3, r2
 80066f4:	707b      	strb	r3, [r7, #1]
    GPIO_InitTypeDef GPIO_InitStructure;

    if( pin == NC )
 80066f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fe:	f000 80c3 	beq.w	8006888 <GpioMcuInit+0x1ac>
    {
        return;
    }
    obj->pin = pin;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	78fa      	ldrb	r2, [r7, #3]
 8006706:	701a      	strb	r2, [r3, #0]
    obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f993 3000 	ldrsb.w	r3, [r3]
 800670e:	b2db      	uxtb	r3, r3
 8006710:	f003 030f 	and.w	r3, r3, #15
 8006714:	2201      	movs	r2, #1
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	b29a      	uxth	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	805a      	strh	r2, [r3, #2]

    if( ( obj->pin & 0xF0 ) == 0x00 )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f993 3000 	ldrsb.w	r3, [r3]
 8006726:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d112      	bne.n	8006754 <GpioMcuInit+0x78>
    {
        obj->port = GPIOA;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a57      	ldr	r2, [pc, #348]	@ (8006890 <GpioMcuInit+0x1b4>)
 8006732:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE( );
 8006734:	4b57      	ldr	r3, [pc, #348]	@ (8006894 <GpioMcuInit+0x1b8>)
 8006736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800673a:	4a56      	ldr	r2, [pc, #344]	@ (8006894 <GpioMcuInit+0x1b8>)
 800673c:	f043 0301 	orr.w	r3, r3, #1
 8006740:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006744:	4b53      	ldr	r3, [pc, #332]	@ (8006894 <GpioMcuInit+0x1b8>)
 8006746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	61bb      	str	r3, [r7, #24]
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	e05f      	b.n	8006814 <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x10 )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f993 3000 	ldrsb.w	r3, [r3]
 800675a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800675e:	2b10      	cmp	r3, #16
 8006760:	d112      	bne.n	8006788 <GpioMcuInit+0xac>
    {
        obj->port = GPIOB;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a4c      	ldr	r2, [pc, #304]	@ (8006898 <GpioMcuInit+0x1bc>)
 8006766:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOB_CLK_ENABLE( );
 8006768:	4b4a      	ldr	r3, [pc, #296]	@ (8006894 <GpioMcuInit+0x1b8>)
 800676a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800676e:	4a49      	ldr	r2, [pc, #292]	@ (8006894 <GpioMcuInit+0x1b8>)
 8006770:	f043 0302 	orr.w	r3, r3, #2
 8006774:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006778:	4b46      	ldr	r3, [pc, #280]	@ (8006894 <GpioMcuInit+0x1b8>)
 800677a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	e045      	b.n	8006814 <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x20 )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f993 3000 	ldrsb.w	r3, [r3]
 800678e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006792:	2b20      	cmp	r3, #32
 8006794:	d112      	bne.n	80067bc <GpioMcuInit+0xe0>
    {
        obj->port = GPIOC;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a40      	ldr	r2, [pc, #256]	@ (800689c <GpioMcuInit+0x1c0>)
 800679a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOC_CLK_ENABLE( );
 800679c:	4b3d      	ldr	r3, [pc, #244]	@ (8006894 <GpioMcuInit+0x1b8>)
 800679e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067a2:	4a3c      	ldr	r2, [pc, #240]	@ (8006894 <GpioMcuInit+0x1b8>)
 80067a4:	f043 0304 	orr.w	r3, r3, #4
 80067a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80067ac:	4b39      	ldr	r3, [pc, #228]	@ (8006894 <GpioMcuInit+0x1b8>)
 80067ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067b2:	f003 0304 	and.w	r3, r3, #4
 80067b6:	613b      	str	r3, [r7, #16]
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	e02b      	b.n	8006814 <GpioMcuInit+0x138>
    }
    else if( ( obj->pin & 0xF0 ) == 0x30 )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f993 3000 	ldrsb.w	r3, [r3]
 80067c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067c6:	2b30      	cmp	r3, #48	@ 0x30
 80067c8:	d112      	bne.n	80067f0 <GpioMcuInit+0x114>
    {
        obj->port = GPIOD;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a34      	ldr	r2, [pc, #208]	@ (80068a0 <GpioMcuInit+0x1c4>)
 80067ce:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOD_CLK_ENABLE( );
 80067d0:	4b30      	ldr	r3, [pc, #192]	@ (8006894 <GpioMcuInit+0x1b8>)
 80067d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067d6:	4a2f      	ldr	r2, [pc, #188]	@ (8006894 <GpioMcuInit+0x1b8>)
 80067d8:	f043 0308 	orr.w	r3, r3, #8
 80067dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80067e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006894 <GpioMcuInit+0x1b8>)
 80067e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	e011      	b.n	8006814 <GpioMcuInit+0x138>
    }
    else
    {
        obj->port = GPIOH;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a2c      	ldr	r2, [pc, #176]	@ (80068a4 <GpioMcuInit+0x1c8>)
 80067f4:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOH_CLK_ENABLE( );
 80067f6:	4b27      	ldr	r3, [pc, #156]	@ (8006894 <GpioMcuInit+0x1b8>)
 80067f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067fc:	4a25      	ldr	r2, [pc, #148]	@ (8006894 <GpioMcuInit+0x1b8>)
 80067fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006802:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006806:	4b23      	ldr	r3, [pc, #140]	@ (8006894 <GpioMcuInit+0x1b8>)
 8006808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800680c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006810:	60bb      	str	r3, [r7, #8]
 8006812:	68bb      	ldr	r3, [r7, #8]
    }

    GPIO_InitStructure.Pin =  obj->pinIndex ;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	885b      	ldrh	r3, [r3, #2]
 8006818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Pull = type;
 800681a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800681e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006820:	2302      	movs	r3, #2
 8006822:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( mode == PIN_INPUT )
 8006824:	78bb      	ldrb	r3, [r7, #2]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d102      	bne.n	8006830 <GpioMcuInit+0x154>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800682a:	2300      	movs	r3, #0
 800682c:	623b      	str	r3, [r7, #32]
 800682e:	e01b      	b.n	8006868 <GpioMcuInit+0x18c>
    }
    else if( mode == PIN_ANALOGIC )
 8006830:	78bb      	ldrb	r3, [r7, #2]
 8006832:	2b03      	cmp	r3, #3
 8006834:	d102      	bne.n	800683c <GpioMcuInit+0x160>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8006836:	2303      	movs	r3, #3
 8006838:	623b      	str	r3, [r7, #32]
 800683a:	e015      	b.n	8006868 <GpioMcuInit+0x18c>
    }
    else if( mode == PIN_ALTERNATE_FCT )
 800683c:	78bb      	ldrb	r3, [r7, #2]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d10a      	bne.n	8006858 <GpioMcuInit+0x17c>
    {
        if( config == PIN_OPEN_DRAIN )
 8006842:	787b      	ldrb	r3, [r7, #1]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d102      	bne.n	800684e <GpioMcuInit+0x172>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8006848:	2312      	movs	r3, #18
 800684a:	623b      	str	r3, [r7, #32]
 800684c:	e001      	b.n	8006852 <GpioMcuInit+0x176>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800684e:	2302      	movs	r3, #2
 8006850:	623b      	str	r3, [r7, #32]
        }
        GPIO_InitStructure.Alternate = value;
 8006852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006856:	e007      	b.n	8006868 <GpioMcuInit+0x18c>
    }
    else // mode ouptut
    {
        if( config == PIN_OPEN_DRAIN )
 8006858:	787b      	ldrb	r3, [r7, #1]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d102      	bne.n	8006864 <GpioMcuInit+0x188>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800685e:	2311      	movs	r3, #17
 8006860:	623b      	str	r3, [r7, #32]
 8006862:	e001      	b.n	8006868 <GpioMcuInit+0x18c>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8006864:	2301      	movs	r3, #1
 8006866:	623b      	str	r3, [r7, #32]
        }
    }

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f107 021c 	add.w	r2, r7, #28
 8006870:	4611      	mov	r1, r2
 8006872:	4618      	mov	r0, r3
 8006874:	f7fb fef0 	bl	8002658 <HAL_GPIO_Init>

    // Sets initial output value
    if( mode == PIN_OUTPUT )
 8006878:	78bb      	ldrb	r3, [r7, #2]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d105      	bne.n	800688a <GpioMcuInit+0x1ae>
    {
        GpioMcuWrite( obj, value );
 800687e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f953 	bl	8006b2c <GpioMcuWrite>
 8006886:	e000      	b.n	800688a <GpioMcuInit+0x1ae>
        return;
 8006888:	bf00      	nop
    }
}
 800688a:	3730      	adds	r7, #48	@ 0x30
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	42020000 	.word	0x42020000
 8006894:	46020c00 	.word	0x46020c00
 8006898:	42020400 	.word	0x42020400
 800689c:	42020800 	.word	0x42020800
 80068a0:	42020c00 	.word	0x42020c00
 80068a4:	42021c00 	.word	0x42021c00

080068a8 <GpioMcuSetInterrupt>:

void GpioMcuSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08c      	sub	sp, #48	@ 0x30
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	607b      	str	r3, [r7, #4]
 80068b2:	460b      	mov	r3, r1
 80068b4:	72fb      	strb	r3, [r7, #11]
 80068b6:	4613      	mov	r3, r2
 80068b8:	72bb      	strb	r3, [r7, #10]
    uint32_t priority = 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    IRQn_Type IRQnb = EXTI0_IRQn;
 80068be:	230b      	movs	r3, #11
 80068c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    GPIO_InitTypeDef   GPIO_InitStructure;

    if( irqHandler == NULL )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 8123 	beq.w	8006b12 <GpioMcuSetInterrupt+0x26a>
    {
        return;
    }

    GPIO_InitStructure.Pin =  obj->pinIndex;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	885b      	ldrh	r3, [r3, #2]
 80068d0:	617b      	str	r3, [r7, #20]

    if( irqMode == IRQ_RISING_EDGE )
 80068d2:	7afb      	ldrb	r3, [r7, #11]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d102      	bne.n	80068de <GpioMcuSetInterrupt+0x36>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80068d8:	4b90      	ldr	r3, [pc, #576]	@ (8006b1c <GpioMcuSetInterrupt+0x274>)
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	e007      	b.n	80068ee <GpioMcuSetInterrupt+0x46>
    }
    else if( irqMode == IRQ_FALLING_EDGE )
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d102      	bne.n	80068ea <GpioMcuSetInterrupt+0x42>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 80068e4:	4b8e      	ldr	r3, [pc, #568]	@ (8006b20 <GpioMcuSetInterrupt+0x278>)
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	e001      	b.n	80068ee <GpioMcuSetInterrupt+0x46>
    }
    else
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 80068ea:	4b8e      	ldr	r3, [pc, #568]	@ (8006b24 <GpioMcuSetInterrupt+0x27c>)
 80068ec:	61bb      	str	r3, [r7, #24]
    }

    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80068f2:	2302      	movs	r3, #2
 80068f4:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f107 0214 	add.w	r2, r7, #20
 80068fe:	4611      	mov	r1, r2
 8006900:	4618      	mov	r0, r3
 8006902:	f7fb fea9 	bl	8002658 <HAL_GPIO_Init>

    switch( irqPriority )
 8006906:	7abb      	ldrb	r3, [r7, #10]
 8006908:	2b03      	cmp	r3, #3
 800690a:	d00f      	beq.n	800692c <GpioMcuSetInterrupt+0x84>
 800690c:	2b03      	cmp	r3, #3
 800690e:	dc10      	bgt.n	8006932 <GpioMcuSetInterrupt+0x8a>
 8006910:	2b01      	cmp	r3, #1
 8006912:	dc02      	bgt.n	800691a <GpioMcuSetInterrupt+0x72>
 8006914:	2b00      	cmp	r3, #0
 8006916:	da03      	bge.n	8006920 <GpioMcuSetInterrupt+0x78>
 8006918:	e00b      	b.n	8006932 <GpioMcuSetInterrupt+0x8a>
 800691a:	2b02      	cmp	r3, #2
 800691c:	d003      	beq.n	8006926 <GpioMcuSetInterrupt+0x7e>
 800691e:	e008      	b.n	8006932 <GpioMcuSetInterrupt+0x8a>
    {
    case IRQ_VERY_LOW_PRIORITY:
    case IRQ_LOW_PRIORITY:
        priority = 3;
 8006920:	2303      	movs	r3, #3
 8006922:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006924:	e008      	b.n	8006938 <GpioMcuSetInterrupt+0x90>
    case IRQ_MEDIUM_PRIORITY:
        priority = 2;
 8006926:	2302      	movs	r3, #2
 8006928:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800692a:	e005      	b.n	8006938 <GpioMcuSetInterrupt+0x90>
    case IRQ_HIGH_PRIORITY:
        priority = 1;
 800692c:	2301      	movs	r3, #1
 800692e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006930:	e002      	b.n	8006938 <GpioMcuSetInterrupt+0x90>
    case IRQ_VERY_HIGH_PRIORITY:
    default:
        priority = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006936:	bf00      	nop
    }

    switch( obj->pinIndex )		// PK: definicja EXTI rozszerzona do pełnych 16 przerwań
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	885b      	ldrh	r3, [r3, #2]
 800693c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006940:	f000 80cb 	beq.w	8006ada <GpioMcuSetInterrupt+0x232>
 8006944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006948:	f300 80cb 	bgt.w	8006ae2 <GpioMcuSetInterrupt+0x23a>
 800694c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006950:	f000 80bf 	beq.w	8006ad2 <GpioMcuSetInterrupt+0x22a>
 8006954:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006958:	f300 80c3 	bgt.w	8006ae2 <GpioMcuSetInterrupt+0x23a>
 800695c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006960:	f000 80b3 	beq.w	8006aca <GpioMcuSetInterrupt+0x222>
 8006964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006968:	f300 80bb 	bgt.w	8006ae2 <GpioMcuSetInterrupt+0x23a>
 800696c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006970:	f000 80a7 	beq.w	8006ac2 <GpioMcuSetInterrupt+0x21a>
 8006974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006978:	f300 80b3 	bgt.w	8006ae2 <GpioMcuSetInterrupt+0x23a>
 800697c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006980:	f000 809b 	beq.w	8006aba <GpioMcuSetInterrupt+0x212>
 8006984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006988:	f300 80ab 	bgt.w	8006ae2 <GpioMcuSetInterrupt+0x23a>
 800698c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006990:	f000 808f 	beq.w	8006ab2 <GpioMcuSetInterrupt+0x20a>
 8006994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006998:	f300 80a3 	bgt.w	8006ae2 <GpioMcuSetInterrupt+0x23a>
 800699c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069a0:	f000 8083 	beq.w	8006aaa <GpioMcuSetInterrupt+0x202>
 80069a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069a8:	f300 809b 	bgt.w	8006ae2 <GpioMcuSetInterrupt+0x23a>
 80069ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069b0:	d077      	beq.n	8006aa2 <GpioMcuSetInterrupt+0x1fa>
 80069b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069b6:	f300 8094 	bgt.w	8006ae2 <GpioMcuSetInterrupt+0x23a>
 80069ba:	2b80      	cmp	r3, #128	@ 0x80
 80069bc:	d06d      	beq.n	8006a9a <GpioMcuSetInterrupt+0x1f2>
 80069be:	2b80      	cmp	r3, #128	@ 0x80
 80069c0:	f300 808f 	bgt.w	8006ae2 <GpioMcuSetInterrupt+0x23a>
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	dc49      	bgt.n	8006a5c <GpioMcuSetInterrupt+0x1b4>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f340 808a 	ble.w	8006ae2 <GpioMcuSetInterrupt+0x23a>
 80069ce:	3b01      	subs	r3, #1
 80069d0:	2b1f      	cmp	r3, #31
 80069d2:	f200 8086 	bhi.w	8006ae2 <GpioMcuSetInterrupt+0x23a>
 80069d6:	a201      	add	r2, pc, #4	@ (adr r2, 80069dc <GpioMcuSetInterrupt+0x134>)
 80069d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069dc:	08006a63 	.word	0x08006a63
 80069e0:	08006a6b 	.word	0x08006a6b
 80069e4:	08006ae3 	.word	0x08006ae3
 80069e8:	08006a73 	.word	0x08006a73
 80069ec:	08006ae3 	.word	0x08006ae3
 80069f0:	08006ae3 	.word	0x08006ae3
 80069f4:	08006ae3 	.word	0x08006ae3
 80069f8:	08006a7b 	.word	0x08006a7b
 80069fc:	08006ae3 	.word	0x08006ae3
 8006a00:	08006ae3 	.word	0x08006ae3
 8006a04:	08006ae3 	.word	0x08006ae3
 8006a08:	08006ae3 	.word	0x08006ae3
 8006a0c:	08006ae3 	.word	0x08006ae3
 8006a10:	08006ae3 	.word	0x08006ae3
 8006a14:	08006ae3 	.word	0x08006ae3
 8006a18:	08006a83 	.word	0x08006a83
 8006a1c:	08006ae3 	.word	0x08006ae3
 8006a20:	08006ae3 	.word	0x08006ae3
 8006a24:	08006ae3 	.word	0x08006ae3
 8006a28:	08006ae3 	.word	0x08006ae3
 8006a2c:	08006ae3 	.word	0x08006ae3
 8006a30:	08006ae3 	.word	0x08006ae3
 8006a34:	08006ae3 	.word	0x08006ae3
 8006a38:	08006ae3 	.word	0x08006ae3
 8006a3c:	08006ae3 	.word	0x08006ae3
 8006a40:	08006ae3 	.word	0x08006ae3
 8006a44:	08006ae3 	.word	0x08006ae3
 8006a48:	08006ae3 	.word	0x08006ae3
 8006a4c:	08006ae3 	.word	0x08006ae3
 8006a50:	08006ae3 	.word	0x08006ae3
 8006a54:	08006ae3 	.word	0x08006ae3
 8006a58:	08006a8b 	.word	0x08006a8b
 8006a5c:	2b40      	cmp	r3, #64	@ 0x40
 8006a5e:	d018      	beq.n	8006a92 <GpioMcuSetInterrupt+0x1ea>
        break;
    case GPIO_PIN_15:
        IRQnb = EXTI15_IRQn;
        break;
    default:
        break;
 8006a60:	e03f      	b.n	8006ae2 <GpioMcuSetInterrupt+0x23a>
        IRQnb = EXTI0_IRQn;
 8006a62:	230b      	movs	r3, #11
 8006a64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006a68:	e03c      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI1_IRQn;
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006a70:	e038      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI2_IRQn;
 8006a72:	230d      	movs	r3, #13
 8006a74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006a78:	e034      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI3_IRQn;
 8006a7a:	230e      	movs	r3, #14
 8006a7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006a80:	e030      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI4_IRQn;
 8006a82:	230f      	movs	r3, #15
 8006a84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006a88:	e02c      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI5_IRQn;
 8006a8a:	2310      	movs	r3, #16
 8006a8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006a90:	e028      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI6_IRQn;
 8006a92:	2311      	movs	r3, #17
 8006a94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006a98:	e024      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI7_IRQn;
 8006a9a:	2312      	movs	r3, #18
 8006a9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006aa0:	e020      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI8_IRQn;
 8006aa2:	2313      	movs	r3, #19
 8006aa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006aa8:	e01c      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI9_IRQn;
 8006aaa:	2314      	movs	r3, #20
 8006aac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006ab0:	e018      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI10_IRQn;
 8006ab2:	2315      	movs	r3, #21
 8006ab4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006ab8:	e014      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI11_IRQn;
 8006aba:	2316      	movs	r3, #22
 8006abc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006ac0:	e010      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI12_IRQn;
 8006ac2:	2317      	movs	r3, #23
 8006ac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006ac8:	e00c      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI13_IRQn;
 8006aca:	2318      	movs	r3, #24
 8006acc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006ad0:	e008      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI14_IRQn;
 8006ad2:	2319      	movs	r3, #25
 8006ad4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006ad8:	e004      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        IRQnb = EXTI15_IRQn;
 8006ada:	231a      	movs	r3, #26
 8006adc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        break;
 8006ae0:	e000      	b.n	8006ae4 <GpioMcuSetInterrupt+0x23c>
        break;
 8006ae2:	bf00      	nop
    }
    //watch

    GpioIrq[(obj->pin ) & 0x0F] = irqHandler;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f993 3000 	ldrsb.w	r3, [r3]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	490d      	ldr	r1, [pc, #52]	@ (8006b28 <GpioMcuSetInterrupt+0x280>)
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 8006af8:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006afc:	2200      	movs	r2, #0
 8006afe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fb fa0d 	bl	8001f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 8006b06:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fb fa22 	bl	8001f54 <HAL_NVIC_EnableIRQ>
 8006b10:	e000      	b.n	8006b14 <GpioMcuSetInterrupt+0x26c>
        return;
 8006b12:	bf00      	nop
}
 8006b14:	3730      	adds	r7, #48	@ 0x30
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	10110000 	.word	0x10110000
 8006b20:	10210000 	.word	0x10210000
 8006b24:	10310000 	.word	0x10310000
 8006b28:	20000278 	.word	0x20000278

08006b2c <GpioMcuWrite>:
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
    if( ( obj == NULL ) || ( obj->port == NULL ) )
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }
    // Check if pin is not connected
    if( obj->pin == NC )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f993 3000 	ldrsb.w	r3, [r3]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d009      	beq.n	8006b5a <GpioMcuWrite+0x2e>
    {
        return;
    }
    HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6858      	ldr	r0, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	885b      	ldrh	r3, [r3, #2]
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	b2d2      	uxtb	r2, r2
 8006b52:	4619      	mov	r1, r3
 8006b54:	f7fb ff70 	bl	8002a38 <HAL_GPIO_WritePin>
 8006b58:	e000      	b.n	8006b5c <GpioMcuWrite+0x30>
        return;
 8006b5a:	bf00      	nop
}
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <EXTI0_IRQHandler>:
    }
    return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
}

void EXTI0_IRQHandler( void )
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006b66:	f000 f9ed 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	f7fb ff7c 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006b70:	bf00      	nop
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006b78:	f000 f9e4 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8006b7c:	2002      	movs	r0, #2
 8006b7e:	f7fb ff73 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006b82:	bf00      	nop
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006b8a:	f000 f9db 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8006b8e:	2004      	movs	r0, #4
 8006b90:	f7fb ff6a 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006b94:	bf00      	nop
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006b9c:	f000 f9d2 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 8006ba0:	2008      	movs	r0, #8
 8006ba2:	f7fb ff61 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006ba6:	bf00      	nop
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006bae:	f000 f9c9 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 8006bb2:	2010      	movs	r0, #16
 8006bb4:	f7fb ff58 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006bb8:	bf00      	nop
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <EXTI5_IRQHandler>:

void EXTI5_IRQHandler( void )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006bc0:	f000 f9c0 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8006bc4:	2020      	movs	r0, #32
 8006bc6:	f7fb ff4f 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006bca:	bf00      	nop
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <EXTI6_IRQHandler>:

void EXTI6_IRQHandler( void )
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006bd2:	f000 f9b7 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8006bd6:	2040      	movs	r0, #64	@ 0x40
 8006bd8:	f7fb ff46 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006bdc:	bf00      	nop
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <EXTI7_IRQHandler>:

void EXTI7_IRQHandler( void )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006be4:	f000 f9ae 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8006be8:	2080      	movs	r0, #128	@ 0x80
 8006bea:	f7fb ff3d 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006bee:	bf00      	nop
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <EXTI8_IRQHandler>:

void EXTI8_IRQHandler( void )
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006bf6:	f000 f9a5 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8006bfa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006bfe:	f7fb ff33 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006c02:	bf00      	nop
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <EXTI9_IRQHandler>:

void EXTI9_IRQHandler( void )
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006c0a:	f000 f99b 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8006c0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006c12:	f7fb ff29 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006c16:	bf00      	nop
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <EXTI10_IRQHandler>:

void EXTI10_IRQHandler( void )
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006c1e:	f000 f991 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8006c22:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006c26:	f7fb ff1f 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006c2a:	bf00      	nop
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <EXTI11_IRQHandler>:

void EXTI11_IRQHandler( void )
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006c32:	f000 f987 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8006c36:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006c3a:	f7fb ff15 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006c3e:	bf00      	nop
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <EXTI12_IRQHandler>:

void EXTI12_IRQHandler( void )
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006c46:	f000 f97d 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 8006c4a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006c4e:	f7fb ff0b 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006c52:	bf00      	nop
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <EXTI13_IRQHandler>:

void EXTI13_IRQHandler( void )
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006c5a:	f000 f973 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8006c5e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006c62:	f7fb ff01 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006c66:	bf00      	nop
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <EXTI14_IRQHandler>:

void EXTI14_IRQHandler( void )
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006c6e:	f000 f969 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 8006c72:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006c76:	f7fb fef7 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006c7a:	bf00      	nop
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <EXTI15_IRQHandler>:

void EXTI15_IRQHandler( void )
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 8006c82:	f000 f95f 	bl	8006f44 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 8006c86:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006c8a:	f7fb feed 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
}
 8006c8e:	bf00      	nop
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <HAL_GPIO_EXTI_Rising_Callback>:
}
*/

//void HAL_GPIO_EXTI_Callback( uint16_t gpioPin )       // PK: dla L476
void HAL_GPIO_EXTI_Rising_Callback( uint16_t gpioPin )  // PK: dla U545
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	80fb      	strh	r3, [r7, #6]
    uint8_t callbackIndex = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	73fb      	strb	r3, [r7, #15]

    if( gpioPin > 0 )
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d009      	beq.n	8006cbc <HAL_GPIO_EXTI_Rising_Callback+0x28>
    {
        while( gpioPin != 0x01 )
 8006ca8:	e005      	b.n	8006cb6 <HAL_GPIO_EXTI_Rising_Callback+0x22>
        {
            gpioPin = gpioPin >> 1;
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	085b      	lsrs	r3, r3, #1
 8006cae:	80fb      	strh	r3, [r7, #6]
            callbackIndex++;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	73fb      	strb	r3, [r7, #15]
        while( gpioPin != 0x01 )
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d1f6      	bne.n	8006caa <HAL_GPIO_EXTI_Rising_Callback+0x16>
        }
    }

    if( GpioIrq[callbackIndex] != NULL )
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	4a07      	ldr	r2, [pc, #28]	@ (8006cdc <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 8006cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d004      	beq.n	8006cd2 <HAL_GPIO_EXTI_Rising_Callback+0x3e>
    {
        GpioIrq[callbackIndex]( );
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	4a04      	ldr	r2, [pc, #16]	@ (8006cdc <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 8006ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd0:	4798      	blx	r3
    }
}
 8006cd2:	bf00      	nop
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000278 	.word	0x20000278

08006ce0 <GpioInit>:
#if defined( BOARD_IOE_EXT )
#include "gpio-ioe.h"
#endif

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	4608      	mov	r0, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	70fb      	strb	r3, [r7, #3]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70bb      	strb	r3, [r7, #2]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	707b      	strb	r3, [r7, #1]
    if( ( uint32_t )( pin >> 4 ) <= 6 )
 8006cfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cfe:	111b      	asrs	r3, r3, #4
 8006d00:	b25b      	sxtb	r3, r3
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b06      	cmp	r3, #6
 8006d06:	d80b      	bhi.n	8006d20 <GpioInit+0x40>
    {
        GpioMcuInit( obj, pin, mode, config, type, value );
 8006d08:	7878      	ldrb	r0, [r7, #1]
 8006d0a:	78ba      	ldrb	r2, [r7, #2]
 8006d0c:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	9301      	str	r3, [sp, #4]
 8006d14:	7c3b      	ldrb	r3, [r7, #16]
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	4603      	mov	r3, r0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff fcde 	bl	80066dc <GpioMcuInit>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeInit( obj, pin, mode, config, type, value );
#endif
    }
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <GpioSetInterrupt>:

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	607b      	str	r3, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	72fb      	strb	r3, [r7, #11]
 8006d36:	4613      	mov	r3, r2
 8006d38:	72bb      	strb	r3, [r7, #10]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8006d40:	111b      	asrs	r3, r3, #4
 8006d42:	b25b      	sxtb	r3, r3
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b06      	cmp	r3, #6
 8006d48:	d805      	bhi.n	8006d56 <GpioSetInterrupt+0x2e>
    {
        GpioMcuSetInterrupt( obj, irqMode, irqPriority, irqHandler );
 8006d4a:	7aba      	ldrb	r2, [r7, #10]
 8006d4c:	7af9      	ldrb	r1, [r7, #11]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f7ff fda9 	bl	80068a8 <GpioMcuSetInterrupt>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
#endif
    }
}
 8006d56:	bf00      	nop
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <GpioWrite>:
#endif
    }
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f993 3000 	ldrsb.w	r3, [r3]
 8006d6e:	111b      	asrs	r3, r3, #4
 8006d70:	b25b      	sxtb	r3, r3
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b06      	cmp	r3, #6
 8006d76:	d803      	bhi.n	8006d80 <GpioWrite+0x22>
    {
        GpioMcuWrite( obj, value );
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff fed6 	bl	8006b2c <GpioMcuWrite>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeWrite( obj, value );
#endif
    }
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <RtcInit>:
 * \param[IN] year Calendar current year
 */
static void RtcCheckCalendarRollOver( uint8_t year );

void RtcInit( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
    RtcCalendar_t rtcInit;

    if( RtcInitalized == false )
 8006d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8006e40 <RtcInit+0xb8>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	f083 0301 	eor.w	r3, r3, #1
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d04d      	beq.n	8006e38 <RtcInit+0xb0>
    {
        __HAL_RCC_RTC_ENABLE( );
 8006d9c:	4b29      	ldr	r3, [pc, #164]	@ (8006e44 <RtcInit+0xbc>)
 8006d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006da2:	4a28      	ldr	r2, [pc, #160]	@ (8006e44 <RtcInit+0xbc>)
 8006da4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006da8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        RtcHandle.Instance = RTC;
 8006dac:	4b26      	ldr	r3, [pc, #152]	@ (8006e48 <RtcInit+0xc0>)
 8006dae:	4a27      	ldr	r2, [pc, #156]	@ (8006e4c <RtcInit+0xc4>)
 8006db0:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8006db2:	4b25      	ldr	r3, [pc, #148]	@ (8006e48 <RtcInit+0xc0>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	605a      	str	r2, [r3, #4]

        RtcHandle.Init.AsynchPrediv = 128; // 4; //128;     // changed from 3 - PK
 8006db8:	4b23      	ldr	r3, [pc, #140]	@ (8006e48 <RtcInit+0xc0>)
 8006dba:	2280      	movs	r2, #128	@ 0x80
 8006dbc:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv = 25; //4; //256*64;      // changed from 3 - PK
 8006dbe:	4b22      	ldr	r3, [pc, #136]	@ (8006e48 <RtcInit+0xc0>)
 8006dc0:	2219      	movs	r2, #25
 8006dc2:	60da      	str	r2, [r3, #12]

        RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006dc4:	4b20      	ldr	r3, [pc, #128]	@ (8006e48 <RtcInit+0xc0>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006dca:	4b1f      	ldr	r3, [pc, #124]	@ (8006e48 <RtcInit+0xc0>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	619a      	str	r2, [r3, #24]
        RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e48 <RtcInit+0xc0>)
 8006dd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006dd6:	61da      	str	r2, [r3, #28]
        HAL_RTC_Init( &RtcHandle );
 8006dd8:	481b      	ldr	r0, [pc, #108]	@ (8006e48 <RtcInit+0xc0>)
 8006dda:	f7fe f831 	bl	8004e40 <HAL_RTC_Init>

        // Set Date: Friday 1st of January 2000
        rtcInit.CalendarDate.Year = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	727b      	strb	r3, [r7, #9]
        rtcInit.CalendarDate.Month = 1;
 8006de2:	2301      	movs	r3, #1
 8006de4:	71fb      	strb	r3, [r7, #7]
        rtcInit.CalendarDate.Date = 1;
 8006de6:	2301      	movs	r3, #1
 8006de8:	723b      	strb	r3, [r7, #8]
        rtcInit.CalendarDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8006dea:	2306      	movs	r3, #6
 8006dec:	71bb      	strb	r3, [r7, #6]
        HAL_RTC_SetDate( &RtcHandle, &rtcInit.CalendarDate, RTC_FORMAT_BIN );
 8006dee:	1d3b      	adds	r3, r7, #4
 8006df0:	3302      	adds	r3, #2
 8006df2:	2200      	movs	r2, #0
 8006df4:	4619      	mov	r1, r3
 8006df6:	4814      	ldr	r0, [pc, #80]	@ (8006e48 <RtcInit+0xc0>)
 8006df8:	f7fe f9b2 	bl	8005160 <HAL_RTC_SetDate>

        // Set Time: 00:00:00
        rtcInit.CalendarTime.Hours = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	733b      	strb	r3, [r7, #12]
        rtcInit.CalendarTime.Minutes = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	737b      	strb	r3, [r7, #13]
        rtcInit.CalendarTime.Seconds = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	73bb      	strb	r3, [r7, #14]
        rtcInit.CalendarTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	73fb      	strb	r3, [r7, #15]
        rtcInit.CalendarTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	61bb      	str	r3, [r7, #24]
        rtcInit.CalendarTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006e10:	2300      	movs	r3, #0
 8006e12:	61fb      	str	r3, [r7, #28]
        HAL_RTC_SetTime( &RtcHandle, &rtcInit.CalendarTime, RTC_FORMAT_BIN );
 8006e14:	1d3b      	adds	r3, r7, #4
 8006e16:	3308      	adds	r3, #8
 8006e18:	2200      	movs	r2, #0
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	480a      	ldr	r0, [pc, #40]	@ (8006e48 <RtcInit+0xc0>)
 8006e1e:	f7fe f891 	bl	8004f44 <HAL_RTC_SetTime>

        HAL_NVIC_SetPriority( RTC_IRQn, 4, 0 );
 8006e22:	2200      	movs	r2, #0
 8006e24:	2104      	movs	r1, #4
 8006e26:	2002      	movs	r0, #2
 8006e28:	f7fb f87a 	bl	8001f20 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_IRQn );
 8006e2c:	2002      	movs	r0, #2
 8006e2e:	f7fb f891 	bl	8001f54 <HAL_NVIC_EnableIRQ>
        RtcInitalized = true;
 8006e32:	4b03      	ldr	r3, [pc, #12]	@ (8006e40 <RtcInit+0xb8>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]
    }
}
 8006e38:	bf00      	nop
 8006e3a:	3720      	adds	r7, #32
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	2000030c 	.word	0x2000030c
 8006e44:	46020c00 	.word	0x46020c00
 8006e48:	200002dc 	.word	0x200002dc
 8006e4c:	46007800 	.word	0x46007800

08006e50 <RtcSetTimeout>:

void RtcSetTimeout( uint32_t timeout )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
    RtcStartWakeUpAlarm( timeout );
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f8e1 	bl	8007020 <RtcStartWakeUpAlarm>
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <RtcGetAdjustedTimeoutValue>:

TimerTime_t RtcGetAdjustedTimeoutValue( uint32_t timeout )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
    if( timeout > McuWakeUpTime )
 8006e70:	4b16      	ldr	r3, [pc, #88]	@ (8006ecc <RtcGetAdjustedTimeoutValue+0x64>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d90c      	bls.n	8006e94 <RtcGetAdjustedTimeoutValue+0x2c>
    {   // we have waken up from a GPIO and we have lost "McuWakeUpTime" that we need to compensate on next event
        if( NonScheduledWakeUp == true )
 8006e7a:	4b15      	ldr	r3, [pc, #84]	@ (8006ed0 <RtcGetAdjustedTimeoutValue+0x68>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d007      	beq.n	8006e94 <RtcGetAdjustedTimeoutValue+0x2c>
        {
            NonScheduledWakeUp = false;
 8006e84:	4b12      	ldr	r3, [pc, #72]	@ (8006ed0 <RtcGetAdjustedTimeoutValue+0x68>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 8006e8a:	4b10      	ldr	r3, [pc, #64]	@ (8006ecc <RtcGetAdjustedTimeoutValue+0x64>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	607b      	str	r3, [r7, #4]
        }
    }
    
    if( timeout > McuWakeUpTime )
 8006e94:	4b0d      	ldr	r3, [pc, #52]	@ (8006ecc <RtcGetAdjustedTimeoutValue+0x64>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d90e      	bls.n	8006ebc <RtcGetAdjustedTimeoutValue+0x54>
    {   // we don't go in Low Power mode for delay below 50ms (needed for LEDs)        
        if( timeout < 50 ) // 50 ms
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b31      	cmp	r3, #49	@ 0x31
 8006ea2:	d803      	bhi.n	8006eac <RtcGetAdjustedTimeoutValue+0x44>
        {
            RtcTimerEventAllowsLowPower = false;
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed4 <RtcGetAdjustedTimeoutValue+0x6c>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	e007      	b.n	8006ebc <RtcGetAdjustedTimeoutValue+0x54>
        }
        else
        {
            RtcTimerEventAllowsLowPower = true;
 8006eac:	4b09      	ldr	r3, [pc, #36]	@ (8006ed4 <RtcGetAdjustedTimeoutValue+0x6c>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 8006eb2:	4b06      	ldr	r3, [pc, #24]	@ (8006ecc <RtcGetAdjustedTimeoutValue+0x64>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	607b      	str	r3, [r7, #4]
        }
    }

    return  timeout;
 8006ebc:	687b      	ldr	r3, [r7, #4]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	20000310 	.word	0x20000310
 8006ed0:	200002bb 	.word	0x200002bb
 8006ed4:	200002d8 	.word	0x200002d8

08006ed8 <RtcGetElapsedAlarmTime>:
{
    return( RtcConvertCalendarTickToTimerTime( NULL ) );
}

TimerTime_t RtcGetElapsedAlarmTime( void )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
    TimerTime_t currentTime = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	607b      	str	r3, [r7, #4]
    TimerTime_t contextTime = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	603b      	str	r3, [r7, #0]

    currentTime = RtcConvertCalendarTickToTimerTime( NULL );
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	f000 faba 	bl	8007460 <RtcConvertCalendarTickToTimerTime>
 8006eec:	6078      	str	r0, [r7, #4]
    contextTime = RtcConvertCalendarTickToTimerTime( &RtcCalendarContext );
 8006eee:	480a      	ldr	r0, [pc, #40]	@ (8006f18 <RtcGetElapsedAlarmTime+0x40>)
 8006ef0:	f000 fab6 	bl	8007460 <RtcConvertCalendarTickToTimerTime>
 8006ef4:	6038      	str	r0, [r7, #0]

    if( currentTime < contextTime )
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d204      	bcs.n	8006f08 <RtcGetElapsedAlarmTime+0x30>
    {
        return( currentTime + ( 0xFFFFFFFF - contextTime ) );
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	3b01      	subs	r3, #1
 8006f06:	e002      	b.n	8006f0e <RtcGetElapsedAlarmTime+0x36>
    }
    else
    {
        return( currentTime - contextTime );
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	1ad3      	subs	r3, r2, r3
    }
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	200002bc 	.word	0x200002bc

08006f1c <BlockLowPowerDuringTask>:
        return( elapsedTime - eventInTime );
    }
}

void BlockLowPowerDuringTask ( bool status )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	71fb      	strb	r3, [r7, #7]
    if( status == true )
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <BlockLowPowerDuringTask+0x14>
    {
        RtcRecoverMcuStatus( );
 8006f2c:	f000 f80a 	bl	8006f44 <RtcRecoverMcuStatus>
    }
    LowPowerDisableDuringTask = status;
 8006f30:	4a03      	ldr	r2, [pc, #12]	@ (8006f40 <BlockLowPowerDuringTask+0x24>)
 8006f32:	79fb      	ldrb	r3, [r7, #7]
 8006f34:	7013      	strb	r3, [r2, #0]
}
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	200002d9 	.word	0x200002d9

08006f44 <RtcRecoverMcuStatus>:
//        HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
    }
}

void RtcRecoverMcuStatus( void )
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
//    {
//        BoardInitMcu( );
//    }


}
 8006f48:	bf00      	nop
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <RtcComputeWakeUpTime>:

static void RtcComputeWakeUpTime( void )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b096      	sub	sp, #88	@ 0x58
 8006f58:	af00      	add	r7, sp, #0
    uint32_t start = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t stop = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	653b      	str	r3, [r7, #80]	@ 0x50
    RTC_AlarmTypeDef  alarmRtc;
    RtcCalendar_t now;

    if( WakeUpTimeInitialized == false )
 8006f62:	4b2b      	ldr	r3, [pc, #172]	@ (8007010 <RtcComputeWakeUpTime+0xbc>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	f083 0301 	eor.w	r3, r3, #1
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d04b      	beq.n	8007008 <RtcComputeWakeUpTime+0xb4>
    {
        now = RtcGetCalendar( );
 8006f70:	1d3b      	adds	r3, r7, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fb8e 	bl	8007694 <RtcGetCalendar>
        HAL_RTC_GetAlarm( &RtcHandle, &alarmRtc, RTC_ALARM_A, RTC_FORMAT_BIN );
 8006f78:	f107 0120 	add.w	r1, r7, #32
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f82:	4824      	ldr	r0, [pc, #144]	@ (8007014 <RtcComputeWakeUpTime+0xc0>)
 8006f84:	f7fe fb02 	bl	800558c <HAL_RTC_GetAlarm>

        start = alarmRtc.AlarmTime.Seconds + ( SecondsInMinute * alarmRtc.AlarmTime.Minutes ) + ( SecondsInHour * alarmRtc.AlarmTime.Hours );
 8006f88:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	233c      	movs	r3, #60	@ 0x3c
 8006f90:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8006f94:	fb01 f303 	mul.w	r3, r1, r3
 8006f98:	441a      	add	r2, r3
 8006f9a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8006f9e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8006fa2:	fb01 f303 	mul.w	r3, r1, r3
 8006fa6:	4413      	add	r3, r2
 8006fa8:	657b      	str	r3, [r7, #84]	@ 0x54
        stop = now.CalendarTime.Seconds + ( SecondsInMinute * now.CalendarTime.Minutes ) + ( SecondsInHour * now.CalendarTime.Hours );
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	461a      	mov	r2, r3
 8006fae:	233c      	movs	r3, #60	@ 0x3c
 8006fb0:	7b79      	ldrb	r1, [r7, #13]
 8006fb2:	fb01 f303 	mul.w	r3, r1, r3
 8006fb6:	441a      	add	r2, r3
 8006fb8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8006fbc:	7b39      	ldrb	r1, [r7, #12]
 8006fbe:	fb01 f303 	mul.w	r3, r1, r3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	653b      	str	r3, [r7, #80]	@ 0x50

        McuWakeUpTime = ceil ( ( stop - start ) * RTC_ALARM_TICK_DURATION );
 8006fc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7f9 fa9d 	bl	800050c <__aeabi_ui2d>
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	4b10      	ldr	r3, [pc, #64]	@ (8007018 <RtcComputeWakeUpTime+0xc4>)
 8006fd8:	f7f9 fb12 	bl	8000600 <__aeabi_dmul>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	ec43 2b17 	vmov	d7, r2, r3
 8006fe4:	eeb0 0a47 	vmov.f32	s0, s14
 8006fe8:	eef0 0a67 	vmov.f32	s1, s15
 8006fec:	f004 fbd0 	bl	800b790 <ceil>
 8006ff0:	ec53 2b10 	vmov	r2, r3, d0
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	f7f9 fdc4 	bl	8000b84 <__aeabi_d2uiz>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	4a07      	ldr	r2, [pc, #28]	@ (800701c <RtcComputeWakeUpTime+0xc8>)
 8007000:	6013      	str	r3, [r2, #0]

        WakeUpTimeInitialized = true;
 8007002:	4b03      	ldr	r3, [pc, #12]	@ (8007010 <RtcComputeWakeUpTime+0xbc>)
 8007004:	2201      	movs	r2, #1
 8007006:	701a      	strb	r2, [r3, #0]
    }
}
 8007008:	bf00      	nop
 800700a:	3758      	adds	r7, #88	@ 0x58
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	2000030d 	.word	0x2000030d
 8007014:	200002dc 	.word	0x200002dc
 8007018:	3fdf4000 	.word	0x3fdf4000
 800701c:	20000310 	.word	0x20000310

08007020 <RtcStartWakeUpAlarm>:

static void RtcStartWakeUpAlarm( uint32_t timeoutValue )
{
 8007020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007022:	b0a3      	sub	sp, #140	@ 0x8c
 8007024:	af06      	add	r7, sp, #24
 8007026:	6078      	str	r0, [r7, #4]
    RtcCalendar_t now;
    RtcCalendar_t alarmTimer;
    RTC_AlarmTypeDef alarmStructure;

    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8007028:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800702c:	4822      	ldr	r0, [pc, #136]	@ (80070b8 <RtcStartWakeUpAlarm+0x98>)
 800702e:	f7fe fa6b 	bl	8005508 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_DeactivateWakeUpTimer( &RtcHandle );
 8007032:	4821      	ldr	r0, [pc, #132]	@ (80070b8 <RtcStartWakeUpAlarm+0x98>)
 8007034:	f7fe fc82 	bl	800593c <HAL_RTCEx_DeactivateWakeUpTimer>

    // Load the RTC calendar
    now = RtcGetCalendar( );
 8007038:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fb29 	bl	8007694 <RtcGetCalendar>

    // Save the calendar into RtcCalendarContext to be able to calculate the elapsed time
    RtcCalendarContext = now;
 8007042:	4b1e      	ldr	r3, [pc, #120]	@ (80070bc <RtcStartWakeUpAlarm+0x9c>)
 8007044:	461d      	mov	r5, r3
 8007046:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800704a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800704c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800704e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007052:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    // timeoutValue is in ms 
    alarmTimer = RtcComputeTimerTimeToAlarmTick( timeoutValue, now );
 8007056:	f107 0638 	add.w	r6, r7, #56	@ 0x38
 800705a:	466d      	mov	r5, sp
 800705c:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8007060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	602b      	str	r3, [r5, #0]
 8007068:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800706c:	cb0c      	ldmia	r3, {r2, r3}
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	4630      	mov	r0, r6
 8007072:	f000 f825 	bl	80070c0 <RtcComputeTimerTimeToAlarmTick>

    alarmStructure.Alarm = RTC_ALARM_A;
 8007076:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800707a:	637b      	str	r3, [r7, #52]	@ 0x34
    alarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800707c:	2300      	movs	r3, #0
 800707e:	62bb      	str	r3, [r7, #40]	@ 0x28
    alarmStructure.AlarmMask = RTC_ALARMMASK_NONE;
 8007080:	2300      	movs	r3, #0
 8007082:	61fb      	str	r3, [r7, #28]
    alarmStructure.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8007084:	2300      	movs	r3, #0
 8007086:	72fb      	strb	r3, [r7, #11]
    
    alarmStructure.AlarmTime.Seconds = alarmTimer.CalendarTime.Seconds;
 8007088:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800708c:	72bb      	strb	r3, [r7, #10]
    alarmStructure.AlarmTime.Minutes = alarmTimer.CalendarTime.Minutes;
 800708e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8007092:	727b      	strb	r3, [r7, #9]
    alarmStructure.AlarmTime.Hours = alarmTimer.CalendarTime.Hours;
 8007094:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007098:	723b      	strb	r3, [r7, #8]
    alarmStructure.AlarmDateWeekDay = alarmTimer.CalendarDate.Date;
 800709a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800709e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    if( HAL_RTC_SetAlarm_IT( &RtcHandle, &alarmStructure, RTC_FORMAT_BIN ) != HAL_OK )
 80070a2:	f107 0308 	add.w	r3, r7, #8
 80070a6:	2200      	movs	r2, #0
 80070a8:	4619      	mov	r1, r3
 80070aa:	4803      	ldr	r0, [pc, #12]	@ (80070b8 <RtcStartWakeUpAlarm+0x98>)
 80070ac:	f7fe f92c 	bl	8005308 <HAL_RTC_SetAlarm_IT>
    {
        assert_param( FAIL );
    }
}
 80070b0:	bf00      	nop
 80070b2:	3774      	adds	r7, #116	@ 0x74
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b8:	200002dc 	.word	0x200002dc
 80070bc:	200002bc 	.word	0x200002bc

080070c0 <RtcComputeTimerTimeToAlarmTick>:

static RtcCalendar_t RtcComputeTimerTimeToAlarmTick( TimerTime_t timeCounter, RtcCalendar_t now )
{
 80070c0:	b082      	sub	sp, #8
 80070c2:	b5b0      	push	{r4, r5, r7, lr}
 80070c4:	b092      	sub	sp, #72	@ 0x48
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
 80070cc:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80070d0:	e881 000c 	stmia.w	r1, {r2, r3}
    RtcCalendar_t calendar = now;
 80070d4:	f107 040c 	add.w	r4, r7, #12
 80070d8:	f107 0558 	add.w	r5, r7, #88	@ 0x58
 80070dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80070e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    uint16_t seconds = now.CalendarTime.Seconds;
 80070e8:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80070ec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint16_t minutes = now.CalendarTime.Minutes;
 80070f0:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80070f4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    uint16_t hours = now.CalendarTime.Hours;
 80070f8:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80070fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    uint16_t days = now.CalendarDate.Date;
 8007100:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8007104:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    double timeoutValueTemp = 0.0;
 8007108:	f04f 0200 	mov.w	r2, #0
 800710c:	f04f 0300 	mov.w	r3, #0
 8007110:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double timeoutValue = 0.0;
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double error = 0.0;
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    
    timeCounter = MIN( timeCounter, ( TimerTime_t )( RTC_ALARM_MAX_NUMBER_OF_DAYS * SecondsInDay * RTC_ALARM_TICK_DURATION ) );
 800712c:	4ac4      	ldr	r2, [pc, #784]	@ (8007440 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800712e:	4613      	mov	r3, r2
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4618      	mov	r0, r3
 8007138:	f7f9 f9e8 	bl	800050c <__aeabi_ui2d>
 800713c:	f04f 0200 	mov.w	r2, #0
 8007140:	4bc0      	ldr	r3, [pc, #768]	@ (8007444 <RtcComputeTimerTimeToAlarmTick+0x384>)
 8007142:	f7f9 fa5d 	bl	8000600 <__aeabi_dmul>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4610      	mov	r0, r2
 800714c:	4619      	mov	r1, r3
 800714e:	f7f9 fd19 	bl	8000b84 <__aeabi_d2uiz>
 8007152:	4602      	mov	r2, r0
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	4293      	cmp	r3, r2
 8007158:	bf28      	it	cs
 800715a:	4613      	movcs	r3, r2
 800715c:	603b      	str	r3, [r7, #0]

    if( timeCounter < 1 )
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <RtcComputeTimerTimeToAlarmTick+0xa8>
    {
        timeCounter = 1;
 8007164:	2301      	movs	r3, #1
 8007166:	603b      	str	r3, [r7, #0]
    }

    // timeoutValue is used for complete computation
    timeoutValue = round( timeCounter * RTC_ALARM_TICK_PER_MS );
 8007168:	6838      	ldr	r0, [r7, #0]
 800716a:	f7f9 f9cf 	bl	800050c <__aeabi_ui2d>
 800716e:	a3b2      	add	r3, pc, #712	@ (adr r3, 8007438 <RtcComputeTimerTimeToAlarmTick+0x378>)
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f7f9 fa44 	bl	8000600 <__aeabi_dmul>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	ec43 2b17 	vmov	d7, r2, r3
 8007180:	eeb0 0a47 	vmov.f32	s0, s14
 8007184:	eef0 0a67 	vmov.f32	s1, s15
 8007188:	f004 fbfe 	bl	800b988 <round>
 800718c:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

    // timeoutValueTemp is used to compensate the cumulating errors in timing far in the future
    timeoutValueTemp =  ( double )timeCounter * RTC_ALARM_TICK_PER_MS;
 8007190:	6838      	ldr	r0, [r7, #0]
 8007192:	f7f9 f9bb 	bl	800050c <__aeabi_ui2d>
 8007196:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007438 <RtcComputeTimerTimeToAlarmTick+0x378>)
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	f7f9 fa30 	bl	8000600 <__aeabi_dmul>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Compute timeoutValue error
    error = timeoutValue - timeoutValueTemp;
 80071a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80071ac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80071b0:	f7f9 f86e 	bl	8000290 <__aeabi_dsub>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Add new error value to the cumulated value in uS
    TimeoutValueError += ( error  * 1000 );
 80071bc:	4ba2      	ldr	r3, [pc, #648]	@ (8007448 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7f9 f9b3 	bl	800052c <__aeabi_i2d>
 80071c6:	4604      	mov	r4, r0
 80071c8:	460d      	mov	r5, r1
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	4b9f      	ldr	r3, [pc, #636]	@ (800744c <RtcComputeTimerTimeToAlarmTick+0x38c>)
 80071d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80071d4:	f7f9 fa14 	bl	8000600 <__aeabi_dmul>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4620      	mov	r0, r4
 80071de:	4629      	mov	r1, r5
 80071e0:	f7f9 f858 	bl	8000294 <__adddf3>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4610      	mov	r0, r2
 80071ea:	4619      	mov	r1, r3
 80071ec:	f7f9 fca2 	bl	8000b34 <__aeabi_d2iz>
 80071f0:	4603      	mov	r3, r0
 80071f2:	4a95      	ldr	r2, [pc, #596]	@ (8007448 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80071f4:	6013      	str	r3, [r2, #0]

    // Correct cumulated error if greater than ( RTC_ALARM_TICK_DURATION * 1000 )
    if( TimeoutValueError >= ( int32_t )( RTC_ALARM_TICK_DURATION * 1000 ) )
 80071f6:	4b94      	ldr	r3, [pc, #592]	@ (8007448 <RtcComputeTimerTimeToAlarmTick+0x388>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f5b3 7ff4 	cmp.w	r3, #488	@ 0x1e8
 80071fe:	db25      	blt.n	800724c <RtcComputeTimerTimeToAlarmTick+0x18c>
    {
        TimeoutValueError = TimeoutValueError - ( uint32_t )( RTC_ALARM_TICK_DURATION * 1000 );
 8007200:	4b91      	ldr	r3, [pc, #580]	@ (8007448 <RtcComputeTimerTimeToAlarmTick+0x388>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8007208:	461a      	mov	r2, r3
 800720a:	4b8f      	ldr	r3, [pc, #572]	@ (8007448 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800720c:	601a      	str	r2, [r3, #0]
        timeoutValue = timeoutValue + 1;
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	4b8f      	ldr	r3, [pc, #572]	@ (8007450 <RtcComputeTimerTimeToAlarmTick+0x390>)
 8007214:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007218:	f7f9 f83c 	bl	8000294 <__adddf3>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }

    // Convert milliseconds to RTC format and add to now
    while( timeoutValue >= SecondsInDay )
 8007224:	e012      	b.n	800724c <RtcComputeTimerTimeToAlarmTick+0x18c>
    {
        timeoutValue -= SecondsInDay;
 8007226:	4b86      	ldr	r3, [pc, #536]	@ (8007440 <RtcComputeTimerTimeToAlarmTick+0x380>)
 8007228:	4618      	mov	r0, r3
 800722a:	f7f9 f96f 	bl	800050c <__aeabi_ui2d>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8007236:	f7f9 f82b 	bl	8000290 <__aeabi_dsub>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        days++;
 8007242:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007246:	3301      	adds	r3, #1
 8007248:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    while( timeoutValue >= SecondsInDay )
 800724c:	4b7c      	ldr	r3, [pc, #496]	@ (8007440 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800724e:	4618      	mov	r0, r3
 8007250:	f7f9 f95c 	bl	800050c <__aeabi_ui2d>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800725c:	f7f9 fc56 	bl	8000b0c <__aeabi_dcmpge>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1df      	bne.n	8007226 <RtcComputeTimerTimeToAlarmTick+0x166>
    }

    // Calculate hours
    while( timeoutValue >= SecondsInHour )
 8007266:	e013      	b.n	8007290 <RtcComputeTimerTimeToAlarmTick+0x1d0>
    {
        timeoutValue -= SecondsInHour;
 8007268:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800726c:	4618      	mov	r0, r3
 800726e:	f7f9 f95d 	bl	800052c <__aeabi_i2d>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800727a:	f7f9 f809 	bl	8000290 <__aeabi_dsub>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        hours++;
 8007286:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800728a:	3301      	adds	r3, #1
 800728c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    while( timeoutValue >= SecondsInHour )
 8007290:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007294:	4618      	mov	r0, r3
 8007296:	f7f9 f949 	bl	800052c <__aeabi_i2d>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80072a2:	f7f9 fc33 	bl	8000b0c <__aeabi_dcmpge>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1dd      	bne.n	8007268 <RtcComputeTimerTimeToAlarmTick+0x1a8>
    }

    // Calculate minutes
    while( timeoutValue >= SecondsInMinute )
 80072ac:	e012      	b.n	80072d4 <RtcComputeTimerTimeToAlarmTick+0x214>
    {
        timeoutValue -= SecondsInMinute;
 80072ae:	233c      	movs	r3, #60	@ 0x3c
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7f9 f93b 	bl	800052c <__aeabi_i2d>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80072be:	f7f8 ffe7 	bl	8000290 <__aeabi_dsub>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        minutes++;
 80072ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80072ce:	3301      	adds	r3, #1
 80072d0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while( timeoutValue >= SecondsInMinute )
 80072d4:	233c      	movs	r3, #60	@ 0x3c
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7f9 f928 	bl	800052c <__aeabi_i2d>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80072e4:	f7f9 fc12 	bl	8000b0c <__aeabi_dcmpge>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1df      	bne.n	80072ae <RtcComputeTimerTimeToAlarmTick+0x1ee>
    }

    // Calculate seconds
    seconds = seconds + timeoutValue;
 80072ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7f9 f91a 	bl	800052c <__aeabi_i2d>
 80072f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80072fc:	f7f8 ffca 	bl	8000294 <__adddf3>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4610      	mov	r0, r2
 8007306:	4619      	mov	r1, r3
 8007308:	f7f9 fc3c 	bl	8000b84 <__aeabi_d2uiz>
 800730c:	4603      	mov	r3, r0
 800730e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    // Correct for modulo
    while( seconds >= 60 )
 8007312:	e009      	b.n	8007328 <RtcComputeTimerTimeToAlarmTick+0x268>
    { 
        seconds -= 60;
 8007314:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007318:	3b3c      	subs	r3, #60	@ 0x3c
 800731a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        minutes++;
 800731e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007322:	3301      	adds	r3, #1
 8007324:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while( seconds >= 60 )
 8007328:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800732c:	2b3b      	cmp	r3, #59	@ 0x3b
 800732e:	d8f1      	bhi.n	8007314 <RtcComputeTimerTimeToAlarmTick+0x254>
    }

    while( minutes >= 60 )
 8007330:	e009      	b.n	8007346 <RtcComputeTimerTimeToAlarmTick+0x286>
    {
        minutes -= 60;
 8007332:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007336:	3b3c      	subs	r3, #60	@ 0x3c
 8007338:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        hours++;
 800733c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007340:	3301      	adds	r3, #1
 8007342:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    while( minutes >= 60 )
 8007346:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800734a:	2b3b      	cmp	r3, #59	@ 0x3b
 800734c:	d8f1      	bhi.n	8007332 <RtcComputeTimerTimeToAlarmTick+0x272>
    }

    while( hours >= HoursInDay )
 800734e:	e00b      	b.n	8007368 <RtcComputeTimerTimeToAlarmTick+0x2a8>
    {
        hours -= HoursInDay;
 8007350:	2318      	movs	r3, #24
 8007352:	461a      	mov	r2, r3
 8007354:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007358:	1a9b      	subs	r3, r3, r2
 800735a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        days++;
 800735e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007362:	3301      	adds	r3, #1
 8007364:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    while( hours >= HoursInDay )
 8007368:	2318      	movs	r3, #24
 800736a:	461a      	mov	r2, r3
 800736c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007370:	4293      	cmp	r3, r2
 8007372:	d2ed      	bcs.n	8007350 <RtcComputeTimerTimeToAlarmTick+0x290>
    }

    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + Century ) % 4 ) == 0 )
 8007374:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8007378:	2b00      	cmp	r3, #0
 800737a:	d009      	beq.n	8007390 <RtcComputeTimerTimeToAlarmTick+0x2d0>
 800737c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8007380:	461a      	mov	r2, r3
 8007382:	4b34      	ldr	r3, [pc, #208]	@ (8007454 <RtcComputeTimerTimeToAlarmTick+0x394>)
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	4413      	add	r3, r2
 8007388:	f003 0303 	and.w	r3, r3, #3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d118      	bne.n	80073c2 <RtcComputeTimerTimeToAlarmTick+0x302>
    {
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 8007390:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007394:	3b01      	subs	r3, #1
 8007396:	4a30      	ldr	r2, [pc, #192]	@ (8007458 <RtcComputeTimerTimeToAlarmTick+0x398>)
 8007398:	5cd3      	ldrb	r3, [r2, r3]
 800739a:	461a      	mov	r2, r3
 800739c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d926      	bls.n	80073f2 <RtcComputeTimerTimeToAlarmTick+0x332>
        {
            days = days % DaysInMonthLeapYear[now.CalendarDate.Month - 1];
 80073a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80073a8:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80073ac:	3a01      	subs	r2, #1
 80073ae:	492a      	ldr	r1, [pc, #168]	@ (8007458 <RtcComputeTimerTimeToAlarmTick+0x398>)
 80073b0:	5c8a      	ldrb	r2, [r1, r2]
 80073b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80073b6:	fb01 f202 	mul.w	r2, r1, r2
 80073ba:	1a9b      	subs	r3, r3, r2
 80073bc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 80073c0:	e017      	b.n	80073f2 <RtcComputeTimerTimeToAlarmTick+0x332>
        }
    }
    else
    {
        if( days > DaysInMonth[now.CalendarDate.Month - 1] )
 80073c2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80073c6:	3b01      	subs	r3, #1
 80073c8:	4a24      	ldr	r2, [pc, #144]	@ (800745c <RtcComputeTimerTimeToAlarmTick+0x39c>)
 80073ca:	5cd3      	ldrb	r3, [r2, r3]
 80073cc:	461a      	mov	r2, r3
 80073ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d90d      	bls.n	80073f2 <RtcComputeTimerTimeToAlarmTick+0x332>
        {   
            days = days % DaysInMonth[now.CalendarDate.Month - 1];
 80073d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80073da:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80073de:	3a01      	subs	r2, #1
 80073e0:	491e      	ldr	r1, [pc, #120]	@ (800745c <RtcComputeTimerTimeToAlarmTick+0x39c>)
 80073e2:	5c8a      	ldrb	r2, [r1, r2]
 80073e4:	fb93 f1f2 	sdiv	r1, r3, r2
 80073e8:	fb01 f202 	mul.w	r2, r1, r2
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        }
    }

    calendar.CalendarTime.Seconds = seconds;
 80073f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	75bb      	strb	r3, [r7, #22]
    calendar.CalendarTime.Minutes = minutes;
 80073fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	757b      	strb	r3, [r7, #21]
    calendar.CalendarTime.Hours = hours;
 8007402:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007406:	b2db      	uxtb	r3, r3
 8007408:	753b      	strb	r3, [r7, #20]
    calendar.CalendarDate.Date = days;
 800740a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800740e:	b2db      	uxtb	r3, r3
 8007410:	743b      	strb	r3, [r7, #16]

    return calendar;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	461d      	mov	r5, r3
 8007416:	f107 040c 	add.w	r4, r7, #12
 800741a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800741c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800741e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007422:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	3748      	adds	r7, #72	@ 0x48
 800742a:	46bd      	mov	sp, r7
 800742c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007430:	b002      	add	sp, #8
 8007432:	4770      	bx	lr
 8007434:	f3af 8000 	nop.w
 8007438:	a0b5ed8d 	.word	0xa0b5ed8d
 800743c:	3f60c6f7 	.word	0x3f60c6f7
 8007440:	00015180 	.word	0x00015180
 8007444:	3fdf4000 	.word	0x3fdf4000
 8007448:	20000314 	.word	0x20000314
 800744c:	408f4000 	.word	0x408f4000
 8007450:	3ff00000 	.word	0x3ff00000
 8007454:	200002b8 	.word	0x200002b8
 8007458:	0800bbb0 	.word	0x0800bbb0
 800745c:	0800bba4 	.word	0x0800bba4

08007460 <RtcConvertCalendarTickToTimerTime>:

    return calendar;
}

static TimerTime_t RtcConvertCalendarTickToTimerTime( RtcCalendar_t *calendar )
{
 8007460:	b5b0      	push	{r4, r5, r7, lr}
 8007462:	b08e      	sub	sp, #56	@ 0x38
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
    TimerTime_t timeCounter = 0;
 8007468:	2300      	movs	r3, #0
 800746a:	62bb      	str	r3, [r7, #40]	@ 0x28
    RtcCalendar_t now;
    double timeCounterTemp = 0.0;
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Passing a NULL pointer will compute from "now" else,
    // compute from the given calendar value
    if( calendar == NULL )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d105      	bne.n	800748a <RtcConvertCalendarTickToTimerTime+0x2a>
    {
        now = RtcGetCalendar( );
 800747e:	f107 030c 	add.w	r3, r7, #12
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f906 	bl	8007694 <RtcGetCalendar>
 8007488:	e009      	b.n	800749e <RtcConvertCalendarTickToTimerTime+0x3e>
    }
    else
    {
        now = *calendar;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f107 040c 	add.w	r4, r7, #12
 8007490:	461d      	mov	r5, r3
 8007492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007496:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800749a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }

    // Years (calculation valid up to year 2099)
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 800749e:	2300      	movs	r3, #0
 80074a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80074a2:	e02c      	b.n	80074fe <RtcConvertCalendarTickToTimerTime+0x9e>
    {
        if( ( i == 0 ) || ( i % 4 ) == 0 )
 80074a4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <RtcConvertCalendarTickToTimerTime+0x58>
 80074ac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10e      	bne.n	80074d6 <RtcConvertCalendarTickToTimerTime+0x76>
        {
            timeCounterTemp += ( double )SecondsInLeapYear;
 80074b8:	4b5d      	ldr	r3, [pc, #372]	@ (8007630 <RtcConvertCalendarTickToTimerTime+0x1d0>)
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7f9 f826 	bl	800050c <__aeabi_ui2d>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80074c8:	f7f8 fee4 	bl	8000294 <__adddf3>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80074d4:	e00d      	b.n	80074f2 <RtcConvertCalendarTickToTimerTime+0x92>
        }
        else
        {
            timeCounterTemp += ( double )SecondsInYear;
 80074d6:	4b57      	ldr	r3, [pc, #348]	@ (8007634 <RtcConvertCalendarTickToTimerTime+0x1d4>)
 80074d8:	4618      	mov	r0, r3
 80074da:	f7f9 f817 	bl	800050c <__aeabi_ui2d>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80074e6:	f7f8 fed5 	bl	8000294 <__adddf3>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 80074f2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	3301      	adds	r3, #1
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80074fe:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8007502:	7c7b      	ldrb	r3, [r7, #17]
 8007504:	4619      	mov	r1, r3
 8007506:	89bb      	ldrh	r3, [r7, #12]
 8007508:	440b      	add	r3, r1
 800750a:	429a      	cmp	r2, r3
 800750c:	dbca      	blt.n	80074a4 <RtcConvertCalendarTickToTimerTime+0x44>
        }
    }

    // Months (calculation valid up to year 2099)*/
    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + now.CalendarCentury ) % 4 ) == 0 )
 800750e:	7c7b      	ldrb	r3, [r7, #17]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d007      	beq.n	8007524 <RtcConvertCalendarTickToTimerTime+0xc4>
 8007514:	7c7b      	ldrb	r3, [r7, #17]
 8007516:	461a      	mov	r2, r3
 8007518:	89bb      	ldrh	r3, [r7, #12]
 800751a:	4413      	add	r3, r2
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d124      	bne.n	800756e <RtcConvertCalendarTickToTimerTime+0x10e>
    {
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 8007524:	2300      	movs	r3, #0
 8007526:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800752a:	e019      	b.n	8007560 <RtcConvertCalendarTickToTimerTime+0x100>
        {
            timeCounterTemp += ( double )( DaysInMonthLeapYear[i] * SecondsInDay );
 800752c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007530:	4a41      	ldr	r2, [pc, #260]	@ (8007638 <RtcConvertCalendarTickToTimerTime+0x1d8>)
 8007532:	5cd3      	ldrb	r3, [r2, r3]
 8007534:	461a      	mov	r2, r3
 8007536:	4b41      	ldr	r3, [pc, #260]	@ (800763c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 8007538:	fb02 f303 	mul.w	r3, r2, r3
 800753c:	4618      	mov	r0, r3
 800753e:	f7f8 ffe5 	bl	800050c <__aeabi_ui2d>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800754a:	f7f8 fea3 	bl	8000294 <__adddf3>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 8007556:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800755a:	3301      	adds	r3, #1
 800755c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8007560:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	3b01      	subs	r3, #1
 8007568:	429a      	cmp	r2, r3
 800756a:	dbdf      	blt.n	800752c <RtcConvertCalendarTickToTimerTime+0xcc>
 800756c:	e023      	b.n	80075b6 <RtcConvertCalendarTickToTimerTime+0x156>
        }
    }
    else
    {
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 800756e:	2300      	movs	r3, #0
 8007570:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8007574:	e019      	b.n	80075aa <RtcConvertCalendarTickToTimerTime+0x14a>
        {
            timeCounterTemp += ( double )( DaysInMonth[i] * SecondsInDay );
 8007576:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800757a:	4a31      	ldr	r2, [pc, #196]	@ (8007640 <RtcConvertCalendarTickToTimerTime+0x1e0>)
 800757c:	5cd3      	ldrb	r3, [r2, r3]
 800757e:	461a      	mov	r2, r3
 8007580:	4b2e      	ldr	r3, [pc, #184]	@ (800763c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 8007582:	fb02 f303 	mul.w	r3, r2, r3
 8007586:	4618      	mov	r0, r3
 8007588:	f7f8 ffc0 	bl	800050c <__aeabi_ui2d>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007594:	f7f8 fe7e 	bl	8000294 <__adddf3>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 80075a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80075a4:	3301      	adds	r3, #1
 80075a6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80075aa:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	429a      	cmp	r2, r3
 80075b4:	dbdf      	blt.n	8007576 <RtcConvertCalendarTickToTimerTime+0x116>
        }
    }

    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 80075b6:	7dbb      	ldrb	r3, [r7, #22]
 80075b8:	4619      	mov	r1, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 80075ba:	7d3b      	ldrb	r3, [r7, #20]
 80075bc:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80075c0:	fb03 f202 	mul.w	r2, r3, r2
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
 80075c4:	7d7b      	ldrb	r3, [r7, #21]
 80075c6:	203c      	movs	r0, #60	@ 0x3c
 80075c8:	fb00 f303 	mul.w	r3, r0, r3
 80075cc:	4413      	add	r3, r2
 80075ce:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( now.CalendarDate.Date * SecondsInDay ) ) );
 80075d0:	7c3b      	ldrb	r3, [r7, #16]
 80075d2:	4619      	mov	r1, r3
 80075d4:	4b19      	ldr	r3, [pc, #100]	@ (800763c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 80075d6:	fb01 f303 	mul.w	r3, r1, r3
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 80075da:	4413      	add	r3, r2
    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 80075dc:	4618      	mov	r0, r3
 80075de:	f7f8 ff95 	bl	800050c <__aeabi_ui2d>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80075ea:	f7f8 fe53 	bl	8000294 <__adddf3>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    timeCounterTemp = ( double )timeCounterTemp * RTC_ALARM_TICK_DURATION;
 80075f6:	f04f 0200 	mov.w	r2, #0
 80075fa:	4b12      	ldr	r3, [pc, #72]	@ (8007644 <RtcConvertCalendarTickToTimerTime+0x1e4>)
 80075fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007600:	f7f8 fffe 	bl	8000600 <__aeabi_dmul>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    timeCounter = round( timeCounterTemp );
 800760c:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8007610:	f004 f9ba 	bl	800b988 <round>
 8007614:	ec53 2b10 	vmov	r2, r3, d0
 8007618:	4610      	mov	r0, r2
 800761a:	4619      	mov	r1, r3
 800761c:	f7f9 fab2 	bl	8000b84 <__aeabi_d2uiz>
 8007620:	4603      	mov	r3, r0
 8007622:	62bb      	str	r3, [r7, #40]	@ 0x28
    return ( timeCounter );
 8007624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8007626:	4618      	mov	r0, r3
 8007628:	3738      	adds	r7, #56	@ 0x38
 800762a:	46bd      	mov	sp, r7
 800762c:	bdb0      	pop	{r4, r5, r7, pc}
 800762e:	bf00      	nop
 8007630:	01e28500 	.word	0x01e28500
 8007634:	01e13380 	.word	0x01e13380
 8007638:	0800bbb0 	.word	0x0800bbb0
 800763c:	00015180 	.word	0x00015180
 8007640:	0800bba4 	.word	0x0800bba4
 8007644:	3fdf4000 	.word	0x3fdf4000

08007648 <RtcCheckCalendarRollOver>:

static void RtcCheckCalendarRollOver( uint8_t year )
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	71fb      	strb	r3, [r7, #7]
    if( year == 99 )
 8007652:	79fb      	ldrb	r3, [r7, #7]
 8007654:	2b63      	cmp	r3, #99	@ 0x63
 8007656:	d102      	bne.n	800765e <RtcCheckCalendarRollOver+0x16>
    {
        CallendarRollOverReady = true;
 8007658:	4b0c      	ldr	r3, [pc, #48]	@ (800768c <RtcCheckCalendarRollOver+0x44>)
 800765a:	2201      	movs	r2, #1
 800765c:	701a      	strb	r2, [r3, #0]
    }

    if( ( CallendarRollOverReady == true ) && ( ( year + Century ) == Century ) )
 800765e:	4b0b      	ldr	r3, [pc, #44]	@ (800768c <RtcCheckCalendarRollOver+0x44>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00b      	beq.n	800767e <RtcCheckCalendarRollOver+0x36>
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d108      	bne.n	800767e <RtcCheckCalendarRollOver+0x36>
    {   // Indicate a roll-over of the calendar
        CallendarRollOverReady = false;
 800766c:	4b07      	ldr	r3, [pc, #28]	@ (800768c <RtcCheckCalendarRollOver+0x44>)
 800766e:	2200      	movs	r2, #0
 8007670:	701a      	strb	r2, [r3, #0]
        Century = Century + 100;
 8007672:	4b07      	ldr	r3, [pc, #28]	@ (8007690 <RtcCheckCalendarRollOver+0x48>)
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	3364      	adds	r3, #100	@ 0x64
 8007678:	b29a      	uxth	r2, r3
 800767a:	4b05      	ldr	r3, [pc, #20]	@ (8007690 <RtcCheckCalendarRollOver+0x48>)
 800767c:	801a      	strh	r2, [r3, #0]
    }
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	200002ba 	.word	0x200002ba
 8007690:	200002b8 	.word	0x200002b8

08007694 <RtcGetCalendar>:

static RtcCalendar_t RtcGetCalendar( void )
{
 8007694:	b5b0      	push	{r4, r5, r7, lr}
 8007696:	b08a      	sub	sp, #40	@ 0x28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
    RtcCalendar_t calendar;
    HAL_RTC_GetTime( &RtcHandle, &calendar.CalendarTime, RTC_FORMAT_BIN );
 800769c:	f107 030c 	add.w	r3, r7, #12
 80076a0:	3308      	adds	r3, #8
 80076a2:	2200      	movs	r2, #0
 80076a4:	4619      	mov	r1, r3
 80076a6:	4810      	ldr	r0, [pc, #64]	@ (80076e8 <RtcGetCalendar+0x54>)
 80076a8:	f7fd fce8 	bl	800507c <HAL_RTC_GetTime>
    HAL_RTC_GetDate( &RtcHandle, &calendar.CalendarDate, RTC_FORMAT_BIN );
 80076ac:	f107 030c 	add.w	r3, r7, #12
 80076b0:	3302      	adds	r3, #2
 80076b2:	2200      	movs	r2, #0
 80076b4:	4619      	mov	r1, r3
 80076b6:	480c      	ldr	r0, [pc, #48]	@ (80076e8 <RtcGetCalendar+0x54>)
 80076b8:	f7fd fdd8 	bl	800526c <HAL_RTC_GetDate>
    calendar.CalendarCentury = Century;
 80076bc:	4b0b      	ldr	r3, [pc, #44]	@ (80076ec <RtcGetCalendar+0x58>)
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	81bb      	strh	r3, [r7, #12]
    RtcCheckCalendarRollOver( calendar.CalendarDate.Year );
 80076c2:	7c7b      	ldrb	r3, [r7, #17]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7ff ffbf 	bl	8007648 <RtcCheckCalendarRollOver>
    return calendar;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	461d      	mov	r5, r3
 80076ce:	f107 040c 	add.w	r4, r7, #12
 80076d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076d6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80076da:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	3728      	adds	r7, #40	@ 0x28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bdb0      	pop	{r4, r5, r7, pc}
 80076e6:	bf00      	nop
 80076e8:	200002dc 	.word	0x200002dc
 80076ec:	200002b8 	.word	0x200002b8

080076f0 <RTC_IRQHandler>:
/*!
 * \brief RTC IRQ Handler of the RTC Alarm
 */
//void RTC_Alarm_IRQHandler( void )   // STM32L476
void RTC_IRQHandler( void )    // changed for STM32U5 - PK
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
    HAL_RTC_AlarmIRQHandler( &RtcHandle );
 80076f4:	480a      	ldr	r0, [pc, #40]	@ (8007720 <RTC_IRQHandler+0x30>)
 80076f6:	f7fe f807 	bl	8005708 <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 80076fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80076fe:	4808      	ldr	r0, [pc, #32]	@ (8007720 <RTC_IRQHandler+0x30>)
 8007700:	f7fd ff02 	bl	8005508 <HAL_RTC_DeactivateAlarm>
    RtcRecoverMcuStatus( );
 8007704:	f7ff fc1e 	bl	8006f44 <RtcRecoverMcuStatus>
    RtcComputeWakeUpTime( );
 8007708:	f7ff fc24 	bl	8006f54 <RtcComputeWakeUpTime>
//    BlockLowPowerDuringTask( false );
    BlockLowPowerDuringTask( true );   // PK bugfix
 800770c:	2001      	movs	r0, #1
 800770e:	f7ff fc05 	bl	8006f1c <BlockLowPowerDuringTask>
//    DelayMs(10);   // BUG FIX PK
    printf("RTC_IRQHandler\n\r");
 8007712:	4804      	ldr	r0, [pc, #16]	@ (8007724 <RTC_IRQHandler+0x34>)
 8007714:	f002 ff74 	bl	800a600 <iprintf>
    TimerIrqHandler( );
 8007718:	f000 fb34 	bl	8007d84 <TimerIrqHandler>
}
 800771c:	bf00      	nop
 800771e:	bd80      	pop	{r7, pc}
 8007720:	200002dc 	.word	0x200002dc
 8007724:	0800bab0 	.word	0x0800bab0

08007728 <SpiInit>:
}SPIName;

void Error_Handler(void);   // should be defined in main.c - PK

void SpiInit( Spi_t *obj, PinNames mosi, PinNames miso, PinNames sclk, PinNames nss )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af02      	add	r7, sp, #8
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	4608      	mov	r0, r1
 8007732:	4611      	mov	r1, r2
 8007734:	461a      	mov	r2, r3
 8007736:	4603      	mov	r3, r0
 8007738:	70fb      	strb	r3, [r7, #3]
 800773a:	460b      	mov	r3, r1
 800773c:	70bb      	strb	r3, [r7, #2]
 800773e:	4613      	mov	r3, r2
 8007740:	707b      	strb	r3, [r7, #1]
    __HAL_RCC_SPI1_FORCE_RESET( );
 8007742:	4b3f      	ldr	r3, [pc, #252]	@ (8007840 <SpiInit+0x118>)
 8007744:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007746:	4a3e      	ldr	r2, [pc, #248]	@ (8007840 <SpiInit+0x118>)
 8007748:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800774c:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_SPI1_RELEASE_RESET( );
 800774e:	4b3c      	ldr	r3, [pc, #240]	@ (8007840 <SpiInit+0x118>)
 8007750:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007752:	4a3b      	ldr	r2, [pc, #236]	@ (8007840 <SpiInit+0x118>)
 8007754:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007758:	67d3      	str	r3, [r2, #124]	@ 0x7c

    __HAL_RCC_SPI1_CLK_ENABLE( );
 800775a:	4b39      	ldr	r3, [pc, #228]	@ (8007840 <SpiInit+0x118>)
 800775c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007760:	4a37      	ldr	r2, [pc, #220]	@ (8007840 <SpiInit+0x118>)
 8007762:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007766:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800776a:	4b35      	ldr	r3, [pc, #212]	@ (8007840 <SpiInit+0x118>)
 800776c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007770:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	68fb      	ldr	r3, [r7, #12]

//    obj->Spi.Instance = ( SPI_TypeDef *) SPI1_BASE;
    obj->Spi.Instance = SPI1; //( SPI_TypeDef *) SPI1_BASE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a32      	ldr	r2, [pc, #200]	@ (8007844 <SpiInit+0x11c>)
 800777c:	601a      	str	r2, [r3, #0]

    GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8007784:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8007788:	2305      	movs	r3, #5
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	2302      	movs	r3, #2
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	2300      	movs	r3, #0
 8007792:	2202      	movs	r2, #2
 8007794:	f7ff faa4 	bl	8006ce0 <GpioInit>
    GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f103 009c 	add.w	r0, r3, #156	@ 0x9c
 800779e:	f997 1002 	ldrsb.w	r1, [r7, #2]
 80077a2:	2305      	movs	r3, #5
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	2302      	movs	r3, #2
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	2300      	movs	r3, #0
 80077ac:	2202      	movs	r2, #2
 80077ae:	f7ff fa97 	bl	8006ce0 <GpioInit>
    GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
 80077b8:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80077bc:	2305      	movs	r3, #5
 80077be:	9301      	str	r3, [sp, #4]
 80077c0:	2302      	movs	r3, #2
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	2300      	movs	r3, #0
 80077c6:	2202      	movs	r2, #2
 80077c8:	f7ff fa8a 	bl	8006ce0 <GpioInit>

    if( nss != NC )
 80077cc:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80077d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d4:	d00d      	beq.n	80077f2 <SpiInit+0xca>
    {
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI1 );
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f103 00b4 	add.w	r0, r3, #180	@ 0xb4
 80077dc:	f997 1018 	ldrsb.w	r1, [r7, #24]
 80077e0:	2305      	movs	r3, #5
 80077e2:	9301      	str	r3, [sp, #4]
 80077e4:	2301      	movs	r3, #1
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	2300      	movs	r3, #0
 80077ea:	2202      	movs	r2, #2
 80077ec:	f7ff fa78 	bl	8006ce0 <GpioInit>
 80077f0:	e003      	b.n	80077fa <SpiInit+0xd2>
    }
    else
    {
        obj->Spi.Init.NSS = SPI_NSS_SOFT;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80077f8:	619a      	str	r2, [r3, #24]
    }

    if( nss == NC )
 80077fa:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007802:	d108      	bne.n	8007816 <SpiInit+0xee>
    {
        SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 8007804:	2300      	movs	r3, #0
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	2300      	movs	r3, #0
 800780a:	2200      	movs	r2, #0
 800780c:	2107      	movs	r1, #7
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f81a 	bl	8007848 <SpiFormat>
 8007814:	e007      	b.n	8007826 <SpiInit+0xfe>
    }
    else
    {
        SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 8007816:	2301      	movs	r3, #1
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	2300      	movs	r3, #0
 800781c:	2200      	movs	r2, #0
 800781e:	2107      	movs	r1, #7
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f811 	bl	8007848 <SpiFormat>

//    HAL_SPI_Init( &obj->Spi );

//	SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};

	if (HAL_SPI_Init(&obj->Spi) != HAL_OK)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe f8ed 	bl	8005a08 <HAL_SPI_Init>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <SpiInit+0x110>
	{
		Error_Handler();
 8007834:	f7f9 ffc8 	bl	80017c8 <Error_Handler>
		{
			Error_Handler();
		}
	}
	*/
}
 8007838:	bf00      	nop
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	46020c00 	.word	0x46020c00
 8007844:	40013000 	.word	0x40013000

08007848 <SpiFormat>:
    GpioInit( &obj->Sclk, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &obj->Nss, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}

void SpiFormat( Spi_t *obj, uint32_t bits, int8_t cpol, int8_t cpha, int8_t slave )
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	4611      	mov	r1, r2
 8007854:	461a      	mov	r2, r3
 8007856:	460b      	mov	r3, r1
 8007858:	71fb      	strb	r3, [r7, #7]
 800785a:	4613      	mov	r3, r2
 800785c:	71bb      	strb	r3, [r7, #6]
	/* SPI1 parameter configuration*/
    if( slave == 0 )
 800785e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d104      	bne.n	8007870 <SpiFormat+0x28>
    {
        obj->Spi.Init.Mode = SPI_MODE_MASTER;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800786c:	605a      	str	r2, [r3, #4]
 800786e:	e002      	b.n	8007876 <SpiFormat+0x2e>
    }
    else
    {
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	605a      	str	r2, [r3, #4]
    }

	obj->Spi.Init.Direction = SPI_DIRECTION_2LINES;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	609a      	str	r2, [r3, #8]
	if( bits == SPI_DATASIZE_8BIT )
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b07      	cmp	r3, #7
 8007880:	d103      	bne.n	800788a <SpiFormat+0x42>
	{
		obj->Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2207      	movs	r2, #7
 8007886:	60da      	str	r2, [r3, #12]
 8007888:	e002      	b.n	8007890 <SpiFormat+0x48>
	}
	else
	{
		obj->Spi.Init.DataSize = SPI_DATASIZE_16BIT;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	220f      	movs	r2, #15
 800788e:	60da      	str	r2, [r3, #12]
	}

	obj->Spi.Init.CLKPolarity = cpol;
 8007890:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	611a      	str	r2, [r3, #16]
	obj->Spi.Init.CLKPhase = cpha;
 8007898:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	615a      	str	r2, [r3, #20]
	obj->Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80078a6:	61da      	str	r2, [r3, #28]
	obj->Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	621a      	str	r2, [r3, #32]
	obj->Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	625a      	str	r2, [r3, #36]	@ 0x24
	obj->Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	629a      	str	r2, [r3, #40]	@ 0x28
	obj->Spi.Init.CRCPolynomial = 0x7;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2207      	movs	r2, #7
 80078be:	62da      	str	r2, [r3, #44]	@ 0x2c
	obj->Spi.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80078c6:	635a      	str	r2, [r3, #52]	@ 0x34
	obj->Spi.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	639a      	str	r2, [r3, #56]	@ 0x38
	obj->Spi.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	63da      	str	r2, [r3, #60]	@ 0x3c
	obj->Spi.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	649a      	str	r2, [r3, #72]	@ 0x48
	obj->Spi.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	64da      	str	r2, [r3, #76]	@ 0x4c
	obj->Spi.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	651a      	str	r2, [r3, #80]	@ 0x50
	obj->Spi.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	655a      	str	r2, [r3, #84]	@ 0x54
	obj->Spi.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	659a      	str	r2, [r3, #88]	@ 0x58
	obj->Spi.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	65da      	str	r2, [r3, #92]	@ 0x5c
	obj->Spi.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
	...

0800790c <SX1276IoInit>:
 */
Gpio_t AntRx;
Gpio_t AntTx;

void SX1276IoInit( void )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af02      	add	r7, sp, #8
    GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 8007912:	2301      	movs	r3, #1
 8007914:	9301      	str	r3, [sp, #4]
 8007916:	2301      	movs	r3, #1
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	2300      	movs	r3, #0
 800791c:	2201      	movs	r2, #1
 800791e:	2129      	movs	r1, #41	@ 0x29
 8007920:	4820      	ldr	r0, [pc, #128]	@ (80079a4 <SX1276IoInit+0x98>)
 8007922:	f7ff f9dd 	bl	8006ce0 <GpioInit>

    GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8007926:	2300      	movs	r3, #0
 8007928:	9301      	str	r3, [sp, #4]
 800792a:	2301      	movs	r3, #1
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	2300      	movs	r3, #0
 8007930:	2200      	movs	r2, #0
 8007932:	2112      	movs	r1, #18
 8007934:	481c      	ldr	r0, [pc, #112]	@ (80079a8 <SX1276IoInit+0x9c>)
 8007936:	f7ff f9d3 	bl	8006ce0 <GpioInit>
    GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800793a:	2300      	movs	r3, #0
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	2301      	movs	r3, #1
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	2300      	movs	r3, #0
 8007944:	2200      	movs	r2, #0
 8007946:	2111      	movs	r1, #17
 8007948:	4818      	ldr	r0, [pc, #96]	@ (80079ac <SX1276IoInit+0xa0>)
 800794a:	f7ff f9c9 	bl	8006ce0 <GpioInit>
    GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800794e:	2300      	movs	r3, #0
 8007950:	9301      	str	r3, [sp, #4]
 8007952:	2301      	movs	r3, #1
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	2300      	movs	r3, #0
 8007958:	2200      	movs	r2, #0
 800795a:	211f      	movs	r1, #31
 800795c:	4814      	ldr	r0, [pc, #80]	@ (80079b0 <SX1276IoInit+0xa4>)
 800795e:	f7ff f9bf 	bl	8006ce0 <GpioInit>
    GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8007962:	2300      	movs	r3, #0
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	2301      	movs	r3, #1
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	2300      	movs	r3, #0
 800796c:	2200      	movs	r2, #0
 800796e:	211e      	movs	r1, #30
 8007970:	4810      	ldr	r0, [pc, #64]	@ (80079b4 <SX1276IoInit+0xa8>)
 8007972:	f7ff f9b5 	bl	8006ce0 <GpioInit>
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8007976:	2300      	movs	r3, #0
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	2301      	movs	r3, #1
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	2300      	movs	r3, #0
 8007980:	2200      	movs	r2, #0
 8007982:	211d      	movs	r1, #29
 8007984:	480c      	ldr	r0, [pc, #48]	@ (80079b8 <SX1276IoInit+0xac>)
 8007986:	f7ff f9ab 	bl	8006ce0 <GpioInit>
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800798a:	2300      	movs	r3, #0
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	2301      	movs	r3, #1
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	2300      	movs	r3, #0
 8007994:	2200      	movs	r2, #0
 8007996:	2118      	movs	r1, #24
 8007998:	4808      	ldr	r0, [pc, #32]	@ (80079bc <SX1276IoInit+0xb0>)
 800799a:	f7ff f9a1 	bl	8006ce0 <GpioInit>
}
 800799e:	bf00      	nop
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	20000548 	.word	0x20000548
 80079a8:	2000044c 	.word	0x2000044c
 80079ac:	20000458 	.word	0x20000458
 80079b0:	20000464 	.word	0x20000464
 80079b4:	20000470 	.word	0x20000470
 80079b8:	2000047c 	.word	0x2000047c
 80079bc:	20000488 	.word	0x20000488

080079c0 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
    GpioSetInterrupt( &SX1276.DIO0, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2203      	movs	r2, #3
 80079ce:	2101      	movs	r1, #1
 80079d0:	4817      	ldr	r0, [pc, #92]	@ (8007a30 <SX1276IoIrqInit+0x70>)
 80079d2:	f7ff f9a9 	bl	8006d28 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3304      	adds	r3, #4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2203      	movs	r2, #3
 80079de:	2101      	movs	r1, #1
 80079e0:	4814      	ldr	r0, [pc, #80]	@ (8007a34 <SX1276IoIrqInit+0x74>)
 80079e2:	f7ff f9a1 	bl	8006d28 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO2, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3308      	adds	r3, #8
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2203      	movs	r2, #3
 80079ee:	2101      	movs	r1, #1
 80079f0:	4811      	ldr	r0, [pc, #68]	@ (8007a38 <SX1276IoIrqInit+0x78>)
 80079f2:	f7ff f999 	bl	8006d28 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO3, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	330c      	adds	r3, #12
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2203      	movs	r2, #3
 80079fe:	2101      	movs	r1, #1
 8007a00:	480e      	ldr	r0, [pc, #56]	@ (8007a3c <SX1276IoIrqInit+0x7c>)
 8007a02:	f7ff f991 	bl	8006d28 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO4, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[4] );
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3310      	adds	r3, #16
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2203      	movs	r2, #3
 8007a0e:	2101      	movs	r1, #1
 8007a10:	480b      	ldr	r0, [pc, #44]	@ (8007a40 <SX1276IoIrqInit+0x80>)
 8007a12:	f7ff f989 	bl	8006d28 <GpioSetInterrupt>
    GpioSetInterrupt( &SX1276.DIO5, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[5] );
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	3314      	adds	r3, #20
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2203      	movs	r2, #3
 8007a1e:	2101      	movs	r1, #1
 8007a20:	4808      	ldr	r0, [pc, #32]	@ (8007a44 <SX1276IoIrqInit+0x84>)
 8007a22:	f7ff f981 	bl	8006d28 <GpioSetInterrupt>
}
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	2000044c 	.word	0x2000044c
 8007a34:	20000458 	.word	0x20000458
 8007a38:	20000464 	.word	0x20000464
 8007a3c:	20000470 	.word	0x20000470
 8007a40:	2000047c 	.word	0x2000047c
 8007a44:	20000488 	.word	0x20000488

08007a48 <SX1276GetPaSelect>:
    GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}

uint8_t SX1276GetPaSelect( uint32_t channel )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_PABOOST;
 8007a50:	2380      	movs	r3, #128	@ 0x80
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
	...

08007a60 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 8007a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a98 <SX1276SetAntSwLowPower+0x38>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	79fa      	ldrb	r2, [r7, #7]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d00d      	beq.n	8007a90 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 8007a74:	4a08      	ldr	r2, [pc, #32]	@ (8007a98 <SX1276SetAntSwLowPower+0x38>)
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	7013      	strb	r3, [r2, #0]
    
        if( status == false )
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	f083 0301 	eor.w	r3, r3, #1
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 8007a86:	f000 f809 	bl	8007a9c <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 8007a8a:	e001      	b.n	8007a90 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 8007a8c:	f000 f824 	bl	8007ad8 <SX1276AntSwDeInit>
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	20000318 	.word	0x20000318

08007a9c <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af02      	add	r7, sp, #8
    GpioInit( &AntTx, RADIO_ANT_SWITCH_TX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	2201      	movs	r2, #1
 8007aae:	2114      	movs	r1, #20
 8007ab0:	4807      	ldr	r0, [pc, #28]	@ (8007ad0 <SX1276AntSwInit+0x34>)
 8007ab2:	f7ff f915 	bl	8006ce0 <GpioInit>
    GpioInit( &AntRx, RADIO_ANT_SWITCH_RX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	9301      	str	r3, [sp, #4]
 8007aba:	2301      	movs	r3, #1
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	2115      	movs	r1, #21
 8007ac4:	4803      	ldr	r0, [pc, #12]	@ (8007ad4 <SX1276AntSwInit+0x38>)
 8007ac6:	f7ff f90b 	bl	8006ce0 <GpioInit>
}
 8007aca:	bf00      	nop
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	20000328 	.word	0x20000328
 8007ad4:	2000031c 	.word	0x2000031c

08007ad8 <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af02      	add	r7, sp, #8
    GpioInit( &AntTx, RADIO_ANT_SWITCH_TX, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	2203      	movs	r2, #3
 8007aea:	2114      	movs	r1, #20
 8007aec:	4807      	ldr	r0, [pc, #28]	@ (8007b0c <SX1276AntSwDeInit+0x34>)
 8007aee:	f7ff f8f7 	bl	8006ce0 <GpioInit>
    GpioInit( &AntRx, RADIO_ANT_SWITCH_RX, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8007af2:	2300      	movs	r3, #0
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	2300      	movs	r3, #0
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	2300      	movs	r3, #0
 8007afc:	2203      	movs	r2, #3
 8007afe:	2115      	movs	r1, #21
 8007b00:	4803      	ldr	r0, [pc, #12]	@ (8007b10 <SX1276AntSwDeInit+0x38>)
 8007b02:	f7ff f8ed 	bl	8006ce0 <GpioInit>
}
 8007b06:	bf00      	nop
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	20000328 	.word	0x20000328
 8007b10:	2000031c 	.word	0x2000031c

08007b14 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t rxTx )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	71fb      	strb	r3, [r7, #7]
    if( rxTx != 0 ) // 1: TX, 0: RX
 8007b1e:	79fb      	ldrb	r3, [r7, #7]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d008      	beq.n	8007b36 <SX1276SetAntSw+0x22>
    {
        GpioWrite( &AntRx, 0 );
 8007b24:	2100      	movs	r1, #0
 8007b26:	480a      	ldr	r0, [pc, #40]	@ (8007b50 <SX1276SetAntSw+0x3c>)
 8007b28:	f7ff f919 	bl	8006d5e <GpioWrite>
        GpioWrite( &AntTx, 1 );
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	4809      	ldr	r0, [pc, #36]	@ (8007b54 <SX1276SetAntSw+0x40>)
 8007b30:	f7ff f915 	bl	8006d5e <GpioWrite>
    else
    {
        GpioWrite( &AntRx, 1 );
        GpioWrite( &AntTx, 0 );
    }
}
 8007b34:	e007      	b.n	8007b46 <SX1276SetAntSw+0x32>
        GpioWrite( &AntRx, 1 );
 8007b36:	2101      	movs	r1, #1
 8007b38:	4805      	ldr	r0, [pc, #20]	@ (8007b50 <SX1276SetAntSw+0x3c>)
 8007b3a:	f7ff f910 	bl	8006d5e <GpioWrite>
        GpioWrite( &AntTx, 0 );
 8007b3e:	2100      	movs	r1, #0
 8007b40:	4804      	ldr	r0, [pc, #16]	@ (8007b54 <SX1276SetAntSw+0x40>)
 8007b42:	f7ff f90c 	bl	8006d5e <GpioWrite>
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	2000031c 	.word	0x2000031c
 8007b54:	20000328 	.word	0x20000328

08007b58 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8007b60:	2301      	movs	r3, #1
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <TimerInit>:
 * \retval value current timer value
 */
TimerTime_t TimerGetValue( void );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b083      	sub	sp, #12
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	605a      	str	r2, [r3, #4]
    obj->IsRunning = false;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	721a      	strb	r2, [r3, #8]
    obj->Callback = callback;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	60da      	str	r2, [r3, #12]
    obj->Next = NULL;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	611a      	str	r2, [r3, #16]
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
	...

08007ba4 <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]
    uint32_t remainingTime = 0;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8007bb4:	b672      	cpsid	i
}
 8007bb6:	bf00      	nop

    __disable_irq( );

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d005      	beq.n	8007bca <TimerStart+0x26>
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f9d8 	bl	8007f74 <TimerExists>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <TimerStart+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 8007bca:	b662      	cpsie	i
}
 8007bcc:	bf00      	nop
    {
        __enable_irq( );
        return;
 8007bce:	e03e      	b.n	8007c4e <TimerStart+0xaa>
    }

    obj->Timestamp = obj->ReloadValue;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	601a      	str	r2, [r3, #0]
    obj->IsRunning = false;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == NULL )
 8007bde:	4b1d      	ldr	r3, [pc, #116]	@ (8007c54 <TimerStart+0xb0>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d106      	bne.n	8007bf4 <TimerStart+0x50>
    {
        TimerInsertNewHeadTimer( obj, obj->Timestamp );
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f8a1 	bl	8007d34 <TimerInsertNewHeadTimer>
 8007bf2:	e02a      	b.n	8007c4a <TimerStart+0xa6>
    }
    else
    {
        if( TimerListHead->IsRunning == true )
 8007bf4:	4b17      	ldr	r3, [pc, #92]	@ (8007c54 <TimerStart+0xb0>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	7a1b      	ldrb	r3, [r3, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d013      	beq.n	8007c26 <TimerStart+0x82>
        {
            elapsedTime = TimerGetValue( );
 8007bfe:	f000 f9e9 	bl	8007fd4 <TimerGetValue>
 8007c02:	60f8      	str	r0, [r7, #12]
            if( elapsedTime > TimerListHead->Timestamp )
 8007c04:	4b13      	ldr	r3, [pc, #76]	@ (8007c54 <TimerStart+0xb0>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d903      	bls.n	8007c18 <TimerStart+0x74>
            {
                elapsedTime = TimerListHead->Timestamp; // security but should never occur
 8007c10:	4b10      	ldr	r3, [pc, #64]	@ (8007c54 <TimerStart+0xb0>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60fb      	str	r3, [r7, #12]
            }
            remainingTime = TimerListHead->Timestamp - elapsedTime;
 8007c18:	4b0e      	ldr	r3, [pc, #56]	@ (8007c54 <TimerStart+0xb0>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	60bb      	str	r3, [r7, #8]
 8007c24:	e003      	b.n	8007c2e <TimerStart+0x8a>
        }
        else
        {
            remainingTime = TimerListHead->Timestamp;
 8007c26:	4b0b      	ldr	r3, [pc, #44]	@ (8007c54 <TimerStart+0xb0>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60bb      	str	r3, [r7, #8]
        }

        if( obj->Timestamp < remainingTime )
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d904      	bls.n	8007c42 <TimerStart+0x9e>
        {
            TimerInsertNewHeadTimer( obj, remainingTime );
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f87a 	bl	8007d34 <TimerInsertNewHeadTimer>
 8007c40:	e003      	b.n	8007c4a <TimerStart+0xa6>
        }
        else
        {
             TimerInsertTimer( obj, remainingTime );
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f807 	bl	8007c58 <TimerInsertTimer>
  __ASM volatile ("cpsie i" : : : "memory");
 8007c4a:	b662      	cpsie	i
}
 8007c4c:	bf00      	nop
        }
    }
    __enable_irq( );
}
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20000338 	.word	0x20000338

08007c58 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
    uint32_t aggregatedTimestamp = 0;      // hold the sum of timestamps
 8007c62:	2300      	movs	r3, #0
 8007c64:	617b      	str	r3, [r7, #20]
    uint32_t aggregatedTimestampNext = 0;  // hold the sum of timestamps up to the next event
 8007c66:	2300      	movs	r3, #0
 8007c68:	613b      	str	r3, [r7, #16]

    TimerEvent_t* prev = TimerListHead;
 8007c6a:	4b31      	ldr	r3, [pc, #196]	@ (8007d30 <TimerInsertTimer+0xd8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* cur = TimerListHead->Next;
 8007c70:	4b2f      	ldr	r3, [pc, #188]	@ (8007d30 <TimerInsertTimer+0xd8>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	60bb      	str	r3, [r7, #8]

    if( cur == NULL )
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10c      	bne.n	8007c98 <TimerInsertTimer+0x40>
    { // obj comes just after the head
        obj->Timestamp -= remainingTime;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	1ad2      	subs	r2, r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	601a      	str	r2, [r3, #0]
        prev->Next = obj;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	611a      	str	r2, [r3, #16]
        obj->Next = NULL;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	611a      	str	r2, [r3, #16]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
                }
            }
        }
    }
}
 8007c96:	e045      	b.n	8007d24 <TimerInsertTimer+0xcc>
        aggregatedTimestamp = remainingTime;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	617b      	str	r3, [r7, #20]
        aggregatedTimestampNext = remainingTime + cur->Timestamp;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 8007ca6:	e039      	b.n	8007d1c <TimerInsertTimer+0xc4>
            if( aggregatedTimestampNext > obj->Timestamp )
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d916      	bls.n	8007ce0 <TimerInsertTimer+0x88>
                obj->Timestamp -= aggregatedTimestamp;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	1ad2      	subs	r2, r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	601a      	str	r2, [r3, #0]
                if( cur != NULL )
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d006      	beq.n	8007cd2 <TimerInsertTimer+0x7a>
                    cur->Timestamp -= obj->Timestamp;
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	1ad2      	subs	r2, r2, r3
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	601a      	str	r2, [r3, #0]
                prev->Next = obj;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	611a      	str	r2, [r3, #16]
                obj->Next = cur;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	611a      	str	r2, [r3, #16]
                break;
 8007cde:	e021      	b.n	8007d24 <TimerInsertTimer+0xcc>
                prev = cur;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	60fb      	str	r3, [r7, #12]
                cur = cur->Next;
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	60bb      	str	r3, [r7, #8]
                if( cur == NULL )
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10e      	bne.n	8007d0e <TimerInsertTimer+0xb6>
                    aggregatedTimestamp = aggregatedTimestampNext;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	617b      	str	r3, [r7, #20]
                    obj->Timestamp -= aggregatedTimestamp;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	1ad2      	subs	r2, r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	601a      	str	r2, [r3, #0]
                    prev->Next = obj;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	611a      	str	r2, [r3, #16]
                    obj->Next = NULL;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	611a      	str	r2, [r3, #16]
                    break;
 8007d0c:	e00a      	b.n	8007d24 <TimerInsertTimer+0xcc>
                    aggregatedTimestamp = aggregatedTimestampNext;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	617b      	str	r3, [r7, #20]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	4413      	add	r3, r2
 8007d1a:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1c2      	bne.n	8007ca8 <TimerInsertTimer+0x50>
}
 8007d22:	e7ff      	b.n	8007d24 <TimerInsertTimer+0xcc>
 8007d24:	bf00      	nop
 8007d26:	371c      	adds	r7, #28
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	20000338 	.word	0x20000338

08007d34 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
    TimerEvent_t* cur = TimerListHead;
 8007d3e:	4b10      	ldr	r3, [pc, #64]	@ (8007d80 <TimerInsertNewHeadTimer+0x4c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d008      	beq.n	8007d5c <TimerInsertNewHeadTimer+0x28>
    {
        cur->Timestamp = remainingTime - obj->Timestamp;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	1ad2      	subs	r2, r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	601a      	str	r2, [r3, #0]
        cur->IsRunning = false;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	721a      	strb	r2, [r3, #8]
    }

    obj->Next = cur;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	611a      	str	r2, [r3, #16]
    obj->IsRunning = true;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	721a      	strb	r2, [r3, #8]
    TimerListHead = obj;
 8007d68:	4a05      	ldr	r2, [pc, #20]	@ (8007d80 <TimerInsertNewHeadTimer+0x4c>)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 8007d6e:	4b04      	ldr	r3, [pc, #16]	@ (8007d80 <TimerInsertNewHeadTimer+0x4c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 f936 	bl	8007fe4 <TimerSetTimeout>
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	20000338 	.word	0x20000338

08007d84 <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
    uint32_t elapsedTime = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	607b      	str	r3, [r7, #4]

    elapsedTime = TimerGetValue( );
 8007d8e:	f000 f921 	bl	8007fd4 <TimerGetValue>
 8007d92:	6078      	str	r0, [r7, #4]
    
    if (TimerListHead == NULL)  // PK: this is just a workaround to avoid HardFault error caused by null-pointer (it is cleared earlier for an unknown reason)
 8007d94:	4b26      	ldr	r3, [pc, #152]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d045      	beq.n	8007e28 <TimerIrqHandler+0xa4>
    	return;

    if( elapsedTime >= TimerListHead->Timestamp )
 8007d9c:	4b24      	ldr	r3, [pc, #144]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d304      	bcc.n	8007db2 <TimerIrqHandler+0x2e>
    {
        TimerListHead->Timestamp = 0;
 8007da8:	4b21      	ldr	r3, [pc, #132]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2200      	movs	r2, #0
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	e007      	b.n	8007dc2 <TimerIrqHandler+0x3e>
    }
    else
    {
        TimerListHead->Timestamp -= elapsedTime;
 8007db2:	4b1f      	ldr	r3, [pc, #124]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6819      	ldr	r1, [r3, #0]
 8007db8:	4b1d      	ldr	r3, [pc, #116]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	1a8a      	subs	r2, r1, r2
 8007dc0:	601a      	str	r2, [r3, #0]
    }

    TimerListHead->IsRunning = false;
 8007dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	721a      	strb	r2, [r3, #8]

    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 8007dca:	e00e      	b.n	8007dea <TimerIrqHandler+0x66>
    {
        TimerEvent_t* elapsedTimer = TimerListHead;
 8007dcc:	4b18      	ldr	r3, [pc, #96]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	603b      	str	r3, [r7, #0]
        TimerListHead = TimerListHead->Next;
 8007dd2:	4b17      	ldr	r3, [pc, #92]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	4a15      	ldr	r2, [pc, #84]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007dda:	6013      	str	r3, [r2, #0]

        if( elapsedTimer->Callback != NULL )
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <TimerIrqHandler+0x66>
        {
            elapsedTimer->Callback( );
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 8007dea:	4b11      	ldr	r3, [pc, #68]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d004      	beq.n	8007dfc <TimerIrqHandler+0x78>
 8007df2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d0e7      	beq.n	8007dcc <TimerIrqHandler+0x48>
        }
    }

    // start the next TimerListHead if it exists
    if( TimerListHead != NULL )
 8007dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d012      	beq.n	8007e2a <TimerIrqHandler+0xa6>
    {
        if( TimerListHead->IsRunning != true )
 8007e04:	4b0a      	ldr	r3, [pc, #40]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	7a1b      	ldrb	r3, [r3, #8]
 8007e0a:	f083 0301 	eor.w	r3, r3, #1
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00a      	beq.n	8007e2a <TimerIrqHandler+0xa6>
        {
            TimerListHead->IsRunning = true;
 8007e14:	4b06      	ldr	r3, [pc, #24]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	721a      	strb	r2, [r3, #8]
            TimerSetTimeout( TimerListHead );
 8007e1c:	4b04      	ldr	r3, [pc, #16]	@ (8007e30 <TimerIrqHandler+0xac>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 f8df 	bl	8007fe4 <TimerSetTimeout>
 8007e26:	e000      	b.n	8007e2a <TimerIrqHandler+0xa6>
    	return;
 8007e28:	bf00      	nop
        }
    }
}
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20000338 	.word	0x20000338

08007e34 <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e3c:	b672      	cpsid	i
}
 8007e3e:	bf00      	nop
    __disable_irq( );

    uint32_t elapsedTime = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]
    uint32_t remainingTime = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	60bb      	str	r3, [r7, #8]

    TimerEvent_t* prev = TimerListHead;
 8007e48:	4b49      	ldr	r3, [pc, #292]	@ (8007f70 <TimerStop+0x13c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	613b      	str	r3, [r7, #16]
    TimerEvent_t* cur = TimerListHead;
 8007e4e:	4b48      	ldr	r3, [pc, #288]	@ (8007f70 <TimerStop+0x13c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60fb      	str	r3, [r7, #12]

    // List is empty or the Obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8007e54:	4b46      	ldr	r3, [pc, #280]	@ (8007f70 <TimerStop+0x13c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <TimerStop+0x2e>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d102      	bne.n	8007e68 <TimerStop+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 8007e62:	b662      	cpsie	i
}
 8007e64:	bf00      	nop
    {
        __enable_irq( );
        return;
 8007e66:	e080      	b.n	8007f6a <TimerStop+0x136>
    }

    if( TimerListHead == obj ) // Stop the Head
 8007e68:	4b41      	ldr	r3, [pc, #260]	@ (8007f70 <TimerStop+0x13c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d152      	bne.n	8007f18 <TimerStop+0xe4>
    {
        if( TimerListHead->IsRunning == true ) // The head is already running
 8007e72:	4b3f      	ldr	r3, [pc, #252]	@ (8007f70 <TimerStop+0x13c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	7a1b      	ldrb	r3, [r3, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d033      	beq.n	8007ee4 <TimerStop+0xb0>
        {
            elapsedTime = TimerGetValue( );
 8007e7c:	f000 f8aa 	bl	8007fd4 <TimerGetValue>
 8007e80:	6178      	str	r0, [r7, #20]
            if( elapsedTime > obj->Timestamp )
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d902      	bls.n	8007e92 <TimerStop+0x5e>
            {
                elapsedTime = obj->Timestamp;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	617b      	str	r3, [r7, #20]
            }

            remainingTime = obj->Timestamp - elapsedTime;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	60bb      	str	r3, [r7, #8]

            if( TimerListHead->Next != NULL )
 8007e9c:	4b34      	ldr	r3, [pc, #208]	@ (8007f70 <TimerStop+0x13c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d01a      	beq.n	8007edc <TimerStop+0xa8>
            {
                TimerListHead->IsRunning = false;
 8007ea6:	4b32      	ldr	r3, [pc, #200]	@ (8007f70 <TimerStop+0x13c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	721a      	strb	r2, [r3, #8]
                TimerListHead = TimerListHead->Next;
 8007eae:	4b30      	ldr	r3, [pc, #192]	@ (8007f70 <TimerStop+0x13c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	4a2e      	ldr	r2, [pc, #184]	@ (8007f70 <TimerStop+0x13c>)
 8007eb6:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 8007eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8007f70 <TimerStop+0x13c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6819      	ldr	r1, [r3, #0]
 8007ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8007f70 <TimerStop+0x13c>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	440a      	add	r2, r1
 8007ec6:	601a      	str	r2, [r3, #0]
                TimerListHead->IsRunning = true;
 8007ec8:	4b29      	ldr	r3, [pc, #164]	@ (8007f70 <TimerStop+0x13c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	721a      	strb	r2, [r3, #8]
                TimerSetTimeout( TimerListHead );
 8007ed0:	4b27      	ldr	r3, [pc, #156]	@ (8007f70 <TimerStop+0x13c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 f885 	bl	8007fe4 <TimerSetTimeout>
 8007eda:	e044      	b.n	8007f66 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 8007edc:	4b24      	ldr	r3, [pc, #144]	@ (8007f70 <TimerStop+0x13c>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	e040      	b.n	8007f66 <TimerStop+0x132>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 8007ee4:	4b22      	ldr	r3, [pc, #136]	@ (8007f70 <TimerStop+0x13c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d010      	beq.n	8007f10 <TimerStop+0xdc>
            {
                remainingTime = obj->Timestamp;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	60bb      	str	r3, [r7, #8]
                TimerListHead = TimerListHead->Next;
 8007ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8007f70 <TimerStop+0x13c>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	4a1d      	ldr	r2, [pc, #116]	@ (8007f70 <TimerStop+0x13c>)
 8007efc:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 8007efe:	4b1c      	ldr	r3, [pc, #112]	@ (8007f70 <TimerStop+0x13c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6819      	ldr	r1, [r3, #0]
 8007f04:	4b1a      	ldr	r3, [pc, #104]	@ (8007f70 <TimerStop+0x13c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	440a      	add	r2, r1
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	e02a      	b.n	8007f66 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 8007f10:	4b17      	ldr	r3, [pc, #92]	@ (8007f70 <TimerStop+0x13c>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	e026      	b.n	8007f66 <TimerStop+0x132>
            }
        }
    }
    else // Stop an object within the list
    {
        remainingTime = obj->Timestamp;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60bb      	str	r3, [r7, #8]

        while( cur != NULL )
 8007f1e:	e01f      	b.n	8007f60 <TimerStop+0x12c>
        {
            if( cur == obj )
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d116      	bne.n	8007f56 <TimerStop+0x122>
            {
                if( cur->Next != NULL )
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00c      	beq.n	8007f4a <TimerStop+0x116>
                {
                    cur = cur->Next;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	611a      	str	r2, [r3, #16]
                    cur->Timestamp += remainingTime;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	441a      	add	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	601a      	str	r2, [r3, #0]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 8007f48:	e00d      	b.n	8007f66 <TimerStop+0x132>
                    cur = NULL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	611a      	str	r2, [r3, #16]
                break;
 8007f54:	e007      	b.n	8007f66 <TimerStop+0x132>
            }
            else
            {
                prev = cur;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	613b      	str	r3, [r7, #16]
                cur = cur->Next;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	60fb      	str	r3, [r7, #12]
        while( cur != NULL )
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1dc      	bne.n	8007f20 <TimerStop+0xec>
  __ASM volatile ("cpsie i" : : : "memory");
 8007f66:	b662      	cpsie	i
}
 8007f68:	bf00      	nop
            }
        }
    }
    __enable_irq( );
}
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20000338 	.word	0x20000338

08007f74 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8007f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007fac <TimerExists+0x38>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 8007f82:	e008      	b.n	8007f96 <TimerExists+0x22>
    {
        if( cur == obj )
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d101      	bne.n	8007f90 <TimerExists+0x1c>
        {
            return true;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e006      	b.n	8007f9e <TimerExists+0x2a>
        }
        cur = cur->Next;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1f3      	bne.n	8007f84 <TimerExists+0x10>
    }
    return false;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	20000338 	.word	0x20000338

08007fb0 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
    TimerStop( obj );
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff ff3a 	bl	8007e34 <TimerStop>
    obj->Timestamp = value;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = value;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	605a      	str	r2, [r3, #4]
}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <TimerGetValue>:

TimerTime_t TimerGetValue( void )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
    return RtcGetElapsedAlarmTime( );
 8007fd8:	f7fe ff7e 	bl	8006ed8 <RtcGetElapsedAlarmTime>
 8007fdc:	4603      	mov	r3, r0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	bd80      	pop	{r7, pc}
	...

08007fe4 <TimerSetTimeout>:
{
    return RtcComputeFutureEventTime( eventInFuture );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
    HasLoopedThroughMain = 0;
 8007fec:	4b09      	ldr	r3, [pc, #36]	@ (8008014 <TimerSetTimeout+0x30>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
    obj->Timestamp = RtcGetAdjustedTimeoutValue( obj->Timestamp ); 
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fe ff36 	bl	8006e68 <RtcGetAdjustedTimeoutValue>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	601a      	str	r2, [r3, #0]
    RtcSetTimeout( obj->Timestamp );
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe ff22 	bl	8006e50 <RtcSetTimeout>
}
 800800c:	bf00      	nop
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	20000334 	.word	0x20000334

08008018 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8008026:	e007      	b.n	8008038 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	1c53      	adds	r3, r2, #1
 800802c:	60bb      	str	r3, [r7, #8]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	1c59      	adds	r1, r3, #1
 8008032:	60f9      	str	r1, [r7, #12]
 8008034:	7812      	ldrb	r2, [r2, #0]
 8008036:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8008038:	88fb      	ldrh	r3, [r7, #6]
 800803a:	1e5a      	subs	r2, r3, #1
 800803c:	80fa      	strh	r2, [r7, #6]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1f2      	bne.n	8008028 <memcpy1+0x10>
    }
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8008058:	4a24      	ldr	r2, [pc, #144]	@ (80080ec <SX1276Init+0x9c>)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800805e:	4924      	ldr	r1, [pc, #144]	@ (80080f0 <SX1276Init+0xa0>)
 8008060:	4824      	ldr	r0, [pc, #144]	@ (80080f4 <SX1276Init+0xa4>)
 8008062:	f7ff fd84 	bl	8007b6e <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8008066:	4922      	ldr	r1, [pc, #136]	@ (80080f0 <SX1276Init+0xa0>)
 8008068:	4823      	ldr	r0, [pc, #140]	@ (80080f8 <SX1276Init+0xa8>)
 800806a:	f7ff fd80 	bl	8007b6e <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800806e:	4920      	ldr	r1, [pc, #128]	@ (80080f0 <SX1276Init+0xa0>)
 8008070:	4822      	ldr	r0, [pc, #136]	@ (80080fc <SX1276Init+0xac>)
 8008072:	f7ff fd7c 	bl	8007b6e <TimerInit>

    SX1276Reset( );
 8008076:	f001 fb75 	bl	8009764 <SX1276Reset>

    RxChainCalibration( );
 800807a:	f000 f8e5 	bl	8008248 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800807e:	2000      	movs	r0, #0
 8008080:	f001 fb92 	bl	80097a8 <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 8008084:	481e      	ldr	r0, [pc, #120]	@ (8008100 <SX1276Init+0xb0>)
 8008086:	f7ff fc9b 	bl	80079c0 <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800808a:	2300      	movs	r3, #0
 800808c:	73fb      	strb	r3, [r7, #15]
 800808e:	e01f      	b.n	80080d0 <SX1276Init+0x80>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8008090:	7bfa      	ldrb	r2, [r7, #15]
 8008092:	491c      	ldr	r1, [pc, #112]	@ (8008104 <SX1276Init+0xb4>)
 8008094:	4613      	mov	r3, r2
 8008096:	005b      	lsls	r3, r3, #1
 8008098:	4413      	add	r3, r2
 800809a:	440b      	add	r3, r1
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	4618      	mov	r0, r3
 80080a0:	f001 fbb0 	bl	8009804 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80080a4:	7bfa      	ldrb	r2, [r7, #15]
 80080a6:	4917      	ldr	r1, [pc, #92]	@ (8008104 <SX1276Init+0xb4>)
 80080a8:	4613      	mov	r3, r2
 80080aa:	005b      	lsls	r3, r3, #1
 80080ac:	4413      	add	r3, r2
 80080ae:	440b      	add	r3, r1
 80080b0:	3301      	adds	r3, #1
 80080b2:	7818      	ldrb	r0, [r3, #0]
 80080b4:	7bfa      	ldrb	r2, [r7, #15]
 80080b6:	4913      	ldr	r1, [pc, #76]	@ (8008104 <SX1276Init+0xb4>)
 80080b8:	4613      	mov	r3, r2
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	4413      	add	r3, r2
 80080be:	440b      	add	r3, r1
 80080c0:	3302      	adds	r3, #2
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	4619      	mov	r1, r3
 80080c6:	f001 fbdf 	bl	8009888 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	3301      	adds	r3, #1
 80080ce:	73fb      	strb	r3, [r7, #15]
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	2b10      	cmp	r3, #16
 80080d4:	d9dc      	bls.n	8008090 <SX1276Init+0x40>
    }

    SX1276SetModem( MODEM_FSK );
 80080d6:	2000      	movs	r0, #0
 80080d8:	f001 fb94 	bl	8009804 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 80080dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008108 <SX1276Init+0xb8>)
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 80080e4:	bf00      	nop
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	2000033c 	.word	0x2000033c
 80080f0:	08009a39 	.word	0x08009a39
 80080f4:	200005b0 	.word	0x200005b0
 80080f8:	200005c4 	.word	0x200005c4
 80080fc:	200005d8 	.word	0x200005d8
 8008100:	20000024 	.word	0x20000024
 8008104:	0800bc10 	.word	0x0800bc10
 8008108:	20000440 	.word	0x20000440

0800810c <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 800810c:	b480      	push	{r7}
 800810e:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8008110:	4b03      	ldr	r3, [pc, #12]	@ (8008120 <SX1276GetStatus+0x14>)
 8008112:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
}
 8008116:	4618      	mov	r0, r3
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	20000440 	.word	0x20000440
 8008124:	00000000 	.word	0x00000000

08008128 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
    SX1276.Settings.Channel = freq;
 8008130:	4a17      	ldr	r2, [pc, #92]	@ (8008190 <SX1276SetChannel+0x68>)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7f8 f9e7 	bl	800050c <__aeabi_ui2d>
 800813e:	a312      	add	r3, pc, #72	@ (adr r3, 8008188 <SX1276SetChannel+0x60>)
 8008140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008144:	f7f8 fb86 	bl	8000854 <__aeabi_ddiv>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4610      	mov	r0, r2
 800814e:	4619      	mov	r1, r3
 8008150:	f7f8 fd18 	bl	8000b84 <__aeabi_d2uiz>
 8008154:	4603      	mov	r3, r0
 8008156:	607b      	str	r3, [r7, #4]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	0c1b      	lsrs	r3, r3, #16
 800815c:	b2db      	uxtb	r3, r3
 800815e:	4619      	mov	r1, r3
 8008160:	2006      	movs	r0, #6
 8008162:	f001 fb91 	bl	8009888 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	0a1b      	lsrs	r3, r3, #8
 800816a:	b2db      	uxtb	r3, r3
 800816c:	4619      	mov	r1, r3
 800816e:	2007      	movs	r0, #7
 8008170:	f001 fb8a 	bl	8009888 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	4619      	mov	r1, r3
 800817a:	2008      	movs	r0, #8
 800817c:	f001 fb84 	bl	8009888 <SX1276Write>
}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	00000000 	.word	0x00000000
 800818c:	404e8480 	.word	0x404e8480
 8008190:	20000440 	.word	0x20000440

08008194 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
 80081a0:	4613      	mov	r3, r2
 80081a2:	80bb      	strh	r3, [r7, #4]
    int16_t rssi = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	81fb      	strh	r3, [r7, #14]

    SX1276SetModem( modem );
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f001 fb2a 	bl	8009804 <SX1276SetModem>

    SX1276SetChannel( freq );
 80081b0:	6838      	ldr	r0, [r7, #0]
 80081b2:	f7ff ffb9 	bl	8008128 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80081b6:	2005      	movs	r0, #5
 80081b8:	f001 faf6 	bl	80097a8 <SX1276SetOpMode>

    DelayMs( 1 );
 80081bc:	2001      	movs	r0, #1
 80081be:	f7fe fa81 	bl	80066c4 <DelayMs>

    rssi = SX1276ReadRssi( modem );
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f001 fa91 	bl	80096ec <SX1276ReadRssi>
 80081ca:	4603      	mov	r3, r0
 80081cc:	81fb      	strh	r3, [r7, #14]

    SX1276SetSleep( );
 80081ce:	f000 ff6b 	bl	80090a8 <SX1276SetSleep>

    if( rssi > rssiThresh )
 80081d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80081d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80081da:	429a      	cmp	r2, r3
 80081dc:	dd01      	ble.n	80081e2 <SX1276IsChannelFree+0x4e>
    {
        return false;
 80081de:	2300      	movs	r3, #0
 80081e0:	e000      	b.n	80081e4 <SX1276IsChannelFree+0x50>
    }
    return true;
 80081e2:	2301      	movs	r3, #1
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <SX1276Random>:

uint32_t SX1276Random( void )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80081f6:	2001      	movs	r0, #1
 80081f8:	f001 fb04 	bl	8009804 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80081fc:	21ff      	movs	r1, #255	@ 0xff
 80081fe:	2011      	movs	r0, #17
 8008200:	f001 fb42 	bl	8009888 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8008204:	2005      	movs	r0, #5
 8008206:	f001 facf 	bl	80097a8 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 800820a:	2300      	movs	r3, #0
 800820c:	71fb      	strb	r3, [r7, #7]
 800820e:	e011      	b.n	8008234 <SX1276Random+0x48>
    {
        DelayMs( 1 );
 8008210:	2001      	movs	r0, #1
 8008212:	f7fe fa57 	bl	80066c4 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8008216:	202c      	movs	r0, #44	@ 0x2c
 8008218:	f001 fb48 	bl	80098ac <SX1276Read>
 800821c:	4603      	mov	r3, r0
 800821e:	f003 0201 	and.w	r2, r3, #1
 8008222:	79fb      	ldrb	r3, [r7, #7]
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	4313      	orrs	r3, r2
 800822c:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	3301      	adds	r3, #1
 8008232:	71fb      	strb	r3, [r7, #7]
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	2b1f      	cmp	r3, #31
 8008238:	d9ea      	bls.n	8008210 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 800823a:	f000 ff35 	bl	80090a8 <SX1276SetSleep>

    return rnd;
 800823e:	683b      	ldr	r3, [r7, #0]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8008248:	b590      	push	{r4, r7, lr}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800824e:	2009      	movs	r0, #9
 8008250:	f001 fb2c 	bl	80098ac <SX1276Read>
 8008254:	4603      	mov	r3, r0
 8008256:	71fb      	strb	r3, [r7, #7]
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008258:	2006      	movs	r0, #6
 800825a:	f001 fb27 	bl	80098ac <SX1276Read>
 800825e:	4603      	mov	r3, r0
 8008260:	041c      	lsls	r4, r3, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8008262:	2007      	movs	r0, #7
 8008264:	f001 fb22 	bl	80098ac <SX1276Read>
 8008268:	4603      	mov	r3, r0
 800826a:	021b      	lsls	r3, r3, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800826c:	431c      	orrs	r4, r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800826e:	2008      	movs	r0, #8
 8008270:	f001 fb1c 	bl	80098ac <SX1276Read>
 8008274:	4603      	mov	r3, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8008276:	4323      	orrs	r3, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008278:	4618      	mov	r0, r3
 800827a:	f7f8 f947 	bl	800050c <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800827e:	a325      	add	r3, pc, #148	@ (adr r3, 8008314 <RxChainCalibration+0xcc>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	f7f8 f9bc 	bl	8000600 <__aeabi_dmul>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800828c:	4610      	mov	r0, r2
 800828e:	4619      	mov	r1, r3
 8008290:	f7f8 fc78 	bl	8000b84 <__aeabi_d2uiz>
 8008294:	4603      	mov	r3, r0
 8008296:	603b      	str	r3, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8008298:	2100      	movs	r1, #0
 800829a:	2009      	movs	r0, #9
 800829c:	f001 faf4 	bl	8009888 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80082a0:	203b      	movs	r0, #59	@ 0x3b
 80082a2:	f001 fb03 	bl	80098ac <SX1276Read>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	4619      	mov	r1, r3
 80082b0:	203b      	movs	r0, #59	@ 0x3b
 80082b2:	f001 fae9 	bl	8009888 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80082b6:	bf00      	nop
 80082b8:	203b      	movs	r0, #59	@ 0x3b
 80082ba:	f001 faf7 	bl	80098ac <SX1276Read>
 80082be:	4603      	mov	r3, r0
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d0f7      	beq.n	80082b8 <RxChainCalibration+0x70>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 80082c8:	4811      	ldr	r0, [pc, #68]	@ (8008310 <RxChainCalibration+0xc8>)
 80082ca:	f7ff ff2d 	bl	8008128 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80082ce:	203b      	movs	r0, #59	@ 0x3b
 80082d0:	f001 faec 	bl	80098ac <SX1276Read>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	4619      	mov	r1, r3
 80082de:	203b      	movs	r0, #59	@ 0x3b
 80082e0:	f001 fad2 	bl	8009888 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80082e4:	bf00      	nop
 80082e6:	203b      	movs	r0, #59	@ 0x3b
 80082e8:	f001 fae0 	bl	80098ac <SX1276Read>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b20      	cmp	r3, #32
 80082f4:	d0f7      	beq.n	80082e6 <RxChainCalibration+0x9e>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	4619      	mov	r1, r3
 80082fa:	2009      	movs	r0, #9
 80082fc:	f001 fac4 	bl	8009888 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8008300:	6838      	ldr	r0, [r7, #0]
 8008302:	f7ff ff11 	bl	8008128 <SX1276SetChannel>
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	bd90      	pop	{r4, r7, pc}
 800830e:	bf00      	nop
 8008310:	33bca100 	.word	0x33bca100
 8008314:	00000000 	.word	0x00000000
 8008318:	404e8480 	.word	0x404e8480

0800831c <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8008324:	2300      	movs	r3, #0
 8008326:	73fb      	strb	r3, [r7, #15]
 8008328:	e017      	b.n	800835a <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	4a10      	ldr	r2, [pc, #64]	@ (8008370 <GetFskBandwidthRegValue+0x54>)
 800832e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	429a      	cmp	r2, r3
 8008336:	d30d      	bcc.n	8008354 <GetFskBandwidthRegValue+0x38>
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	3301      	adds	r3, #1
 800833c:	4a0c      	ldr	r2, [pc, #48]	@ (8008370 <GetFskBandwidthRegValue+0x54>)
 800833e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	429a      	cmp	r2, r3
 8008346:	d205      	bcs.n	8008354 <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	4a09      	ldr	r2, [pc, #36]	@ (8008370 <GetFskBandwidthRegValue+0x54>)
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	4413      	add	r3, r2
 8008350:	791b      	ldrb	r3, [r3, #4]
 8008352:	e007      	b.n	8008364 <GetFskBandwidthRegValue+0x48>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	3301      	adds	r3, #1
 8008358:	73fb      	strb	r3, [r7, #15]
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	2b14      	cmp	r3, #20
 800835e:	d9e4      	bls.n	800832a <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8008360:	bf00      	nop
 8008362:	e7fd      	b.n	8008360 <GetFskBandwidthRegValue+0x44>
}
 8008364:	4618      	mov	r0, r3
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	0800bc44 	.word	0x0800bc44
 8008374:	00000000 	.word	0x00000000

08008378 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	607a      	str	r2, [r7, #4]
 8008382:	461a      	mov	r2, r3
 8008384:	4603      	mov	r3, r0
 8008386:	73fb      	strb	r3, [r7, #15]
 8008388:	4613      	mov	r3, r2
 800838a:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	4618      	mov	r0, r3
 8008390:	f001 fa38 	bl	8009804 <SX1276SetModem>

    switch( modem )
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <SX1276SetRxConfig+0x2a>
 800839a:	2b01      	cmp	r3, #1
 800839c:	f000 8095 	beq.w	80084ca <SX1276SetRxConfig+0x152>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80083a0:	e1c4      	b.n	800872c <SX1276SetRxConfig+0x3b4>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80083a2:	4a79      	ldr	r2, [pc, #484]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
            SX1276.Settings.Fsk.Datarate = datarate;
 80083aa:	4a77      	ldr	r2, [pc, #476]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80083b2:	4a75      	ldr	r2, [pc, #468]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
            SX1276.Settings.Fsk.FixLen = fixLen;
 80083ba:	4a73      	ldr	r2, [pc, #460]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80083bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80083c0:	f882 3132 	strb.w	r3, [r2, #306]	@ 0x132
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80083c4:	4a70      	ldr	r2, [pc, #448]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80083c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80083ca:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80083ce:	4a6e      	ldr	r2, [pc, #440]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80083d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80083d4:	f882 3134 	strb.w	r3, [r2, #308]	@ 0x134
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80083d8:	4a6b      	ldr	r2, [pc, #428]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80083da:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80083de:	f882 3135 	strb.w	r3, [r2, #309]	@ 0x135
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80083e2:	4a69      	ldr	r2, [pc, #420]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80083e4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80083e8:	f882 3136 	strb.w	r3, [r2, #310]	@ 0x136
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80083ec:	4a66      	ldr	r2, [pc, #408]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80083ee:	8bbb      	ldrh	r3, [r7, #28]
 80083f0:	f8a2 3130 	strh.w	r3, [r2, #304]	@ 0x130
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7f8 f889 	bl	800050c <__aeabi_ui2d>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	a160      	add	r1, pc, #384	@ (adr r1, 8008580 <SX1276SetRxConfig+0x208>)
 8008400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008404:	f7f8 fa26 	bl	8000854 <__aeabi_ddiv>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4610      	mov	r0, r2
 800840e:	4619      	mov	r1, r3
 8008410:	f7f8 fbb8 	bl	8000b84 <__aeabi_d2uiz>
 8008414:	4603      	mov	r3, r0
 8008416:	b29b      	uxth	r3, r3
 8008418:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	0a1b      	lsrs	r3, r3, #8
 800841e:	b2db      	uxtb	r3, r3
 8008420:	4619      	mov	r1, r3
 8008422:	2002      	movs	r0, #2
 8008424:	f001 fa30 	bl	8009888 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	b2db      	uxtb	r3, r3
 800842c:	4619      	mov	r1, r3
 800842e:	2003      	movs	r0, #3
 8008430:	f001 fa2a 	bl	8009888 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8008434:	68b8      	ldr	r0, [r7, #8]
 8008436:	f7ff ff71 	bl	800831c <GetFskBandwidthRegValue>
 800843a:	4603      	mov	r3, r0
 800843c:	4619      	mov	r1, r3
 800843e:	2012      	movs	r0, #18
 8008440:	f001 fa22 	bl	8009888 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8008444:	69b8      	ldr	r0, [r7, #24]
 8008446:	f7ff ff69 	bl	800831c <GetFskBandwidthRegValue>
 800844a:	4603      	mov	r3, r0
 800844c:	4619      	mov	r1, r3
 800844e:	2013      	movs	r0, #19
 8008450:	f001 fa1a 	bl	8009888 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8008454:	8bbb      	ldrh	r3, [r7, #28]
 8008456:	0a1b      	lsrs	r3, r3, #8
 8008458:	b29b      	uxth	r3, r3
 800845a:	b2db      	uxtb	r3, r3
 800845c:	4619      	mov	r1, r3
 800845e:	2025      	movs	r0, #37	@ 0x25
 8008460:	f001 fa12 	bl	8009888 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8008464:	8bbb      	ldrh	r3, [r7, #28]
 8008466:	b2db      	uxtb	r3, r3
 8008468:	4619      	mov	r1, r3
 800846a:	2026      	movs	r0, #38	@ 0x26
 800846c:	f001 fa0c 	bl	8009888 <SX1276Write>
            if( fixLen == 1 )
 8008470:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008474:	2b00      	cmp	r3, #0
 8008476:	d006      	beq.n	8008486 <SX1276SetRxConfig+0x10e>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8008478:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800847c:	4619      	mov	r1, r3
 800847e:	2032      	movs	r0, #50	@ 0x32
 8008480:	f001 fa02 	bl	8009888 <SX1276Write>
 8008484:	e003      	b.n	800848e <SX1276SetRxConfig+0x116>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8008486:	21ff      	movs	r1, #255	@ 0xff
 8008488:	2032      	movs	r0, #50	@ 0x32
 800848a:	f001 f9fd 	bl	8009888 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800848e:	2030      	movs	r0, #48	@ 0x30
 8008490:	f001 fa0c 	bl	80098ac <SX1276Read>
 8008494:	4603      	mov	r3, r0
 8008496:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8008498:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 800849c:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800849e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	d001      	beq.n	80084aa <SX1276SetRxConfig+0x132>
 80084a6:	2200      	movs	r2, #0
 80084a8:	e001      	b.n	80084ae <SX1276SetRxConfig+0x136>
 80084aa:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80084ae:	4313      	orrs	r3, r2
 80084b0:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 80084b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80084b6:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80084b8:	b25b      	sxtb	r3, r3
 80084ba:	4313      	orrs	r3, r2
 80084bc:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	4619      	mov	r1, r3
 80084c2:	2030      	movs	r0, #48	@ 0x30
 80084c4:	f001 f9e0 	bl	8009888 <SX1276Write>
        break;
 80084c8:	e130      	b.n	800872c <SX1276SetRxConfig+0x3b4>
            if( bandwidth > 2 )
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d901      	bls.n	80084d4 <SX1276SetRxConfig+0x15c>
                while( 1 );
 80084d0:	bf00      	nop
 80084d2:	e7fd      	b.n	80084d0 <SX1276SetRxConfig+0x158>
            bandwidth += 7;
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	3307      	adds	r3, #7
 80084d8:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80084da:	4a2b      	ldr	r2, [pc, #172]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
            SX1276.Settings.LoRa.Datarate = datarate;
 80084e2:	4a29      	ldr	r2, [pc, #164]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
            SX1276.Settings.LoRa.Coderate = coderate;
 80084ea:	4a27      	ldr	r2, [pc, #156]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	f882 3159 	strb.w	r3, [r2, #345]	@ 0x159
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80084f2:	4a25      	ldr	r2, [pc, #148]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80084f4:	8bbb      	ldrh	r3, [r7, #28]
 80084f6:	f8a2 315a 	strh.w	r3, [r2, #346]	@ 0x15a
            SX1276.Settings.LoRa.FixLen = fixLen;
 80084fa:	4a23      	ldr	r2, [pc, #140]	@ (8008588 <SX1276SetRxConfig+0x210>)
 80084fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008500:	f882 315c 	strb.w	r3, [r2, #348]	@ 0x15c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8008504:	4a20      	ldr	r2, [pc, #128]	@ (8008588 <SX1276SetRxConfig+0x210>)
 8008506:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800850a:	f882 315d 	strb.w	r3, [r2, #349]	@ 0x15d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800850e:	4a1e      	ldr	r2, [pc, #120]	@ (8008588 <SX1276SetRxConfig+0x210>)
 8008510:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008514:	f882 315e 	strb.w	r3, [r2, #350]	@ 0x15e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8008518:	4a1b      	ldr	r2, [pc, #108]	@ (8008588 <SX1276SetRxConfig+0x210>)
 800851a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800851e:	f882 315f 	strb.w	r3, [r2, #351]	@ 0x15f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8008522:	4a19      	ldr	r2, [pc, #100]	@ (8008588 <SX1276SetRxConfig+0x210>)
 8008524:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008528:	f882 3160 	strb.w	r3, [r2, #352]	@ 0x160
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800852c:	4a16      	ldr	r2, [pc, #88]	@ (8008588 <SX1276SetRxConfig+0x210>)
 800852e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008532:	f882 3161 	strb.w	r3, [r2, #353]	@ 0x161
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8008536:	4a14      	ldr	r2, [pc, #80]	@ (8008588 <SX1276SetRxConfig+0x210>)
 8008538:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800853c:	f882 3162 	strb.w	r3, [r2, #354]	@ 0x162
            if( datarate > 12 )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b0c      	cmp	r3, #12
 8008544:	d902      	bls.n	800854c <SX1276SetRxConfig+0x1d4>
                datarate = 12;
 8008546:	230c      	movs	r3, #12
 8008548:	607b      	str	r3, [r7, #4]
 800854a:	e004      	b.n	8008556 <SX1276SetRxConfig+0x1de>
            else if( datarate < 6 )
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b05      	cmp	r3, #5
 8008550:	d801      	bhi.n	8008556 <SX1276SetRxConfig+0x1de>
                datarate = 6;
 8008552:	2306      	movs	r3, #6
 8008554:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b07      	cmp	r3, #7
 800855a:	d105      	bne.n	8008568 <SX1276SetRxConfig+0x1f0>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b0b      	cmp	r3, #11
 8008560:	d008      	beq.n	8008574 <SX1276SetRxConfig+0x1fc>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b0c      	cmp	r3, #12
 8008566:	d005      	beq.n	8008574 <SX1276SetRxConfig+0x1fc>
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2b08      	cmp	r3, #8
 800856c:	d10e      	bne.n	800858c <SX1276SetRxConfig+0x214>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b0c      	cmp	r3, #12
 8008572:	d10b      	bne.n	800858c <SX1276SetRxConfig+0x214>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8008574:	4b04      	ldr	r3, [pc, #16]	@ (8008588 <SX1276SetRxConfig+0x210>)
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
 800857c:	e00a      	b.n	8008594 <SX1276SetRxConfig+0x21c>
 800857e:	bf00      	nop
 8008580:	00000000 	.word	0x00000000
 8008584:	417e8480 	.word	0x417e8480
 8008588:	20000440 	.word	0x20000440
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800858c:	4b69      	ldr	r3, [pc, #420]	@ (8008734 <SX1276SetRxConfig+0x3bc>)
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8008594:	201d      	movs	r0, #29
 8008596:	f001 f989 	bl	80098ac <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	4313      	orrs	r3, r2
 80085aa:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80085ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80085b0:	4313      	orrs	r3, r2
 80085b2:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80085b4:	4619      	mov	r1, r3
 80085b6:	201d      	movs	r0, #29
 80085b8:	f001 f966 	bl	8009888 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80085bc:	201e      	movs	r0, #30
 80085be:	f001 f975 	bl	80098ac <SX1276Read>
 80085c2:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 80085d2:	4313      	orrs	r3, r2
 80085d4:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80085d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	4313      	orrs	r3, r2
 80085e0:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80085e2:	8c3b      	ldrh	r3, [r7, #32]
 80085e4:	0a1b      	lsrs	r3, r3, #8
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	f003 0303 	and.w	r3, r3, #3
 80085ee:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80085f0:	4313      	orrs	r3, r2
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	4619      	mov	r1, r3
 80085f6:	201e      	movs	r0, #30
 80085f8:	f001 f946 	bl	8009888 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80085fc:	2026      	movs	r0, #38	@ 0x26
 80085fe:	f001 f955 	bl	80098ac <SX1276Read>
 8008602:	4603      	mov	r3, r0
 8008604:	b25b      	sxtb	r3, r3
 8008606:	f023 0308 	bic.w	r3, r3, #8
 800860a:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800860c:	4b49      	ldr	r3, [pc, #292]	@ (8008734 <SX1276SetRxConfig+0x3bc>)
 800860e:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8008612:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8008614:	b25b      	sxtb	r3, r3
 8008616:	4313      	orrs	r3, r2
 8008618:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800861a:	b2db      	uxtb	r3, r3
 800861c:	4619      	mov	r1, r3
 800861e:	2026      	movs	r0, #38	@ 0x26
 8008620:	f001 f932 	bl	8009888 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8008624:	8c3b      	ldrh	r3, [r7, #32]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	4619      	mov	r1, r3
 800862a:	201f      	movs	r0, #31
 800862c:	f001 f92c 	bl	8009888 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8008630:	8bbb      	ldrh	r3, [r7, #28]
 8008632:	0a1b      	lsrs	r3, r3, #8
 8008634:	b29b      	uxth	r3, r3
 8008636:	b2db      	uxtb	r3, r3
 8008638:	4619      	mov	r1, r3
 800863a:	2020      	movs	r0, #32
 800863c:	f001 f924 	bl	8009888 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8008640:	8bbb      	ldrh	r3, [r7, #28]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	4619      	mov	r1, r3
 8008646:	2021      	movs	r0, #33	@ 0x21
 8008648:	f001 f91e 	bl	8009888 <SX1276Write>
            if( fixLen == 1 )
 800864c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008650:	2b00      	cmp	r3, #0
 8008652:	d005      	beq.n	8008660 <SX1276SetRxConfig+0x2e8>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8008654:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008658:	4619      	mov	r1, r3
 800865a:	2022      	movs	r0, #34	@ 0x22
 800865c:	f001 f914 	bl	8009888 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008660:	4b34      	ldr	r3, [pc, #208]	@ (8008734 <SX1276SetRxConfig+0x3bc>)
 8008662:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8008666:	2b00      	cmp	r3, #0
 8008668:	d011      	beq.n	800868e <SX1276SetRxConfig+0x316>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800866a:	2044      	movs	r0, #68	@ 0x44
 800866c:	f001 f91e 	bl	80098ac <SX1276Read>
 8008670:	4603      	mov	r3, r0
 8008672:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008676:	b2db      	uxtb	r3, r3
 8008678:	4619      	mov	r1, r3
 800867a:	2044      	movs	r0, #68	@ 0x44
 800867c:	f001 f904 	bl	8009888 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8008680:	4b2c      	ldr	r3, [pc, #176]	@ (8008734 <SX1276SetRxConfig+0x3bc>)
 8008682:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8008686:	4619      	mov	r1, r3
 8008688:	2024      	movs	r0, #36	@ 0x24
 800868a:	f001 f8fd 	bl	8009888 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2b09      	cmp	r3, #9
 8008692:	d10e      	bne.n	80086b2 <SX1276SetRxConfig+0x33a>
 8008694:	4b27      	ldr	r3, [pc, #156]	@ (8008734 <SX1276SetRxConfig+0x3bc>)
 8008696:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800869a:	4a27      	ldr	r2, [pc, #156]	@ (8008738 <SX1276SetRxConfig+0x3c0>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d908      	bls.n	80086b2 <SX1276SetRxConfig+0x33a>
                SX1276Write( REG_LR_TEST36, 0x02 );
 80086a0:	2102      	movs	r1, #2
 80086a2:	2036      	movs	r0, #54	@ 0x36
 80086a4:	f001 f8f0 	bl	8009888 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 80086a8:	2164      	movs	r1, #100	@ 0x64
 80086aa:	203a      	movs	r0, #58	@ 0x3a
 80086ac:	f001 f8ec 	bl	8009888 <SX1276Write>
 80086b0:	e00f      	b.n	80086d2 <SX1276SetRxConfig+0x35a>
            else if( bandwidth == 9 )
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b09      	cmp	r3, #9
 80086b6:	d108      	bne.n	80086ca <SX1276SetRxConfig+0x352>
                SX1276Write( REG_LR_TEST36, 0x02 );
 80086b8:	2102      	movs	r1, #2
 80086ba:	2036      	movs	r0, #54	@ 0x36
 80086bc:	f001 f8e4 	bl	8009888 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 80086c0:	217f      	movs	r1, #127	@ 0x7f
 80086c2:	203a      	movs	r0, #58	@ 0x3a
 80086c4:	f001 f8e0 	bl	8009888 <SX1276Write>
 80086c8:	e003      	b.n	80086d2 <SX1276SetRxConfig+0x35a>
                SX1276Write( REG_LR_TEST36, 0x03 );
 80086ca:	2103      	movs	r1, #3
 80086cc:	2036      	movs	r0, #54	@ 0x36
 80086ce:	f001 f8db 	bl	8009888 <SX1276Write>
            if( datarate == 6 )
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b06      	cmp	r3, #6
 80086d6:	d114      	bne.n	8008702 <SX1276SetRxConfig+0x38a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80086d8:	2031      	movs	r0, #49	@ 0x31
 80086da:	f001 f8e7 	bl	80098ac <SX1276Read>
 80086de:	4603      	mov	r3, r0
 80086e0:	b25b      	sxtb	r3, r3
 80086e2:	f023 0307 	bic.w	r3, r3, #7
 80086e6:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80086e8:	f043 0305 	orr.w	r3, r3, #5
 80086ec:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	4619      	mov	r1, r3
 80086f2:	2031      	movs	r0, #49	@ 0x31
 80086f4:	f001 f8c8 	bl	8009888 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80086f8:	210c      	movs	r1, #12
 80086fa:	2037      	movs	r0, #55	@ 0x37
 80086fc:	f001 f8c4 	bl	8009888 <SX1276Write>
        break;
 8008700:	e013      	b.n	800872a <SX1276SetRxConfig+0x3b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8008702:	2031      	movs	r0, #49	@ 0x31
 8008704:	f001 f8d2 	bl	80098ac <SX1276Read>
 8008708:	4603      	mov	r3, r0
 800870a:	b25b      	sxtb	r3, r3
 800870c:	f023 0307 	bic.w	r3, r3, #7
 8008710:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8008712:	f043 0303 	orr.w	r3, r3, #3
 8008716:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8008718:	b2db      	uxtb	r3, r3
 800871a:	4619      	mov	r1, r3
 800871c:	2031      	movs	r0, #49	@ 0x31
 800871e:	f001 f8b3 	bl	8009888 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8008722:	210a      	movs	r1, #10
 8008724:	2037      	movs	r0, #55	@ 0x37
 8008726:	f001 f8af 	bl	8009888 <SX1276Write>
        break;
 800872a:	bf00      	nop
}
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20000440 	.word	0x20000440
 8008738:	1f4add40 	.word	0x1f4add40
 800873c:	00000000 	.word	0x00000000

08008740 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008740:	b590      	push	{r4, r7, lr}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	60ba      	str	r2, [r7, #8]
 8008748:	607b      	str	r3, [r7, #4]
 800874a:	4603      	mov	r3, r0
 800874c:	73fb      	strb	r3, [r7, #15]
 800874e:	460b      	mov	r3, r1
 8008750:	73bb      	strb	r3, [r7, #14]
    uint8_t paConfig = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	75fb      	strb	r3, [r7, #23]
    uint8_t paDac = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	75bb      	strb	r3, [r7, #22]

    SX1276SetModem( modem );
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	4618      	mov	r0, r3
 800875e:	f001 f851 	bl	8009804 <SX1276SetModem>

    paConfig = SX1276Read( REG_PACONFIG );
 8008762:	2009      	movs	r0, #9
 8008764:	f001 f8a2 	bl	80098ac <SX1276Read>
 8008768:	4603      	mov	r3, r0
 800876a:	75fb      	strb	r3, [r7, #23]
    paDac = SX1276Read( REG_PADAC );
 800876c:	204d      	movs	r0, #77	@ 0x4d
 800876e:	f001 f89d 	bl	80098ac <SX1276Read>
 8008772:	4603      	mov	r3, r0
 8008774:	75bb      	strb	r3, [r7, #22]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 8008776:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800877a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800877e:	b25c      	sxtb	r4, r3
 8008780:	4bb3      	ldr	r3, [pc, #716]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 8008782:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8008786:	4618      	mov	r0, r3
 8008788:	f7ff f95e 	bl	8007a48 <SX1276GetPaSelect>
 800878c:	4603      	mov	r3, r0
 800878e:	b25b      	sxtb	r3, r3
 8008790:	4323      	orrs	r3, r4
 8008792:	b25b      	sxtb	r3, r3
 8008794:	75fb      	strb	r3, [r7, #23]
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800879c:	75fb      	strb	r3, [r7, #23]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800879e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	da4e      	bge.n	8008844 <SX1276SetTxConfig+0x104>
    {
        if( power > 17 )
 80087a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087aa:	2b11      	cmp	r3, #17
 80087ac:	dd04      	ble.n	80087b8 <SX1276SetTxConfig+0x78>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80087ae:	7dbb      	ldrb	r3, [r7, #22]
 80087b0:	f043 0307 	orr.w	r3, r3, #7
 80087b4:	75bb      	strb	r3, [r7, #22]
 80087b6:	e008      	b.n	80087ca <SX1276SetTxConfig+0x8a>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80087b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80087bc:	f023 0307 	bic.w	r3, r3, #7
 80087c0:	b25b      	sxtb	r3, r3
 80087c2:	f043 0304 	orr.w	r3, r3, #4
 80087c6:	b25b      	sxtb	r3, r3
 80087c8:	75bb      	strb	r3, [r7, #22]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 80087ca:	7dbb      	ldrb	r3, [r7, #22]
 80087cc:	f003 0307 	and.w	r3, r3, #7
 80087d0:	2b07      	cmp	r3, #7
 80087d2:	d11b      	bne.n	800880c <SX1276SetTxConfig+0xcc>
        {
            if( power < 5 )
 80087d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087d8:	2b04      	cmp	r3, #4
 80087da:	dc01      	bgt.n	80087e0 <SX1276SetTxConfig+0xa0>
            {
                power = 5;
 80087dc:	2305      	movs	r3, #5
 80087de:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 20 )
 80087e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e4:	2b14      	cmp	r3, #20
 80087e6:	dd01      	ble.n	80087ec <SX1276SetTxConfig+0xac>
            {
                power = 20;
 80087e8:	2314      	movs	r3, #20
 80087ea:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80087ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087f0:	f023 030f 	bic.w	r3, r3, #15
 80087f4:	b25a      	sxtb	r2, r3
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	3b05      	subs	r3, #5
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	b25b      	sxtb	r3, r3
 80087fe:	f003 030f 	and.w	r3, r3, #15
 8008802:	b25b      	sxtb	r3, r3
 8008804:	4313      	orrs	r3, r2
 8008806:	b25b      	sxtb	r3, r3
 8008808:	75fb      	strb	r3, [r7, #23]
 800880a:	e037      	b.n	800887c <SX1276SetTxConfig+0x13c>
        }
        else
        {
            if( power < 2 )
 800880c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008810:	2b01      	cmp	r3, #1
 8008812:	dc01      	bgt.n	8008818 <SX1276SetTxConfig+0xd8>
            {
                power = 2;
 8008814:	2302      	movs	r3, #2
 8008816:	73bb      	strb	r3, [r7, #14]
            }
            if( power > 17 )
 8008818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800881c:	2b11      	cmp	r3, #17
 800881e:	dd01      	ble.n	8008824 <SX1276SetTxConfig+0xe4>
            {
                power = 17;
 8008820:	2311      	movs	r3, #17
 8008822:	73bb      	strb	r3, [r7, #14]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8008824:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008828:	f023 030f 	bic.w	r3, r3, #15
 800882c:	b25a      	sxtb	r2, r3
 800882e:	7bbb      	ldrb	r3, [r7, #14]
 8008830:	3b02      	subs	r3, #2
 8008832:	b2db      	uxtb	r3, r3
 8008834:	b25b      	sxtb	r3, r3
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	b25b      	sxtb	r3, r3
 800883c:	4313      	orrs	r3, r2
 800883e:	b25b      	sxtb	r3, r3
 8008840:	75fb      	strb	r3, [r7, #23]
 8008842:	e01b      	b.n	800887c <SX1276SetTxConfig+0x13c>
        }
    }
    else
    {
        if( power < -1 )
 8008844:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884c:	da01      	bge.n	8008852 <SX1276SetTxConfig+0x112>
        {
            power = -1;
 800884e:	23ff      	movs	r3, #255	@ 0xff
 8008850:	73bb      	strb	r3, [r7, #14]
        }
        if( power > 14 )
 8008852:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008856:	2b0e      	cmp	r3, #14
 8008858:	dd01      	ble.n	800885e <SX1276SetTxConfig+0x11e>
        {
            power = 14;
 800885a:	230e      	movs	r3, #14
 800885c:	73bb      	strb	r3, [r7, #14]
        }
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 800885e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008862:	f023 030f 	bic.w	r3, r3, #15
 8008866:	b25a      	sxtb	r2, r3
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	3301      	adds	r3, #1
 800886c:	b2db      	uxtb	r3, r3
 800886e:	b25b      	sxtb	r3, r3
 8008870:	f003 030f 	and.w	r3, r3, #15
 8008874:	b25b      	sxtb	r3, r3
 8008876:	4313      	orrs	r3, r2
 8008878:	b25b      	sxtb	r3, r3
 800887a:	75fb      	strb	r3, [r7, #23]
    }
    SX1276Write( REG_PACONFIG, paConfig );
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	4619      	mov	r1, r3
 8008880:	2009      	movs	r0, #9
 8008882:	f001 f801 	bl	8009888 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8008886:	7dbb      	ldrb	r3, [r7, #22]
 8008888:	4619      	mov	r1, r3
 800888a:	204d      	movs	r0, #77	@ 0x4d
 800888c:	f000 fffc 	bl	8009888 <SX1276Write>

    switch( modem )
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <SX1276SetTxConfig+0x15e>
 8008896:	2b01      	cmp	r3, #1
 8008898:	f000 8092 	beq.w	80089c0 <SX1276SetTxConfig+0x280>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800889c:	e189      	b.n	8008bb2 <SX1276SetTxConfig+0x472>
            SX1276.Settings.Fsk.Power = power;
 800889e:	4a6c      	ldr	r2, [pc, #432]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80088a0:	7bbb      	ldrb	r3, [r7, #14]
 80088a2:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
            SX1276.Settings.Fsk.Fdev = fdev;
 80088a6:	4a6a      	ldr	r2, [pc, #424]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80088ae:	4a68      	ldr	r2, [pc, #416]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
            SX1276.Settings.Fsk.Datarate = datarate;
 80088b6:	4a66      	ldr	r2, [pc, #408]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80088b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ba:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80088be:	4a64      	ldr	r2, [pc, #400]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80088c0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80088c2:	f8a2 3130 	strh.w	r3, [r2, #304]	@ 0x130
            SX1276.Settings.Fsk.FixLen = fixLen;
 80088c6:	4a62      	ldr	r2, [pc, #392]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80088c8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80088cc:	f882 3132 	strb.w	r3, [r2, #306]	@ 0x132
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80088d0:	4a5f      	ldr	r2, [pc, #380]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80088d2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80088d6:	f882 3134 	strb.w	r3, [r2, #308]	@ 0x134
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80088da:	4a5d      	ldr	r2, [pc, #372]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80088dc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80088e0:	f882 3135 	strb.w	r3, [r2, #309]	@ 0x135
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80088e4:	4a5a      	ldr	r2, [pc, #360]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80088e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088e8:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 80088ec:	68b8      	ldr	r0, [r7, #8]
 80088ee:	f7f7 fe0d 	bl	800050c <__aeabi_ui2d>
 80088f2:	a353      	add	r3, pc, #332	@ (adr r3, 8008a40 <SX1276SetTxConfig+0x300>)
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f7f7 ffac 	bl	8000854 <__aeabi_ddiv>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4610      	mov	r0, r2
 8008902:	4619      	mov	r1, r3
 8008904:	f7f8 f93e 	bl	8000b84 <__aeabi_d2uiz>
 8008908:	4603      	mov	r3, r0
 800890a:	b29b      	uxth	r3, r3
 800890c:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	0a1b      	lsrs	r3, r3, #8
 8008912:	b2db      	uxtb	r3, r3
 8008914:	4619      	mov	r1, r3
 8008916:	2004      	movs	r0, #4
 8008918:	f000 ffb6 	bl	8009888 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	b2db      	uxtb	r3, r3
 8008920:	4619      	mov	r1, r3
 8008922:	2005      	movs	r0, #5
 8008924:	f000 ffb0 	bl	8009888 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8008928:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800892a:	f7f7 fdef 	bl	800050c <__aeabi_ui2d>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	a145      	add	r1, pc, #276	@ (adr r1, 8008a48 <SX1276SetTxConfig+0x308>)
 8008934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008938:	f7f7 ff8c 	bl	8000854 <__aeabi_ddiv>
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4610      	mov	r0, r2
 8008942:	4619      	mov	r1, r3
 8008944:	f7f8 f91e 	bl	8000b84 <__aeabi_d2uiz>
 8008948:	4603      	mov	r3, r0
 800894a:	b29b      	uxth	r3, r3
 800894c:	62bb      	str	r3, [r7, #40]	@ 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800894e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008950:	0a1b      	lsrs	r3, r3, #8
 8008952:	b2db      	uxtb	r3, r3
 8008954:	4619      	mov	r1, r3
 8008956:	2002      	movs	r0, #2
 8008958:	f000 ff96 	bl	8009888 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800895c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895e:	b2db      	uxtb	r3, r3
 8008960:	4619      	mov	r1, r3
 8008962:	2003      	movs	r0, #3
 8008964:	f000 ff90 	bl	8009888 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8008968:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800896a:	0a1b      	lsrs	r3, r3, #8
 800896c:	b29b      	uxth	r3, r3
 800896e:	b2db      	uxtb	r3, r3
 8008970:	4619      	mov	r1, r3
 8008972:	2025      	movs	r0, #37	@ 0x25
 8008974:	f000 ff88 	bl	8009888 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8008978:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800897a:	b2db      	uxtb	r3, r3
 800897c:	4619      	mov	r1, r3
 800897e:	2026      	movs	r0, #38	@ 0x26
 8008980:	f000 ff82 	bl	8009888 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8008984:	2030      	movs	r0, #48	@ 0x30
 8008986:	f000 ff91 	bl	80098ac <SX1276Read>
 800898a:	4603      	mov	r3, r0
 800898c:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800898e:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 8008992:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8008994:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8008998:	2a00      	cmp	r2, #0
 800899a:	d001      	beq.n	80089a0 <SX1276SetTxConfig+0x260>
 800899c:	2200      	movs	r2, #0
 800899e:	e001      	b.n	80089a4 <SX1276SetTxConfig+0x264>
 80089a0:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80089a4:	4313      	orrs	r3, r2
 80089a6:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 80089a8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80089ac:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80089ae:	b25b      	sxtb	r3, r3
 80089b0:	4313      	orrs	r3, r2
 80089b2:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	4619      	mov	r1, r3
 80089b8:	2030      	movs	r0, #48	@ 0x30
 80089ba:	f000 ff65 	bl	8009888 <SX1276Write>
        break;
 80089be:	e0f8      	b.n	8008bb2 <SX1276SetTxConfig+0x472>
            SX1276.Settings.LoRa.Power = power;
 80089c0:	4a23      	ldr	r2, [pc, #140]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	f882 314c 	strb.w	r3, [r2, #332]	@ 0x14c
            if( bandwidth > 2 )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d901      	bls.n	80089d2 <SX1276SetTxConfig+0x292>
                while( 1 );
 80089ce:	bf00      	nop
 80089d0:	e7fd      	b.n	80089ce <SX1276SetTxConfig+0x28e>
            bandwidth += 7;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	3307      	adds	r3, #7
 80089d6:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80089d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
            SX1276.Settings.LoRa.Datarate = datarate;
 80089e0:	4a1b      	ldr	r2, [pc, #108]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80089e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
            SX1276.Settings.LoRa.Coderate = coderate;
 80089e8:	4a19      	ldr	r2, [pc, #100]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80089ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80089ee:	f882 3159 	strb.w	r3, [r2, #345]	@ 0x159
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80089f2:	4a17      	ldr	r2, [pc, #92]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80089f4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80089f6:	f8a2 315a 	strh.w	r3, [r2, #346]	@ 0x15a
            SX1276.Settings.LoRa.FixLen = fixLen;
 80089fa:	4a15      	ldr	r2, [pc, #84]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 80089fc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008a00:	f882 315c 	strb.w	r3, [r2, #348]	@ 0x15c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8008a04:	4a12      	ldr	r2, [pc, #72]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 8008a06:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008a0a:	f882 315f 	strb.w	r3, [r2, #351]	@ 0x15f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8008a0e:	4a10      	ldr	r2, [pc, #64]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 8008a10:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008a14:	f882 3160 	strb.w	r3, [r2, #352]	@ 0x160
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8008a18:	4a0d      	ldr	r2, [pc, #52]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 8008a1a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008a1e:	f882 315e 	strb.w	r3, [r2, #350]	@ 0x15e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8008a22:	4a0b      	ldr	r2, [pc, #44]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 8008a24:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8008a28:	f882 3161 	strb.w	r3, [r2, #353]	@ 0x161
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8008a2c:	4a08      	ldr	r2, [pc, #32]	@ (8008a50 <SX1276SetTxConfig+0x310>)
 8008a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a30:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
            if( datarate > 12 )
 8008a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a36:	2b0c      	cmp	r3, #12
 8008a38:	d90c      	bls.n	8008a54 <SX1276SetTxConfig+0x314>
                datarate = 12;
 8008a3a:	230c      	movs	r3, #12
 8008a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a3e:	e00e      	b.n	8008a5e <SX1276SetTxConfig+0x31e>
 8008a40:	00000000 	.word	0x00000000
 8008a44:	404e8480 	.word	0x404e8480
 8008a48:	00000000 	.word	0x00000000
 8008a4c:	417e8480 	.word	0x417e8480
 8008a50:	20000440 	.word	0x20000440
            else if( datarate < 6 )
 8008a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a56:	2b05      	cmp	r3, #5
 8008a58:	d801      	bhi.n	8008a5e <SX1276SetTxConfig+0x31e>
                datarate = 6;
 8008a5a:	2306      	movs	r3, #6
 8008a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b07      	cmp	r3, #7
 8008a62:	d105      	bne.n	8008a70 <SX1276SetTxConfig+0x330>
 8008a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a66:	2b0b      	cmp	r3, #11
 8008a68:	d008      	beq.n	8008a7c <SX1276SetTxConfig+0x33c>
 8008a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6c:	2b0c      	cmp	r3, #12
 8008a6e:	d005      	beq.n	8008a7c <SX1276SetTxConfig+0x33c>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b08      	cmp	r3, #8
 8008a74:	d107      	bne.n	8008a86 <SX1276SetTxConfig+0x346>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8008a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a78:	2b0c      	cmp	r3, #12
 8008a7a:	d104      	bne.n	8008a86 <SX1276SetTxConfig+0x346>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8008a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8008bbc <SX1276SetTxConfig+0x47c>)
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
 8008a84:	e003      	b.n	8008a8e <SX1276SetTxConfig+0x34e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8008a86:	4b4d      	ldr	r3, [pc, #308]	@ (8008bbc <SX1276SetTxConfig+0x47c>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008a8e:	4b4b      	ldr	r3, [pc, #300]	@ (8008bbc <SX1276SetTxConfig+0x47c>)
 8008a90:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d011      	beq.n	8008abc <SX1276SetTxConfig+0x37c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8008a98:	2044      	movs	r0, #68	@ 0x44
 8008a9a:	f000 ff07 	bl	80098ac <SX1276Read>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	2044      	movs	r0, #68	@ 0x44
 8008aaa:	f000 feed 	bl	8009888 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8008aae:	4b43      	ldr	r3, [pc, #268]	@ (8008bbc <SX1276SetTxConfig+0x47c>)
 8008ab0:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	2024      	movs	r0, #36	@ 0x24
 8008ab8:	f000 fee6 	bl	8009888 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8008abc:	201d      	movs	r0, #29
 8008abe:	f000 fef5 	bl	80098ac <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	011b      	lsls	r3, r3, #4
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8008ad6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8008ada:	4313      	orrs	r3, r2
 8008adc:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8008ade:	4619      	mov	r1, r3
 8008ae0:	201d      	movs	r0, #29
 8008ae2:	f000 fed1 	bl	8009888 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8008ae6:	201e      	movs	r0, #30
 8008ae8:	f000 fee0 	bl	80098ac <SX1276Read>
 8008aec:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 8008aee:	f003 030b 	and.w	r3, r3, #11
 8008af2:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8008af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	011b      	lsls	r3, r3, #4
 8008afa:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8008afc:	4313      	orrs	r3, r2
 8008afe:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8008b00:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	201e      	movs	r0, #30
 8008b10:	f000 feba 	bl	8009888 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8008b14:	2026      	movs	r0, #38	@ 0x26
 8008b16:	f000 fec9 	bl	80098ac <SX1276Read>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	b25b      	sxtb	r3, r3
 8008b1e:	f023 0308 	bic.w	r3, r3, #8
 8008b22:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8008b24:	4b25      	ldr	r3, [pc, #148]	@ (8008bbc <SX1276SetTxConfig+0x47c>)
 8008b26:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8008b2a:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8008b2c:	b25b      	sxtb	r3, r3
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	4619      	mov	r1, r3
 8008b36:	2026      	movs	r0, #38	@ 0x26
 8008b38:	f000 fea6 	bl	8009888 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8008b3c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008b3e:	0a1b      	lsrs	r3, r3, #8
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	4619      	mov	r1, r3
 8008b46:	2020      	movs	r0, #32
 8008b48:	f000 fe9e 	bl	8009888 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8008b4c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	4619      	mov	r1, r3
 8008b52:	2021      	movs	r0, #33	@ 0x21
 8008b54:	f000 fe98 	bl	8009888 <SX1276Write>
            if( datarate == 6 )
 8008b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5a:	2b06      	cmp	r3, #6
 8008b5c:	d114      	bne.n	8008b88 <SX1276SetTxConfig+0x448>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8008b5e:	2031      	movs	r0, #49	@ 0x31
 8008b60:	f000 fea4 	bl	80098ac <SX1276Read>
 8008b64:	4603      	mov	r3, r0
 8008b66:	b25b      	sxtb	r3, r3
 8008b68:	f023 0307 	bic.w	r3, r3, #7
 8008b6c:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8008b6e:	f043 0305 	orr.w	r3, r3, #5
 8008b72:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	4619      	mov	r1, r3
 8008b78:	2031      	movs	r0, #49	@ 0x31
 8008b7a:	f000 fe85 	bl	8009888 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8008b7e:	210c      	movs	r1, #12
 8008b80:	2037      	movs	r0, #55	@ 0x37
 8008b82:	f000 fe81 	bl	8009888 <SX1276Write>
        break;
 8008b86:	e013      	b.n	8008bb0 <SX1276SetTxConfig+0x470>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8008b88:	2031      	movs	r0, #49	@ 0x31
 8008b8a:	f000 fe8f 	bl	80098ac <SX1276Read>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	b25b      	sxtb	r3, r3
 8008b92:	f023 0307 	bic.w	r3, r3, #7
 8008b96:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8008b98:	f043 0303 	orr.w	r3, r3, #3
 8008b9c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	2031      	movs	r0, #49	@ 0x31
 8008ba4:	f000 fe70 	bl	8009888 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8008ba8:	210a      	movs	r1, #10
 8008baa:	2037      	movs	r0, #55	@ 0x37
 8008bac:	f000 fe6c 	bl	8009888 <SX1276Write>
        break;
 8008bb0:	bf00      	nop
}
 8008bb2:	bf00      	nop
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd90      	pop	{r4, r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	20000440 	.word	0x20000440

08008bc0 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8008bc0:	b5b0      	push	{r4, r5, r7, lr}
 8008bc2:	b094      	sub	sp, #80	@ 0x50
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	460a      	mov	r2, r1
 8008bca:	71fb      	strb	r3, [r7, #7]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c

    switch( modem )
 8008bd4:	79fb      	ldrb	r3, [r7, #7]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <SX1276GetTimeOnAir+0x22>
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	f000 8092 	beq.w	8008d04 <SX1276GetTimeOnAir+0x144>
 8008be0:	e1a0      	b.n	8008f24 <SX1276GetTimeOnAir+0x364>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8008be2:	4ba9      	ldr	r3, [pc, #676]	@ (8008e88 <SX1276GetTimeOnAir+0x2c8>)
 8008be4:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 8008be8:	461c      	mov	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8008bea:	2027      	movs	r0, #39	@ 0x27
 8008bec:	f000 fe5e 	bl	80098ac <SX1276Read>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008bf6:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8008bf8:	4423      	add	r3, r4
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7f7 fc96 	bl	800052c <__aeabi_i2d>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8008c04:	49a0      	ldr	r1, [pc, #640]	@ (8008e88 <SX1276GetTimeOnAir+0x2c8>)
 8008c06:	f891 1132 	ldrb.w	r1, [r1, #306]	@ 0x132
 8008c0a:	2900      	cmp	r1, #0
 8008c0c:	d004      	beq.n	8008c18 <SX1276GetTimeOnAir+0x58>
 8008c0e:	f04f 0000 	mov.w	r0, #0
 8008c12:	f04f 0100 	mov.w	r1, #0
 8008c16:	e002      	b.n	8008c1e <SX1276GetTimeOnAir+0x5e>
 8008c18:	f04f 0000 	mov.w	r0, #0
 8008c1c:	499b      	ldr	r1, [pc, #620]	@ (8008e8c <SX1276GetTimeOnAir+0x2cc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8008c1e:	f7f7 fb39 	bl	8000294 <__adddf3>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4614      	mov	r4, r2
 8008c28:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8008c2a:	2030      	movs	r0, #48	@ 0x30
 8008c2c:	f000 fe3e 	bl	80098ac <SX1276Read>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f023 03f9 	bic.w	r3, r3, #249	@ 0xf9
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <SX1276GetTimeOnAir+0x82>
 8008c3a:	f04f 0000 	mov.w	r0, #0
 8008c3e:	4993      	ldr	r1, [pc, #588]	@ (8008e8c <SX1276GetTimeOnAir+0x2cc>)
 8008c40:	e003      	b.n	8008c4a <SX1276GetTimeOnAir+0x8a>
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8008c4a:	4622      	mov	r2, r4
 8008c4c:	462b      	mov	r3, r5
 8008c4e:	f7f7 fb21 	bl	8000294 <__adddf3>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4614      	mov	r4, r2
 8008c58:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8008c5a:	79bb      	ldrb	r3, [r7, #6]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7f7 fc65 	bl	800052c <__aeabi_i2d>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4620      	mov	r0, r4
 8008c68:	4629      	mov	r1, r5
 8008c6a:	f7f7 fb13 	bl	8000294 <__adddf3>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4614      	mov	r4, r2
 8008c74:	461d      	mov	r5, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8008c76:	4b84      	ldr	r3, [pc, #528]	@ (8008e88 <SX1276GetTimeOnAir+0x2c8>)
 8008c78:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d004      	beq.n	8008c8a <SX1276GetTimeOnAir+0xca>
 8008c80:	f04f 0000 	mov.w	r0, #0
 8008c84:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008c88:	e003      	b.n	8008c92 <SX1276GetTimeOnAir+0xd2>
 8008c8a:	f04f 0000 	mov.w	r0, #0
 8008c8e:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 8008c92:	4622      	mov	r2, r4
 8008c94:	462b      	mov	r3, r5
 8008c96:	f7f7 fafd 	bl	8000294 <__adddf3>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8008ca2:	f04f 0200 	mov.w	r2, #0
 8008ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8008e90 <SX1276GetTimeOnAir+0x2d0>)
 8008ca8:	f7f7 fcaa 	bl	8000600 <__aeabi_dmul>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4614      	mov	r4, r2
 8008cb2:	461d      	mov	r5, r3
                                     SX1276.Settings.Fsk.Datarate ) * /* 1e6 */  1e3  );     // FIX by PK
 8008cb4:	4b74      	ldr	r3, [pc, #464]	@ (8008e88 <SX1276GetTimeOnAir+0x2c8>)
 8008cb6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7f7 fc26 	bl	800050c <__aeabi_ui2d>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	f7f7 fdc4 	bl	8000854 <__aeabi_ddiv>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8008cd4:	f04f 0200 	mov.w	r2, #0
 8008cd8:	4b6e      	ldr	r3, [pc, #440]	@ (8008e94 <SX1276GetTimeOnAir+0x2d4>)
 8008cda:	f7f7 fc91 	bl	8000600 <__aeabi_dmul>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	ec43 2b17 	vmov	d7, r2, r3
 8008ce6:	eeb0 0a47 	vmov.f32	s0, s14
 8008cea:	eef0 0a67 	vmov.f32	s1, s15
 8008cee:	f002 fe4b 	bl	800b988 <round>
 8008cf2:	ec53 2b10 	vmov	r2, r3, d0
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	f7f7 ff43 	bl	8000b84 <__aeabi_d2uiz>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 8008d02:	e10f      	b.n	8008f24 <SX1276GetTimeOnAir+0x364>
    case MODEM_LORA:
        {
            double bw = 0.0;
 8008d04:	f04f 0200 	mov.w	r2, #0
 8008d08:	f04f 0300 	mov.w	r3, #0
 8008d0c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8008d10:	4b5d      	ldr	r3, [pc, #372]	@ (8008e88 <SX1276GetTimeOnAir+0x2c8>)
 8008d12:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8008d16:	2b09      	cmp	r3, #9
 8008d18:	d012      	beq.n	8008d40 <SX1276GetTimeOnAir+0x180>
 8008d1a:	2b09      	cmp	r3, #9
 8008d1c:	d816      	bhi.n	8008d4c <SX1276GetTimeOnAir+0x18c>
 8008d1e:	2b07      	cmp	r3, #7
 8008d20:	d002      	beq.n	8008d28 <SX1276GetTimeOnAir+0x168>
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d006      	beq.n	8008d34 <SX1276GetTimeOnAir+0x174>
 8008d26:	e011      	b.n	8008d4c <SX1276GetTimeOnAir+0x18c>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 8008d28:	a351      	add	r3, pc, #324	@ (adr r3, 8008e70 <SX1276GetTimeOnAir+0x2b0>)
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 8008d32:	e00b      	b.n	8008d4c <SX1276GetTimeOnAir+0x18c>
            case 8: // 250 kHz
                bw = 250e3;
 8008d34:	a350      	add	r3, pc, #320	@ (adr r3, 8008e78 <SX1276GetTimeOnAir+0x2b8>)
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 8008d3e:	e005      	b.n	8008d4c <SX1276GetTimeOnAir+0x18c>
            case 9: // 500 kHz
                bw = 500e3;
 8008d40:	a34f      	add	r3, pc, #316	@ (adr r3, 8008e80 <SX1276GetTimeOnAir+0x2c0>)
 8008d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d46:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                break;
 8008d4a:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8008d4c:	4b4e      	ldr	r3, [pc, #312]	@ (8008e88 <SX1276GetTimeOnAir+0x2c8>)
 8008d4e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008d52:	2201      	movs	r2, #1
 8008d54:	fa02 f303 	lsl.w	r3, r2, r3
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7f7 fbe7 	bl	800052c <__aeabi_i2d>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8008d66:	f7f7 fd75 	bl	8000854 <__aeabi_ddiv>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            double ts = 1 / rs;
 8008d72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008d76:	f04f 0000 	mov.w	r0, #0
 8008d7a:	4944      	ldr	r1, [pc, #272]	@ (8008e8c <SX1276GetTimeOnAir+0x2cc>)
 8008d7c:	f7f7 fd6a 	bl	8000854 <__aeabi_ddiv>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8008d88:	4b3f      	ldr	r3, [pc, #252]	@ (8008e88 <SX1276GetTimeOnAir+0x2c8>)
 8008d8a:	f8b3 315a 	ldrh.w	r3, [r3, #346]	@ 0x15a
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7f7 fbcc 	bl	800052c <__aeabi_i2d>
 8008d94:	f04f 0200 	mov.w	r2, #0
 8008d98:	4b3f      	ldr	r3, [pc, #252]	@ (8008e98 <SX1276GetTimeOnAir+0x2d8>)
 8008d9a:	f7f7 fa7b 	bl	8000294 <__adddf3>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8008da6:	f7f7 fc2b 	bl	8000600 <__aeabi_dmul>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8008db2:	79bb      	ldrb	r3, [r7, #6]
 8008db4:	00db      	lsls	r3, r3, #3
 8008db6:	461a      	mov	r2, r3
 8008db8:	4b33      	ldr	r3, [pc, #204]	@ (8008e88 <SX1276GetTimeOnAir+0x2c8>)
 8008dba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8008dc2:	4a31      	ldr	r2, [pc, #196]	@ (8008e88 <SX1276GetTimeOnAir+0x2c8>)
 8008dc4:	f892 215e 	ldrb.w	r2, [r2, #350]	@ 0x15e
 8008dc8:	0112      	lsls	r2, r2, #4
 8008dca:	441a      	add	r2, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8008dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8008e88 <SX1276GetTimeOnAir+0x2c8>)
 8008dce:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <SX1276GetTimeOnAir+0x21a>
 8008dd6:	2314      	movs	r3, #20
 8008dd8:	e000      	b.n	8008ddc <SX1276GetTimeOnAir+0x21c>
 8008dda:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7f7 fb93 	bl	800050c <__aeabi_ui2d>
 8008de6:	4604      	mov	r4, r0
 8008de8:	460d      	mov	r5, r1
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 8008dea:	4b27      	ldr	r3, [pc, #156]	@ (8008e88 <SX1276GetTimeOnAir+0x2c8>)
 8008dec:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008df0:	009a      	lsls	r2, r3, #2
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 8008df2:	4b25      	ldr	r3, [pc, #148]	@ (8008e88 <SX1276GetTimeOnAir+0x2c8>)
 8008df4:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <SX1276GetTimeOnAir+0x240>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	e000      	b.n	8008e02 <SX1276GetTimeOnAir+0x242>
 8008e00:	2300      	movs	r3, #0
                                 ( double )( 4 * SX1276.Settings.LoRa.Datarate -
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7f7 fb81 	bl	800050c <__aeabi_ui2d>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8008e0e:	4620      	mov	r0, r4
 8008e10:	4629      	mov	r1, r5
 8008e12:	f7f7 fd1f 	bl	8000854 <__aeabi_ddiv>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	ec43 2b17 	vmov	d7, r2, r3
 8008e1e:	eeb0 0a47 	vmov.f32	s0, s14
 8008e22:	eef0 0a67 	vmov.f32	s1, s15
 8008e26:	f002 fcb3 	bl	800b790 <ceil>
 8008e2a:	ec55 4b10 	vmov	r4, r5, d0
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8008e2e:	4b16      	ldr	r3, [pc, #88]	@ (8008e88 <SX1276GetTimeOnAir+0x2c8>)
 8008e30:	f893 3159 	ldrb.w	r3, [r3, #345]	@ 0x159
 8008e34:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) *
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7f7 fb78 	bl	800052c <__aeabi_i2d>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8008e40:	4620      	mov	r0, r4
 8008e42:	4629      	mov	r1, r5
 8008e44:	f7f7 fbdc 	bl	8000600 <__aeabi_dmul>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8008e50:	f04f 0200 	mov.w	r2, #0
 8008e54:	f04f 0300 	mov.w	r3, #0
 8008e58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e5c:	f7f7 fe60 	bl	8000b20 <__aeabi_dcmpgt>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d01a      	beq.n	8008e9c <SX1276GetTimeOnAir+0x2dc>
 8008e66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008e6a:	e01b      	b.n	8008ea4 <SX1276GetTimeOnAir+0x2e4>
 8008e6c:	f3af 8000 	nop.w
 8008e70:	00000000 	.word	0x00000000
 8008e74:	40fe8480 	.word	0x40fe8480
 8008e78:	00000000 	.word	0x00000000
 8008e7c:	410e8480 	.word	0x410e8480
 8008e80:	00000000 	.word	0x00000000
 8008e84:	411e8480 	.word	0x411e8480
 8008e88:	20000440 	.word	0x20000440
 8008e8c:	3ff00000 	.word	0x3ff00000
 8008e90:	40200000 	.word	0x40200000
 8008e94:	408f4000 	.word	0x408f4000
 8008e98:	40110000 	.word	0x40110000
 8008e9c:	f04f 0000 	mov.w	r0, #0
 8008ea0:	f04f 0100 	mov.w	r1, #0
 8008ea4:	f04f 0200 	mov.w	r2, #0
 8008ea8:	4b23      	ldr	r3, [pc, #140]	@ (8008f38 <SX1276GetTimeOnAir+0x378>)
 8008eaa:	f7f7 f9f3 	bl	8000294 <__adddf3>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
            double tPayload = nPayload * ts;
 8008eb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008eba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ebe:	f7f7 fb9f 	bl	8000600 <__aeabi_dmul>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 8008eca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ece:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008ed2:	f7f7 f9df 	bl	8000294 <__adddf3>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	e9c7 2302 	strd	r2, r3, [r7, #8]
            // return us secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 8008ede:	f04f 0200 	mov.w	r2, #0
 8008ee2:	4b16      	ldr	r3, [pc, #88]	@ (8008f3c <SX1276GetTimeOnAir+0x37c>)
 8008ee4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ee8:	f7f7 fb8a 	bl	8000600 <__aeabi_dmul>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	a30e      	add	r3, pc, #56	@ (adr r3, 8008f30 <SX1276GetTimeOnAir+0x370>)
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	f7f7 f9cb 	bl	8000294 <__adddf3>
 8008efe:	4602      	mov	r2, r0
 8008f00:	460b      	mov	r3, r1
 8008f02:	ec43 2b17 	vmov	d7, r2, r3
 8008f06:	eeb0 0a47 	vmov.f32	s0, s14
 8008f0a:	eef0 0a67 	vmov.f32	s1, s15
 8008f0e:	f002 fcbb 	bl	800b888 <floor>
 8008f12:	ec53 2b10 	vmov	r2, r3, d0
 8008f16:	4610      	mov	r0, r2
 8008f18:	4619      	mov	r1, r3
 8008f1a:	f7f7 fe33 	bl	8000b84 <__aeabi_d2uiz>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        break;
 8008f22:	bf00      	nop
    }
    return airTime;
 8008f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3750      	adds	r7, #80	@ 0x50
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	d916872b 	.word	0xd916872b
 8008f34:	3feff7ce 	.word	0x3feff7ce
 8008f38:	40200000 	.word	0x40200000
 8008f3c:	408f4000 	.word	0x408f4000

08008f40 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8008f50:	4b53      	ldr	r3, [pc, #332]	@ (80090a0 <SX1276Send+0x160>)
 8008f52:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d002      	beq.n	8008f60 <SX1276Send+0x20>
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d048      	beq.n	8008ff0 <SX1276Send+0xb0>
 8008f5e:	e098      	b.n	8009092 <SX1276Send+0x152>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008f60:	4b4f      	ldr	r3, [pc, #316]	@ (80090a0 <SX1276Send+0x160>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = size;
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	4b4c      	ldr	r3, [pc, #304]	@ (80090a0 <SX1276Send+0x160>)
 8008f6e:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

            if( SX1276.Settings.Fsk.FixLen == false )
 8008f72:	4b4b      	ldr	r3, [pc, #300]	@ (80090a0 <SX1276Send+0x160>)
 8008f74:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8008f78:	f083 0301 	eor.w	r3, r3, #1
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d005      	beq.n	8008f8e <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8008f82:	1cfb      	adds	r3, r7, #3
 8008f84:	2101      	movs	r1, #1
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fd08 	bl	800999c <SX1276WriteFifo>
 8008f8c:	e004      	b.n	8008f98 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	4619      	mov	r1, r3
 8008f92:	2032      	movs	r0, #50	@ 0x32
 8008f94:	f000 fc78 	bl	8009888 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8008f98:	78fb      	ldrb	r3, [r7, #3]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d007      	beq.n	8008fae <SX1276Send+0x6e>
 8008f9e:	78fb      	ldrb	r3, [r7, #3]
 8008fa0:	2b40      	cmp	r3, #64	@ 0x40
 8008fa2:	d804      	bhi.n	8008fae <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8008fa4:	78fa      	ldrb	r2, [r7, #3]
 8008fa6:	4b3e      	ldr	r3, [pc, #248]	@ (80090a0 <SX1276Send+0x160>)
 8008fa8:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
 8008fac:	e009      	b.n	8008fc2 <SX1276Send+0x82>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8008fae:	78fb      	ldrb	r3, [r7, #3]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	6879      	ldr	r1, [r7, #4]
 8008fb4:	483b      	ldr	r0, [pc, #236]	@ (80090a4 <SX1276Send+0x164>)
 8008fb6:	f7ff f82f 	bl	8008018 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8008fba:	4b39      	ldr	r3, [pc, #228]	@ (80090a0 <SX1276Send+0x160>)
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8008fc2:	4b37      	ldr	r3, [pc, #220]	@ (80090a0 <SX1276Send+0x160>)
 8008fc4:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fce6 	bl	800999c <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8008fd0:	4b33      	ldr	r3, [pc, #204]	@ (80090a0 <SX1276Send+0x160>)
 8008fd2:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8008fd6:	4a32      	ldr	r2, [pc, #200]	@ (80090a0 <SX1276Send+0x160>)
 8008fd8:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 8008fdc:	4413      	add	r3, r2
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80090a0 <SX1276Send+0x160>)
 8008fe2:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8008fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80090a0 <SX1276Send+0x160>)
 8008fe8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8008fec:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008fee:	e050      	b.n	8009092 <SX1276Send+0x152>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80090a0 <SX1276Send+0x160>)
 8008ff2:	f893 3161 	ldrb.w	r3, [r3, #353]	@ 0x161
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00f      	beq.n	800901a <SX1276Send+0xda>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8008ffa:	2033      	movs	r0, #51	@ 0x33
 8008ffc:	f000 fc56 	bl	80098ac <SX1276Read>
 8009000:	4603      	mov	r3, r0
 8009002:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 8009006:	b2db      	uxtb	r3, r3
 8009008:	4619      	mov	r1, r3
 800900a:	2033      	movs	r0, #51	@ 0x33
 800900c:	f000 fc3c 	bl	8009888 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8009010:	2119      	movs	r1, #25
 8009012:	203b      	movs	r0, #59	@ 0x3b
 8009014:	f000 fc38 	bl	8009888 <SX1276Write>
 8009018:	e013      	b.n	8009042 <SX1276Send+0x102>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800901a:	2033      	movs	r0, #51	@ 0x33
 800901c:	f000 fc46 	bl	80098ac <SX1276Read>
 8009020:	4603      	mov	r3, r0
 8009022:	b25b      	sxtb	r3, r3
 8009024:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 8009028:	b25b      	sxtb	r3, r3
 800902a:	f043 0301 	orr.w	r3, r3, #1
 800902e:	b25b      	sxtb	r3, r3
 8009030:	b2db      	uxtb	r3, r3
 8009032:	4619      	mov	r1, r3
 8009034:	2033      	movs	r0, #51	@ 0x33
 8009036:	f000 fc27 	bl	8009888 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800903a:	211d      	movs	r1, #29
 800903c:	203b      	movs	r0, #59	@ 0x3b
 800903e:	f000 fc23 	bl	8009888 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 8009042:	78fa      	ldrb	r2, [r7, #3]
 8009044:	4b16      	ldr	r3, [pc, #88]	@ (80090a0 <SX1276Send+0x160>)
 8009046:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	4619      	mov	r1, r3
 800904e:	2022      	movs	r0, #34	@ 0x22
 8009050:	f000 fc1a 	bl	8009888 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8009054:	2100      	movs	r1, #0
 8009056:	200e      	movs	r0, #14
 8009058:	f000 fc16 	bl	8009888 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800905c:	2100      	movs	r1, #0
 800905e:	200d      	movs	r0, #13
 8009060:	f000 fc12 	bl	8009888 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8009064:	2001      	movs	r0, #1
 8009066:	f000 fc21 	bl	80098ac <SX1276Read>
 800906a:	4603      	mov	r3, r0
 800906c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009070:	2b00      	cmp	r3, #0
 8009072:	d104      	bne.n	800907e <SX1276Send+0x13e>
            {
                SX1276SetStby( );
 8009074:	f000 f830 	bl	80090d8 <SX1276SetStby>
                DelayMs( 1 );
 8009078:	2001      	movs	r0, #1
 800907a:	f7fd fb23 	bl	80066c4 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fc8a 	bl	800999c <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8009088:	4b05      	ldr	r3, [pc, #20]	@ (80090a0 <SX1276Send+0x160>)
 800908a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800908e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009090:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 fa8c 	bl	80095b0 <SX1276SetTx>
}
 8009098:	bf00      	nop
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20000440 	.word	0x20000440
 80090a4:	20000340 	.word	0x20000340

080090a8 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80090ac:	4807      	ldr	r0, [pc, #28]	@ (80090cc <SX1276SetSleep+0x24>)
 80090ae:	f7fe fec1 	bl	8007e34 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80090b2:	4807      	ldr	r0, [pc, #28]	@ (80090d0 <SX1276SetSleep+0x28>)
 80090b4:	f7fe febe 	bl	8007e34 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80090b8:	2000      	movs	r0, #0
 80090ba:	f000 fb75 	bl	80097a8 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80090be:	4b05      	ldr	r3, [pc, #20]	@ (80090d4 <SX1276SetSleep+0x2c>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 80090c6:	bf00      	nop
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	200005c4 	.word	0x200005c4
 80090d0:	200005b0 	.word	0x200005b0
 80090d4:	20000440 	.word	0x20000440

080090d8 <SX1276SetStby>:

void SX1276SetStby( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80090dc:	4807      	ldr	r0, [pc, #28]	@ (80090fc <SX1276SetStby+0x24>)
 80090de:	f7fe fea9 	bl	8007e34 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80090e2:	4807      	ldr	r0, [pc, #28]	@ (8009100 <SX1276SetStby+0x28>)
 80090e4:	f7fe fea6 	bl	8007e34 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80090e8:	2001      	movs	r0, #1
 80090ea:	f000 fb5d 	bl	80097a8 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80090ee:	4b05      	ldr	r3, [pc, #20]	@ (8009104 <SX1276SetStby+0x2c>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
}
 80090f6:	bf00      	nop
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	200005c4 	.word	0x200005c4
 8009100:	200005b0 	.word	0x200005b0
 8009104:	20000440 	.word	0x20000440

08009108 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8009108:	b5b0      	push	{r4, r5, r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]

    switch( SX1276.Settings.Modem )
 8009114:	4bc4      	ldr	r3, [pc, #784]	@ (8009428 <SX1276SetRx+0x320>)
 8009116:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800911a:	2b00      	cmp	r3, #0
 800911c:	d002      	beq.n	8009124 <SX1276SetRx+0x1c>
 800911e:	2b01      	cmp	r3, #1
 8009120:	d03e      	beq.n	80091a0 <SX1276SetRx+0x98>
 8009122:	e19b      	b.n	800945c <SX1276SetRx+0x354>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8009124:	4bc0      	ldr	r3, [pc, #768]	@ (8009428 <SX1276SetRx+0x320>)
 8009126:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800912a:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800912c:	2040      	movs	r0, #64	@ 0x40
 800912e:	f000 fbbd 	bl	80098ac <SX1276Read>
 8009132:	4603      	mov	r3, r0
 8009134:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8009136:	f003 0303 	and.w	r3, r3, #3
 800913a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 800913c:	f043 030c 	orr.w	r3, r3, #12
 8009140:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8009142:	b2db      	uxtb	r3, r3
 8009144:	4619      	mov	r1, r3
 8009146:	2040      	movs	r0, #64	@ 0x40
 8009148:	f000 fb9e 	bl	8009888 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800914c:	2041      	movs	r0, #65	@ 0x41
 800914e:	f000 fbad 	bl	80098ac <SX1276Read>
 8009152:	4603      	mov	r3, r0
 8009154:	f063 033e 	orn	r3, r3, #62	@ 0x3e
 8009158:	b2db      	uxtb	r3, r3
 800915a:	4619      	mov	r1, r3
 800915c:	2041      	movs	r0, #65	@ 0x41
 800915e:	f000 fb93 	bl	8009888 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8009162:	2035      	movs	r0, #53	@ 0x35
 8009164:	f000 fba2 	bl	80098ac <SX1276Read>
 8009168:	4603      	mov	r3, r0
 800916a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800916e:	b2da      	uxtb	r2, r3
 8009170:	4bad      	ldr	r3, [pc, #692]	@ (8009428 <SX1276SetRx+0x320>)
 8009172:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8009176:	211e      	movs	r1, #30
 8009178:	200d      	movs	r0, #13
 800917a:	f000 fb85 	bl	8009888 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800917e:	4baa      	ldr	r3, [pc, #680]	@ (8009428 <SX1276SetRx+0x320>)
 8009180:	2200      	movs	r2, #0
 8009182:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8009186:	4ba8      	ldr	r3, [pc, #672]	@ (8009428 <SX1276SetRx+0x320>)
 8009188:	2200      	movs	r2, #0
 800918a:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800918e:	4ba6      	ldr	r3, [pc, #664]	@ (8009428 <SX1276SetRx+0x320>)
 8009190:	2200      	movs	r2, #0
 8009192:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = 0;
 8009196:	4ba4      	ldr	r3, [pc, #656]	@ (8009428 <SX1276SetRx+0x320>)
 8009198:	2200      	movs	r2, #0
 800919a:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
        }
        break;
 800919e:	e15d      	b.n	800945c <SX1276SetRx+0x354>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80091a0:	4ba1      	ldr	r3, [pc, #644]	@ (8009428 <SX1276SetRx+0x320>)
 80091a2:	f893 3161 	ldrb.w	r3, [r3, #353]	@ 0x161
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00f      	beq.n	80091ca <SX1276SetRx+0xc2>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80091aa:	2033      	movs	r0, #51	@ 0x33
 80091ac:	f000 fb7e 	bl	80098ac <SX1276Read>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	4619      	mov	r1, r3
 80091ba:	2033      	movs	r0, #51	@ 0x33
 80091bc:	f000 fb64 	bl	8009888 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80091c0:	2119      	movs	r1, #25
 80091c2:	203b      	movs	r0, #59	@ 0x3b
 80091c4:	f000 fb60 	bl	8009888 <SX1276Write>
 80091c8:	e013      	b.n	80091f2 <SX1276SetRx+0xea>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80091ca:	2033      	movs	r0, #51	@ 0x33
 80091cc:	f000 fb6e 	bl	80098ac <SX1276Read>
 80091d0:	4603      	mov	r3, r0
 80091d2:	b25b      	sxtb	r3, r3
 80091d4:	f023 0341 	bic.w	r3, r3, #65	@ 0x41
 80091d8:	b25b      	sxtb	r3, r3
 80091da:	f043 0301 	orr.w	r3, r3, #1
 80091de:	b25b      	sxtb	r3, r3
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	4619      	mov	r1, r3
 80091e4:	2033      	movs	r0, #51	@ 0x33
 80091e6:	f000 fb4f 	bl	8009888 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80091ea:	211d      	movs	r1, #29
 80091ec:	203b      	movs	r0, #59	@ 0x3b
 80091ee:	f000 fb4b 	bl	8009888 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80091f2:	4b8d      	ldr	r3, [pc, #564]	@ (8009428 <SX1276SetRx+0x320>)
 80091f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80091f8:	2b08      	cmp	r3, #8
 80091fa:	f200 80d6 	bhi.w	80093aa <SX1276SetRx+0x2a2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80091fe:	2031      	movs	r0, #49	@ 0x31
 8009200:	f000 fb54 	bl	80098ac <SX1276Read>
 8009204:	4603      	mov	r3, r0
 8009206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800920a:	b2db      	uxtb	r3, r3
 800920c:	4619      	mov	r1, r3
 800920e:	2031      	movs	r0, #49	@ 0x31
 8009210:	f000 fb3a 	bl	8009888 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 8009214:	2100      	movs	r1, #0
 8009216:	2030      	movs	r0, #48	@ 0x30
 8009218:	f000 fb36 	bl	8009888 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800921c:	4b82      	ldr	r3, [pc, #520]	@ (8009428 <SX1276SetRx+0x320>)
 800921e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8009222:	2b08      	cmp	r3, #8
 8009224:	f200 80cc 	bhi.w	80093c0 <SX1276SetRx+0x2b8>
 8009228:	a201      	add	r2, pc, #4	@ (adr r2, 8009230 <SX1276SetRx+0x128>)
 800922a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922e:	bf00      	nop
 8009230:	08009255 	.word	0x08009255
 8009234:	08009289 	.word	0x08009289
 8009238:	080092bd 	.word	0x080092bd
 800923c:	080092f1 	.word	0x080092f1
 8009240:	08009325 	.word	0x08009325
 8009244:	08009359 	.word	0x08009359
 8009248:	0800938d 	.word	0x0800938d
 800924c:	08009397 	.word	0x08009397
 8009250:	080093a1 	.word	0x080093a1
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 8009254:	2148      	movs	r1, #72	@ 0x48
 8009256:	202f      	movs	r0, #47	@ 0x2f
 8009258:	f000 fb16 	bl	8009888 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7.81e3 );
 800925c:	4b72      	ldr	r3, [pc, #456]	@ (8009428 <SX1276SetRx+0x320>)
 800925e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009262:	4618      	mov	r0, r3
 8009264:	f7f7 f952 	bl	800050c <__aeabi_ui2d>
 8009268:	a363      	add	r3, pc, #396	@ (adr r3, 80093f8 <SX1276SetRx+0x2f0>)
 800926a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926e:	f7f7 f811 	bl	8000294 <__adddf3>
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	4610      	mov	r0, r2
 8009278:	4619      	mov	r1, r3
 800927a:	f7f7 fc83 	bl	8000b84 <__aeabi_d2uiz>
 800927e:	4603      	mov	r3, r0
 8009280:	4618      	mov	r0, r3
 8009282:	f7fe ff51 	bl	8008128 <SX1276SetChannel>
                    break;
 8009286:	e09b      	b.n	80093c0 <SX1276SetRx+0x2b8>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8009288:	2144      	movs	r1, #68	@ 0x44
 800928a:	202f      	movs	r0, #47	@ 0x2f
 800928c:	f000 fafc 	bl	8009888 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10.42e3 );
 8009290:	4b65      	ldr	r3, [pc, #404]	@ (8009428 <SX1276SetRx+0x320>)
 8009292:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009296:	4618      	mov	r0, r3
 8009298:	f7f7 f938 	bl	800050c <__aeabi_ui2d>
 800929c:	a358      	add	r3, pc, #352	@ (adr r3, 8009400 <SX1276SetRx+0x2f8>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	f7f6 fff7 	bl	8000294 <__adddf3>
 80092a6:	4602      	mov	r2, r0
 80092a8:	460b      	mov	r3, r1
 80092aa:	4610      	mov	r0, r2
 80092ac:	4619      	mov	r1, r3
 80092ae:	f7f7 fc69 	bl	8000b84 <__aeabi_d2uiz>
 80092b2:	4603      	mov	r3, r0
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fe ff37 	bl	8008128 <SX1276SetChannel>
                    break;
 80092ba:	e081      	b.n	80093c0 <SX1276SetRx+0x2b8>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80092bc:	2144      	movs	r1, #68	@ 0x44
 80092be:	202f      	movs	r0, #47	@ 0x2f
 80092c0:	f000 fae2 	bl	8009888 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15.62e3 );
 80092c4:	4b58      	ldr	r3, [pc, #352]	@ (8009428 <SX1276SetRx+0x320>)
 80092c6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7f7 f91e 	bl	800050c <__aeabi_ui2d>
 80092d0:	a34d      	add	r3, pc, #308	@ (adr r3, 8009408 <SX1276SetRx+0x300>)
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	f7f6 ffdd 	bl	8000294 <__adddf3>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	4610      	mov	r0, r2
 80092e0:	4619      	mov	r1, r3
 80092e2:	f7f7 fc4f 	bl	8000b84 <__aeabi_d2uiz>
 80092e6:	4603      	mov	r3, r0
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe ff1d 	bl	8008128 <SX1276SetChannel>
                    break;
 80092ee:	e067      	b.n	80093c0 <SX1276SetRx+0x2b8>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80092f0:	2144      	movs	r1, #68	@ 0x44
 80092f2:	202f      	movs	r0, #47	@ 0x2f
 80092f4:	f000 fac8 	bl	8009888 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20.83e3 );
 80092f8:	4b4b      	ldr	r3, [pc, #300]	@ (8009428 <SX1276SetRx+0x320>)
 80092fa:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80092fe:	4618      	mov	r0, r3
 8009300:	f7f7 f904 	bl	800050c <__aeabi_ui2d>
 8009304:	a342      	add	r3, pc, #264	@ (adr r3, 8009410 <SX1276SetRx+0x308>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f7f6 ffc3 	bl	8000294 <__adddf3>
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	4610      	mov	r0, r2
 8009314:	4619      	mov	r1, r3
 8009316:	f7f7 fc35 	bl	8000b84 <__aeabi_d2uiz>
 800931a:	4603      	mov	r3, r0
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe ff03 	bl	8008128 <SX1276SetChannel>
                    break;
 8009322:	e04d      	b.n	80093c0 <SX1276SetRx+0x2b8>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8009324:	2144      	movs	r1, #68	@ 0x44
 8009326:	202f      	movs	r0, #47	@ 0x2f
 8009328:	f000 faae 	bl	8009888 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31.25e3 );
 800932c:	4b3e      	ldr	r3, [pc, #248]	@ (8009428 <SX1276SetRx+0x320>)
 800932e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009332:	4618      	mov	r0, r3
 8009334:	f7f7 f8ea 	bl	800050c <__aeabi_ui2d>
 8009338:	a337      	add	r3, pc, #220	@ (adr r3, 8009418 <SX1276SetRx+0x310>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f6 ffa9 	bl	8000294 <__adddf3>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4610      	mov	r0, r2
 8009348:	4619      	mov	r1, r3
 800934a:	f7f7 fc1b 	bl	8000b84 <__aeabi_d2uiz>
 800934e:	4603      	mov	r3, r0
 8009350:	4618      	mov	r0, r3
 8009352:	f7fe fee9 	bl	8008128 <SX1276SetChannel>
                    break;
 8009356:	e033      	b.n	80093c0 <SX1276SetRx+0x2b8>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 8009358:	2144      	movs	r1, #68	@ 0x44
 800935a:	202f      	movs	r0, #47	@ 0x2f
 800935c:	f000 fa94 	bl	8009888 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41.67e3 );
 8009360:	4b31      	ldr	r3, [pc, #196]	@ (8009428 <SX1276SetRx+0x320>)
 8009362:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009366:	4618      	mov	r0, r3
 8009368:	f7f7 f8d0 	bl	800050c <__aeabi_ui2d>
 800936c:	a32c      	add	r3, pc, #176	@ (adr r3, 8009420 <SX1276SetRx+0x318>)
 800936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009372:	f7f6 ff8f 	bl	8000294 <__adddf3>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4610      	mov	r0, r2
 800937c:	4619      	mov	r1, r3
 800937e:	f7f7 fc01 	bl	8000b84 <__aeabi_d2uiz>
 8009382:	4603      	mov	r3, r0
 8009384:	4618      	mov	r0, r3
 8009386:	f7fe fecf 	bl	8008128 <SX1276SetChannel>
                    break;
 800938a:	e019      	b.n	80093c0 <SX1276SetRx+0x2b8>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800938c:	2140      	movs	r1, #64	@ 0x40
 800938e:	202f      	movs	r0, #47	@ 0x2f
 8009390:	f000 fa7a 	bl	8009888 <SX1276Write>
                    break;
 8009394:	e014      	b.n	80093c0 <SX1276SetRx+0x2b8>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 8009396:	2140      	movs	r1, #64	@ 0x40
 8009398:	202f      	movs	r0, #47	@ 0x2f
 800939a:	f000 fa75 	bl	8009888 <SX1276Write>
                    break;
 800939e:	e00f      	b.n	80093c0 <SX1276SetRx+0x2b8>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 80093a0:	2140      	movs	r1, #64	@ 0x40
 80093a2:	202f      	movs	r0, #47	@ 0x2f
 80093a4:	f000 fa70 	bl	8009888 <SX1276Write>
                    break;
 80093a8:	e00a      	b.n	80093c0 <SX1276SetRx+0x2b8>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80093aa:	2031      	movs	r0, #49	@ 0x31
 80093ac:	f000 fa7e 	bl	80098ac <SX1276Read>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	4619      	mov	r1, r3
 80093ba:	2031      	movs	r0, #49	@ 0x31
 80093bc:	f000 fa64 	bl	8009888 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80093c0:	4b19      	ldr	r3, [pc, #100]	@ (8009428 <SX1276SetRx+0x320>)
 80093c2:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 80093c6:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80093c8:	4b17      	ldr	r3, [pc, #92]	@ (8009428 <SX1276SetRx+0x320>)
 80093ca:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d02c      	beq.n	800942c <SX1276SetRx+0x324>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80093d2:	211d      	movs	r1, #29
 80093d4:	2011      	movs	r0, #17
 80093d6:	f000 fa57 	bl	8009888 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80093da:	2040      	movs	r0, #64	@ 0x40
 80093dc:	f000 fa66 	bl	80098ac <SX1276Read>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	4619      	mov	r1, r3
 80093ea:	2040      	movs	r0, #64	@ 0x40
 80093ec:	f000 fa4c 	bl	8009888 <SX1276Write>
 80093f0:	e02b      	b.n	800944a <SX1276SetRx+0x342>
 80093f2:	bf00      	nop
 80093f4:	f3af 8000 	nop.w
 80093f8:	00000000 	.word	0x00000000
 80093fc:	40be8200 	.word	0x40be8200
 8009400:	00000000 	.word	0x00000000
 8009404:	40c45a00 	.word	0x40c45a00
 8009408:	00000000 	.word	0x00000000
 800940c:	40ce8200 	.word	0x40ce8200
 8009410:	00000000 	.word	0x00000000
 8009414:	40d45780 	.word	0x40d45780
 8009418:	00000000 	.word	0x00000000
 800941c:	40de8480 	.word	0x40de8480
 8009420:	00000000 	.word	0x00000000
 8009424:	40e458c0 	.word	0x40e458c0
 8009428:	20000440 	.word	0x20000440
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800942c:	211f      	movs	r1, #31
 800942e:	2011      	movs	r0, #17
 8009430:	f000 fa2a 	bl	8009888 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8009434:	2040      	movs	r0, #64	@ 0x40
 8009436:	f000 fa39 	bl	80098ac <SX1276Read>
 800943a:	4603      	mov	r3, r0
 800943c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009440:	b2db      	uxtb	r3, r3
 8009442:	4619      	mov	r1, r3
 8009444:	2040      	movs	r0, #64	@ 0x40
 8009446:	f000 fa1f 	bl	8009888 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800944a:	2100      	movs	r1, #0
 800944c:	200f      	movs	r0, #15
 800944e:	f000 fa1b 	bl	8009888 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8009452:	2100      	movs	r1, #0
 8009454:	200d      	movs	r0, #13
 8009456:	f000 fa17 	bl	8009888 <SX1276Write>
        }
        break;
 800945a:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 800945c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009460:	2100      	movs	r1, #0
 8009462:	484a      	ldr	r0, [pc, #296]	@ (800958c <SX1276SetRx+0x484>)
 8009464:	f001 fa48 	bl	800a8f8 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8009468:	4b49      	ldr	r3, [pc, #292]	@ (8009590 <SX1276SetRx+0x488>)
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
    if( timeout != 0 )
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d006      	beq.n	8009484 <SX1276SetRx+0x37c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	4846      	ldr	r0, [pc, #280]	@ (8009594 <SX1276SetRx+0x48c>)
 800947a:	f7fe fd99 	bl	8007fb0 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 800947e:	4845      	ldr	r0, [pc, #276]	@ (8009594 <SX1276SetRx+0x48c>)
 8009480:	f7fe fb90 	bl	8007ba4 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8009484:	4b42      	ldr	r3, [pc, #264]	@ (8009590 <SX1276SetRx+0x488>)
 8009486:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800948a:	2b00      	cmp	r3, #0
 800948c:	d16f      	bne.n	800956e <SX1276SetRx+0x466>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800948e:	2005      	movs	r0, #5
 8009490:	f000 f98a 	bl	80097a8 <SX1276SetOpMode>

        if( rxContinuous == false )
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	f083 0301 	eor.w	r3, r3, #1
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d070      	beq.n	8009582 <SX1276SetRx+0x47a>
        {
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 80094a0:	4b3b      	ldr	r3, [pc, #236]	@ (8009590 <SX1276SetRx+0x488>)
 80094a2:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7f7 f840 	bl	800052c <__aeabi_i2d>
 80094ac:	4604      	mov	r4, r0
 80094ae:	460d      	mov	r5, r1
                                                             ( ( SX1276Read( REG_SYNCCONFIG ) &
 80094b0:	2027      	movs	r0, #39	@ 0x27
 80094b2:	f000 f9fb 	bl	80098ac <SX1276Read>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
                                                                ~RF_SYNCCONFIG_SYNCSIZE_MASK ) +
 80094bc:	4618      	mov	r0, r3
 80094be:	f7f7 f835 	bl	800052c <__aeabi_i2d>
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	4b34      	ldr	r3, [pc, #208]	@ (8009598 <SX1276SetRx+0x490>)
 80094c8:	f7f6 fee4 	bl	8000294 <__adddf3>
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 80094d0:	4620      	mov	r0, r4
 80094d2:	4629      	mov	r1, r5
 80094d4:	f7f6 fede 	bl	8000294 <__adddf3>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	4610      	mov	r0, r2
 80094de:	4619      	mov	r1, r3
                                                                1.0 ) + 10.0 ) /
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	4b2d      	ldr	r3, [pc, #180]	@ (800959c <SX1276SetRx+0x494>)
 80094e6:	f7f6 fed5 	bl	8000294 <__adddf3>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4610      	mov	r0, r2
 80094f0:	4619      	mov	r1, r3
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 80094f2:	f04f 0200 	mov.w	r2, #0
 80094f6:	4b2a      	ldr	r3, [pc, #168]	@ (80095a0 <SX1276SetRx+0x498>)
 80094f8:	f7f7 f882 	bl	8000600 <__aeabi_dmul>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4614      	mov	r4, r2
 8009502:	461d      	mov	r5, r3
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 8009504:	4b22      	ldr	r3, [pc, #136]	@ (8009590 <SX1276SetRx+0x488>)
 8009506:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800950a:	4618      	mov	r0, r3
 800950c:	f7f6 fffe 	bl	800050c <__aeabi_ui2d>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
                                                                1.0 ) + 10.0 ) /
 8009514:	4620      	mov	r0, r4
 8009516:	4629      	mov	r1, r5
 8009518:	f7f7 f99c 	bl	8000854 <__aeabi_ddiv>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	4610      	mov	r0, r2
 8009522:	4619      	mov	r1, r3
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8009524:	f04f 0200 	mov.w	r2, #0
 8009528:	4b1e      	ldr	r3, [pc, #120]	@ (80095a4 <SX1276SetRx+0x49c>)
 800952a:	f7f7 f869 	bl	8000600 <__aeabi_dmul>
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	ec43 2b17 	vmov	d7, r2, r3
 8009536:	eeb0 0a47 	vmov.f32	s0, s14
 800953a:	eef0 0a67 	vmov.f32	s1, s15
 800953e:	f002 f927 	bl	800b790 <ceil>
 8009542:	ec51 0b10 	vmov	r0, r1, d0
                                                             ( double )SX1276.Settings.Fsk.Datarate ) * 1e3 ) + 4 );
 8009546:	f04f 0200 	mov.w	r2, #0
 800954a:	4b17      	ldr	r3, [pc, #92]	@ (80095a8 <SX1276SetRx+0x4a0>)
 800954c:	f7f6 fea2 	bl	8000294 <__adddf3>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
            TimerSetValue( &RxTimeoutSyncWord, ceil( ( 8.0 * ( SX1276.Settings.Fsk.PreambleLen +
 8009554:	4610      	mov	r0, r2
 8009556:	4619      	mov	r1, r3
 8009558:	f7f7 fb14 	bl	8000b84 <__aeabi_d2uiz>
 800955c:	4603      	mov	r3, r0
 800955e:	4619      	mov	r1, r3
 8009560:	4812      	ldr	r0, [pc, #72]	@ (80095ac <SX1276SetRx+0x4a4>)
 8009562:	f7fe fd25 	bl	8007fb0 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8009566:	4811      	ldr	r0, [pc, #68]	@ (80095ac <SX1276SetRx+0x4a4>)
 8009568:	f7fe fb1c 	bl	8007ba4 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 800956c:	e009      	b.n	8009582 <SX1276SetRx+0x47a>
        if( rxContinuous == true )
 800956e:	7bfb      	ldrb	r3, [r7, #15]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <SX1276SetRx+0x474>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8009574:	2005      	movs	r0, #5
 8009576:	f000 f917 	bl	80097a8 <SX1276SetOpMode>
}
 800957a:	e002      	b.n	8009582 <SX1276SetRx+0x47a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 800957c:	2006      	movs	r0, #6
 800957e:	f000 f913 	bl	80097a8 <SX1276SetOpMode>
}
 8009582:	bf00      	nop
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bdb0      	pop	{r4, r5, r7, pc}
 800958a:	bf00      	nop
 800958c:	20000340 	.word	0x20000340
 8009590:	20000440 	.word	0x20000440
 8009594:	200005c4 	.word	0x200005c4
 8009598:	3ff00000 	.word	0x3ff00000
 800959c:	40240000 	.word	0x40240000
 80095a0:	40200000 	.word	0x40200000
 80095a4:	408f4000 	.word	0x408f4000
 80095a8:	40100000 	.word	0x40100000
 80095ac:	200005d8 	.word	0x200005d8

080095b0 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 80095b8:	6879      	ldr	r1, [r7, #4]
 80095ba:	4837      	ldr	r0, [pc, #220]	@ (8009698 <SX1276SetTx+0xe8>)
 80095bc:	f7fe fcf8 	bl	8007fb0 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 80095c0:	4b36      	ldr	r3, [pc, #216]	@ (800969c <SX1276SetTx+0xec>)
 80095c2:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d002      	beq.n	80095d0 <SX1276SetTx+0x20>
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d026      	beq.n	800961c <SX1276SetTx+0x6c>
 80095ce:	e054      	b.n	800967a <SX1276SetTx+0xca>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80095d0:	2040      	movs	r0, #64	@ 0x40
 80095d2:	f000 f96b 	bl	80098ac <SX1276Read>
 80095d6:	4603      	mov	r3, r0
 80095d8:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 80095da:	f003 0303 	and.w	r3, r3, #3
 80095de:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 80095e0:	f043 0310 	orr.w	r3, r3, #16
 80095e4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	4619      	mov	r1, r3
 80095ea:	2040      	movs	r0, #64	@ 0x40
 80095ec:	f000 f94c 	bl	8009888 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80095f0:	2041      	movs	r0, #65	@ 0x41
 80095f2:	f000 f95b 	bl	80098ac <SX1276Read>
 80095f6:	4603      	mov	r3, r0
 80095f8:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	4619      	mov	r1, r3
 8009600:	2041      	movs	r0, #65	@ 0x41
 8009602:	f000 f941 	bl	8009888 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8009606:	2035      	movs	r0, #53	@ 0x35
 8009608:	f000 f950 	bl	80098ac <SX1276Read>
 800960c:	4603      	mov	r3, r0
 800960e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009612:	b2da      	uxtb	r2, r3
 8009614:	4b21      	ldr	r3, [pc, #132]	@ (800969c <SX1276SetTx+0xec>)
 8009616:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
        }
        break;
 800961a:	e02e      	b.n	800967a <SX1276SetTx+0xca>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800961c:	4b1f      	ldr	r3, [pc, #124]	@ (800969c <SX1276SetTx+0xec>)
 800961e:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 8009622:	2b00      	cmp	r3, #0
 8009624:	d014      	beq.n	8009650 <SX1276SetTx+0xa0>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8009626:	21f5      	movs	r1, #245	@ 0xf5
 8009628:	2011      	movs	r0, #17
 800962a:	f000 f92d 	bl	8009888 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800962e:	2040      	movs	r0, #64	@ 0x40
 8009630:	f000 f93c 	bl	80098ac <SX1276Read>
 8009634:	4603      	mov	r3, r0
 8009636:	b25b      	sxtb	r3, r3
 8009638:	f003 0333 	and.w	r3, r3, #51	@ 0x33
 800963c:	b25b      	sxtb	r3, r3
 800963e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009642:	b25b      	sxtb	r3, r3
 8009644:	b2db      	uxtb	r3, r3
 8009646:	4619      	mov	r1, r3
 8009648:	2040      	movs	r0, #64	@ 0x40
 800964a:	f000 f91d 	bl	8009888 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 800964e:	e013      	b.n	8009678 <SX1276SetTx+0xc8>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8009650:	21f7      	movs	r1, #247	@ 0xf7
 8009652:	2011      	movs	r0, #17
 8009654:	f000 f918 	bl	8009888 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8009658:	2040      	movs	r0, #64	@ 0x40
 800965a:	f000 f927 	bl	80098ac <SX1276Read>
 800965e:	4603      	mov	r3, r0
 8009660:	b25b      	sxtb	r3, r3
 8009662:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009666:	b25b      	sxtb	r3, r3
 8009668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800966c:	b25b      	sxtb	r3, r3
 800966e:	b2db      	uxtb	r3, r3
 8009670:	4619      	mov	r1, r3
 8009672:	2040      	movs	r0, #64	@ 0x40
 8009674:	f000 f908 	bl	8009888 <SX1276Write>
        break;
 8009678:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 800967a:	4b08      	ldr	r3, [pc, #32]	@ (800969c <SX1276SetTx+0xec>)
 800967c:	2202      	movs	r2, #2
 800967e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
    TimerStart( &TxTimeoutTimer );
 8009682:	4805      	ldr	r0, [pc, #20]	@ (8009698 <SX1276SetTx+0xe8>)
 8009684:	f7fe fa8e 	bl	8007ba4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8009688:	2003      	movs	r0, #3
 800968a:	f000 f88d 	bl	80097a8 <SX1276SetOpMode>
}
 800968e:	bf00      	nop
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	200005b0 	.word	0x200005b0
 800969c:	20000440 	.word	0x20000440

080096a0 <SX1276StartCad>:

void SX1276StartCad( void )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 80096a4:	4b10      	ldr	r3, [pc, #64]	@ (80096e8 <SX1276StartCad+0x48>)
 80096a6:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d019      	beq.n	80096e2 <SX1276StartCad+0x42>
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d000      	beq.n	80096b4 <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 80096b2:	e017      	b.n	80096e4 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80096b4:	21fa      	movs	r1, #250	@ 0xfa
 80096b6:	2011      	movs	r0, #17
 80096b8:	f000 f8e6 	bl	8009888 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80096bc:	2040      	movs	r0, #64	@ 0x40
 80096be:	f000 f8f5 	bl	80098ac <SX1276Read>
 80096c2:	4603      	mov	r3, r0
 80096c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	4619      	mov	r1, r3
 80096cc:	2040      	movs	r0, #64	@ 0x40
 80096ce:	f000 f8db 	bl	8009888 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 80096d2:	4b05      	ldr	r3, [pc, #20]	@ (80096e8 <SX1276StartCad+0x48>)
 80096d4:	2203      	movs	r2, #3
 80096d6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80096da:	2007      	movs	r0, #7
 80096dc:	f000 f864 	bl	80097a8 <SX1276SetOpMode>
        break;
 80096e0:	e000      	b.n	80096e4 <SX1276StartCad+0x44>
        break;
 80096e2:	bf00      	nop
    }
}
 80096e4:	bf00      	nop
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	20000440 	.word	0x20000440

080096ec <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <SX1276ReadRssi+0x1a>
 8009700:	2b01      	cmp	r3, #1
 8009702:	d00a      	beq.n	800971a <SX1276ReadRssi+0x2e>
 8009704:	e01f      	b.n	8009746 <SX1276ReadRssi+0x5a>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8009706:	2011      	movs	r0, #17
 8009708:	f000 f8d0 	bl	80098ac <SX1276Read>
 800970c:	4603      	mov	r3, r0
 800970e:	085b      	lsrs	r3, r3, #1
 8009710:	b2db      	uxtb	r3, r3
 8009712:	425b      	negs	r3, r3
 8009714:	b29b      	uxth	r3, r3
 8009716:	81fb      	strh	r3, [r7, #14]
        break;
 8009718:	e019      	b.n	800974e <SX1276ReadRssi+0x62>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800971a:	4b10      	ldr	r3, [pc, #64]	@ (800975c <SX1276ReadRssi+0x70>)
 800971c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009720:	4a0f      	ldr	r2, [pc, #60]	@ (8009760 <SX1276ReadRssi+0x74>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d907      	bls.n	8009736 <SX1276ReadRssi+0x4a>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8009726:	201b      	movs	r0, #27
 8009728:	f000 f8c0 	bl	80098ac <SX1276Read>
 800972c:	4603      	mov	r3, r0
 800972e:	3b9d      	subs	r3, #157	@ 0x9d
 8009730:	b29b      	uxth	r3, r3
 8009732:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8009734:	e00b      	b.n	800974e <SX1276ReadRssi+0x62>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8009736:	201b      	movs	r0, #27
 8009738:	f000 f8b8 	bl	80098ac <SX1276Read>
 800973c:	4603      	mov	r3, r0
 800973e:	3ba4      	subs	r3, #164	@ 0xa4
 8009740:	b29b      	uxth	r3, r3
 8009742:	81fb      	strh	r3, [r7, #14]
        break;
 8009744:	e003      	b.n	800974e <SX1276ReadRssi+0x62>
    default:
        rssi = -1;
 8009746:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800974a:	81fb      	strh	r3, [r7, #14]
        break;
 800974c:	bf00      	nop
    }
    return rssi;
 800974e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20000440 	.word	0x20000440
 8009760:	1f4add40 	.word	0x1f4add40

08009764 <SX1276Reset>:

void SX1276Reset( void )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af02      	add	r7, sp, #8
    // Set RESET pin to 0
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800976a:	2300      	movs	r3, #0
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	2300      	movs	r3, #0
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	2300      	movs	r3, #0
 8009774:	2201      	movs	r2, #1
 8009776:	210b      	movs	r1, #11
 8009778:	480a      	ldr	r0, [pc, #40]	@ (80097a4 <SX1276Reset+0x40>)
 800977a:	f7fd fab1 	bl	8006ce0 <GpioInit>

    // Wait 1 ms
    DelayMs( 1 );
 800977e:	2001      	movs	r0, #1
 8009780:	f7fc ffa0 	bl	80066c4 <DelayMs>

    // Configure RESET as input
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8009784:	2301      	movs	r3, #1
 8009786:	9301      	str	r3, [sp, #4]
 8009788:	2300      	movs	r3, #0
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	2300      	movs	r3, #0
 800978e:	2200      	movs	r2, #0
 8009790:	210b      	movs	r1, #11
 8009792:	4804      	ldr	r0, [pc, #16]	@ (80097a4 <SX1276Reset+0x40>)
 8009794:	f7fd faa4 	bl	8006ce0 <GpioInit>

    // Wait 6 ms
    DelayMs( 6 );
 8009798:	2006      	movs	r0, #6
 800979a:	f7fc ff93 	bl	80066c4 <DelayMs>
}
 800979e:	bf00      	nop
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20000440 	.word	0x20000440

080097a8 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d103      	bne.n	80097c0 <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 80097b8:	2001      	movs	r0, #1
 80097ba:	f7fe f951 	bl	8007a60 <SX1276SetAntSwLowPower>
 80097be:	e00c      	b.n	80097da <SX1276SetOpMode+0x32>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 80097c0:	2000      	movs	r0, #0
 80097c2:	f7fe f94d 	bl	8007a60 <SX1276SetAntSwLowPower>
        if( opMode == RF_OPMODE_TRANSMITTER )
 80097c6:	79fb      	ldrb	r3, [r7, #7]
 80097c8:	2b03      	cmp	r3, #3
 80097ca:	d103      	bne.n	80097d4 <SX1276SetOpMode+0x2c>
        {
            SX1276SetAntSw( 1 );
 80097cc:	2001      	movs	r0, #1
 80097ce:	f7fe f9a1 	bl	8007b14 <SX1276SetAntSw>
 80097d2:	e002      	b.n	80097da <SX1276SetOpMode+0x32>
        }
        else
        {
            SX1276SetAntSw( 0 );
 80097d4:	2000      	movs	r0, #0
 80097d6:	f7fe f99d 	bl	8007b14 <SX1276SetAntSw>
        }
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80097da:	2001      	movs	r0, #1
 80097dc:	f000 f866 	bl	80098ac <SX1276Read>
 80097e0:	4603      	mov	r3, r0
 80097e2:	b25b      	sxtb	r3, r3
 80097e4:	f023 0307 	bic.w	r3, r3, #7
 80097e8:	b25a      	sxtb	r2, r3
 80097ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	b25b      	sxtb	r3, r3
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	4619      	mov	r1, r3
 80097f6:	2001      	movs	r0, #1
 80097f8:	f000 f846 	bl	8009888 <SX1276Write>
}
 80097fc:	bf00      	nop
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	71fb      	strb	r3, [r7, #7]
/*    if( SX1276.Settings.Modem == modem )
    {
        return;
    }
PKDEBUG */
    SX1276.Settings.Modem = modem;
 800980e:	4a1d      	ldr	r2, [pc, #116]	@ (8009884 <SX1276SetModem+0x80>)
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	f882 3115 	strb.w	r3, [r2, #277]	@ 0x115
    switch( SX1276.Settings.Modem )
 8009816:	4b1b      	ldr	r3, [pc, #108]	@ (8009884 <SX1276SetModem+0x80>)
 8009818:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800981c:	2b01      	cmp	r3, #1
 800981e:	d016      	beq.n	800984e <SX1276SetModem+0x4a>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8009820:	2000      	movs	r0, #0
 8009822:	f7ff ffc1 	bl	80097a8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8009826:	2001      	movs	r0, #1
 8009828:	f000 f840 	bl	80098ac <SX1276Read>
 800982c:	4603      	mov	r3, r0
 800982e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009832:	b2db      	uxtb	r3, r3
 8009834:	4619      	mov	r1, r3
 8009836:	2001      	movs	r0, #1
 8009838:	f000 f826 	bl	8009888 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800983c:	2100      	movs	r1, #0
 800983e:	2040      	movs	r0, #64	@ 0x40
 8009840:	f000 f822 	bl	8009888 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8009844:	2130      	movs	r1, #48	@ 0x30
 8009846:	2041      	movs	r0, #65	@ 0x41
 8009848:	f000 f81e 	bl	8009888 <SX1276Write>
        break;
 800984c:	e016      	b.n	800987c <SX1276SetModem+0x78>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800984e:	2000      	movs	r0, #0
 8009850:	f7ff ffaa 	bl	80097a8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8009854:	2001      	movs	r0, #1
 8009856:	f000 f829 	bl	80098ac <SX1276Read>
 800985a:	4603      	mov	r3, r0
 800985c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009860:	b2db      	uxtb	r3, r3
 8009862:	4619      	mov	r1, r3
 8009864:	2001      	movs	r0, #1
 8009866:	f000 f80f 	bl	8009888 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800986a:	2100      	movs	r1, #0
 800986c:	2040      	movs	r0, #64	@ 0x40
 800986e:	f000 f80b 	bl	8009888 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8009872:	2100      	movs	r1, #0
 8009874:	2041      	movs	r0, #65	@ 0x41
 8009876:	f000 f807 	bl	8009888 <SX1276Write>
        break;
 800987a:	bf00      	nop
    }
}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20000440 	.word	0x20000440

08009888 <SX1276Write>:

void SX1276Write( uint8_t addr, uint8_t data )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	4603      	mov	r3, r0
 8009890:	460a      	mov	r2, r1
 8009892:	71fb      	strb	r3, [r7, #7]
 8009894:	4613      	mov	r3, r2
 8009896:	71bb      	strb	r3, [r7, #6]
    SX1276WriteBuffer( addr, &data, 1 );
 8009898:	1db9      	adds	r1, r7, #6
 800989a:	79fb      	ldrb	r3, [r7, #7]
 800989c:	2201      	movs	r2, #1
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 f816 	bl	80098d0 <SX1276WriteBuffer>
}
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <SX1276Read>:

uint8_t SX1276Read( uint8_t addr )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 80098b6:	f107 010f 	add.w	r1, r7, #15
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	2201      	movs	r2, #1
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 f832 	bl	8009928 <SX1276ReadBuffer>
    return data;
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	6039      	str	r1, [r7, #0]
 80098da:	71fb      	strb	r3, [r7, #7]
 80098dc:	4613      	mov	r3, r2
 80098de:	71bb      	strb	r3, [r7, #6]
//    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 80098e0:	2100      	movs	r1, #0
 80098e2:	480f      	ldr	r0, [pc, #60]	@ (8009920 <SX1276WriteBuffer+0x50>)
 80098e4:	f7fd fa3b 	bl	8006d5e <GpioWrite>
/*    SpiInOut( &SX1276.Spi, addr | 0x80 );
    for( i = 0; i < size; i++ )
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
    }    */
    addr |= 0x80;
 80098e8:	79fb      	ldrb	r3, [r7, #7]
 80098ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit( &SX1276.Spi.Spi, &addr, 1, HAL_MAX_DELAY);
 80098f2:	1df9      	adds	r1, r7, #7
 80098f4:	f04f 33ff 	mov.w	r3, #4294967295
 80098f8:	2201      	movs	r2, #1
 80098fa:	480a      	ldr	r0, [pc, #40]	@ (8009924 <SX1276WriteBuffer+0x54>)
 80098fc:	f7fc f99a 	bl	8005c34 <HAL_SPI_Transmit>
    HAL_SPI_Transmit( &SX1276.Spi.Spi, buffer, size, HAL_MAX_DELAY);
 8009900:	79bb      	ldrb	r3, [r7, #6]
 8009902:	b29a      	uxth	r2, r3
 8009904:	f04f 33ff 	mov.w	r3, #4294967295
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	4806      	ldr	r0, [pc, #24]	@ (8009924 <SX1276WriteBuffer+0x54>)
 800990c:	f7fc f992 	bl	8005c34 <HAL_SPI_Transmit>

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8009910:	2101      	movs	r1, #1
 8009912:	4803      	ldr	r0, [pc, #12]	@ (8009920 <SX1276WriteBuffer+0x50>)
 8009914:	f7fd fa23 	bl	8006d5e <GpioWrite>
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	20000548 	.word	0x20000548
 8009924:	20000494 	.word	0x20000494

08009928 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	4603      	mov	r3, r0
 8009930:	6039      	str	r1, [r7, #0]
 8009932:	71fb      	strb	r3, [r7, #7]
 8009934:	4613      	mov	r3, r2
 8009936:	71bb      	strb	r3, [r7, #6]
//    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8009938:	2100      	movs	r1, #0
 800993a:	4816      	ldr	r0, [pc, #88]	@ (8009994 <SX1276ReadBuffer+0x6c>)
 800993c:	f7fd fa0f 	bl	8006d5e <GpioWrite>

//    SpiInOut( &SX1276.Spi, addr & 0x7F );
    addr &= 0x7f;
 8009940:	79fb      	ldrb	r3, [r7, #7]
 8009942:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009946:	b2db      	uxtb	r3, r3
 8009948:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit( &SX1276.Spi.Spi, &addr, 1, HAL_MAX_DELAY);
 800994a:	1df9      	adds	r1, r7, #7
 800994c:	f04f 33ff 	mov.w	r3, #4294967295
 8009950:	2201      	movs	r2, #1
 8009952:	4811      	ldr	r0, [pc, #68]	@ (8009998 <SX1276ReadBuffer+0x70>)
 8009954:	f7fc f96e 	bl	8005c34 <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(&SX1276.Spi.Spi) != HAL_SPI_STATE_READY);
 8009958:	bf00      	nop
 800995a:	480f      	ldr	r0, [pc, #60]	@ (8009998 <SX1276ReadBuffer+0x70>)
 800995c:	f7fc fd1c 	bl	8006398 <HAL_SPI_GetState>
 8009960:	4603      	mov	r3, r0
 8009962:	2b01      	cmp	r3, #1
 8009964:	d1f9      	bne.n	800995a <SX1276ReadBuffer+0x32>
    HAL_SPI_Receive( &SX1276.Spi.Spi, buffer, size, HAL_MAX_DELAY);
 8009966:	79bb      	ldrb	r3, [r7, #6]
 8009968:	b29a      	uxth	r2, r3
 800996a:	f04f 33ff 	mov.w	r3, #4294967295
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	4809      	ldr	r0, [pc, #36]	@ (8009998 <SX1276ReadBuffer+0x70>)
 8009972:	f7fc fb6f 	bl	8006054 <HAL_SPI_Receive>
    while(HAL_SPI_GetState(&SX1276.Spi.Spi) != HAL_SPI_STATE_READY);
 8009976:	bf00      	nop
 8009978:	4807      	ldr	r0, [pc, #28]	@ (8009998 <SX1276ReadBuffer+0x70>)
 800997a:	f7fc fd0d 	bl	8006398 <HAL_SPI_GetState>
 800997e:	4603      	mov	r3, r0
 8009980:	2b01      	cmp	r3, #1
 8009982:	d1f9      	bne.n	8009978 <SX1276ReadBuffer+0x50>
//    {
//        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
//    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8009984:	2101      	movs	r1, #1
 8009986:	4803      	ldr	r0, [pc, #12]	@ (8009994 <SX1276ReadBuffer+0x6c>)
 8009988:	f7fd f9e9 	bl	8006d5e <GpioWrite>
}
 800998c:	bf00      	nop
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20000548 	.word	0x20000548
 8009998:	20000494 	.word	0x20000494

0800999c <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	460b      	mov	r3, r1
 80099a6:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	461a      	mov	r2, r3
 80099ac:	6879      	ldr	r1, [r7, #4]
 80099ae:	2000      	movs	r0, #0
 80099b0:	f7ff ff8e 	bl	80098d0 <SX1276WriteBuffer>
}
 80099b4:	bf00      	nop
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 80099c8:	78fb      	ldrb	r3, [r7, #3]
 80099ca:	461a      	mov	r2, r3
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	2000      	movs	r0, #0
 80099d0:	f7ff ffaa 	bl	8009928 <SX1276ReadBuffer>
}
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	460a      	mov	r2, r1
 80099e6:	71fb      	strb	r3, [r7, #7]
 80099e8:	4613      	mov	r3, r2
 80099ea:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7ff ff08 	bl	8009804 <SX1276SetModem>

    switch( modem )
 80099f4:	79fb      	ldrb	r3, [r7, #7]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <SX1276SetMaxPayloadLength+0x24>
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d00e      	beq.n	8009a1c <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 80099fe:	e014      	b.n	8009a2a <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 8009a00:	4b0c      	ldr	r3, [pc, #48]	@ (8009a34 <SX1276SetMaxPayloadLength+0x58>)
 8009a02:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8009a06:	f083 0301 	eor.w	r3, r3, #1
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00b      	beq.n	8009a28 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8009a10:	79bb      	ldrb	r3, [r7, #6]
 8009a12:	4619      	mov	r1, r3
 8009a14:	2032      	movs	r0, #50	@ 0x32
 8009a16:	f7ff ff37 	bl	8009888 <SX1276Write>
        break;
 8009a1a:	e005      	b.n	8009a28 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8009a1c:	79bb      	ldrb	r3, [r7, #6]
 8009a1e:	4619      	mov	r1, r3
 8009a20:	2023      	movs	r0, #35	@ 0x23
 8009a22:	f7ff ff31 	bl	8009888 <SX1276Write>
        break;
 8009a26:	e000      	b.n	8009a2a <SX1276SetMaxPayloadLength+0x4e>
        break;
 8009a28:	bf00      	nop
}
 8009a2a:	bf00      	nop
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000440 	.word	0x20000440

08009a38 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 8009a3c:	4b32      	ldr	r3, [pc, #200]	@ (8009b08 <SX1276OnTimeoutIrq+0xd0>)
 8009a3e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d002      	beq.n	8009a4c <SX1276OnTimeoutIrq+0x14>
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d046      	beq.n	8009ad8 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8009a4a:	e05a      	b.n	8009b02 <SX1276OnTimeoutIrq+0xca>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8009a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8009b08 <SX1276OnTimeoutIrq+0xd0>)
 8009a4e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d132      	bne.n	8009abc <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8009a56:	4b2c      	ldr	r3, [pc, #176]	@ (8009b08 <SX1276OnTimeoutIrq+0xd0>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8009a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8009b08 <SX1276OnTimeoutIrq+0xd0>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8009a66:	4b28      	ldr	r3, [pc, #160]	@ (8009b08 <SX1276OnTimeoutIrq+0xd0>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
            SX1276.Settings.FskPacketHandler.Size = 0;
 8009a6e:	4b26      	ldr	r3, [pc, #152]	@ (8009b08 <SX1276OnTimeoutIrq+0xd0>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8009a76:	210b      	movs	r1, #11
 8009a78:	203e      	movs	r0, #62	@ 0x3e
 8009a7a:	f7ff ff05 	bl	8009888 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8009a7e:	2110      	movs	r1, #16
 8009a80:	203f      	movs	r0, #63	@ 0x3f
 8009a82:	f7ff ff01 	bl	8009888 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8009a86:	4b20      	ldr	r3, [pc, #128]	@ (8009b08 <SX1276OnTimeoutIrq+0xd0>)
 8009a88:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00e      	beq.n	8009aae <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8009a90:	200d      	movs	r0, #13
 8009a92:	f7ff ff0b 	bl	80098ac <SX1276Read>
 8009a96:	4603      	mov	r3, r0
 8009a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	200d      	movs	r0, #13
 8009aa2:	f7ff fef1 	bl	8009888 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8009aa6:	4819      	ldr	r0, [pc, #100]	@ (8009b0c <SX1276OnTimeoutIrq+0xd4>)
 8009aa8:	f7fe f87c 	bl	8007ba4 <TimerStart>
 8009aac:	e006      	b.n	8009abc <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 8009aae:	4b16      	ldr	r3, [pc, #88]	@ (8009b08 <SX1276OnTimeoutIrq+0xd0>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                TimerStop( &RxTimeoutSyncWord );
 8009ab6:	4815      	ldr	r0, [pc, #84]	@ (8009b0c <SX1276OnTimeoutIrq+0xd4>)
 8009ab8:	f7fe f9bc 	bl	8007e34 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009abc:	4b14      	ldr	r3, [pc, #80]	@ (8009b10 <SX1276OnTimeoutIrq+0xd8>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d01b      	beq.n	8009afc <SX1276OnTimeoutIrq+0xc4>
 8009ac4:	4b12      	ldr	r3, [pc, #72]	@ (8009b10 <SX1276OnTimeoutIrq+0xd8>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d016      	beq.n	8009afc <SX1276OnTimeoutIrq+0xc4>
            RadioEvents->RxTimeout( );
 8009ace:	4b10      	ldr	r3, [pc, #64]	@ (8009b10 <SX1276OnTimeoutIrq+0xd8>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	4798      	blx	r3
        break;
 8009ad6:	e011      	b.n	8009afc <SX1276OnTimeoutIrq+0xc4>
        SX1276.Settings.State = RF_IDLE;
 8009ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8009b08 <SX1276OnTimeoutIrq+0xd0>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8009b10 <SX1276OnTimeoutIrq+0xd8>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <SX1276OnTimeoutIrq+0xc8>
 8009ae8:	4b09      	ldr	r3, [pc, #36]	@ (8009b10 <SX1276OnTimeoutIrq+0xd8>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d006      	beq.n	8009b00 <SX1276OnTimeoutIrq+0xc8>
            RadioEvents->TxTimeout( );
 8009af2:	4b07      	ldr	r3, [pc, #28]	@ (8009b10 <SX1276OnTimeoutIrq+0xd8>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	4798      	blx	r3
        break;
 8009afa:	e001      	b.n	8009b00 <SX1276OnTimeoutIrq+0xc8>
        break;
 8009afc:	bf00      	nop
 8009afe:	e000      	b.n	8009b02 <SX1276OnTimeoutIrq+0xca>
        break;
 8009b00:	bf00      	nop
    }
}
 8009b02:	bf00      	nop
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20000440 	.word	0x20000440
 8009b0c:	200005d8 	.word	0x200005d8
 8009b10:	2000033c 	.word	0x2000033c

08009b14 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 8009b14:	b590      	push	{r4, r7, lr}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	70fb      	strb	r3, [r7, #3]

    switch( SX1276.Settings.State )
 8009b1e:	4ba7      	ldr	r3, [pc, #668]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009b20:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d003      	beq.n	8009b30 <SX1276OnDio0Irq+0x1c>
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	f000 81f0 	beq.w	8009f0e <SX1276OnDio0Irq+0x3fa>
                }
                break;
            }
            break;
        default:
            break;
 8009b2e:	e20d      	b.n	8009f4c <SX1276OnDio0Irq+0x438>
            switch( SX1276.Settings.Modem )
 8009b30:	4ba2      	ldr	r3, [pc, #648]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009b32:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <SX1276OnDio0Irq+0x2e>
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	f000 80ef 	beq.w	8009d1e <SX1276OnDio0Irq+0x20a>
                break;
 8009b40:	e1e4      	b.n	8009f0c <SX1276OnDio0Irq+0x3f8>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8009b42:	4b9e      	ldr	r3, [pc, #632]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009b44:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d051      	beq.n	8009bf0 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8009b4c:	203f      	movs	r0, #63	@ 0x3f
 8009b4e:	f7ff fead 	bl	80098ac <SX1276Read>
 8009b52:	4603      	mov	r3, r0
 8009b54:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8009b56:	78fb      	ldrb	r3, [r7, #3]
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d046      	beq.n	8009bf0 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8009b62:	210b      	movs	r1, #11
 8009b64:	203e      	movs	r0, #62	@ 0x3e
 8009b66:	f7ff fe8f 	bl	8009888 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8009b6a:	2110      	movs	r1, #16
 8009b6c:	203f      	movs	r0, #63	@ 0x3f
 8009b6e:	f7ff fe8b 	bl	8009888 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8009b72:	4893      	ldr	r0, [pc, #588]	@ (8009dc0 <SX1276OnDio0Irq+0x2ac>)
 8009b74:	f7fe f95e 	bl	8007e34 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8009b78:	4b90      	ldr	r3, [pc, #576]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009b7a:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8009b7e:	f083 0301 	eor.w	r3, r3, #1
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d007      	beq.n	8009b98 <SX1276OnDio0Irq+0x84>
                            TimerStop( &RxTimeoutSyncWord );
 8009b88:	488e      	ldr	r0, [pc, #568]	@ (8009dc4 <SX1276OnDio0Irq+0x2b0>)
 8009b8a:	f7fe f953 	bl	8007e34 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8009b8e:	4b8b      	ldr	r3, [pc, #556]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 8009b96:	e00d      	b.n	8009bb4 <SX1276OnDio0Irq+0xa0>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8009b98:	200d      	movs	r0, #13
 8009b9a:	f7ff fe87 	bl	80098ac <SX1276Read>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	200d      	movs	r0, #13
 8009baa:	f7ff fe6d 	bl	8009888 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8009bae:	4885      	ldr	r0, [pc, #532]	@ (8009dc4 <SX1276OnDio0Irq+0x2b0>)
 8009bb0:	f7fd fff8 	bl	8007ba4 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8009bb4:	4b84      	ldr	r3, [pc, #528]	@ (8009dc8 <SX1276OnDio0Irq+0x2b4>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d008      	beq.n	8009bce <SX1276OnDio0Irq+0xba>
 8009bbc:	4b82      	ldr	r3, [pc, #520]	@ (8009dc8 <SX1276OnDio0Irq+0x2b4>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <SX1276OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 8009bc6:	4b80      	ldr	r3, [pc, #512]	@ (8009dc8 <SX1276OnDio0Irq+0x2b4>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8009bce:	4b7b      	ldr	r3, [pc, #492]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8009bd6:	4b79      	ldr	r3, [pc, #484]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8009bde:	4b77      	ldr	r3, [pc, #476]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8009be6:	4b75      	ldr	r3, [pc, #468]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                        break;
 8009bee:	e18d      	b.n	8009f0c <SX1276OnDio0Irq+0x3f8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8009bf0:	4b72      	ldr	r3, [pc, #456]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009bf2:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d133      	bne.n	8009c62 <SX1276OnDio0Irq+0x14e>
 8009bfa:	4b70      	ldr	r3, [pc, #448]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009bfc:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d12e      	bne.n	8009c62 <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8009c04:	4b6d      	ldr	r3, [pc, #436]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009c06:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8009c0a:	f083 0301 	eor.w	r3, r3, #1
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d004      	beq.n	8009c1e <SX1276OnDio0Irq+0x10a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8009c14:	2101      	movs	r1, #1
 8009c16:	486d      	ldr	r0, [pc, #436]	@ (8009dcc <SX1276OnDio0Irq+0x2b8>)
 8009c18:	f7ff fed0 	bl	80099bc <SX1276ReadFifo>
 8009c1c:	e007      	b.n	8009c2e <SX1276OnDio0Irq+0x11a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8009c1e:	2032      	movs	r0, #50	@ 0x32
 8009c20:	f7ff fe44 	bl	80098ac <SX1276Read>
 8009c24:	4603      	mov	r3, r0
 8009c26:	461a      	mov	r2, r3
 8009c28:	4b64      	ldr	r3, [pc, #400]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009c2a:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009c2e:	4b63      	ldr	r3, [pc, #396]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009c30:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009c34:	461a      	mov	r2, r3
 8009c36:	4b66      	ldr	r3, [pc, #408]	@ (8009dd0 <SX1276OnDio0Irq+0x2bc>)
 8009c38:	18d0      	adds	r0, r2, r3
 8009c3a:	4b60      	ldr	r3, [pc, #384]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009c3c:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	4b5e      	ldr	r3, [pc, #376]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009c44:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	4619      	mov	r1, r3
 8009c50:	f7ff feb4 	bl	80099bc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009c54:	4b59      	ldr	r3, [pc, #356]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009c56:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 8009c5a:	4b58      	ldr	r3, [pc, #352]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009c5c:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
 8009c60:	e018      	b.n	8009c94 <SX1276OnDio0Irq+0x180>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009c62:	4b56      	ldr	r3, [pc, #344]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009c64:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009c68:	461a      	mov	r2, r3
 8009c6a:	4b59      	ldr	r3, [pc, #356]	@ (8009dd0 <SX1276OnDio0Irq+0x2bc>)
 8009c6c:	18d0      	adds	r0, r2, r3
 8009c6e:	4b53      	ldr	r3, [pc, #332]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009c70:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 8009c74:	b2da      	uxtb	r2, r3
 8009c76:	4b51      	ldr	r3, [pc, #324]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009c78:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	4619      	mov	r1, r3
 8009c84:	f7ff fe9a 	bl	80099bc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8009c88:	4b4c      	ldr	r3, [pc, #304]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009c8a:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 8009c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009c90:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8009c94:	4b49      	ldr	r3, [pc, #292]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009c96:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8009c9a:	f083 0301 	eor.w	r3, r3, #1
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d007      	beq.n	8009cb4 <SX1276OnDio0Irq+0x1a0>
                    SX1276.Settings.State = RF_IDLE;
 8009ca4:	4b45      	ldr	r3, [pc, #276]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    TimerStart( &RxTimeoutSyncWord );
 8009cac:	4845      	ldr	r0, [pc, #276]	@ (8009dc4 <SX1276OnDio0Irq+0x2b0>)
 8009cae:	f7fd ff79 	bl	8007ba4 <TimerStart>
 8009cb2:	e00a      	b.n	8009cca <SX1276OnDio0Irq+0x1b6>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8009cb4:	200d      	movs	r0, #13
 8009cb6:	f7ff fdf9 	bl	80098ac <SX1276Read>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	200d      	movs	r0, #13
 8009cc6:	f7ff fddf 	bl	8009888 <SX1276Write>
                TimerStop( &RxTimeoutTimer );
 8009cca:	483d      	ldr	r0, [pc, #244]	@ (8009dc0 <SX1276OnDio0Irq+0x2ac>)
 8009ccc:	f7fe f8b2 	bl	8007e34 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009cd0:	4b3d      	ldr	r3, [pc, #244]	@ (8009dc8 <SX1276OnDio0Irq+0x2b4>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d011      	beq.n	8009cfc <SX1276OnDio0Irq+0x1e8>
 8009cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8009dc8 <SX1276OnDio0Irq+0x2b4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00c      	beq.n	8009cfc <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8009ce2:	4b39      	ldr	r3, [pc, #228]	@ (8009dc8 <SX1276OnDio0Irq+0x2b4>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	689c      	ldr	r4, [r3, #8]
 8009ce8:	4b34      	ldr	r3, [pc, #208]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009cea:	f8b3 1146 	ldrh.w	r1, [r3, #326]	@ 0x146
 8009cee:	4b33      	ldr	r3, [pc, #204]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009cf0:	f993 313e 	ldrsb.w	r3, [r3, #318]	@ 0x13e
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	4835      	ldr	r0, [pc, #212]	@ (8009dd0 <SX1276OnDio0Irq+0x2bc>)
 8009cfa:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8009cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8009d04:	4b2d      	ldr	r3, [pc, #180]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8009d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                SX1276.Settings.FskPacketHandler.Size = 0;
 8009d14:	4b29      	ldr	r3, [pc, #164]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                break;
 8009d1c:	e0f6      	b.n	8009f0c <SX1276OnDio0Irq+0x3f8>
                    int8_t snr = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	71fb      	strb	r3, [r7, #7]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8009d22:	2140      	movs	r1, #64	@ 0x40
 8009d24:	2012      	movs	r0, #18
 8009d26:	f7ff fdaf 	bl	8009888 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8009d2a:	2012      	movs	r0, #18
 8009d2c:	f7ff fdbe 	bl	80098ac <SX1276Read>
 8009d30:	4603      	mov	r3, r0
 8009d32:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8009d34:	78fb      	ldrb	r3, [r7, #3]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	f003 0320 	and.w	r3, r3, #32
 8009d3c:	2b20      	cmp	r3, #32
 8009d3e:	d122      	bne.n	8009d86 <SX1276OnDio0Irq+0x272>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8009d40:	2120      	movs	r1, #32
 8009d42:	2012      	movs	r0, #18
 8009d44:	f7ff fda0 	bl	8009888 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8009d48:	4b1c      	ldr	r3, [pc, #112]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009d4a:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 8009d4e:	f083 0301 	eor.w	r3, r3, #1
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 8009d58:	4b18      	ldr	r3, [pc, #96]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                        TimerStop( &RxTimeoutTimer );
 8009d60:	4817      	ldr	r0, [pc, #92]	@ (8009dc0 <SX1276OnDio0Irq+0x2ac>)
 8009d62:	f7fe f867 	bl	8007e34 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8009d66:	4b18      	ldr	r3, [pc, #96]	@ (8009dc8 <SX1276OnDio0Irq+0x2b4>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 80cb 	beq.w	8009f06 <SX1276OnDio0Irq+0x3f2>
 8009d70:	4b15      	ldr	r3, [pc, #84]	@ (8009dc8 <SX1276OnDio0Irq+0x2b4>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 80c5 	beq.w	8009f06 <SX1276OnDio0Irq+0x3f2>
                            RadioEvents->RxError( );
 8009d7c:	4b12      	ldr	r3, [pc, #72]	@ (8009dc8 <SX1276OnDio0Irq+0x2b4>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	4798      	blx	r3
                        break;
 8009d84:	e0bf      	b.n	8009f06 <SX1276OnDio0Irq+0x3f2>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 8009d86:	2019      	movs	r0, #25
 8009d88:	f7ff fd90 	bl	80098ac <SX1276Read>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	b25a      	sxtb	r2, r3
 8009d90:	4b0a      	ldr	r3, [pc, #40]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009d92:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 8009d96:	4b09      	ldr	r3, [pc, #36]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009d98:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	da19      	bge.n	8009dd4 <SX1276OnDio0Irq+0x2c0>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 8009da0:	4b06      	ldr	r3, [pc, #24]	@ (8009dbc <SX1276OnDio0Irq+0x2a8>)
 8009da2:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 8009da6:	425b      	negs	r3, r3
 8009da8:	109b      	asrs	r3, r3, #2
 8009daa:	b25b      	sxtb	r3, r3
 8009dac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009db0:	71fb      	strb	r3, [r7, #7]
                        snr = -snr;
 8009db2:	79fb      	ldrb	r3, [r7, #7]
 8009db4:	425b      	negs	r3, r3
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	71fb      	strb	r3, [r7, #7]
 8009dba:	e013      	b.n	8009de4 <SX1276OnDio0Irq+0x2d0>
 8009dbc:	20000440 	.word	0x20000440
 8009dc0:	200005c4 	.word	0x200005c4
 8009dc4:	200005d8 	.word	0x200005d8
 8009dc8:	2000033c 	.word	0x2000033c
 8009dcc:	20000586 	.word	0x20000586
 8009dd0:	20000340 	.word	0x20000340
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 8009dd4:	4b5f      	ldr	r3, [pc, #380]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009dd6:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 8009dda:	109b      	asrs	r3, r3, #2
 8009ddc:	b25b      	sxtb	r3, r3
 8009dde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009de2:	71fb      	strb	r3, [r7, #7]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8009de4:	201a      	movs	r0, #26
 8009de6:	f7ff fd61 	bl	80098ac <SX1276Read>
 8009dea:	4603      	mov	r3, r0
 8009dec:	80bb      	strh	r3, [r7, #4]
                    if( snr < 0 )
 8009dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	da2d      	bge.n	8009e52 <SX1276OnDio0Irq+0x33e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8009df6:	4b57      	ldr	r3, [pc, #348]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009df8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009dfc:	4a56      	ldr	r2, [pc, #344]	@ (8009f58 <SX1276OnDio0Irq+0x444>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d913      	bls.n	8009e2a <SX1276OnDio0Irq+0x316>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8009e02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009e06:	111b      	asrs	r3, r3, #4
 8009e08:	b21b      	sxth	r3, r3
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	88bb      	ldrh	r3, [r7, #4]
 8009e0e:	4413      	add	r3, r2
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	4413      	add	r3, r2
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	3b9d      	subs	r3, #157	@ 0x9d
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	b21a      	sxth	r2, r3
 8009e22:	4b4c      	ldr	r3, [pc, #304]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009e24:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 8009e28:	e036      	b.n	8009e98 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8009e2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009e2e:	111b      	asrs	r3, r3, #4
 8009e30:	b21b      	sxth	r3, r3
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	88bb      	ldrh	r3, [r7, #4]
 8009e36:	4413      	add	r3, r2
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	4413      	add	r3, r2
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	3ba4      	subs	r3, #164	@ 0xa4
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	b21a      	sxth	r2, r3
 8009e4a:	4b42      	ldr	r3, [pc, #264]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009e4c:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 8009e50:	e022      	b.n	8009e98 <SX1276OnDio0Irq+0x384>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8009e52:	4b40      	ldr	r3, [pc, #256]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009e54:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009e58:	4a3f      	ldr	r2, [pc, #252]	@ (8009f58 <SX1276OnDio0Irq+0x444>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d90e      	bls.n	8009e7c <SX1276OnDio0Irq+0x368>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8009e5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009e62:	111b      	asrs	r3, r3, #4
 8009e64:	b21b      	sxth	r3, r3
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	88bb      	ldrh	r3, [r7, #4]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	3b9d      	subs	r3, #157	@ 0x9d
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	b21a      	sxth	r2, r3
 8009e74:	4b37      	ldr	r3, [pc, #220]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009e76:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
 8009e7a:	e00d      	b.n	8009e98 <SX1276OnDio0Irq+0x384>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8009e7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009e80:	111b      	asrs	r3, r3, #4
 8009e82:	b21b      	sxth	r3, r3
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	88bb      	ldrh	r3, [r7, #4]
 8009e88:	4413      	add	r3, r2
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	3ba4      	subs	r3, #164	@ 0xa4
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	b21a      	sxth	r2, r3
 8009e92:	4b30      	ldr	r3, [pc, #192]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009e94:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8009e98:	2013      	movs	r0, #19
 8009e9a:	f7ff fd07 	bl	80098ac <SX1276Read>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009ea4:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8009ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009eaa:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8009eae:	4619      	mov	r1, r3
 8009eb0:	482a      	ldr	r0, [pc, #168]	@ (8009f5c <SX1276OnDio0Irq+0x448>)
 8009eb2:	f7ff fd83 	bl	80099bc <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8009eb6:	4b27      	ldr	r3, [pc, #156]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009eb8:	f893 3162 	ldrb.w	r3, [r3, #354]	@ 0x162
 8009ebc:	f083 0301 	eor.w	r3, r3, #1
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d003      	beq.n	8009ece <SX1276OnDio0Irq+0x3ba>
                        SX1276.Settings.State = RF_IDLE;
 8009ec6:	4b23      	ldr	r3, [pc, #140]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    TimerStop( &RxTimeoutTimer );
 8009ece:	4824      	ldr	r0, [pc, #144]	@ (8009f60 <SX1276OnDio0Irq+0x44c>)
 8009ed0:	f7fd ffb0 	bl	8007e34 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009ed4:	4b23      	ldr	r3, [pc, #140]	@ (8009f64 <SX1276OnDio0Irq+0x450>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d016      	beq.n	8009f0a <SX1276OnDio0Irq+0x3f6>
 8009edc:	4b21      	ldr	r3, [pc, #132]	@ (8009f64 <SX1276OnDio0Irq+0x450>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d011      	beq.n	8009f0a <SX1276OnDio0Irq+0x3f6>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8009ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8009f64 <SX1276OnDio0Irq+0x450>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	689c      	ldr	r4, [r3, #8]
 8009eec:	4b19      	ldr	r3, [pc, #100]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009eee:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	4b17      	ldr	r3, [pc, #92]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009ef6:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	@ 0x16a
 8009efa:	4b16      	ldr	r3, [pc, #88]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009efc:	f993 3168 	ldrsb.w	r3, [r3, #360]	@ 0x168
 8009f00:	4816      	ldr	r0, [pc, #88]	@ (8009f5c <SX1276OnDio0Irq+0x448>)
 8009f02:	47a0      	blx	r4
                break;
 8009f04:	e001      	b.n	8009f0a <SX1276OnDio0Irq+0x3f6>
                        break;
 8009f06:	bf00      	nop
 8009f08:	e020      	b.n	8009f4c <SX1276OnDio0Irq+0x438>
                break;
 8009f0a:	bf00      	nop
            break;
 8009f0c:	e01e      	b.n	8009f4c <SX1276OnDio0Irq+0x438>
            TimerStop( &TxTimeoutTimer );
 8009f0e:	4816      	ldr	r0, [pc, #88]	@ (8009f68 <SX1276OnDio0Irq+0x454>)
 8009f10:	f7fd ff90 	bl	8007e34 <TimerStop>
            switch( SX1276.Settings.Modem )
 8009f14:	4b0f      	ldr	r3, [pc, #60]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009f16:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d103      	bne.n	8009f26 <SX1276OnDio0Irq+0x412>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8009f1e:	2108      	movs	r1, #8
 8009f20:	2012      	movs	r0, #18
 8009f22:	f7ff fcb1 	bl	8009888 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8009f26:	4b0b      	ldr	r3, [pc, #44]	@ (8009f54 <SX1276OnDio0Irq+0x440>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009f64 <SX1276OnDio0Irq+0x450>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d008      	beq.n	8009f48 <SX1276OnDio0Irq+0x434>
 8009f36:	4b0b      	ldr	r3, [pc, #44]	@ (8009f64 <SX1276OnDio0Irq+0x450>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d003      	beq.n	8009f48 <SX1276OnDio0Irq+0x434>
                    RadioEvents->TxDone( );
 8009f40:	4b08      	ldr	r3, [pc, #32]	@ (8009f64 <SX1276OnDio0Irq+0x450>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4798      	blx	r3
                break;
 8009f48:	bf00      	nop
            break;
 8009f4a:	bf00      	nop
    }
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd90      	pop	{r4, r7, pc}
 8009f54:	20000440 	.word	0x20000440
 8009f58:	1f4add40 	.word	0x1f4add40
 8009f5c:	20000340 	.word	0x20000340
 8009f60:	200005c4 	.word	0x200005c4
 8009f64:	2000033c 	.word	0x2000033c
 8009f68:	200005b0 	.word	0x200005b0

08009f6c <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 8009f70:	4b69      	ldr	r3, [pc, #420]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 8009f72:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d003      	beq.n	8009f82 <SX1276OnDio1Irq+0x16>
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	f000 8082 	beq.w	800a084 <SX1276OnDio1Irq+0x118>
            default:
                break;
            }
            break;
        default:
            break;
 8009f80:	e0c8      	b.n	800a114 <SX1276OnDio1Irq+0x1a8>
            switch( SX1276.Settings.Modem )
 8009f82:	4b65      	ldr	r3, [pc, #404]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 8009f84:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <SX1276OnDio1Irq+0x26>
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d05f      	beq.n	800a050 <SX1276OnDio1Irq+0xe4>
                break;
 8009f90:	e077      	b.n	800a082 <SX1276OnDio1Irq+0x116>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8009f92:	4b61      	ldr	r3, [pc, #388]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 8009f94:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d119      	bne.n	8009fd0 <SX1276OnDio1Irq+0x64>
 8009f9c:	4b5e      	ldr	r3, [pc, #376]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 8009f9e:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d114      	bne.n	8009fd0 <SX1276OnDio1Irq+0x64>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8009fa6:	4b5c      	ldr	r3, [pc, #368]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 8009fa8:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8009fac:	f083 0301 	eor.w	r3, r3, #1
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d004      	beq.n	8009fc0 <SX1276OnDio1Irq+0x54>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	4858      	ldr	r0, [pc, #352]	@ (800a11c <SX1276OnDio1Irq+0x1b0>)
 8009fba:	f7ff fcff 	bl	80099bc <SX1276ReadFifo>
 8009fbe:	e007      	b.n	8009fd0 <SX1276OnDio1Irq+0x64>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8009fc0:	2032      	movs	r0, #50	@ 0x32
 8009fc2:	f7ff fc73 	bl	80098ac <SX1276Read>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	461a      	mov	r2, r3
 8009fca:	4b53      	ldr	r3, [pc, #332]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 8009fcc:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 8009fd0:	4b51      	ldr	r3, [pc, #324]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 8009fd2:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	4b4f      	ldr	r3, [pc, #316]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 8009fda:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	4a4d      	ldr	r2, [pc, #308]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 8009fe2:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	dd18      	ble.n	800a01c <SX1276OnDio1Irq+0xb0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 8009fea:	4b4b      	ldr	r3, [pc, #300]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 8009fec:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	4b4b      	ldr	r3, [pc, #300]	@ (800a120 <SX1276OnDio1Irq+0x1b4>)
 8009ff4:	4413      	add	r3, r2
 8009ff6:	4a48      	ldr	r2, [pc, #288]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 8009ff8:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7ff fcdc 	bl	80099bc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 800a004:	4b44      	ldr	r3, [pc, #272]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a006:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a00a:	4a43      	ldr	r2, [pc, #268]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a00c:	f892 214a 	ldrb.w	r2, [r2, #330]	@ 0x14a
 800a010:	4413      	add	r3, r2
 800a012:	b29a      	uxth	r2, r3
 800a014:	4b40      	ldr	r3, [pc, #256]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a016:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800a01a:	e032      	b.n	800a082 <SX1276OnDio1Irq+0x116>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800a01c:	4b3e      	ldr	r3, [pc, #248]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a01e:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a022:	461a      	mov	r2, r3
 800a024:	4b3e      	ldr	r3, [pc, #248]	@ (800a120 <SX1276OnDio1Irq+0x1b4>)
 800a026:	18d0      	adds	r0, r2, r3
 800a028:	4b3b      	ldr	r3, [pc, #236]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a02a:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	4b39      	ldr	r3, [pc, #228]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a032:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a036:	b2db      	uxtb	r3, r3
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	4619      	mov	r1, r3
 800a03e:	f7ff fcbd 	bl	80099bc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800a042:	4b35      	ldr	r3, [pc, #212]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a044:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 800a048:	4b33      	ldr	r3, [pc, #204]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a04a:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800a04e:	e018      	b.n	800a082 <SX1276OnDio1Irq+0x116>
                TimerStop( &RxTimeoutTimer );
 800a050:	4834      	ldr	r0, [pc, #208]	@ (800a124 <SX1276OnDio1Irq+0x1b8>)
 800a052:	f7fd feef 	bl	8007e34 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800a056:	2180      	movs	r1, #128	@ 0x80
 800a058:	2012      	movs	r0, #18
 800a05a:	f7ff fc15 	bl	8009888 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800a05e:	4b2e      	ldr	r3, [pc, #184]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a066:	4b30      	ldr	r3, [pc, #192]	@ (800a128 <SX1276OnDio1Irq+0x1bc>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d008      	beq.n	800a080 <SX1276OnDio1Irq+0x114>
 800a06e:	4b2e      	ldr	r3, [pc, #184]	@ (800a128 <SX1276OnDio1Irq+0x1bc>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <SX1276OnDio1Irq+0x114>
                    RadioEvents->RxTimeout( );
 800a078:	4b2b      	ldr	r3, [pc, #172]	@ (800a128 <SX1276OnDio1Irq+0x1bc>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	4798      	blx	r3
                break;
 800a080:	bf00      	nop
            break;
 800a082:	e047      	b.n	800a114 <SX1276OnDio1Irq+0x1a8>
            switch( SX1276.Settings.Modem )
 800a084:	4b24      	ldr	r3, [pc, #144]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a086:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <SX1276OnDio1Irq+0x126>
 800a08e:	2b01      	cmp	r3, #1
                break;
 800a090:	e03f      	b.n	800a112 <SX1276OnDio1Irq+0x1a6>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800a092:	4b21      	ldr	r3, [pc, #132]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a094:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800a098:	461a      	mov	r2, r3
 800a09a:	4b1f      	ldr	r3, [pc, #124]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a09c:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	4a1d      	ldr	r2, [pc, #116]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a0a4:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	dd18      	ble.n	800a0de <SX1276OnDio1Irq+0x172>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800a0ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a0ae:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	4b1a      	ldr	r3, [pc, #104]	@ (800a120 <SX1276OnDio1Irq+0x1b4>)
 800a0b6:	4413      	add	r3, r2
 800a0b8:	4a17      	ldr	r2, [pc, #92]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a0ba:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800a0be:	4611      	mov	r1, r2
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7ff fc6b 	bl	800999c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800a0c6:	4b14      	ldr	r3, [pc, #80]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a0c8:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a0cc:	4a12      	ldr	r2, [pc, #72]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a0ce:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800a0d2:	4413      	add	r3, r2
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	4b10      	ldr	r3, [pc, #64]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a0d8:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800a0dc:	e018      	b.n	800a110 <SX1276OnDio1Irq+0x1a4>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800a0de:	4b0e      	ldr	r3, [pc, #56]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a0e0:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	4b0e      	ldr	r3, [pc, #56]	@ (800a120 <SX1276OnDio1Irq+0x1b4>)
 800a0e8:	18d0      	adds	r0, r2, r3
 800a0ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a0ec:	f8b3 3146 	ldrh.w	r3, [r3, #326]	@ 0x146
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	4b09      	ldr	r3, [pc, #36]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a0f4:	f8b3 3148 	ldrh.w	r3, [r3, #328]	@ 0x148
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	4619      	mov	r1, r3
 800a100:	f7ff fc4c 	bl	800999c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800a104:	4b04      	ldr	r3, [pc, #16]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a106:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
 800a10a:	4b03      	ldr	r3, [pc, #12]	@ (800a118 <SX1276OnDio1Irq+0x1ac>)
 800a10c:	f8a3 2148 	strh.w	r2, [r3, #328]	@ 0x148
                break;
 800a110:	bf00      	nop
            break;
 800a112:	bf00      	nop
    }
}
 800a114:	bf00      	nop
 800a116:	bd80      	pop	{r7, pc}
 800a118:	20000440 	.word	0x20000440
 800a11c:	20000586 	.word	0x20000586
 800a120:	20000340 	.word	0x20000340
 800a124:	200005c4 	.word	0x200005c4
 800a128:	2000033c 	.word	0x2000033c
 800a12c:	00000000 	.word	0x00000000

0800a130 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 800a130:	b598      	push	{r3, r4, r7, lr}
 800a132:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800a134:	4b5a      	ldr	r3, [pc, #360]	@ (800a2a0 <SX1276OnDio2Irq+0x170>)
 800a136:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d002      	beq.n	800a144 <SX1276OnDio2Irq+0x14>
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d07b      	beq.n	800a23a <SX1276OnDio2Irq+0x10a>
            default:
                break;
            }
            break;
        default:
            break;
 800a142:	e0a6      	b.n	800a292 <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 800a144:	4b56      	ldr	r3, [pc, #344]	@ (800a2a0 <SX1276OnDio2Irq+0x170>)
 800a146:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d002      	beq.n	800a154 <SX1276OnDio2Irq+0x24>
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d050      	beq.n	800a1f4 <SX1276OnDio2Irq+0xc4>
                break;
 800a152:	e071      	b.n	800a238 <SX1276OnDio2Irq+0x108>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 800a154:	4b52      	ldr	r3, [pc, #328]	@ (800a2a0 <SX1276OnDio2Irq+0x170>)
 800a156:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d169      	bne.n	800a232 <SX1276OnDio2Irq+0x102>
 800a15e:	4b50      	ldr	r3, [pc, #320]	@ (800a2a0 <SX1276OnDio2Irq+0x170>)
 800a160:	f893 313d 	ldrb.w	r3, [r3, #317]	@ 0x13d
 800a164:	2b00      	cmp	r3, #0
 800a166:	d164      	bne.n	800a232 <SX1276OnDio2Irq+0x102>
                    TimerStop( &RxTimeoutSyncWord );
 800a168:	484e      	ldr	r0, [pc, #312]	@ (800a2a4 <SX1276OnDio2Irq+0x174>)
 800a16a:	f7fd fe63 	bl	8007e34 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800a16e:	4b4c      	ldr	r3, [pc, #304]	@ (800a2a0 <SX1276OnDio2Irq+0x170>)
 800a170:	2201      	movs	r2, #1
 800a172:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800a176:	2011      	movs	r0, #17
 800a178:	f7ff fb98 	bl	80098ac <SX1276Read>
 800a17c:	4603      	mov	r3, r0
 800a17e:	085b      	lsrs	r3, r3, #1
 800a180:	b2db      	uxtb	r3, r3
 800a182:	425b      	negs	r3, r3
 800a184:	b2db      	uxtb	r3, r3
 800a186:	b25a      	sxtb	r2, r3
 800a188:	4b45      	ldr	r3, [pc, #276]	@ (800a2a0 <SX1276OnDio2Irq+0x170>)
 800a18a:	f883 213e 	strb.w	r2, [r3, #318]	@ 0x13e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800a18e:	201b      	movs	r0, #27
 800a190:	f7ff fb8c 	bl	80098ac <SX1276Read>
 800a194:	4603      	mov	r3, r0
 800a196:	021c      	lsls	r4, r3, #8
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 800a198:	201c      	movs	r0, #28
 800a19a:	f7ff fb87 	bl	80098ac <SX1276Read>
 800a19e:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800a1a0:	4323      	orrs	r3, r4
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7f6 f9c2 	bl	800052c <__aeabi_i2d>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	f7f6 fcc0 	bl	8000b34 <__aeabi_d2iz>
 800a1b4:	4603      	mov	r3, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7f6 f9b8 	bl	800052c <__aeabi_i2d>
 800a1bc:	a336      	add	r3, pc, #216	@ (adr r3, 800a298 <SX1276OnDio2Irq+0x168>)
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	f7f6 fa1d 	bl	8000600 <__aeabi_dmul>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	f7f6 fcb1 	bl	8000b34 <__aeabi_d2iz>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	4a32      	ldr	r2, [pc, #200]	@ (800a2a0 <SX1276OnDio2Irq+0x170>)
 800a1d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800a1da:	200c      	movs	r0, #12
 800a1dc:	f7ff fb66 	bl	80098ac <SX1276Read>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	095b      	lsrs	r3, r3, #5
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	f003 0307 	and.w	r3, r3, #7
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	4b2c      	ldr	r3, [pc, #176]	@ (800a2a0 <SX1276OnDio2Irq+0x170>)
 800a1ee:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
                break;
 800a1f2:	e01e      	b.n	800a232 <SX1276OnDio2Irq+0x102>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800a1f4:	4b2a      	ldr	r3, [pc, #168]	@ (800a2a0 <SX1276OnDio2Irq+0x170>)
 800a1f6:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d01b      	beq.n	800a236 <SX1276OnDio2Irq+0x106>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800a1fe:	2102      	movs	r1, #2
 800a200:	2012      	movs	r0, #18
 800a202:	f7ff fb41 	bl	8009888 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800a206:	4b28      	ldr	r3, [pc, #160]	@ (800a2a8 <SX1276OnDio2Irq+0x178>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d013      	beq.n	800a236 <SX1276OnDio2Irq+0x106>
 800a20e:	4b26      	ldr	r3, [pc, #152]	@ (800a2a8 <SX1276OnDio2Irq+0x178>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00e      	beq.n	800a236 <SX1276OnDio2Irq+0x106>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800a218:	4b23      	ldr	r3, [pc, #140]	@ (800a2a8 <SX1276OnDio2Irq+0x178>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	695c      	ldr	r4, [r3, #20]
 800a21e:	201c      	movs	r0, #28
 800a220:	f7ff fb44 	bl	80098ac <SX1276Read>
 800a224:	4603      	mov	r3, r0
 800a226:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	4618      	mov	r0, r3
 800a22e:	47a0      	blx	r4
                break;
 800a230:	e001      	b.n	800a236 <SX1276OnDio2Irq+0x106>
                break;
 800a232:	bf00      	nop
 800a234:	e02d      	b.n	800a292 <SX1276OnDio2Irq+0x162>
                break;
 800a236:	bf00      	nop
            break;
 800a238:	e02b      	b.n	800a292 <SX1276OnDio2Irq+0x162>
            switch( SX1276.Settings.Modem )
 800a23a:	4b19      	ldr	r3, [pc, #100]	@ (800a2a0 <SX1276OnDio2Irq+0x170>)
 800a23c:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a240:	2b00      	cmp	r3, #0
 800a242:	d020      	beq.n	800a286 <SX1276OnDio2Irq+0x156>
 800a244:	2b01      	cmp	r3, #1
 800a246:	d120      	bne.n	800a28a <SX1276OnDio2Irq+0x15a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800a248:	4b15      	ldr	r3, [pc, #84]	@ (800a2a0 <SX1276OnDio2Irq+0x170>)
 800a24a:	f893 315f 	ldrb.w	r3, [r3, #351]	@ 0x15f
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d01d      	beq.n	800a28e <SX1276OnDio2Irq+0x15e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800a252:	2102      	movs	r1, #2
 800a254:	2012      	movs	r0, #18
 800a256:	f7ff fb17 	bl	8009888 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800a25a:	4b13      	ldr	r3, [pc, #76]	@ (800a2a8 <SX1276OnDio2Irq+0x178>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d015      	beq.n	800a28e <SX1276OnDio2Irq+0x15e>
 800a262:	4b11      	ldr	r3, [pc, #68]	@ (800a2a8 <SX1276OnDio2Irq+0x178>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	695b      	ldr	r3, [r3, #20]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d010      	beq.n	800a28e <SX1276OnDio2Irq+0x15e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800a26c:	4b0e      	ldr	r3, [pc, #56]	@ (800a2a8 <SX1276OnDio2Irq+0x178>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	695c      	ldr	r4, [r3, #20]
 800a272:	201c      	movs	r0, #28
 800a274:	f7ff fb1a 	bl	80098ac <SX1276Read>
 800a278:	4603      	mov	r3, r0
 800a27a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	4618      	mov	r0, r3
 800a282:	47a0      	blx	r4
                break;
 800a284:	e003      	b.n	800a28e <SX1276OnDio2Irq+0x15e>
                break;
 800a286:	bf00      	nop
 800a288:	e002      	b.n	800a290 <SX1276OnDio2Irq+0x160>
                break;
 800a28a:	bf00      	nop
 800a28c:	e000      	b.n	800a290 <SX1276OnDio2Irq+0x160>
                break;
 800a28e:	bf00      	nop
            break;
 800a290:	bf00      	nop
    }
}
 800a292:	bf00      	nop
 800a294:	bd98      	pop	{r3, r4, r7, pc}
 800a296:	bf00      	nop
 800a298:	00000000 	.word	0x00000000
 800a29c:	404e8480 	.word	0x404e8480
 800a2a0:	20000440 	.word	0x20000440
 800a2a4:	200005d8 	.word	0x200005d8
 800a2a8:	2000033c 	.word	0x2000033c

0800a2ac <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800a2b0:	4b1d      	ldr	r3, [pc, #116]	@ (800a328 <SX1276OnDio3Irq+0x7c>)
 800a2b2:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d030      	beq.n	800a31c <SX1276OnDio3Irq+0x70>
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d000      	beq.n	800a2c0 <SX1276OnDio3Irq+0x14>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 800a2be:	e030      	b.n	800a322 <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800a2c0:	2012      	movs	r0, #18
 800a2c2:	f7ff faf3 	bl	80098ac <SX1276Read>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	f003 0301 	and.w	r3, r3, #1
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d112      	bne.n	800a2f6 <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800a2d0:	2105      	movs	r1, #5
 800a2d2:	2012      	movs	r0, #18
 800a2d4:	f7ff fad8 	bl	8009888 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a2d8:	4b14      	ldr	r3, [pc, #80]	@ (800a32c <SX1276OnDio3Irq+0x80>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d01f      	beq.n	800a320 <SX1276OnDio3Irq+0x74>
 800a2e0:	4b12      	ldr	r3, [pc, #72]	@ (800a32c <SX1276OnDio3Irq+0x80>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d01a      	beq.n	800a320 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 800a2ea:	4b10      	ldr	r3, [pc, #64]	@ (800a32c <SX1276OnDio3Irq+0x80>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	2001      	movs	r0, #1
 800a2f2:	4798      	blx	r3
        break;
 800a2f4:	e014      	b.n	800a320 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800a2f6:	2104      	movs	r1, #4
 800a2f8:	2012      	movs	r0, #18
 800a2fa:	f7ff fac5 	bl	8009888 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a2fe:	4b0b      	ldr	r3, [pc, #44]	@ (800a32c <SX1276OnDio3Irq+0x80>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00c      	beq.n	800a320 <SX1276OnDio3Irq+0x74>
 800a306:	4b09      	ldr	r3, [pc, #36]	@ (800a32c <SX1276OnDio3Irq+0x80>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d007      	beq.n	800a320 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 800a310:	4b06      	ldr	r3, [pc, #24]	@ (800a32c <SX1276OnDio3Irq+0x80>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	2000      	movs	r0, #0
 800a318:	4798      	blx	r3
        break;
 800a31a:	e001      	b.n	800a320 <SX1276OnDio3Irq+0x74>
        break;
 800a31c:	bf00      	nop
 800a31e:	e000      	b.n	800a322 <SX1276OnDio3Irq+0x76>
        break;
 800a320:	bf00      	nop
    }
}
 800a322:	bf00      	nop
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	20000440 	.word	0x20000440
 800a32c:	2000033c 	.word	0x2000033c

0800a330 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 800a330:	b480      	push	{r7}
 800a332:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800a334:	4b0c      	ldr	r3, [pc, #48]	@ (800a368 <SX1276OnDio4Irq+0x38>)
 800a336:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <SX1276OnDio4Irq+0x14>
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d00a      	beq.n	800a358 <SX1276OnDio4Irq+0x28>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 800a342:	e00c      	b.n	800a35e <SX1276OnDio4Irq+0x2e>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800a344:	4b08      	ldr	r3, [pc, #32]	@ (800a368 <SX1276OnDio4Irq+0x38>)
 800a346:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d106      	bne.n	800a35c <SX1276OnDio4Irq+0x2c>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800a34e:	4b06      	ldr	r3, [pc, #24]	@ (800a368 <SX1276OnDio4Irq+0x38>)
 800a350:	2201      	movs	r2, #1
 800a352:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
        break;
 800a356:	e001      	b.n	800a35c <SX1276OnDio4Irq+0x2c>
        break;
 800a358:	bf00      	nop
 800a35a:	e000      	b.n	800a35e <SX1276OnDio4Irq+0x2e>
        break;
 800a35c:	bf00      	nop
    }
}
 800a35e:	bf00      	nop
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	20000440 	.word	0x20000440

0800a36c <atoi>:
 800a36c:	220a      	movs	r2, #10
 800a36e:	2100      	movs	r1, #0
 800a370:	f000 b87a 	b.w	800a468 <strtol>

0800a374 <_strtol_l.constprop.0>:
 800a374:	2b24      	cmp	r3, #36	@ 0x24
 800a376:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a37a:	4686      	mov	lr, r0
 800a37c:	4690      	mov	r8, r2
 800a37e:	d801      	bhi.n	800a384 <_strtol_l.constprop.0+0x10>
 800a380:	2b01      	cmp	r3, #1
 800a382:	d106      	bne.n	800a392 <_strtol_l.constprop.0+0x1e>
 800a384:	f000 fb06 	bl	800a994 <__errno>
 800a388:	2316      	movs	r3, #22
 800a38a:	6003      	str	r3, [r0, #0]
 800a38c:	2000      	movs	r0, #0
 800a38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a392:	460d      	mov	r5, r1
 800a394:	4833      	ldr	r0, [pc, #204]	@ (800a464 <_strtol_l.constprop.0+0xf0>)
 800a396:	462a      	mov	r2, r5
 800a398:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a39c:	5d06      	ldrb	r6, [r0, r4]
 800a39e:	f016 0608 	ands.w	r6, r6, #8
 800a3a2:	d1f8      	bne.n	800a396 <_strtol_l.constprop.0+0x22>
 800a3a4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a3a6:	d12d      	bne.n	800a404 <_strtol_l.constprop.0+0x90>
 800a3a8:	782c      	ldrb	r4, [r5, #0]
 800a3aa:	2601      	movs	r6, #1
 800a3ac:	1c95      	adds	r5, r2, #2
 800a3ae:	f033 0210 	bics.w	r2, r3, #16
 800a3b2:	d109      	bne.n	800a3c8 <_strtol_l.constprop.0+0x54>
 800a3b4:	2c30      	cmp	r4, #48	@ 0x30
 800a3b6:	d12a      	bne.n	800a40e <_strtol_l.constprop.0+0x9a>
 800a3b8:	782a      	ldrb	r2, [r5, #0]
 800a3ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a3be:	2a58      	cmp	r2, #88	@ 0x58
 800a3c0:	d125      	bne.n	800a40e <_strtol_l.constprop.0+0x9a>
 800a3c2:	786c      	ldrb	r4, [r5, #1]
 800a3c4:	2310      	movs	r3, #16
 800a3c6:	3502      	adds	r5, #2
 800a3c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	fbbc f9f3 	udiv	r9, ip, r3
 800a3d8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a3dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a3e0:	2f09      	cmp	r7, #9
 800a3e2:	d81b      	bhi.n	800a41c <_strtol_l.constprop.0+0xa8>
 800a3e4:	463c      	mov	r4, r7
 800a3e6:	42a3      	cmp	r3, r4
 800a3e8:	dd27      	ble.n	800a43a <_strtol_l.constprop.0+0xc6>
 800a3ea:	1c57      	adds	r7, r2, #1
 800a3ec:	d007      	beq.n	800a3fe <_strtol_l.constprop.0+0x8a>
 800a3ee:	4581      	cmp	r9, r0
 800a3f0:	d320      	bcc.n	800a434 <_strtol_l.constprop.0+0xc0>
 800a3f2:	d101      	bne.n	800a3f8 <_strtol_l.constprop.0+0x84>
 800a3f4:	45a2      	cmp	sl, r4
 800a3f6:	db1d      	blt.n	800a434 <_strtol_l.constprop.0+0xc0>
 800a3f8:	fb00 4003 	mla	r0, r0, r3, r4
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a402:	e7eb      	b.n	800a3dc <_strtol_l.constprop.0+0x68>
 800a404:	2c2b      	cmp	r4, #43	@ 0x2b
 800a406:	bf04      	itt	eq
 800a408:	782c      	ldrbeq	r4, [r5, #0]
 800a40a:	1c95      	addeq	r5, r2, #2
 800a40c:	e7cf      	b.n	800a3ae <_strtol_l.constprop.0+0x3a>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1da      	bne.n	800a3c8 <_strtol_l.constprop.0+0x54>
 800a412:	2c30      	cmp	r4, #48	@ 0x30
 800a414:	bf0c      	ite	eq
 800a416:	2308      	moveq	r3, #8
 800a418:	230a      	movne	r3, #10
 800a41a:	e7d5      	b.n	800a3c8 <_strtol_l.constprop.0+0x54>
 800a41c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a420:	2f19      	cmp	r7, #25
 800a422:	d801      	bhi.n	800a428 <_strtol_l.constprop.0+0xb4>
 800a424:	3c37      	subs	r4, #55	@ 0x37
 800a426:	e7de      	b.n	800a3e6 <_strtol_l.constprop.0+0x72>
 800a428:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a42c:	2f19      	cmp	r7, #25
 800a42e:	d804      	bhi.n	800a43a <_strtol_l.constprop.0+0xc6>
 800a430:	3c57      	subs	r4, #87	@ 0x57
 800a432:	e7d8      	b.n	800a3e6 <_strtol_l.constprop.0+0x72>
 800a434:	f04f 32ff 	mov.w	r2, #4294967295
 800a438:	e7e1      	b.n	800a3fe <_strtol_l.constprop.0+0x8a>
 800a43a:	1c53      	adds	r3, r2, #1
 800a43c:	d108      	bne.n	800a450 <_strtol_l.constprop.0+0xdc>
 800a43e:	2322      	movs	r3, #34	@ 0x22
 800a440:	4660      	mov	r0, ip
 800a442:	f8ce 3000 	str.w	r3, [lr]
 800a446:	f1b8 0f00 	cmp.w	r8, #0
 800a44a:	d0a0      	beq.n	800a38e <_strtol_l.constprop.0+0x1a>
 800a44c:	1e69      	subs	r1, r5, #1
 800a44e:	e006      	b.n	800a45e <_strtol_l.constprop.0+0xea>
 800a450:	b106      	cbz	r6, 800a454 <_strtol_l.constprop.0+0xe0>
 800a452:	4240      	negs	r0, r0
 800a454:	f1b8 0f00 	cmp.w	r8, #0
 800a458:	d099      	beq.n	800a38e <_strtol_l.constprop.0+0x1a>
 800a45a:	2a00      	cmp	r2, #0
 800a45c:	d1f6      	bne.n	800a44c <_strtol_l.constprop.0+0xd8>
 800a45e:	f8c8 1000 	str.w	r1, [r8]
 800a462:	e794      	b.n	800a38e <_strtol_l.constprop.0+0x1a>
 800a464:	0800bcf5 	.word	0x0800bcf5

0800a468 <strtol>:
 800a468:	4613      	mov	r3, r2
 800a46a:	460a      	mov	r2, r1
 800a46c:	4601      	mov	r1, r0
 800a46e:	4802      	ldr	r0, [pc, #8]	@ (800a478 <strtol+0x10>)
 800a470:	6800      	ldr	r0, [r0, #0]
 800a472:	f7ff bf7f 	b.w	800a374 <_strtol_l.constprop.0>
 800a476:	bf00      	nop
 800a478:	20000048 	.word	0x20000048

0800a47c <std>:
 800a47c:	2300      	movs	r3, #0
 800a47e:	b510      	push	{r4, lr}
 800a480:	4604      	mov	r4, r0
 800a482:	6083      	str	r3, [r0, #8]
 800a484:	8181      	strh	r1, [r0, #12]
 800a486:	4619      	mov	r1, r3
 800a488:	6643      	str	r3, [r0, #100]	@ 0x64
 800a48a:	81c2      	strh	r2, [r0, #14]
 800a48c:	2208      	movs	r2, #8
 800a48e:	6183      	str	r3, [r0, #24]
 800a490:	e9c0 3300 	strd	r3, r3, [r0]
 800a494:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a498:	305c      	adds	r0, #92	@ 0x5c
 800a49a:	f000 fa2d 	bl	800a8f8 <memset>
 800a49e:	4b0d      	ldr	r3, [pc, #52]	@ (800a4d4 <std+0x58>)
 800a4a0:	6224      	str	r4, [r4, #32]
 800a4a2:	6263      	str	r3, [r4, #36]	@ 0x24
 800a4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d8 <std+0x5c>)
 800a4a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a4dc <std+0x60>)
 800a4aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a4ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e0 <std+0x64>)
 800a4ae:	6323      	str	r3, [r4, #48]	@ 0x30
 800a4b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e4 <std+0x68>)
 800a4b2:	429c      	cmp	r4, r3
 800a4b4:	d006      	beq.n	800a4c4 <std+0x48>
 800a4b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a4ba:	4294      	cmp	r4, r2
 800a4bc:	d002      	beq.n	800a4c4 <std+0x48>
 800a4be:	33d0      	adds	r3, #208	@ 0xd0
 800a4c0:	429c      	cmp	r4, r3
 800a4c2:	d105      	bne.n	800a4d0 <std+0x54>
 800a4c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4cc:	f000 ba8c 	b.w	800a9e8 <__retarget_lock_init_recursive>
 800a4d0:	bd10      	pop	{r4, pc}
 800a4d2:	bf00      	nop
 800a4d4:	0800a749 	.word	0x0800a749
 800a4d8:	0800a76b 	.word	0x0800a76b
 800a4dc:	0800a7a3 	.word	0x0800a7a3
 800a4e0:	0800a7c7 	.word	0x0800a7c7
 800a4e4:	200005ec 	.word	0x200005ec

0800a4e8 <stdio_exit_handler>:
 800a4e8:	4a02      	ldr	r2, [pc, #8]	@ (800a4f4 <stdio_exit_handler+0xc>)
 800a4ea:	4903      	ldr	r1, [pc, #12]	@ (800a4f8 <stdio_exit_handler+0x10>)
 800a4ec:	4803      	ldr	r0, [pc, #12]	@ (800a4fc <stdio_exit_handler+0x14>)
 800a4ee:	f000 b869 	b.w	800a5c4 <_fwalk_sglue>
 800a4f2:	bf00      	nop
 800a4f4:	2000003c 	.word	0x2000003c
 800a4f8:	0800b541 	.word	0x0800b541
 800a4fc:	2000004c 	.word	0x2000004c

0800a500 <cleanup_stdio>:
 800a500:	6841      	ldr	r1, [r0, #4]
 800a502:	4b0c      	ldr	r3, [pc, #48]	@ (800a534 <cleanup_stdio+0x34>)
 800a504:	4299      	cmp	r1, r3
 800a506:	b510      	push	{r4, lr}
 800a508:	4604      	mov	r4, r0
 800a50a:	d001      	beq.n	800a510 <cleanup_stdio+0x10>
 800a50c:	f001 f818 	bl	800b540 <_fflush_r>
 800a510:	68a1      	ldr	r1, [r4, #8]
 800a512:	4b09      	ldr	r3, [pc, #36]	@ (800a538 <cleanup_stdio+0x38>)
 800a514:	4299      	cmp	r1, r3
 800a516:	d002      	beq.n	800a51e <cleanup_stdio+0x1e>
 800a518:	4620      	mov	r0, r4
 800a51a:	f001 f811 	bl	800b540 <_fflush_r>
 800a51e:	68e1      	ldr	r1, [r4, #12]
 800a520:	4b06      	ldr	r3, [pc, #24]	@ (800a53c <cleanup_stdio+0x3c>)
 800a522:	4299      	cmp	r1, r3
 800a524:	d004      	beq.n	800a530 <cleanup_stdio+0x30>
 800a526:	4620      	mov	r0, r4
 800a528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a52c:	f001 b808 	b.w	800b540 <_fflush_r>
 800a530:	bd10      	pop	{r4, pc}
 800a532:	bf00      	nop
 800a534:	200005ec 	.word	0x200005ec
 800a538:	20000654 	.word	0x20000654
 800a53c:	200006bc 	.word	0x200006bc

0800a540 <global_stdio_init.part.0>:
 800a540:	b510      	push	{r4, lr}
 800a542:	4b0b      	ldr	r3, [pc, #44]	@ (800a570 <global_stdio_init.part.0+0x30>)
 800a544:	2104      	movs	r1, #4
 800a546:	4c0b      	ldr	r4, [pc, #44]	@ (800a574 <global_stdio_init.part.0+0x34>)
 800a548:	4a0b      	ldr	r2, [pc, #44]	@ (800a578 <global_stdio_init.part.0+0x38>)
 800a54a:	4620      	mov	r0, r4
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	2200      	movs	r2, #0
 800a550:	f7ff ff94 	bl	800a47c <std>
 800a554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a558:	2201      	movs	r2, #1
 800a55a:	2109      	movs	r1, #9
 800a55c:	f7ff ff8e 	bl	800a47c <std>
 800a560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a564:	2202      	movs	r2, #2
 800a566:	2112      	movs	r1, #18
 800a568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a56c:	f7ff bf86 	b.w	800a47c <std>
 800a570:	20000724 	.word	0x20000724
 800a574:	200005ec 	.word	0x200005ec
 800a578:	0800a4e9 	.word	0x0800a4e9

0800a57c <__sfp_lock_acquire>:
 800a57c:	4801      	ldr	r0, [pc, #4]	@ (800a584 <__sfp_lock_acquire+0x8>)
 800a57e:	f000 ba34 	b.w	800a9ea <__retarget_lock_acquire_recursive>
 800a582:	bf00      	nop
 800a584:	2000072d 	.word	0x2000072d

0800a588 <__sfp_lock_release>:
 800a588:	4801      	ldr	r0, [pc, #4]	@ (800a590 <__sfp_lock_release+0x8>)
 800a58a:	f000 ba2f 	b.w	800a9ec <__retarget_lock_release_recursive>
 800a58e:	bf00      	nop
 800a590:	2000072d 	.word	0x2000072d

0800a594 <__sinit>:
 800a594:	b510      	push	{r4, lr}
 800a596:	4604      	mov	r4, r0
 800a598:	f7ff fff0 	bl	800a57c <__sfp_lock_acquire>
 800a59c:	6a23      	ldr	r3, [r4, #32]
 800a59e:	b11b      	cbz	r3, 800a5a8 <__sinit+0x14>
 800a5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5a4:	f7ff bff0 	b.w	800a588 <__sfp_lock_release>
 800a5a8:	4b04      	ldr	r3, [pc, #16]	@ (800a5bc <__sinit+0x28>)
 800a5aa:	6223      	str	r3, [r4, #32]
 800a5ac:	4b04      	ldr	r3, [pc, #16]	@ (800a5c0 <__sinit+0x2c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1f5      	bne.n	800a5a0 <__sinit+0xc>
 800a5b4:	f7ff ffc4 	bl	800a540 <global_stdio_init.part.0>
 800a5b8:	e7f2      	b.n	800a5a0 <__sinit+0xc>
 800a5ba:	bf00      	nop
 800a5bc:	0800a501 	.word	0x0800a501
 800a5c0:	20000724 	.word	0x20000724

0800a5c4 <_fwalk_sglue>:
 800a5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	4688      	mov	r8, r1
 800a5cc:	4614      	mov	r4, r2
 800a5ce:	2600      	movs	r6, #0
 800a5d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5d4:	f1b9 0901 	subs.w	r9, r9, #1
 800a5d8:	d505      	bpl.n	800a5e6 <_fwalk_sglue+0x22>
 800a5da:	6824      	ldr	r4, [r4, #0]
 800a5dc:	2c00      	cmp	r4, #0
 800a5de:	d1f7      	bne.n	800a5d0 <_fwalk_sglue+0xc>
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5e6:	89ab      	ldrh	r3, [r5, #12]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d907      	bls.n	800a5fc <_fwalk_sglue+0x38>
 800a5ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	d003      	beq.n	800a5fc <_fwalk_sglue+0x38>
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	47c0      	blx	r8
 800a5fa:	4306      	orrs	r6, r0
 800a5fc:	3568      	adds	r5, #104	@ 0x68
 800a5fe:	e7e9      	b.n	800a5d4 <_fwalk_sglue+0x10>

0800a600 <iprintf>:
 800a600:	b40f      	push	{r0, r1, r2, r3}
 800a602:	b507      	push	{r0, r1, r2, lr}
 800a604:	4906      	ldr	r1, [pc, #24]	@ (800a620 <iprintf+0x20>)
 800a606:	ab04      	add	r3, sp, #16
 800a608:	6808      	ldr	r0, [r1, #0]
 800a60a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a60e:	6881      	ldr	r1, [r0, #8]
 800a610:	9301      	str	r3, [sp, #4]
 800a612:	f000 fc67 	bl	800aee4 <_vfiprintf_r>
 800a616:	b003      	add	sp, #12
 800a618:	f85d eb04 	ldr.w	lr, [sp], #4
 800a61c:	b004      	add	sp, #16
 800a61e:	4770      	bx	lr
 800a620:	20000048 	.word	0x20000048

0800a624 <_puts_r>:
 800a624:	6a03      	ldr	r3, [r0, #32]
 800a626:	b570      	push	{r4, r5, r6, lr}
 800a628:	4605      	mov	r5, r0
 800a62a:	460e      	mov	r6, r1
 800a62c:	6884      	ldr	r4, [r0, #8]
 800a62e:	b90b      	cbnz	r3, 800a634 <_puts_r+0x10>
 800a630:	f7ff ffb0 	bl	800a594 <__sinit>
 800a634:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a636:	07db      	lsls	r3, r3, #31
 800a638:	d405      	bmi.n	800a646 <_puts_r+0x22>
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	0598      	lsls	r0, r3, #22
 800a63e:	d402      	bmi.n	800a646 <_puts_r+0x22>
 800a640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a642:	f000 f9d2 	bl	800a9ea <__retarget_lock_acquire_recursive>
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	0719      	lsls	r1, r3, #28
 800a64a:	d502      	bpl.n	800a652 <_puts_r+0x2e>
 800a64c:	6923      	ldr	r3, [r4, #16]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d135      	bne.n	800a6be <_puts_r+0x9a>
 800a652:	4621      	mov	r1, r4
 800a654:	4628      	mov	r0, r5
 800a656:	f000 f8f9 	bl	800a84c <__swsetup_r>
 800a65a:	b380      	cbz	r0, 800a6be <_puts_r+0x9a>
 800a65c:	f04f 35ff 	mov.w	r5, #4294967295
 800a660:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a662:	07da      	lsls	r2, r3, #31
 800a664:	d405      	bmi.n	800a672 <_puts_r+0x4e>
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	059b      	lsls	r3, r3, #22
 800a66a:	d402      	bmi.n	800a672 <_puts_r+0x4e>
 800a66c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a66e:	f000 f9bd 	bl	800a9ec <__retarget_lock_release_recursive>
 800a672:	4628      	mov	r0, r5
 800a674:	bd70      	pop	{r4, r5, r6, pc}
 800a676:	2b00      	cmp	r3, #0
 800a678:	da04      	bge.n	800a684 <_puts_r+0x60>
 800a67a:	69a2      	ldr	r2, [r4, #24]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	dc17      	bgt.n	800a6b0 <_puts_r+0x8c>
 800a680:	290a      	cmp	r1, #10
 800a682:	d015      	beq.n	800a6b0 <_puts_r+0x8c>
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	6022      	str	r2, [r4, #0]
 800a68a:	7019      	strb	r1, [r3, #0]
 800a68c:	68a3      	ldr	r3, [r4, #8]
 800a68e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a692:	3b01      	subs	r3, #1
 800a694:	60a3      	str	r3, [r4, #8]
 800a696:	2900      	cmp	r1, #0
 800a698:	d1ed      	bne.n	800a676 <_puts_r+0x52>
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	da11      	bge.n	800a6c2 <_puts_r+0x9e>
 800a69e:	4622      	mov	r2, r4
 800a6a0:	210a      	movs	r1, #10
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f000 f893 	bl	800a7ce <__swbuf_r>
 800a6a8:	3001      	adds	r0, #1
 800a6aa:	d0d7      	beq.n	800a65c <_puts_r+0x38>
 800a6ac:	250a      	movs	r5, #10
 800a6ae:	e7d7      	b.n	800a660 <_puts_r+0x3c>
 800a6b0:	4622      	mov	r2, r4
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	f000 f88b 	bl	800a7ce <__swbuf_r>
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	d1e7      	bne.n	800a68c <_puts_r+0x68>
 800a6bc:	e7ce      	b.n	800a65c <_puts_r+0x38>
 800a6be:	3e01      	subs	r6, #1
 800a6c0:	e7e4      	b.n	800a68c <_puts_r+0x68>
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	6022      	str	r2, [r4, #0]
 800a6c8:	220a      	movs	r2, #10
 800a6ca:	701a      	strb	r2, [r3, #0]
 800a6cc:	e7ee      	b.n	800a6ac <_puts_r+0x88>
	...

0800a6d0 <puts>:
 800a6d0:	4b02      	ldr	r3, [pc, #8]	@ (800a6dc <puts+0xc>)
 800a6d2:	4601      	mov	r1, r0
 800a6d4:	6818      	ldr	r0, [r3, #0]
 800a6d6:	f7ff bfa5 	b.w	800a624 <_puts_r>
 800a6da:	bf00      	nop
 800a6dc:	20000048 	.word	0x20000048

0800a6e0 <sniprintf>:
 800a6e0:	b40c      	push	{r2, r3}
 800a6e2:	4b18      	ldr	r3, [pc, #96]	@ (800a744 <sniprintf+0x64>)
 800a6e4:	b530      	push	{r4, r5, lr}
 800a6e6:	1e0c      	subs	r4, r1, #0
 800a6e8:	b09d      	sub	sp, #116	@ 0x74
 800a6ea:	681d      	ldr	r5, [r3, #0]
 800a6ec:	da08      	bge.n	800a700 <sniprintf+0x20>
 800a6ee:	238b      	movs	r3, #139	@ 0x8b
 800a6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f4:	602b      	str	r3, [r5, #0]
 800a6f6:	b01d      	add	sp, #116	@ 0x74
 800a6f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6fc:	b002      	add	sp, #8
 800a6fe:	4770      	bx	lr
 800a700:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a704:	9002      	str	r0, [sp, #8]
 800a706:	9006      	str	r0, [sp, #24]
 800a708:	a902      	add	r1, sp, #8
 800a70a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a70e:	bf14      	ite	ne
 800a710:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a714:	4623      	moveq	r3, r4
 800a716:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a718:	4628      	mov	r0, r5
 800a71a:	9304      	str	r3, [sp, #16]
 800a71c:	9307      	str	r3, [sp, #28]
 800a71e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a722:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a726:	ab21      	add	r3, sp, #132	@ 0x84
 800a728:	9301      	str	r3, [sp, #4]
 800a72a:	f000 fab5 	bl	800ac98 <_svfiprintf_r>
 800a72e:	1c43      	adds	r3, r0, #1
 800a730:	bfbc      	itt	lt
 800a732:	238b      	movlt	r3, #139	@ 0x8b
 800a734:	602b      	strlt	r3, [r5, #0]
 800a736:	2c00      	cmp	r4, #0
 800a738:	d0dd      	beq.n	800a6f6 <sniprintf+0x16>
 800a73a:	9b02      	ldr	r3, [sp, #8]
 800a73c:	2200      	movs	r2, #0
 800a73e:	701a      	strb	r2, [r3, #0]
 800a740:	e7d9      	b.n	800a6f6 <sniprintf+0x16>
 800a742:	bf00      	nop
 800a744:	20000048 	.word	0x20000048

0800a748 <__sread>:
 800a748:	b510      	push	{r4, lr}
 800a74a:	460c      	mov	r4, r1
 800a74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a750:	f000 f8fc 	bl	800a94c <_read_r>
 800a754:	2800      	cmp	r0, #0
 800a756:	bfab      	itete	ge
 800a758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a75a:	89a3      	ldrhlt	r3, [r4, #12]
 800a75c:	181b      	addge	r3, r3, r0
 800a75e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a762:	bfac      	ite	ge
 800a764:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a766:	81a3      	strhlt	r3, [r4, #12]
 800a768:	bd10      	pop	{r4, pc}

0800a76a <__swrite>:
 800a76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a76e:	461f      	mov	r7, r3
 800a770:	898b      	ldrh	r3, [r1, #12]
 800a772:	4605      	mov	r5, r0
 800a774:	460c      	mov	r4, r1
 800a776:	05db      	lsls	r3, r3, #23
 800a778:	4616      	mov	r6, r2
 800a77a:	d505      	bpl.n	800a788 <__swrite+0x1e>
 800a77c:	2302      	movs	r3, #2
 800a77e:	2200      	movs	r2, #0
 800a780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a784:	f000 f8d0 	bl	800a928 <_lseek_r>
 800a788:	89a3      	ldrh	r3, [r4, #12]
 800a78a:	4632      	mov	r2, r6
 800a78c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a790:	4628      	mov	r0, r5
 800a792:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a796:	81a3      	strh	r3, [r4, #12]
 800a798:	463b      	mov	r3, r7
 800a79a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a79e:	f000 b8e7 	b.w	800a970 <_write_r>

0800a7a2 <__sseek>:
 800a7a2:	b510      	push	{r4, lr}
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7aa:	f000 f8bd 	bl	800a928 <_lseek_r>
 800a7ae:	1c43      	adds	r3, r0, #1
 800a7b0:	89a3      	ldrh	r3, [r4, #12]
 800a7b2:	bf15      	itete	ne
 800a7b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a7b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a7ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a7be:	81a3      	strheq	r3, [r4, #12]
 800a7c0:	bf18      	it	ne
 800a7c2:	81a3      	strhne	r3, [r4, #12]
 800a7c4:	bd10      	pop	{r4, pc}

0800a7c6 <__sclose>:
 800a7c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ca:	f000 b89d 	b.w	800a908 <_close_r>

0800a7ce <__swbuf_r>:
 800a7ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d0:	460e      	mov	r6, r1
 800a7d2:	4614      	mov	r4, r2
 800a7d4:	4605      	mov	r5, r0
 800a7d6:	b118      	cbz	r0, 800a7e0 <__swbuf_r+0x12>
 800a7d8:	6a03      	ldr	r3, [r0, #32]
 800a7da:	b90b      	cbnz	r3, 800a7e0 <__swbuf_r+0x12>
 800a7dc:	f7ff feda 	bl	800a594 <__sinit>
 800a7e0:	69a3      	ldr	r3, [r4, #24]
 800a7e2:	60a3      	str	r3, [r4, #8]
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	071a      	lsls	r2, r3, #28
 800a7e8:	d501      	bpl.n	800a7ee <__swbuf_r+0x20>
 800a7ea:	6923      	ldr	r3, [r4, #16]
 800a7ec:	b943      	cbnz	r3, 800a800 <__swbuf_r+0x32>
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f000 f82b 	bl	800a84c <__swsetup_r>
 800a7f6:	b118      	cbz	r0, 800a800 <__swbuf_r+0x32>
 800a7f8:	f04f 37ff 	mov.w	r7, #4294967295
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a800:	6823      	ldr	r3, [r4, #0]
 800a802:	b2f6      	uxtb	r6, r6
 800a804:	6922      	ldr	r2, [r4, #16]
 800a806:	4637      	mov	r7, r6
 800a808:	1a98      	subs	r0, r3, r2
 800a80a:	6963      	ldr	r3, [r4, #20]
 800a80c:	4283      	cmp	r3, r0
 800a80e:	dc05      	bgt.n	800a81c <__swbuf_r+0x4e>
 800a810:	4621      	mov	r1, r4
 800a812:	4628      	mov	r0, r5
 800a814:	f000 fe94 	bl	800b540 <_fflush_r>
 800a818:	2800      	cmp	r0, #0
 800a81a:	d1ed      	bne.n	800a7f8 <__swbuf_r+0x2a>
 800a81c:	68a3      	ldr	r3, [r4, #8]
 800a81e:	3b01      	subs	r3, #1
 800a820:	60a3      	str	r3, [r4, #8]
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	6022      	str	r2, [r4, #0]
 800a828:	701e      	strb	r6, [r3, #0]
 800a82a:	1c43      	adds	r3, r0, #1
 800a82c:	6962      	ldr	r2, [r4, #20]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d004      	beq.n	800a83c <__swbuf_r+0x6e>
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	07db      	lsls	r3, r3, #31
 800a836:	d5e1      	bpl.n	800a7fc <__swbuf_r+0x2e>
 800a838:	2e0a      	cmp	r6, #10
 800a83a:	d1df      	bne.n	800a7fc <__swbuf_r+0x2e>
 800a83c:	4621      	mov	r1, r4
 800a83e:	4628      	mov	r0, r5
 800a840:	f000 fe7e 	bl	800b540 <_fflush_r>
 800a844:	2800      	cmp	r0, #0
 800a846:	d0d9      	beq.n	800a7fc <__swbuf_r+0x2e>
 800a848:	e7d6      	b.n	800a7f8 <__swbuf_r+0x2a>
	...

0800a84c <__swsetup_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4b29      	ldr	r3, [pc, #164]	@ (800a8f4 <__swsetup_r+0xa8>)
 800a850:	4605      	mov	r5, r0
 800a852:	460c      	mov	r4, r1
 800a854:	6818      	ldr	r0, [r3, #0]
 800a856:	b118      	cbz	r0, 800a860 <__swsetup_r+0x14>
 800a858:	6a03      	ldr	r3, [r0, #32]
 800a85a:	b90b      	cbnz	r3, 800a860 <__swsetup_r+0x14>
 800a85c:	f7ff fe9a 	bl	800a594 <__sinit>
 800a860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a864:	0719      	lsls	r1, r3, #28
 800a866:	d422      	bmi.n	800a8ae <__swsetup_r+0x62>
 800a868:	06da      	lsls	r2, r3, #27
 800a86a:	d407      	bmi.n	800a87c <__swsetup_r+0x30>
 800a86c:	2209      	movs	r2, #9
 800a86e:	602a      	str	r2, [r5, #0]
 800a870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a874:	f04f 30ff 	mov.w	r0, #4294967295
 800a878:	81a3      	strh	r3, [r4, #12]
 800a87a:	e033      	b.n	800a8e4 <__swsetup_r+0x98>
 800a87c:	0758      	lsls	r0, r3, #29
 800a87e:	d512      	bpl.n	800a8a6 <__swsetup_r+0x5a>
 800a880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a882:	b141      	cbz	r1, 800a896 <__swsetup_r+0x4a>
 800a884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a888:	4299      	cmp	r1, r3
 800a88a:	d002      	beq.n	800a892 <__swsetup_r+0x46>
 800a88c:	4628      	mov	r0, r5
 800a88e:	f000 f8af 	bl	800a9f0 <_free_r>
 800a892:	2300      	movs	r3, #0
 800a894:	6363      	str	r3, [r4, #52]	@ 0x34
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a89c:	81a3      	strh	r3, [r4, #12]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	6063      	str	r3, [r4, #4]
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	89a3      	ldrh	r3, [r4, #12]
 800a8a8:	f043 0308 	orr.w	r3, r3, #8
 800a8ac:	81a3      	strh	r3, [r4, #12]
 800a8ae:	6923      	ldr	r3, [r4, #16]
 800a8b0:	b94b      	cbnz	r3, 800a8c6 <__swsetup_r+0x7a>
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a8b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8bc:	d003      	beq.n	800a8c6 <__swsetup_r+0x7a>
 800a8be:	4621      	mov	r1, r4
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	f000 fe8a 	bl	800b5da <__smakebuf_r>
 800a8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ca:	f013 0201 	ands.w	r2, r3, #1
 800a8ce:	d00a      	beq.n	800a8e6 <__swsetup_r+0x9a>
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	60a2      	str	r2, [r4, #8]
 800a8d4:	6962      	ldr	r2, [r4, #20]
 800a8d6:	4252      	negs	r2, r2
 800a8d8:	61a2      	str	r2, [r4, #24]
 800a8da:	6922      	ldr	r2, [r4, #16]
 800a8dc:	b942      	cbnz	r2, 800a8f0 <__swsetup_r+0xa4>
 800a8de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a8e2:	d1c5      	bne.n	800a870 <__swsetup_r+0x24>
 800a8e4:	bd38      	pop	{r3, r4, r5, pc}
 800a8e6:	0799      	lsls	r1, r3, #30
 800a8e8:	bf58      	it	pl
 800a8ea:	6962      	ldrpl	r2, [r4, #20]
 800a8ec:	60a2      	str	r2, [r4, #8]
 800a8ee:	e7f4      	b.n	800a8da <__swsetup_r+0x8e>
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	e7f7      	b.n	800a8e4 <__swsetup_r+0x98>
 800a8f4:	20000048 	.word	0x20000048

0800a8f8 <memset>:
 800a8f8:	4402      	add	r2, r0
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d100      	bne.n	800a902 <memset+0xa>
 800a900:	4770      	bx	lr
 800a902:	f803 1b01 	strb.w	r1, [r3], #1
 800a906:	e7f9      	b.n	800a8fc <memset+0x4>

0800a908 <_close_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	2300      	movs	r3, #0
 800a90c:	4d05      	ldr	r5, [pc, #20]	@ (800a924 <_close_r+0x1c>)
 800a90e:	4604      	mov	r4, r0
 800a910:	4608      	mov	r0, r1
 800a912:	602b      	str	r3, [r5, #0]
 800a914:	f7f7 f896 	bl	8001a44 <_close>
 800a918:	1c43      	adds	r3, r0, #1
 800a91a:	d102      	bne.n	800a922 <_close_r+0x1a>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	b103      	cbz	r3, 800a922 <_close_r+0x1a>
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	20000728 	.word	0x20000728

0800a928 <_lseek_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4604      	mov	r4, r0
 800a92c:	4d06      	ldr	r5, [pc, #24]	@ (800a948 <_lseek_r+0x20>)
 800a92e:	4608      	mov	r0, r1
 800a930:	4611      	mov	r1, r2
 800a932:	2200      	movs	r2, #0
 800a934:	602a      	str	r2, [r5, #0]
 800a936:	461a      	mov	r2, r3
 800a938:	f7f7 f8ab 	bl	8001a92 <_lseek>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_lseek_r+0x1e>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_lseek_r+0x1e>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	20000728 	.word	0x20000728

0800a94c <_read_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4604      	mov	r4, r0
 800a950:	4d06      	ldr	r5, [pc, #24]	@ (800a96c <_read_r+0x20>)
 800a952:	4608      	mov	r0, r1
 800a954:	4611      	mov	r1, r2
 800a956:	2200      	movs	r2, #0
 800a958:	602a      	str	r2, [r5, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	f7f7 f839 	bl	80019d2 <_read>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	d102      	bne.n	800a96a <_read_r+0x1e>
 800a964:	682b      	ldr	r3, [r5, #0]
 800a966:	b103      	cbz	r3, 800a96a <_read_r+0x1e>
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
 800a96c:	20000728 	.word	0x20000728

0800a970 <_write_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	4604      	mov	r4, r0
 800a974:	4d06      	ldr	r5, [pc, #24]	@ (800a990 <_write_r+0x20>)
 800a976:	4608      	mov	r0, r1
 800a978:	4611      	mov	r1, r2
 800a97a:	2200      	movs	r2, #0
 800a97c:	602a      	str	r2, [r5, #0]
 800a97e:	461a      	mov	r2, r3
 800a980:	f7f7 f844 	bl	8001a0c <_write>
 800a984:	1c43      	adds	r3, r0, #1
 800a986:	d102      	bne.n	800a98e <_write_r+0x1e>
 800a988:	682b      	ldr	r3, [r5, #0]
 800a98a:	b103      	cbz	r3, 800a98e <_write_r+0x1e>
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	bd38      	pop	{r3, r4, r5, pc}
 800a990:	20000728 	.word	0x20000728

0800a994 <__errno>:
 800a994:	4b01      	ldr	r3, [pc, #4]	@ (800a99c <__errno+0x8>)
 800a996:	6818      	ldr	r0, [r3, #0]
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	20000048 	.word	0x20000048

0800a9a0 <__libc_init_array>:
 800a9a0:	b570      	push	{r4, r5, r6, lr}
 800a9a2:	4d0d      	ldr	r5, [pc, #52]	@ (800a9d8 <__libc_init_array+0x38>)
 800a9a4:	2600      	movs	r6, #0
 800a9a6:	4c0d      	ldr	r4, [pc, #52]	@ (800a9dc <__libc_init_array+0x3c>)
 800a9a8:	1b64      	subs	r4, r4, r5
 800a9aa:	10a4      	asrs	r4, r4, #2
 800a9ac:	42a6      	cmp	r6, r4
 800a9ae:	d109      	bne.n	800a9c4 <__libc_init_array+0x24>
 800a9b0:	4d0b      	ldr	r5, [pc, #44]	@ (800a9e0 <__libc_init_array+0x40>)
 800a9b2:	2600      	movs	r6, #0
 800a9b4:	4c0b      	ldr	r4, [pc, #44]	@ (800a9e4 <__libc_init_array+0x44>)
 800a9b6:	f001 f82d 	bl	800ba14 <_init>
 800a9ba:	1b64      	subs	r4, r4, r5
 800a9bc:	10a4      	asrs	r4, r4, #2
 800a9be:	42a6      	cmp	r6, r4
 800a9c0:	d105      	bne.n	800a9ce <__libc_init_array+0x2e>
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}
 800a9c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9c8:	3601      	adds	r6, #1
 800a9ca:	4798      	blx	r3
 800a9cc:	e7ee      	b.n	800a9ac <__libc_init_array+0xc>
 800a9ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9d2:	3601      	adds	r6, #1
 800a9d4:	4798      	blx	r3
 800a9d6:	e7f2      	b.n	800a9be <__libc_init_array+0x1e>
 800a9d8:	0800be30 	.word	0x0800be30
 800a9dc:	0800be30 	.word	0x0800be30
 800a9e0:	0800be30 	.word	0x0800be30
 800a9e4:	0800be34 	.word	0x0800be34

0800a9e8 <__retarget_lock_init_recursive>:
 800a9e8:	4770      	bx	lr

0800a9ea <__retarget_lock_acquire_recursive>:
 800a9ea:	4770      	bx	lr

0800a9ec <__retarget_lock_release_recursive>:
 800a9ec:	4770      	bx	lr
	...

0800a9f0 <_free_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	4605      	mov	r5, r0
 800a9f4:	2900      	cmp	r1, #0
 800a9f6:	d041      	beq.n	800aa7c <_free_r+0x8c>
 800a9f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9fc:	1f0c      	subs	r4, r1, #4
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	bfb8      	it	lt
 800aa02:	18e4      	addlt	r4, r4, r3
 800aa04:	f000 f8e0 	bl	800abc8 <__malloc_lock>
 800aa08:	4a1d      	ldr	r2, [pc, #116]	@ (800aa80 <_free_r+0x90>)
 800aa0a:	6813      	ldr	r3, [r2, #0]
 800aa0c:	b933      	cbnz	r3, 800aa1c <_free_r+0x2c>
 800aa0e:	6063      	str	r3, [r4, #4]
 800aa10:	6014      	str	r4, [r2, #0]
 800aa12:	4628      	mov	r0, r5
 800aa14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa18:	f000 b8dc 	b.w	800abd4 <__malloc_unlock>
 800aa1c:	42a3      	cmp	r3, r4
 800aa1e:	d908      	bls.n	800aa32 <_free_r+0x42>
 800aa20:	6820      	ldr	r0, [r4, #0]
 800aa22:	1821      	adds	r1, r4, r0
 800aa24:	428b      	cmp	r3, r1
 800aa26:	bf01      	itttt	eq
 800aa28:	6819      	ldreq	r1, [r3, #0]
 800aa2a:	685b      	ldreq	r3, [r3, #4]
 800aa2c:	1809      	addeq	r1, r1, r0
 800aa2e:	6021      	streq	r1, [r4, #0]
 800aa30:	e7ed      	b.n	800aa0e <_free_r+0x1e>
 800aa32:	461a      	mov	r2, r3
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	b10b      	cbz	r3, 800aa3c <_free_r+0x4c>
 800aa38:	42a3      	cmp	r3, r4
 800aa3a:	d9fa      	bls.n	800aa32 <_free_r+0x42>
 800aa3c:	6811      	ldr	r1, [r2, #0]
 800aa3e:	1850      	adds	r0, r2, r1
 800aa40:	42a0      	cmp	r0, r4
 800aa42:	d10b      	bne.n	800aa5c <_free_r+0x6c>
 800aa44:	6820      	ldr	r0, [r4, #0]
 800aa46:	4401      	add	r1, r0
 800aa48:	1850      	adds	r0, r2, r1
 800aa4a:	6011      	str	r1, [r2, #0]
 800aa4c:	4283      	cmp	r3, r0
 800aa4e:	d1e0      	bne.n	800aa12 <_free_r+0x22>
 800aa50:	6818      	ldr	r0, [r3, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	4408      	add	r0, r1
 800aa56:	6053      	str	r3, [r2, #4]
 800aa58:	6010      	str	r0, [r2, #0]
 800aa5a:	e7da      	b.n	800aa12 <_free_r+0x22>
 800aa5c:	d902      	bls.n	800aa64 <_free_r+0x74>
 800aa5e:	230c      	movs	r3, #12
 800aa60:	602b      	str	r3, [r5, #0]
 800aa62:	e7d6      	b.n	800aa12 <_free_r+0x22>
 800aa64:	6820      	ldr	r0, [r4, #0]
 800aa66:	1821      	adds	r1, r4, r0
 800aa68:	428b      	cmp	r3, r1
 800aa6a:	bf02      	ittt	eq
 800aa6c:	6819      	ldreq	r1, [r3, #0]
 800aa6e:	685b      	ldreq	r3, [r3, #4]
 800aa70:	1809      	addeq	r1, r1, r0
 800aa72:	6063      	str	r3, [r4, #4]
 800aa74:	bf08      	it	eq
 800aa76:	6021      	streq	r1, [r4, #0]
 800aa78:	6054      	str	r4, [r2, #4]
 800aa7a:	e7ca      	b.n	800aa12 <_free_r+0x22>
 800aa7c:	bd38      	pop	{r3, r4, r5, pc}
 800aa7e:	bf00      	nop
 800aa80:	20000734 	.word	0x20000734

0800aa84 <sbrk_aligned>:
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	4e0f      	ldr	r6, [pc, #60]	@ (800aac4 <sbrk_aligned+0x40>)
 800aa88:	460c      	mov	r4, r1
 800aa8a:	4605      	mov	r5, r0
 800aa8c:	6831      	ldr	r1, [r6, #0]
 800aa8e:	b911      	cbnz	r1, 800aa96 <sbrk_aligned+0x12>
 800aa90:	f000 fe1c 	bl	800b6cc <_sbrk_r>
 800aa94:	6030      	str	r0, [r6, #0]
 800aa96:	4621      	mov	r1, r4
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f000 fe17 	bl	800b6cc <_sbrk_r>
 800aa9e:	1c43      	adds	r3, r0, #1
 800aaa0:	d103      	bne.n	800aaaa <sbrk_aligned+0x26>
 800aaa2:	f04f 34ff 	mov.w	r4, #4294967295
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	bd70      	pop	{r4, r5, r6, pc}
 800aaaa:	1cc4      	adds	r4, r0, #3
 800aaac:	f024 0403 	bic.w	r4, r4, #3
 800aab0:	42a0      	cmp	r0, r4
 800aab2:	d0f8      	beq.n	800aaa6 <sbrk_aligned+0x22>
 800aab4:	1a21      	subs	r1, r4, r0
 800aab6:	4628      	mov	r0, r5
 800aab8:	f000 fe08 	bl	800b6cc <_sbrk_r>
 800aabc:	3001      	adds	r0, #1
 800aabe:	d1f2      	bne.n	800aaa6 <sbrk_aligned+0x22>
 800aac0:	e7ef      	b.n	800aaa2 <sbrk_aligned+0x1e>
 800aac2:	bf00      	nop
 800aac4:	20000730 	.word	0x20000730

0800aac8 <_malloc_r>:
 800aac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aacc:	1ccd      	adds	r5, r1, #3
 800aace:	4606      	mov	r6, r0
 800aad0:	f025 0503 	bic.w	r5, r5, #3
 800aad4:	3508      	adds	r5, #8
 800aad6:	2d0c      	cmp	r5, #12
 800aad8:	bf38      	it	cc
 800aada:	250c      	movcc	r5, #12
 800aadc:	2d00      	cmp	r5, #0
 800aade:	db01      	blt.n	800aae4 <_malloc_r+0x1c>
 800aae0:	42a9      	cmp	r1, r5
 800aae2:	d904      	bls.n	800aaee <_malloc_r+0x26>
 800aae4:	230c      	movs	r3, #12
 800aae6:	6033      	str	r3, [r6, #0]
 800aae8:	2000      	movs	r0, #0
 800aaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abc4 <_malloc_r+0xfc>
 800aaf2:	f000 f869 	bl	800abc8 <__malloc_lock>
 800aaf6:	f8d8 3000 	ldr.w	r3, [r8]
 800aafa:	461c      	mov	r4, r3
 800aafc:	bb44      	cbnz	r4, 800ab50 <_malloc_r+0x88>
 800aafe:	4629      	mov	r1, r5
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff ffbf 	bl	800aa84 <sbrk_aligned>
 800ab06:	1c43      	adds	r3, r0, #1
 800ab08:	4604      	mov	r4, r0
 800ab0a:	d158      	bne.n	800abbe <_malloc_r+0xf6>
 800ab0c:	f8d8 4000 	ldr.w	r4, [r8]
 800ab10:	4627      	mov	r7, r4
 800ab12:	2f00      	cmp	r7, #0
 800ab14:	d143      	bne.n	800ab9e <_malloc_r+0xd6>
 800ab16:	2c00      	cmp	r4, #0
 800ab18:	d04b      	beq.n	800abb2 <_malloc_r+0xea>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	4630      	mov	r0, r6
 800ab20:	eb04 0903 	add.w	r9, r4, r3
 800ab24:	f000 fdd2 	bl	800b6cc <_sbrk_r>
 800ab28:	4581      	cmp	r9, r0
 800ab2a:	d142      	bne.n	800abb2 <_malloc_r+0xea>
 800ab2c:	6821      	ldr	r1, [r4, #0]
 800ab2e:	4630      	mov	r0, r6
 800ab30:	1a6d      	subs	r5, r5, r1
 800ab32:	4629      	mov	r1, r5
 800ab34:	f7ff ffa6 	bl	800aa84 <sbrk_aligned>
 800ab38:	3001      	adds	r0, #1
 800ab3a:	d03a      	beq.n	800abb2 <_malloc_r+0xea>
 800ab3c:	6823      	ldr	r3, [r4, #0]
 800ab3e:	442b      	add	r3, r5
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	f8d8 3000 	ldr.w	r3, [r8]
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	bb62      	cbnz	r2, 800aba4 <_malloc_r+0xdc>
 800ab4a:	f8c8 7000 	str.w	r7, [r8]
 800ab4e:	e00f      	b.n	800ab70 <_malloc_r+0xa8>
 800ab50:	6822      	ldr	r2, [r4, #0]
 800ab52:	1b52      	subs	r2, r2, r5
 800ab54:	d420      	bmi.n	800ab98 <_malloc_r+0xd0>
 800ab56:	2a0b      	cmp	r2, #11
 800ab58:	d917      	bls.n	800ab8a <_malloc_r+0xc2>
 800ab5a:	1961      	adds	r1, r4, r5
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	6025      	str	r5, [r4, #0]
 800ab60:	bf18      	it	ne
 800ab62:	6059      	strne	r1, [r3, #4]
 800ab64:	6863      	ldr	r3, [r4, #4]
 800ab66:	bf08      	it	eq
 800ab68:	f8c8 1000 	streq.w	r1, [r8]
 800ab6c:	5162      	str	r2, [r4, r5]
 800ab6e:	604b      	str	r3, [r1, #4]
 800ab70:	4630      	mov	r0, r6
 800ab72:	f000 f82f 	bl	800abd4 <__malloc_unlock>
 800ab76:	f104 000b 	add.w	r0, r4, #11
 800ab7a:	1d23      	adds	r3, r4, #4
 800ab7c:	f020 0007 	bic.w	r0, r0, #7
 800ab80:	1ac2      	subs	r2, r0, r3
 800ab82:	bf1c      	itt	ne
 800ab84:	1a1b      	subne	r3, r3, r0
 800ab86:	50a3      	strne	r3, [r4, r2]
 800ab88:	e7af      	b.n	800aaea <_malloc_r+0x22>
 800ab8a:	6862      	ldr	r2, [r4, #4]
 800ab8c:	42a3      	cmp	r3, r4
 800ab8e:	bf0c      	ite	eq
 800ab90:	f8c8 2000 	streq.w	r2, [r8]
 800ab94:	605a      	strne	r2, [r3, #4]
 800ab96:	e7eb      	b.n	800ab70 <_malloc_r+0xa8>
 800ab98:	4623      	mov	r3, r4
 800ab9a:	6864      	ldr	r4, [r4, #4]
 800ab9c:	e7ae      	b.n	800aafc <_malloc_r+0x34>
 800ab9e:	463c      	mov	r4, r7
 800aba0:	687f      	ldr	r7, [r7, #4]
 800aba2:	e7b6      	b.n	800ab12 <_malloc_r+0x4a>
 800aba4:	461a      	mov	r2, r3
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	42a3      	cmp	r3, r4
 800abaa:	d1fb      	bne.n	800aba4 <_malloc_r+0xdc>
 800abac:	2300      	movs	r3, #0
 800abae:	6053      	str	r3, [r2, #4]
 800abb0:	e7de      	b.n	800ab70 <_malloc_r+0xa8>
 800abb2:	230c      	movs	r3, #12
 800abb4:	4630      	mov	r0, r6
 800abb6:	6033      	str	r3, [r6, #0]
 800abb8:	f000 f80c 	bl	800abd4 <__malloc_unlock>
 800abbc:	e794      	b.n	800aae8 <_malloc_r+0x20>
 800abbe:	6005      	str	r5, [r0, #0]
 800abc0:	e7d6      	b.n	800ab70 <_malloc_r+0xa8>
 800abc2:	bf00      	nop
 800abc4:	20000734 	.word	0x20000734

0800abc8 <__malloc_lock>:
 800abc8:	4801      	ldr	r0, [pc, #4]	@ (800abd0 <__malloc_lock+0x8>)
 800abca:	f7ff bf0e 	b.w	800a9ea <__retarget_lock_acquire_recursive>
 800abce:	bf00      	nop
 800abd0:	2000072c 	.word	0x2000072c

0800abd4 <__malloc_unlock>:
 800abd4:	4801      	ldr	r0, [pc, #4]	@ (800abdc <__malloc_unlock+0x8>)
 800abd6:	f7ff bf09 	b.w	800a9ec <__retarget_lock_release_recursive>
 800abda:	bf00      	nop
 800abdc:	2000072c 	.word	0x2000072c

0800abe0 <__ssputs_r>:
 800abe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe4:	461f      	mov	r7, r3
 800abe6:	688e      	ldr	r6, [r1, #8]
 800abe8:	4682      	mov	sl, r0
 800abea:	460c      	mov	r4, r1
 800abec:	42be      	cmp	r6, r7
 800abee:	4690      	mov	r8, r2
 800abf0:	680b      	ldr	r3, [r1, #0]
 800abf2:	d82d      	bhi.n	800ac50 <__ssputs_r+0x70>
 800abf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800abfc:	d026      	beq.n	800ac4c <__ssputs_r+0x6c>
 800abfe:	6965      	ldr	r5, [r4, #20]
 800ac00:	6909      	ldr	r1, [r1, #16]
 800ac02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac06:	eba3 0901 	sub.w	r9, r3, r1
 800ac0a:	1c7b      	adds	r3, r7, #1
 800ac0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac10:	444b      	add	r3, r9
 800ac12:	106d      	asrs	r5, r5, #1
 800ac14:	429d      	cmp	r5, r3
 800ac16:	bf38      	it	cc
 800ac18:	461d      	movcc	r5, r3
 800ac1a:	0553      	lsls	r3, r2, #21
 800ac1c:	d527      	bpl.n	800ac6e <__ssputs_r+0x8e>
 800ac1e:	4629      	mov	r1, r5
 800ac20:	f7ff ff52 	bl	800aac8 <_malloc_r>
 800ac24:	4606      	mov	r6, r0
 800ac26:	b360      	cbz	r0, 800ac82 <__ssputs_r+0xa2>
 800ac28:	464a      	mov	r2, r9
 800ac2a:	6921      	ldr	r1, [r4, #16]
 800ac2c:	f000 fd6c 	bl	800b708 <memcpy>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac3a:	81a3      	strh	r3, [r4, #12]
 800ac3c:	6126      	str	r6, [r4, #16]
 800ac3e:	444e      	add	r6, r9
 800ac40:	6165      	str	r5, [r4, #20]
 800ac42:	eba5 0509 	sub.w	r5, r5, r9
 800ac46:	6026      	str	r6, [r4, #0]
 800ac48:	463e      	mov	r6, r7
 800ac4a:	60a5      	str	r5, [r4, #8]
 800ac4c:	42be      	cmp	r6, r7
 800ac4e:	d900      	bls.n	800ac52 <__ssputs_r+0x72>
 800ac50:	463e      	mov	r6, r7
 800ac52:	4632      	mov	r2, r6
 800ac54:	4641      	mov	r1, r8
 800ac56:	6820      	ldr	r0, [r4, #0]
 800ac58:	f000 fcfb 	bl	800b652 <memmove>
 800ac5c:	68a3      	ldr	r3, [r4, #8]
 800ac5e:	2000      	movs	r0, #0
 800ac60:	1b9b      	subs	r3, r3, r6
 800ac62:	60a3      	str	r3, [r4, #8]
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	4433      	add	r3, r6
 800ac68:	6023      	str	r3, [r4, #0]
 800ac6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6e:	462a      	mov	r2, r5
 800ac70:	f000 fd57 	bl	800b722 <_realloc_r>
 800ac74:	4606      	mov	r6, r0
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d1e0      	bne.n	800ac3c <__ssputs_r+0x5c>
 800ac7a:	6921      	ldr	r1, [r4, #16]
 800ac7c:	4650      	mov	r0, sl
 800ac7e:	f7ff feb7 	bl	800a9f0 <_free_r>
 800ac82:	230c      	movs	r3, #12
 800ac84:	f04f 30ff 	mov.w	r0, #4294967295
 800ac88:	f8ca 3000 	str.w	r3, [sl]
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac92:	81a3      	strh	r3, [r4, #12]
 800ac94:	e7e9      	b.n	800ac6a <__ssputs_r+0x8a>
	...

0800ac98 <_svfiprintf_r>:
 800ac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	4698      	mov	r8, r3
 800ac9e:	898b      	ldrh	r3, [r1, #12]
 800aca0:	b09d      	sub	sp, #116	@ 0x74
 800aca2:	4607      	mov	r7, r0
 800aca4:	061b      	lsls	r3, r3, #24
 800aca6:	460d      	mov	r5, r1
 800aca8:	4614      	mov	r4, r2
 800acaa:	d510      	bpl.n	800acce <_svfiprintf_r+0x36>
 800acac:	690b      	ldr	r3, [r1, #16]
 800acae:	b973      	cbnz	r3, 800acce <_svfiprintf_r+0x36>
 800acb0:	2140      	movs	r1, #64	@ 0x40
 800acb2:	f7ff ff09 	bl	800aac8 <_malloc_r>
 800acb6:	6028      	str	r0, [r5, #0]
 800acb8:	6128      	str	r0, [r5, #16]
 800acba:	b930      	cbnz	r0, 800acca <_svfiprintf_r+0x32>
 800acbc:	230c      	movs	r3, #12
 800acbe:	603b      	str	r3, [r7, #0]
 800acc0:	f04f 30ff 	mov.w	r0, #4294967295
 800acc4:	b01d      	add	sp, #116	@ 0x74
 800acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acca:	2340      	movs	r3, #64	@ 0x40
 800accc:	616b      	str	r3, [r5, #20]
 800acce:	2300      	movs	r3, #0
 800acd0:	f8cd 800c 	str.w	r8, [sp, #12]
 800acd4:	f04f 0901 	mov.w	r9, #1
 800acd8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800ae7c <_svfiprintf_r+0x1e4>
 800acdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800acde:	2320      	movs	r3, #32
 800ace0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ace4:	2330      	movs	r3, #48	@ 0x30
 800ace6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acea:	4623      	mov	r3, r4
 800acec:	469a      	mov	sl, r3
 800acee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acf2:	b10a      	cbz	r2, 800acf8 <_svfiprintf_r+0x60>
 800acf4:	2a25      	cmp	r2, #37	@ 0x25
 800acf6:	d1f9      	bne.n	800acec <_svfiprintf_r+0x54>
 800acf8:	ebba 0b04 	subs.w	fp, sl, r4
 800acfc:	d00b      	beq.n	800ad16 <_svfiprintf_r+0x7e>
 800acfe:	465b      	mov	r3, fp
 800ad00:	4622      	mov	r2, r4
 800ad02:	4629      	mov	r1, r5
 800ad04:	4638      	mov	r0, r7
 800ad06:	f7ff ff6b 	bl	800abe0 <__ssputs_r>
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	f000 80a7 	beq.w	800ae5e <_svfiprintf_r+0x1c6>
 800ad10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad12:	445a      	add	r2, fp
 800ad14:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad16:	f89a 3000 	ldrb.w	r3, [sl]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 809f 	beq.w	800ae5e <_svfiprintf_r+0x1c6>
 800ad20:	2300      	movs	r3, #0
 800ad22:	f04f 32ff 	mov.w	r2, #4294967295
 800ad26:	f10a 0a01 	add.w	sl, sl, #1
 800ad2a:	9304      	str	r3, [sp, #16]
 800ad2c:	9307      	str	r3, [sp, #28]
 800ad2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad32:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad38:	4654      	mov	r4, sl
 800ad3a:	2205      	movs	r2, #5
 800ad3c:	484f      	ldr	r0, [pc, #316]	@ (800ae7c <_svfiprintf_r+0x1e4>)
 800ad3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad42:	f000 fcd3 	bl	800b6ec <memchr>
 800ad46:	9a04      	ldr	r2, [sp, #16]
 800ad48:	b9d8      	cbnz	r0, 800ad82 <_svfiprintf_r+0xea>
 800ad4a:	06d0      	lsls	r0, r2, #27
 800ad4c:	bf44      	itt	mi
 800ad4e:	2320      	movmi	r3, #32
 800ad50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad54:	0711      	lsls	r1, r2, #28
 800ad56:	bf44      	itt	mi
 800ad58:	232b      	movmi	r3, #43	@ 0x2b
 800ad5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad62:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad64:	d015      	beq.n	800ad92 <_svfiprintf_r+0xfa>
 800ad66:	9a07      	ldr	r2, [sp, #28]
 800ad68:	4654      	mov	r4, sl
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	f04f 0c0a 	mov.w	ip, #10
 800ad70:	4621      	mov	r1, r4
 800ad72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad76:	3b30      	subs	r3, #48	@ 0x30
 800ad78:	2b09      	cmp	r3, #9
 800ad7a:	d94b      	bls.n	800ae14 <_svfiprintf_r+0x17c>
 800ad7c:	b1b0      	cbz	r0, 800adac <_svfiprintf_r+0x114>
 800ad7e:	9207      	str	r2, [sp, #28]
 800ad80:	e014      	b.n	800adac <_svfiprintf_r+0x114>
 800ad82:	eba0 0308 	sub.w	r3, r0, r8
 800ad86:	46a2      	mov	sl, r4
 800ad88:	fa09 f303 	lsl.w	r3, r9, r3
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	9304      	str	r3, [sp, #16]
 800ad90:	e7d2      	b.n	800ad38 <_svfiprintf_r+0xa0>
 800ad92:	9b03      	ldr	r3, [sp, #12]
 800ad94:	1d19      	adds	r1, r3, #4
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	9103      	str	r1, [sp, #12]
 800ad9c:	bfbb      	ittet	lt
 800ad9e:	425b      	neglt	r3, r3
 800ada0:	f042 0202 	orrlt.w	r2, r2, #2
 800ada4:	9307      	strge	r3, [sp, #28]
 800ada6:	9307      	strlt	r3, [sp, #28]
 800ada8:	bfb8      	it	lt
 800adaa:	9204      	strlt	r2, [sp, #16]
 800adac:	7823      	ldrb	r3, [r4, #0]
 800adae:	2b2e      	cmp	r3, #46	@ 0x2e
 800adb0:	d10a      	bne.n	800adc8 <_svfiprintf_r+0x130>
 800adb2:	7863      	ldrb	r3, [r4, #1]
 800adb4:	2b2a      	cmp	r3, #42	@ 0x2a
 800adb6:	d132      	bne.n	800ae1e <_svfiprintf_r+0x186>
 800adb8:	9b03      	ldr	r3, [sp, #12]
 800adba:	3402      	adds	r4, #2
 800adbc:	1d1a      	adds	r2, r3, #4
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800adc4:	9203      	str	r2, [sp, #12]
 800adc6:	9305      	str	r3, [sp, #20]
 800adc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ae8c <_svfiprintf_r+0x1f4>
 800adcc:	2203      	movs	r2, #3
 800adce:	7821      	ldrb	r1, [r4, #0]
 800add0:	4650      	mov	r0, sl
 800add2:	f000 fc8b 	bl	800b6ec <memchr>
 800add6:	b138      	cbz	r0, 800ade8 <_svfiprintf_r+0x150>
 800add8:	eba0 000a 	sub.w	r0, r0, sl
 800addc:	2240      	movs	r2, #64	@ 0x40
 800adde:	9b04      	ldr	r3, [sp, #16]
 800ade0:	3401      	adds	r4, #1
 800ade2:	4082      	lsls	r2, r0
 800ade4:	4313      	orrs	r3, r2
 800ade6:	9304      	str	r3, [sp, #16]
 800ade8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adec:	2206      	movs	r2, #6
 800adee:	4824      	ldr	r0, [pc, #144]	@ (800ae80 <_svfiprintf_r+0x1e8>)
 800adf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adf4:	f000 fc7a 	bl	800b6ec <memchr>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d036      	beq.n	800ae6a <_svfiprintf_r+0x1d2>
 800adfc:	4b21      	ldr	r3, [pc, #132]	@ (800ae84 <_svfiprintf_r+0x1ec>)
 800adfe:	bb1b      	cbnz	r3, 800ae48 <_svfiprintf_r+0x1b0>
 800ae00:	9b03      	ldr	r3, [sp, #12]
 800ae02:	3307      	adds	r3, #7
 800ae04:	f023 0307 	bic.w	r3, r3, #7
 800ae08:	3308      	adds	r3, #8
 800ae0a:	9303      	str	r3, [sp, #12]
 800ae0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae0e:	4433      	add	r3, r6
 800ae10:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae12:	e76a      	b.n	800acea <_svfiprintf_r+0x52>
 800ae14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae18:	460c      	mov	r4, r1
 800ae1a:	2001      	movs	r0, #1
 800ae1c:	e7a8      	b.n	800ad70 <_svfiprintf_r+0xd8>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	3401      	adds	r4, #1
 800ae22:	f04f 0c0a 	mov.w	ip, #10
 800ae26:	4619      	mov	r1, r3
 800ae28:	9305      	str	r3, [sp, #20]
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae30:	3a30      	subs	r2, #48	@ 0x30
 800ae32:	2a09      	cmp	r2, #9
 800ae34:	d903      	bls.n	800ae3e <_svfiprintf_r+0x1a6>
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d0c6      	beq.n	800adc8 <_svfiprintf_r+0x130>
 800ae3a:	9105      	str	r1, [sp, #20]
 800ae3c:	e7c4      	b.n	800adc8 <_svfiprintf_r+0x130>
 800ae3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae42:	4604      	mov	r4, r0
 800ae44:	2301      	movs	r3, #1
 800ae46:	e7f0      	b.n	800ae2a <_svfiprintf_r+0x192>
 800ae48:	ab03      	add	r3, sp, #12
 800ae4a:	462a      	mov	r2, r5
 800ae4c:	a904      	add	r1, sp, #16
 800ae4e:	4638      	mov	r0, r7
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	4b0d      	ldr	r3, [pc, #52]	@ (800ae88 <_svfiprintf_r+0x1f0>)
 800ae54:	f3af 8000 	nop.w
 800ae58:	1c42      	adds	r2, r0, #1
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	d1d6      	bne.n	800ae0c <_svfiprintf_r+0x174>
 800ae5e:	89ab      	ldrh	r3, [r5, #12]
 800ae60:	065b      	lsls	r3, r3, #25
 800ae62:	f53f af2d 	bmi.w	800acc0 <_svfiprintf_r+0x28>
 800ae66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae68:	e72c      	b.n	800acc4 <_svfiprintf_r+0x2c>
 800ae6a:	ab03      	add	r3, sp, #12
 800ae6c:	462a      	mov	r2, r5
 800ae6e:	a904      	add	r1, sp, #16
 800ae70:	4638      	mov	r0, r7
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	4b04      	ldr	r3, [pc, #16]	@ (800ae88 <_svfiprintf_r+0x1f0>)
 800ae76:	f000 f9bf 	bl	800b1f8 <_printf_i>
 800ae7a:	e7ed      	b.n	800ae58 <_svfiprintf_r+0x1c0>
 800ae7c:	0800bdf5 	.word	0x0800bdf5
 800ae80:	0800bdff 	.word	0x0800bdff
 800ae84:	00000000 	.word	0x00000000
 800ae88:	0800abe1 	.word	0x0800abe1
 800ae8c:	0800bdfb 	.word	0x0800bdfb

0800ae90 <__sfputc_r>:
 800ae90:	6893      	ldr	r3, [r2, #8]
 800ae92:	3b01      	subs	r3, #1
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	6093      	str	r3, [r2, #8]
 800ae98:	b410      	push	{r4}
 800ae9a:	da08      	bge.n	800aeae <__sfputc_r+0x1e>
 800ae9c:	6994      	ldr	r4, [r2, #24]
 800ae9e:	42a3      	cmp	r3, r4
 800aea0:	db01      	blt.n	800aea6 <__sfputc_r+0x16>
 800aea2:	290a      	cmp	r1, #10
 800aea4:	d103      	bne.n	800aeae <__sfputc_r+0x1e>
 800aea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeaa:	f7ff bc90 	b.w	800a7ce <__swbuf_r>
 800aeae:	6813      	ldr	r3, [r2, #0]
 800aeb0:	1c58      	adds	r0, r3, #1
 800aeb2:	6010      	str	r0, [r2, #0]
 800aeb4:	4608      	mov	r0, r1
 800aeb6:	7019      	strb	r1, [r3, #0]
 800aeb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <__sfputs_r>:
 800aebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec0:	4606      	mov	r6, r0
 800aec2:	460f      	mov	r7, r1
 800aec4:	4614      	mov	r4, r2
 800aec6:	18d5      	adds	r5, r2, r3
 800aec8:	42ac      	cmp	r4, r5
 800aeca:	d101      	bne.n	800aed0 <__sfputs_r+0x12>
 800aecc:	2000      	movs	r0, #0
 800aece:	e007      	b.n	800aee0 <__sfputs_r+0x22>
 800aed0:	463a      	mov	r2, r7
 800aed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed6:	4630      	mov	r0, r6
 800aed8:	f7ff ffda 	bl	800ae90 <__sfputc_r>
 800aedc:	1c43      	adds	r3, r0, #1
 800aede:	d1f3      	bne.n	800aec8 <__sfputs_r+0xa>
 800aee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aee4 <_vfiprintf_r>:
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	460d      	mov	r5, r1
 800aeea:	b09d      	sub	sp, #116	@ 0x74
 800aeec:	4614      	mov	r4, r2
 800aeee:	4698      	mov	r8, r3
 800aef0:	4606      	mov	r6, r0
 800aef2:	b118      	cbz	r0, 800aefc <_vfiprintf_r+0x18>
 800aef4:	6a03      	ldr	r3, [r0, #32]
 800aef6:	b90b      	cbnz	r3, 800aefc <_vfiprintf_r+0x18>
 800aef8:	f7ff fb4c 	bl	800a594 <__sinit>
 800aefc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aefe:	07d9      	lsls	r1, r3, #31
 800af00:	d405      	bmi.n	800af0e <_vfiprintf_r+0x2a>
 800af02:	89ab      	ldrh	r3, [r5, #12]
 800af04:	059a      	lsls	r2, r3, #22
 800af06:	d402      	bmi.n	800af0e <_vfiprintf_r+0x2a>
 800af08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af0a:	f7ff fd6e 	bl	800a9ea <__retarget_lock_acquire_recursive>
 800af0e:	89ab      	ldrh	r3, [r5, #12]
 800af10:	071b      	lsls	r3, r3, #28
 800af12:	d501      	bpl.n	800af18 <_vfiprintf_r+0x34>
 800af14:	692b      	ldr	r3, [r5, #16]
 800af16:	b99b      	cbnz	r3, 800af40 <_vfiprintf_r+0x5c>
 800af18:	4629      	mov	r1, r5
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7ff fc96 	bl	800a84c <__swsetup_r>
 800af20:	b170      	cbz	r0, 800af40 <_vfiprintf_r+0x5c>
 800af22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af24:	07dc      	lsls	r4, r3, #31
 800af26:	d504      	bpl.n	800af32 <_vfiprintf_r+0x4e>
 800af28:	f04f 30ff 	mov.w	r0, #4294967295
 800af2c:	b01d      	add	sp, #116	@ 0x74
 800af2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af32:	89ab      	ldrh	r3, [r5, #12]
 800af34:	0598      	lsls	r0, r3, #22
 800af36:	d4f7      	bmi.n	800af28 <_vfiprintf_r+0x44>
 800af38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af3a:	f7ff fd57 	bl	800a9ec <__retarget_lock_release_recursive>
 800af3e:	e7f3      	b.n	800af28 <_vfiprintf_r+0x44>
 800af40:	2300      	movs	r3, #0
 800af42:	f8cd 800c 	str.w	r8, [sp, #12]
 800af46:	f04f 0901 	mov.w	r9, #1
 800af4a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800b100 <_vfiprintf_r+0x21c>
 800af4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af50:	2320      	movs	r3, #32
 800af52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af56:	2330      	movs	r3, #48	@ 0x30
 800af58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af5c:	4623      	mov	r3, r4
 800af5e:	469a      	mov	sl, r3
 800af60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af64:	b10a      	cbz	r2, 800af6a <_vfiprintf_r+0x86>
 800af66:	2a25      	cmp	r2, #37	@ 0x25
 800af68:	d1f9      	bne.n	800af5e <_vfiprintf_r+0x7a>
 800af6a:	ebba 0b04 	subs.w	fp, sl, r4
 800af6e:	d00b      	beq.n	800af88 <_vfiprintf_r+0xa4>
 800af70:	465b      	mov	r3, fp
 800af72:	4622      	mov	r2, r4
 800af74:	4629      	mov	r1, r5
 800af76:	4630      	mov	r0, r6
 800af78:	f7ff ffa1 	bl	800aebe <__sfputs_r>
 800af7c:	3001      	adds	r0, #1
 800af7e:	f000 80a7 	beq.w	800b0d0 <_vfiprintf_r+0x1ec>
 800af82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af84:	445a      	add	r2, fp
 800af86:	9209      	str	r2, [sp, #36]	@ 0x24
 800af88:	f89a 3000 	ldrb.w	r3, [sl]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 809f 	beq.w	800b0d0 <_vfiprintf_r+0x1ec>
 800af92:	2300      	movs	r3, #0
 800af94:	f04f 32ff 	mov.w	r2, #4294967295
 800af98:	f10a 0a01 	add.w	sl, sl, #1
 800af9c:	9304      	str	r3, [sp, #16]
 800af9e:	9307      	str	r3, [sp, #28]
 800afa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afa4:	931a      	str	r3, [sp, #104]	@ 0x68
 800afa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afaa:	4654      	mov	r4, sl
 800afac:	2205      	movs	r2, #5
 800afae:	4854      	ldr	r0, [pc, #336]	@ (800b100 <_vfiprintf_r+0x21c>)
 800afb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb4:	f000 fb9a 	bl	800b6ec <memchr>
 800afb8:	9a04      	ldr	r2, [sp, #16]
 800afba:	b9d8      	cbnz	r0, 800aff4 <_vfiprintf_r+0x110>
 800afbc:	06d1      	lsls	r1, r2, #27
 800afbe:	bf44      	itt	mi
 800afc0:	2320      	movmi	r3, #32
 800afc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afc6:	0713      	lsls	r3, r2, #28
 800afc8:	bf44      	itt	mi
 800afca:	232b      	movmi	r3, #43	@ 0x2b
 800afcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afd0:	f89a 3000 	ldrb.w	r3, [sl]
 800afd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800afd6:	d015      	beq.n	800b004 <_vfiprintf_r+0x120>
 800afd8:	9a07      	ldr	r2, [sp, #28]
 800afda:	4654      	mov	r4, sl
 800afdc:	2000      	movs	r0, #0
 800afde:	f04f 0c0a 	mov.w	ip, #10
 800afe2:	4621      	mov	r1, r4
 800afe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afe8:	3b30      	subs	r3, #48	@ 0x30
 800afea:	2b09      	cmp	r3, #9
 800afec:	d94b      	bls.n	800b086 <_vfiprintf_r+0x1a2>
 800afee:	b1b0      	cbz	r0, 800b01e <_vfiprintf_r+0x13a>
 800aff0:	9207      	str	r2, [sp, #28]
 800aff2:	e014      	b.n	800b01e <_vfiprintf_r+0x13a>
 800aff4:	eba0 0308 	sub.w	r3, r0, r8
 800aff8:	46a2      	mov	sl, r4
 800affa:	fa09 f303 	lsl.w	r3, r9, r3
 800affe:	4313      	orrs	r3, r2
 800b000:	9304      	str	r3, [sp, #16]
 800b002:	e7d2      	b.n	800afaa <_vfiprintf_r+0xc6>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	1d19      	adds	r1, r3, #4
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	9103      	str	r1, [sp, #12]
 800b00e:	bfbb      	ittet	lt
 800b010:	425b      	neglt	r3, r3
 800b012:	f042 0202 	orrlt.w	r2, r2, #2
 800b016:	9307      	strge	r3, [sp, #28]
 800b018:	9307      	strlt	r3, [sp, #28]
 800b01a:	bfb8      	it	lt
 800b01c:	9204      	strlt	r2, [sp, #16]
 800b01e:	7823      	ldrb	r3, [r4, #0]
 800b020:	2b2e      	cmp	r3, #46	@ 0x2e
 800b022:	d10a      	bne.n	800b03a <_vfiprintf_r+0x156>
 800b024:	7863      	ldrb	r3, [r4, #1]
 800b026:	2b2a      	cmp	r3, #42	@ 0x2a
 800b028:	d132      	bne.n	800b090 <_vfiprintf_r+0x1ac>
 800b02a:	9b03      	ldr	r3, [sp, #12]
 800b02c:	3402      	adds	r4, #2
 800b02e:	1d1a      	adds	r2, r3, #4
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b036:	9203      	str	r2, [sp, #12]
 800b038:	9305      	str	r3, [sp, #20]
 800b03a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b110 <_vfiprintf_r+0x22c>
 800b03e:	2203      	movs	r2, #3
 800b040:	7821      	ldrb	r1, [r4, #0]
 800b042:	4650      	mov	r0, sl
 800b044:	f000 fb52 	bl	800b6ec <memchr>
 800b048:	b138      	cbz	r0, 800b05a <_vfiprintf_r+0x176>
 800b04a:	eba0 000a 	sub.w	r0, r0, sl
 800b04e:	2240      	movs	r2, #64	@ 0x40
 800b050:	9b04      	ldr	r3, [sp, #16]
 800b052:	3401      	adds	r4, #1
 800b054:	4082      	lsls	r2, r0
 800b056:	4313      	orrs	r3, r2
 800b058:	9304      	str	r3, [sp, #16]
 800b05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b05e:	2206      	movs	r2, #6
 800b060:	4828      	ldr	r0, [pc, #160]	@ (800b104 <_vfiprintf_r+0x220>)
 800b062:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b066:	f000 fb41 	bl	800b6ec <memchr>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d03f      	beq.n	800b0ee <_vfiprintf_r+0x20a>
 800b06e:	4b26      	ldr	r3, [pc, #152]	@ (800b108 <_vfiprintf_r+0x224>)
 800b070:	bb1b      	cbnz	r3, 800b0ba <_vfiprintf_r+0x1d6>
 800b072:	9b03      	ldr	r3, [sp, #12]
 800b074:	3307      	adds	r3, #7
 800b076:	f023 0307 	bic.w	r3, r3, #7
 800b07a:	3308      	adds	r3, #8
 800b07c:	9303      	str	r3, [sp, #12]
 800b07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b080:	443b      	add	r3, r7
 800b082:	9309      	str	r3, [sp, #36]	@ 0x24
 800b084:	e76a      	b.n	800af5c <_vfiprintf_r+0x78>
 800b086:	fb0c 3202 	mla	r2, ip, r2, r3
 800b08a:	460c      	mov	r4, r1
 800b08c:	2001      	movs	r0, #1
 800b08e:	e7a8      	b.n	800afe2 <_vfiprintf_r+0xfe>
 800b090:	2300      	movs	r3, #0
 800b092:	3401      	adds	r4, #1
 800b094:	f04f 0c0a 	mov.w	ip, #10
 800b098:	4619      	mov	r1, r3
 800b09a:	9305      	str	r3, [sp, #20]
 800b09c:	4620      	mov	r0, r4
 800b09e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0a2:	3a30      	subs	r2, #48	@ 0x30
 800b0a4:	2a09      	cmp	r2, #9
 800b0a6:	d903      	bls.n	800b0b0 <_vfiprintf_r+0x1cc>
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d0c6      	beq.n	800b03a <_vfiprintf_r+0x156>
 800b0ac:	9105      	str	r1, [sp, #20]
 800b0ae:	e7c4      	b.n	800b03a <_vfiprintf_r+0x156>
 800b0b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e7f0      	b.n	800b09c <_vfiprintf_r+0x1b8>
 800b0ba:	ab03      	add	r3, sp, #12
 800b0bc:	462a      	mov	r2, r5
 800b0be:	a904      	add	r1, sp, #16
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	4b11      	ldr	r3, [pc, #68]	@ (800b10c <_vfiprintf_r+0x228>)
 800b0c6:	f3af 8000 	nop.w
 800b0ca:	4607      	mov	r7, r0
 800b0cc:	1c78      	adds	r0, r7, #1
 800b0ce:	d1d6      	bne.n	800b07e <_vfiprintf_r+0x19a>
 800b0d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0d2:	07d9      	lsls	r1, r3, #31
 800b0d4:	d405      	bmi.n	800b0e2 <_vfiprintf_r+0x1fe>
 800b0d6:	89ab      	ldrh	r3, [r5, #12]
 800b0d8:	059a      	lsls	r2, r3, #22
 800b0da:	d402      	bmi.n	800b0e2 <_vfiprintf_r+0x1fe>
 800b0dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0de:	f7ff fc85 	bl	800a9ec <__retarget_lock_release_recursive>
 800b0e2:	89ab      	ldrh	r3, [r5, #12]
 800b0e4:	065b      	lsls	r3, r3, #25
 800b0e6:	f53f af1f 	bmi.w	800af28 <_vfiprintf_r+0x44>
 800b0ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0ec:	e71e      	b.n	800af2c <_vfiprintf_r+0x48>
 800b0ee:	ab03      	add	r3, sp, #12
 800b0f0:	462a      	mov	r2, r5
 800b0f2:	a904      	add	r1, sp, #16
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	4b04      	ldr	r3, [pc, #16]	@ (800b10c <_vfiprintf_r+0x228>)
 800b0fa:	f000 f87d 	bl	800b1f8 <_printf_i>
 800b0fe:	e7e4      	b.n	800b0ca <_vfiprintf_r+0x1e6>
 800b100:	0800bdf5 	.word	0x0800bdf5
 800b104:	0800bdff 	.word	0x0800bdff
 800b108:	00000000 	.word	0x00000000
 800b10c:	0800aebf 	.word	0x0800aebf
 800b110:	0800bdfb 	.word	0x0800bdfb

0800b114 <_printf_common>:
 800b114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b118:	4616      	mov	r6, r2
 800b11a:	4698      	mov	r8, r3
 800b11c:	688a      	ldr	r2, [r1, #8]
 800b11e:	4607      	mov	r7, r0
 800b120:	690b      	ldr	r3, [r1, #16]
 800b122:	460c      	mov	r4, r1
 800b124:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b128:	4293      	cmp	r3, r2
 800b12a:	bfb8      	it	lt
 800b12c:	4613      	movlt	r3, r2
 800b12e:	6033      	str	r3, [r6, #0]
 800b130:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b134:	b10a      	cbz	r2, 800b13a <_printf_common+0x26>
 800b136:	3301      	adds	r3, #1
 800b138:	6033      	str	r3, [r6, #0]
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	0699      	lsls	r1, r3, #26
 800b13e:	bf42      	ittt	mi
 800b140:	6833      	ldrmi	r3, [r6, #0]
 800b142:	3302      	addmi	r3, #2
 800b144:	6033      	strmi	r3, [r6, #0]
 800b146:	6825      	ldr	r5, [r4, #0]
 800b148:	f015 0506 	ands.w	r5, r5, #6
 800b14c:	d106      	bne.n	800b15c <_printf_common+0x48>
 800b14e:	f104 0a19 	add.w	sl, r4, #25
 800b152:	68e3      	ldr	r3, [r4, #12]
 800b154:	6832      	ldr	r2, [r6, #0]
 800b156:	1a9b      	subs	r3, r3, r2
 800b158:	42ab      	cmp	r3, r5
 800b15a:	dc2b      	bgt.n	800b1b4 <_printf_common+0xa0>
 800b15c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b160:	6822      	ldr	r2, [r4, #0]
 800b162:	3b00      	subs	r3, #0
 800b164:	bf18      	it	ne
 800b166:	2301      	movne	r3, #1
 800b168:	0692      	lsls	r2, r2, #26
 800b16a:	d430      	bmi.n	800b1ce <_printf_common+0xba>
 800b16c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b170:	4641      	mov	r1, r8
 800b172:	4638      	mov	r0, r7
 800b174:	47c8      	blx	r9
 800b176:	3001      	adds	r0, #1
 800b178:	d023      	beq.n	800b1c2 <_printf_common+0xae>
 800b17a:	6823      	ldr	r3, [r4, #0]
 800b17c:	341a      	adds	r4, #26
 800b17e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b182:	f003 0306 	and.w	r3, r3, #6
 800b186:	2b04      	cmp	r3, #4
 800b188:	bf0a      	itet	eq
 800b18a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b18e:	2500      	movne	r5, #0
 800b190:	6833      	ldreq	r3, [r6, #0]
 800b192:	f04f 0600 	mov.w	r6, #0
 800b196:	bf08      	it	eq
 800b198:	1aed      	subeq	r5, r5, r3
 800b19a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b19e:	bf08      	it	eq
 800b1a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	bfc4      	itt	gt
 800b1a8:	1a9b      	subgt	r3, r3, r2
 800b1aa:	18ed      	addgt	r5, r5, r3
 800b1ac:	42b5      	cmp	r5, r6
 800b1ae:	d11a      	bne.n	800b1e6 <_printf_common+0xd2>
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	e008      	b.n	800b1c6 <_printf_common+0xb2>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	4652      	mov	r2, sl
 800b1b8:	4641      	mov	r1, r8
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	47c8      	blx	r9
 800b1be:	3001      	adds	r0, #1
 800b1c0:	d103      	bne.n	800b1ca <_printf_common+0xb6>
 800b1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ca:	3501      	adds	r5, #1
 800b1cc:	e7c1      	b.n	800b152 <_printf_common+0x3e>
 800b1ce:	18e1      	adds	r1, r4, r3
 800b1d0:	1c5a      	adds	r2, r3, #1
 800b1d2:	2030      	movs	r0, #48	@ 0x30
 800b1d4:	3302      	adds	r3, #2
 800b1d6:	4422      	add	r2, r4
 800b1d8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1e4:	e7c2      	b.n	800b16c <_printf_common+0x58>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	4622      	mov	r2, r4
 800b1ea:	4641      	mov	r1, r8
 800b1ec:	4638      	mov	r0, r7
 800b1ee:	47c8      	blx	r9
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	d0e6      	beq.n	800b1c2 <_printf_common+0xae>
 800b1f4:	3601      	adds	r6, #1
 800b1f6:	e7d9      	b.n	800b1ac <_printf_common+0x98>

0800b1f8 <_printf_i>:
 800b1f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1fc:	7e0f      	ldrb	r7, [r1, #24]
 800b1fe:	4691      	mov	r9, r2
 800b200:	4680      	mov	r8, r0
 800b202:	460c      	mov	r4, r1
 800b204:	2f78      	cmp	r7, #120	@ 0x78
 800b206:	469a      	mov	sl, r3
 800b208:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b20a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b20e:	d807      	bhi.n	800b220 <_printf_i+0x28>
 800b210:	2f62      	cmp	r7, #98	@ 0x62
 800b212:	d80a      	bhi.n	800b22a <_printf_i+0x32>
 800b214:	2f00      	cmp	r7, #0
 800b216:	f000 80d2 	beq.w	800b3be <_printf_i+0x1c6>
 800b21a:	2f58      	cmp	r7, #88	@ 0x58
 800b21c:	f000 80b9 	beq.w	800b392 <_printf_i+0x19a>
 800b220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b224:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b228:	e03a      	b.n	800b2a0 <_printf_i+0xa8>
 800b22a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b22e:	2b15      	cmp	r3, #21
 800b230:	d8f6      	bhi.n	800b220 <_printf_i+0x28>
 800b232:	a101      	add	r1, pc, #4	@ (adr r1, 800b238 <_printf_i+0x40>)
 800b234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b238:	0800b291 	.word	0x0800b291
 800b23c:	0800b2a5 	.word	0x0800b2a5
 800b240:	0800b221 	.word	0x0800b221
 800b244:	0800b221 	.word	0x0800b221
 800b248:	0800b221 	.word	0x0800b221
 800b24c:	0800b221 	.word	0x0800b221
 800b250:	0800b2a5 	.word	0x0800b2a5
 800b254:	0800b221 	.word	0x0800b221
 800b258:	0800b221 	.word	0x0800b221
 800b25c:	0800b221 	.word	0x0800b221
 800b260:	0800b221 	.word	0x0800b221
 800b264:	0800b3a5 	.word	0x0800b3a5
 800b268:	0800b2cf 	.word	0x0800b2cf
 800b26c:	0800b35f 	.word	0x0800b35f
 800b270:	0800b221 	.word	0x0800b221
 800b274:	0800b221 	.word	0x0800b221
 800b278:	0800b3c7 	.word	0x0800b3c7
 800b27c:	0800b221 	.word	0x0800b221
 800b280:	0800b2cf 	.word	0x0800b2cf
 800b284:	0800b221 	.word	0x0800b221
 800b288:	0800b221 	.word	0x0800b221
 800b28c:	0800b367 	.word	0x0800b367
 800b290:	6833      	ldr	r3, [r6, #0]
 800b292:	1d1a      	adds	r2, r3, #4
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	6032      	str	r2, [r6, #0]
 800b298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b29c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e09d      	b.n	800b3e0 <_printf_i+0x1e8>
 800b2a4:	6833      	ldr	r3, [r6, #0]
 800b2a6:	6820      	ldr	r0, [r4, #0]
 800b2a8:	1d19      	adds	r1, r3, #4
 800b2aa:	6031      	str	r1, [r6, #0]
 800b2ac:	0606      	lsls	r6, r0, #24
 800b2ae:	d501      	bpl.n	800b2b4 <_printf_i+0xbc>
 800b2b0:	681d      	ldr	r5, [r3, #0]
 800b2b2:	e003      	b.n	800b2bc <_printf_i+0xc4>
 800b2b4:	0645      	lsls	r5, r0, #25
 800b2b6:	d5fb      	bpl.n	800b2b0 <_printf_i+0xb8>
 800b2b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2bc:	2d00      	cmp	r5, #0
 800b2be:	da03      	bge.n	800b2c8 <_printf_i+0xd0>
 800b2c0:	232d      	movs	r3, #45	@ 0x2d
 800b2c2:	426d      	negs	r5, r5
 800b2c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2c8:	4859      	ldr	r0, [pc, #356]	@ (800b430 <_printf_i+0x238>)
 800b2ca:	230a      	movs	r3, #10
 800b2cc:	e011      	b.n	800b2f2 <_printf_i+0xfa>
 800b2ce:	6821      	ldr	r1, [r4, #0]
 800b2d0:	6833      	ldr	r3, [r6, #0]
 800b2d2:	0608      	lsls	r0, r1, #24
 800b2d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2d8:	d402      	bmi.n	800b2e0 <_printf_i+0xe8>
 800b2da:	0649      	lsls	r1, r1, #25
 800b2dc:	bf48      	it	mi
 800b2de:	b2ad      	uxthmi	r5, r5
 800b2e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2e2:	6033      	str	r3, [r6, #0]
 800b2e4:	4852      	ldr	r0, [pc, #328]	@ (800b430 <_printf_i+0x238>)
 800b2e6:	bf14      	ite	ne
 800b2e8:	230a      	movne	r3, #10
 800b2ea:	2308      	moveq	r3, #8
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b2f2:	6866      	ldr	r6, [r4, #4]
 800b2f4:	2e00      	cmp	r6, #0
 800b2f6:	60a6      	str	r6, [r4, #8]
 800b2f8:	bfa2      	ittt	ge
 800b2fa:	6821      	ldrge	r1, [r4, #0]
 800b2fc:	f021 0104 	bicge.w	r1, r1, #4
 800b300:	6021      	strge	r1, [r4, #0]
 800b302:	b90d      	cbnz	r5, 800b308 <_printf_i+0x110>
 800b304:	2e00      	cmp	r6, #0
 800b306:	d04b      	beq.n	800b3a0 <_printf_i+0x1a8>
 800b308:	4616      	mov	r6, r2
 800b30a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b30e:	fb03 5711 	mls	r7, r3, r1, r5
 800b312:	5dc7      	ldrb	r7, [r0, r7]
 800b314:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b318:	462f      	mov	r7, r5
 800b31a:	460d      	mov	r5, r1
 800b31c:	42bb      	cmp	r3, r7
 800b31e:	d9f4      	bls.n	800b30a <_printf_i+0x112>
 800b320:	2b08      	cmp	r3, #8
 800b322:	d10b      	bne.n	800b33c <_printf_i+0x144>
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	07df      	lsls	r7, r3, #31
 800b328:	d508      	bpl.n	800b33c <_printf_i+0x144>
 800b32a:	6923      	ldr	r3, [r4, #16]
 800b32c:	6861      	ldr	r1, [r4, #4]
 800b32e:	4299      	cmp	r1, r3
 800b330:	bfde      	ittt	le
 800b332:	2330      	movle	r3, #48	@ 0x30
 800b334:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b338:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b33c:	1b92      	subs	r2, r2, r6
 800b33e:	6122      	str	r2, [r4, #16]
 800b340:	464b      	mov	r3, r9
 800b342:	aa03      	add	r2, sp, #12
 800b344:	4621      	mov	r1, r4
 800b346:	4640      	mov	r0, r8
 800b348:	f8cd a000 	str.w	sl, [sp]
 800b34c:	f7ff fee2 	bl	800b114 <_printf_common>
 800b350:	3001      	adds	r0, #1
 800b352:	d14a      	bne.n	800b3ea <_printf_i+0x1f2>
 800b354:	f04f 30ff 	mov.w	r0, #4294967295
 800b358:	b004      	add	sp, #16
 800b35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	f043 0320 	orr.w	r3, r3, #32
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	2778      	movs	r7, #120	@ 0x78
 800b368:	4832      	ldr	r0, [pc, #200]	@ (800b434 <_printf_i+0x23c>)
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b370:	061f      	lsls	r7, r3, #24
 800b372:	6831      	ldr	r1, [r6, #0]
 800b374:	f851 5b04 	ldr.w	r5, [r1], #4
 800b378:	d402      	bmi.n	800b380 <_printf_i+0x188>
 800b37a:	065f      	lsls	r7, r3, #25
 800b37c:	bf48      	it	mi
 800b37e:	b2ad      	uxthmi	r5, r5
 800b380:	6031      	str	r1, [r6, #0]
 800b382:	07d9      	lsls	r1, r3, #31
 800b384:	bf44      	itt	mi
 800b386:	f043 0320 	orrmi.w	r3, r3, #32
 800b38a:	6023      	strmi	r3, [r4, #0]
 800b38c:	b11d      	cbz	r5, 800b396 <_printf_i+0x19e>
 800b38e:	2310      	movs	r3, #16
 800b390:	e7ac      	b.n	800b2ec <_printf_i+0xf4>
 800b392:	4827      	ldr	r0, [pc, #156]	@ (800b430 <_printf_i+0x238>)
 800b394:	e7e9      	b.n	800b36a <_printf_i+0x172>
 800b396:	6823      	ldr	r3, [r4, #0]
 800b398:	f023 0320 	bic.w	r3, r3, #32
 800b39c:	6023      	str	r3, [r4, #0]
 800b39e:	e7f6      	b.n	800b38e <_printf_i+0x196>
 800b3a0:	4616      	mov	r6, r2
 800b3a2:	e7bd      	b.n	800b320 <_printf_i+0x128>
 800b3a4:	6833      	ldr	r3, [r6, #0]
 800b3a6:	6825      	ldr	r5, [r4, #0]
 800b3a8:	1d18      	adds	r0, r3, #4
 800b3aa:	6961      	ldr	r1, [r4, #20]
 800b3ac:	6030      	str	r0, [r6, #0]
 800b3ae:	062e      	lsls	r6, r5, #24
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	d501      	bpl.n	800b3b8 <_printf_i+0x1c0>
 800b3b4:	6019      	str	r1, [r3, #0]
 800b3b6:	e002      	b.n	800b3be <_printf_i+0x1c6>
 800b3b8:	0668      	lsls	r0, r5, #25
 800b3ba:	d5fb      	bpl.n	800b3b4 <_printf_i+0x1bc>
 800b3bc:	8019      	strh	r1, [r3, #0]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	4616      	mov	r6, r2
 800b3c2:	6123      	str	r3, [r4, #16]
 800b3c4:	e7bc      	b.n	800b340 <_printf_i+0x148>
 800b3c6:	6833      	ldr	r3, [r6, #0]
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	1d1a      	adds	r2, r3, #4
 800b3cc:	6032      	str	r2, [r6, #0]
 800b3ce:	681e      	ldr	r6, [r3, #0]
 800b3d0:	6862      	ldr	r2, [r4, #4]
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	f000 f98a 	bl	800b6ec <memchr>
 800b3d8:	b108      	cbz	r0, 800b3de <_printf_i+0x1e6>
 800b3da:	1b80      	subs	r0, r0, r6
 800b3dc:	6060      	str	r0, [r4, #4]
 800b3de:	6863      	ldr	r3, [r4, #4]
 800b3e0:	6123      	str	r3, [r4, #16]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3e8:	e7aa      	b.n	800b340 <_printf_i+0x148>
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	4632      	mov	r2, r6
 800b3ee:	4649      	mov	r1, r9
 800b3f0:	4640      	mov	r0, r8
 800b3f2:	47d0      	blx	sl
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	d0ad      	beq.n	800b354 <_printf_i+0x15c>
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	079b      	lsls	r3, r3, #30
 800b3fc:	d413      	bmi.n	800b426 <_printf_i+0x22e>
 800b3fe:	68e0      	ldr	r0, [r4, #12]
 800b400:	9b03      	ldr	r3, [sp, #12]
 800b402:	4298      	cmp	r0, r3
 800b404:	bfb8      	it	lt
 800b406:	4618      	movlt	r0, r3
 800b408:	e7a6      	b.n	800b358 <_printf_i+0x160>
 800b40a:	2301      	movs	r3, #1
 800b40c:	4632      	mov	r2, r6
 800b40e:	4649      	mov	r1, r9
 800b410:	4640      	mov	r0, r8
 800b412:	47d0      	blx	sl
 800b414:	3001      	adds	r0, #1
 800b416:	d09d      	beq.n	800b354 <_printf_i+0x15c>
 800b418:	3501      	adds	r5, #1
 800b41a:	68e3      	ldr	r3, [r4, #12]
 800b41c:	9903      	ldr	r1, [sp, #12]
 800b41e:	1a5b      	subs	r3, r3, r1
 800b420:	42ab      	cmp	r3, r5
 800b422:	dcf2      	bgt.n	800b40a <_printf_i+0x212>
 800b424:	e7eb      	b.n	800b3fe <_printf_i+0x206>
 800b426:	2500      	movs	r5, #0
 800b428:	f104 0619 	add.w	r6, r4, #25
 800b42c:	e7f5      	b.n	800b41a <_printf_i+0x222>
 800b42e:	bf00      	nop
 800b430:	0800be06 	.word	0x0800be06
 800b434:	0800be17 	.word	0x0800be17

0800b438 <__sflush_r>:
 800b438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b440:	0716      	lsls	r6, r2, #28
 800b442:	4605      	mov	r5, r0
 800b444:	460c      	mov	r4, r1
 800b446:	d454      	bmi.n	800b4f2 <__sflush_r+0xba>
 800b448:	684b      	ldr	r3, [r1, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	dc02      	bgt.n	800b454 <__sflush_r+0x1c>
 800b44e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b450:	2b00      	cmp	r3, #0
 800b452:	dd48      	ble.n	800b4e6 <__sflush_r+0xae>
 800b454:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b456:	2e00      	cmp	r6, #0
 800b458:	d045      	beq.n	800b4e6 <__sflush_r+0xae>
 800b45a:	2300      	movs	r3, #0
 800b45c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b460:	682f      	ldr	r7, [r5, #0]
 800b462:	6a21      	ldr	r1, [r4, #32]
 800b464:	602b      	str	r3, [r5, #0]
 800b466:	d030      	beq.n	800b4ca <__sflush_r+0x92>
 800b468:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b46a:	89a3      	ldrh	r3, [r4, #12]
 800b46c:	0759      	lsls	r1, r3, #29
 800b46e:	d505      	bpl.n	800b47c <__sflush_r+0x44>
 800b470:	6863      	ldr	r3, [r4, #4]
 800b472:	1ad2      	subs	r2, r2, r3
 800b474:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b476:	b10b      	cbz	r3, 800b47c <__sflush_r+0x44>
 800b478:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b47a:	1ad2      	subs	r2, r2, r3
 800b47c:	2300      	movs	r3, #0
 800b47e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b480:	6a21      	ldr	r1, [r4, #32]
 800b482:	4628      	mov	r0, r5
 800b484:	47b0      	blx	r6
 800b486:	1c43      	adds	r3, r0, #1
 800b488:	89a3      	ldrh	r3, [r4, #12]
 800b48a:	d106      	bne.n	800b49a <__sflush_r+0x62>
 800b48c:	6829      	ldr	r1, [r5, #0]
 800b48e:	291d      	cmp	r1, #29
 800b490:	d82b      	bhi.n	800b4ea <__sflush_r+0xb2>
 800b492:	4a2a      	ldr	r2, [pc, #168]	@ (800b53c <__sflush_r+0x104>)
 800b494:	410a      	asrs	r2, r1
 800b496:	07d6      	lsls	r6, r2, #31
 800b498:	d427      	bmi.n	800b4ea <__sflush_r+0xb2>
 800b49a:	2200      	movs	r2, #0
 800b49c:	04d9      	lsls	r1, r3, #19
 800b49e:	6062      	str	r2, [r4, #4]
 800b4a0:	6922      	ldr	r2, [r4, #16]
 800b4a2:	6022      	str	r2, [r4, #0]
 800b4a4:	d504      	bpl.n	800b4b0 <__sflush_r+0x78>
 800b4a6:	1c42      	adds	r2, r0, #1
 800b4a8:	d101      	bne.n	800b4ae <__sflush_r+0x76>
 800b4aa:	682b      	ldr	r3, [r5, #0]
 800b4ac:	b903      	cbnz	r3, 800b4b0 <__sflush_r+0x78>
 800b4ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800b4b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4b2:	602f      	str	r7, [r5, #0]
 800b4b4:	b1b9      	cbz	r1, 800b4e6 <__sflush_r+0xae>
 800b4b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4ba:	4299      	cmp	r1, r3
 800b4bc:	d002      	beq.n	800b4c4 <__sflush_r+0x8c>
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f7ff fa96 	bl	800a9f0 <_free_r>
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4c8:	e00d      	b.n	800b4e6 <__sflush_r+0xae>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	47b0      	blx	r6
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	1c50      	adds	r0, r2, #1
 800b4d4:	d1c9      	bne.n	800b46a <__sflush_r+0x32>
 800b4d6:	682b      	ldr	r3, [r5, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d0c6      	beq.n	800b46a <__sflush_r+0x32>
 800b4dc:	2b1d      	cmp	r3, #29
 800b4de:	d001      	beq.n	800b4e4 <__sflush_r+0xac>
 800b4e0:	2b16      	cmp	r3, #22
 800b4e2:	d11d      	bne.n	800b520 <__sflush_r+0xe8>
 800b4e4:	602f      	str	r7, [r5, #0]
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	e021      	b.n	800b52e <__sflush_r+0xf6>
 800b4ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4ee:	b21b      	sxth	r3, r3
 800b4f0:	e01a      	b.n	800b528 <__sflush_r+0xf0>
 800b4f2:	690f      	ldr	r7, [r1, #16]
 800b4f4:	2f00      	cmp	r7, #0
 800b4f6:	d0f6      	beq.n	800b4e6 <__sflush_r+0xae>
 800b4f8:	0793      	lsls	r3, r2, #30
 800b4fa:	680e      	ldr	r6, [r1, #0]
 800b4fc:	600f      	str	r7, [r1, #0]
 800b4fe:	bf0c      	ite	eq
 800b500:	694b      	ldreq	r3, [r1, #20]
 800b502:	2300      	movne	r3, #0
 800b504:	eba6 0807 	sub.w	r8, r6, r7
 800b508:	608b      	str	r3, [r1, #8]
 800b50a:	f1b8 0f00 	cmp.w	r8, #0
 800b50e:	ddea      	ble.n	800b4e6 <__sflush_r+0xae>
 800b510:	4643      	mov	r3, r8
 800b512:	463a      	mov	r2, r7
 800b514:	6a21      	ldr	r1, [r4, #32]
 800b516:	4628      	mov	r0, r5
 800b518:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b51a:	47b0      	blx	r6
 800b51c:	2800      	cmp	r0, #0
 800b51e:	dc08      	bgt.n	800b532 <__sflush_r+0xfa>
 800b520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b528:	f04f 30ff 	mov.w	r0, #4294967295
 800b52c:	81a3      	strh	r3, [r4, #12]
 800b52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b532:	4407      	add	r7, r0
 800b534:	eba8 0800 	sub.w	r8, r8, r0
 800b538:	e7e7      	b.n	800b50a <__sflush_r+0xd2>
 800b53a:	bf00      	nop
 800b53c:	dfbffffe 	.word	0xdfbffffe

0800b540 <_fflush_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	690b      	ldr	r3, [r1, #16]
 800b544:	4605      	mov	r5, r0
 800b546:	460c      	mov	r4, r1
 800b548:	b913      	cbnz	r3, 800b550 <_fflush_r+0x10>
 800b54a:	2500      	movs	r5, #0
 800b54c:	4628      	mov	r0, r5
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
 800b550:	b118      	cbz	r0, 800b55a <_fflush_r+0x1a>
 800b552:	6a03      	ldr	r3, [r0, #32]
 800b554:	b90b      	cbnz	r3, 800b55a <_fflush_r+0x1a>
 800b556:	f7ff f81d 	bl	800a594 <__sinit>
 800b55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d0f3      	beq.n	800b54a <_fflush_r+0xa>
 800b562:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b564:	07d0      	lsls	r0, r2, #31
 800b566:	d404      	bmi.n	800b572 <_fflush_r+0x32>
 800b568:	0599      	lsls	r1, r3, #22
 800b56a:	d402      	bmi.n	800b572 <_fflush_r+0x32>
 800b56c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b56e:	f7ff fa3c 	bl	800a9ea <__retarget_lock_acquire_recursive>
 800b572:	4628      	mov	r0, r5
 800b574:	4621      	mov	r1, r4
 800b576:	f7ff ff5f 	bl	800b438 <__sflush_r>
 800b57a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b57c:	4605      	mov	r5, r0
 800b57e:	07da      	lsls	r2, r3, #31
 800b580:	d4e4      	bmi.n	800b54c <_fflush_r+0xc>
 800b582:	89a3      	ldrh	r3, [r4, #12]
 800b584:	059b      	lsls	r3, r3, #22
 800b586:	d4e1      	bmi.n	800b54c <_fflush_r+0xc>
 800b588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b58a:	f7ff fa2f 	bl	800a9ec <__retarget_lock_release_recursive>
 800b58e:	e7dd      	b.n	800b54c <_fflush_r+0xc>

0800b590 <__swhatbuf_r>:
 800b590:	b570      	push	{r4, r5, r6, lr}
 800b592:	460c      	mov	r4, r1
 800b594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b598:	b096      	sub	sp, #88	@ 0x58
 800b59a:	4615      	mov	r5, r2
 800b59c:	2900      	cmp	r1, #0
 800b59e:	461e      	mov	r6, r3
 800b5a0:	da0c      	bge.n	800b5bc <__swhatbuf_r+0x2c>
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b5aa:	bf14      	ite	ne
 800b5ac:	2340      	movne	r3, #64	@ 0x40
 800b5ae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	6031      	str	r1, [r6, #0]
 800b5b6:	602b      	str	r3, [r5, #0]
 800b5b8:	b016      	add	sp, #88	@ 0x58
 800b5ba:	bd70      	pop	{r4, r5, r6, pc}
 800b5bc:	466a      	mov	r2, sp
 800b5be:	f000 f863 	bl	800b688 <_fstat_r>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	dbed      	blt.n	800b5a2 <__swhatbuf_r+0x12>
 800b5c6:	9901      	ldr	r1, [sp, #4]
 800b5c8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b5cc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b5d0:	4259      	negs	r1, r3
 800b5d2:	4159      	adcs	r1, r3
 800b5d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5d8:	e7eb      	b.n	800b5b2 <__swhatbuf_r+0x22>

0800b5da <__smakebuf_r>:
 800b5da:	898b      	ldrh	r3, [r1, #12]
 800b5dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5de:	079d      	lsls	r5, r3, #30
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	d507      	bpl.n	800b5f6 <__smakebuf_r+0x1c>
 800b5e6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5ea:	6023      	str	r3, [r4, #0]
 800b5ec:	6123      	str	r3, [r4, #16]
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	6163      	str	r3, [r4, #20]
 800b5f2:	b003      	add	sp, #12
 800b5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5f6:	ab01      	add	r3, sp, #4
 800b5f8:	466a      	mov	r2, sp
 800b5fa:	f7ff ffc9 	bl	800b590 <__swhatbuf_r>
 800b5fe:	9f00      	ldr	r7, [sp, #0]
 800b600:	4605      	mov	r5, r0
 800b602:	4630      	mov	r0, r6
 800b604:	4639      	mov	r1, r7
 800b606:	f7ff fa5f 	bl	800aac8 <_malloc_r>
 800b60a:	b948      	cbnz	r0, 800b620 <__smakebuf_r+0x46>
 800b60c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b610:	059a      	lsls	r2, r3, #22
 800b612:	d4ee      	bmi.n	800b5f2 <__smakebuf_r+0x18>
 800b614:	f023 0303 	bic.w	r3, r3, #3
 800b618:	f043 0302 	orr.w	r3, r3, #2
 800b61c:	81a3      	strh	r3, [r4, #12]
 800b61e:	e7e2      	b.n	800b5e6 <__smakebuf_r+0xc>
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	6020      	str	r0, [r4, #0]
 800b624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b628:	81a3      	strh	r3, [r4, #12]
 800b62a:	9b01      	ldr	r3, [sp, #4]
 800b62c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b630:	b15b      	cbz	r3, 800b64a <__smakebuf_r+0x70>
 800b632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b636:	4630      	mov	r0, r6
 800b638:	f000 f838 	bl	800b6ac <_isatty_r>
 800b63c:	b128      	cbz	r0, 800b64a <__smakebuf_r+0x70>
 800b63e:	89a3      	ldrh	r3, [r4, #12]
 800b640:	f023 0303 	bic.w	r3, r3, #3
 800b644:	f043 0301 	orr.w	r3, r3, #1
 800b648:	81a3      	strh	r3, [r4, #12]
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	431d      	orrs	r5, r3
 800b64e:	81a5      	strh	r5, [r4, #12]
 800b650:	e7cf      	b.n	800b5f2 <__smakebuf_r+0x18>

0800b652 <memmove>:
 800b652:	4288      	cmp	r0, r1
 800b654:	b510      	push	{r4, lr}
 800b656:	eb01 0402 	add.w	r4, r1, r2
 800b65a:	d902      	bls.n	800b662 <memmove+0x10>
 800b65c:	4284      	cmp	r4, r0
 800b65e:	4623      	mov	r3, r4
 800b660:	d807      	bhi.n	800b672 <memmove+0x20>
 800b662:	1e43      	subs	r3, r0, #1
 800b664:	42a1      	cmp	r1, r4
 800b666:	d008      	beq.n	800b67a <memmove+0x28>
 800b668:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b66c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b670:	e7f8      	b.n	800b664 <memmove+0x12>
 800b672:	4402      	add	r2, r0
 800b674:	4601      	mov	r1, r0
 800b676:	428a      	cmp	r2, r1
 800b678:	d100      	bne.n	800b67c <memmove+0x2a>
 800b67a:	bd10      	pop	{r4, pc}
 800b67c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b680:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b684:	e7f7      	b.n	800b676 <memmove+0x24>
	...

0800b688 <_fstat_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	2300      	movs	r3, #0
 800b68c:	4d06      	ldr	r5, [pc, #24]	@ (800b6a8 <_fstat_r+0x20>)
 800b68e:	4604      	mov	r4, r0
 800b690:	4608      	mov	r0, r1
 800b692:	4611      	mov	r1, r2
 800b694:	602b      	str	r3, [r5, #0]
 800b696:	f7f6 f9e1 	bl	8001a5c <_fstat>
 800b69a:	1c43      	adds	r3, r0, #1
 800b69c:	d102      	bne.n	800b6a4 <_fstat_r+0x1c>
 800b69e:	682b      	ldr	r3, [r5, #0]
 800b6a0:	b103      	cbz	r3, 800b6a4 <_fstat_r+0x1c>
 800b6a2:	6023      	str	r3, [r4, #0]
 800b6a4:	bd38      	pop	{r3, r4, r5, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20000728 	.word	0x20000728

0800b6ac <_isatty_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	4d05      	ldr	r5, [pc, #20]	@ (800b6c8 <_isatty_r+0x1c>)
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	4608      	mov	r0, r1
 800b6b6:	602b      	str	r3, [r5, #0]
 800b6b8:	f7f6 f9e0 	bl	8001a7c <_isatty>
 800b6bc:	1c43      	adds	r3, r0, #1
 800b6be:	d102      	bne.n	800b6c6 <_isatty_r+0x1a>
 800b6c0:	682b      	ldr	r3, [r5, #0]
 800b6c2:	b103      	cbz	r3, 800b6c6 <_isatty_r+0x1a>
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	bd38      	pop	{r3, r4, r5, pc}
 800b6c8:	20000728 	.word	0x20000728

0800b6cc <_sbrk_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	4d05      	ldr	r5, [pc, #20]	@ (800b6e8 <_sbrk_r+0x1c>)
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	4608      	mov	r0, r1
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	f7f6 f9e8 	bl	8001aac <_sbrk>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_sbrk_r+0x1a>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_sbrk_r+0x1a>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	20000728 	.word	0x20000728

0800b6ec <memchr>:
 800b6ec:	b2c9      	uxtb	r1, r1
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	4402      	add	r2, r0
 800b6f2:	b510      	push	{r4, lr}
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	d101      	bne.n	800b6fe <memchr+0x12>
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	e003      	b.n	800b706 <memchr+0x1a>
 800b6fe:	7804      	ldrb	r4, [r0, #0]
 800b700:	3301      	adds	r3, #1
 800b702:	428c      	cmp	r4, r1
 800b704:	d1f6      	bne.n	800b6f4 <memchr+0x8>
 800b706:	bd10      	pop	{r4, pc}

0800b708 <memcpy>:
 800b708:	440a      	add	r2, r1
 800b70a:	1e43      	subs	r3, r0, #1
 800b70c:	4291      	cmp	r1, r2
 800b70e:	d100      	bne.n	800b712 <memcpy+0xa>
 800b710:	4770      	bx	lr
 800b712:	b510      	push	{r4, lr}
 800b714:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b718:	4291      	cmp	r1, r2
 800b71a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b71e:	d1f9      	bne.n	800b714 <memcpy+0xc>
 800b720:	bd10      	pop	{r4, pc}

0800b722 <_realloc_r>:
 800b722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b726:	4680      	mov	r8, r0
 800b728:	4615      	mov	r5, r2
 800b72a:	460c      	mov	r4, r1
 800b72c:	b921      	cbnz	r1, 800b738 <_realloc_r+0x16>
 800b72e:	4611      	mov	r1, r2
 800b730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b734:	f7ff b9c8 	b.w	800aac8 <_malloc_r>
 800b738:	b92a      	cbnz	r2, 800b746 <_realloc_r+0x24>
 800b73a:	f7ff f959 	bl	800a9f0 <_free_r>
 800b73e:	2400      	movs	r4, #0
 800b740:	4620      	mov	r0, r4
 800b742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b746:	f000 f81a 	bl	800b77e <_malloc_usable_size_r>
 800b74a:	4285      	cmp	r5, r0
 800b74c:	4606      	mov	r6, r0
 800b74e:	d802      	bhi.n	800b756 <_realloc_r+0x34>
 800b750:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b754:	d8f4      	bhi.n	800b740 <_realloc_r+0x1e>
 800b756:	4629      	mov	r1, r5
 800b758:	4640      	mov	r0, r8
 800b75a:	f7ff f9b5 	bl	800aac8 <_malloc_r>
 800b75e:	4607      	mov	r7, r0
 800b760:	2800      	cmp	r0, #0
 800b762:	d0ec      	beq.n	800b73e <_realloc_r+0x1c>
 800b764:	42b5      	cmp	r5, r6
 800b766:	462a      	mov	r2, r5
 800b768:	4621      	mov	r1, r4
 800b76a:	bf28      	it	cs
 800b76c:	4632      	movcs	r2, r6
 800b76e:	f7ff ffcb 	bl	800b708 <memcpy>
 800b772:	4621      	mov	r1, r4
 800b774:	4640      	mov	r0, r8
 800b776:	463c      	mov	r4, r7
 800b778:	f7ff f93a 	bl	800a9f0 <_free_r>
 800b77c:	e7e0      	b.n	800b740 <_realloc_r+0x1e>

0800b77e <_malloc_usable_size_r>:
 800b77e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b782:	1f18      	subs	r0, r3, #4
 800b784:	2b00      	cmp	r3, #0
 800b786:	bfbc      	itt	lt
 800b788:	580b      	ldrlt	r3, [r1, r0]
 800b78a:	18c0      	addlt	r0, r0, r3
 800b78c:	4770      	bx	lr
	...

0800b790 <ceil>:
 800b790:	ec51 0b10 	vmov	r0, r1, d0
 800b794:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b79c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	4680      	mov	r8, r0
 800b7a6:	2e13      	cmp	r6, #19
 800b7a8:	dc2f      	bgt.n	800b80a <ceil+0x7a>
 800b7aa:	2e00      	cmp	r6, #0
 800b7ac:	da11      	bge.n	800b7d2 <ceil+0x42>
 800b7ae:	a332      	add	r3, pc, #200	@ (adr r3, 800b878 <ceil+0xe8>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	f7f4 fd6e 	bl	8000294 <__adddf3>
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	f7f5 f9b0 	bl	8000b20 <__aeabi_dcmpgt>
 800b7c0:	b120      	cbz	r0, 800b7cc <ceil+0x3c>
 800b7c2:	2c00      	cmp	r4, #0
 800b7c4:	db50      	blt.n	800b868 <ceil+0xd8>
 800b7c6:	4325      	orrs	r5, r4
 800b7c8:	d152      	bne.n	800b870 <ceil+0xe0>
 800b7ca:	462c      	mov	r4, r5
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	e024      	b.n	800b81c <ceil+0x8c>
 800b7d2:	4f2b      	ldr	r7, [pc, #172]	@ (800b880 <ceil+0xf0>)
 800b7d4:	4137      	asrs	r7, r6
 800b7d6:	ea01 0307 	and.w	r3, r1, r7
 800b7da:	4303      	orrs	r3, r0
 800b7dc:	d01e      	beq.n	800b81c <ceil+0x8c>
 800b7de:	a326      	add	r3, pc, #152	@ (adr r3, 800b878 <ceil+0xe8>)
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	f7f4 fd56 	bl	8000294 <__adddf3>
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f7f5 f998 	bl	8000b20 <__aeabi_dcmpgt>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d0eb      	beq.n	800b7cc <ceil+0x3c>
 800b7f4:	2c00      	cmp	r4, #0
 800b7f6:	f04f 0500 	mov.w	r5, #0
 800b7fa:	bfc2      	ittt	gt
 800b7fc:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 800b800:	4133      	asrgt	r3, r6
 800b802:	18e4      	addgt	r4, r4, r3
 800b804:	ea24 0407 	bic.w	r4, r4, r7
 800b808:	e7e0      	b.n	800b7cc <ceil+0x3c>
 800b80a:	2e33      	cmp	r6, #51	@ 0x33
 800b80c:	dd0a      	ble.n	800b824 <ceil+0x94>
 800b80e:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b812:	d103      	bne.n	800b81c <ceil+0x8c>
 800b814:	4602      	mov	r2, r0
 800b816:	460b      	mov	r3, r1
 800b818:	f7f4 fd3c 	bl	8000294 <__adddf3>
 800b81c:	ec41 0b10 	vmov	d0, r0, r1
 800b820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b824:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b828:	f04f 37ff 	mov.w	r7, #4294967295
 800b82c:	40df      	lsrs	r7, r3
 800b82e:	4238      	tst	r0, r7
 800b830:	d0f4      	beq.n	800b81c <ceil+0x8c>
 800b832:	a311      	add	r3, pc, #68	@ (adr r3, 800b878 <ceil+0xe8>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f7f4 fd2c 	bl	8000294 <__adddf3>
 800b83c:	2200      	movs	r2, #0
 800b83e:	2300      	movs	r3, #0
 800b840:	f7f5 f96e 	bl	8000b20 <__aeabi_dcmpgt>
 800b844:	2800      	cmp	r0, #0
 800b846:	d0c1      	beq.n	800b7cc <ceil+0x3c>
 800b848:	2c00      	cmp	r4, #0
 800b84a:	dd0a      	ble.n	800b862 <ceil+0xd2>
 800b84c:	2e14      	cmp	r6, #20
 800b84e:	d101      	bne.n	800b854 <ceil+0xc4>
 800b850:	3401      	adds	r4, #1
 800b852:	e006      	b.n	800b862 <ceil+0xd2>
 800b854:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b858:	2301      	movs	r3, #1
 800b85a:	40b3      	lsls	r3, r6
 800b85c:	441d      	add	r5, r3
 800b85e:	45a8      	cmp	r8, r5
 800b860:	d8f6      	bhi.n	800b850 <ceil+0xc0>
 800b862:	ea25 0507 	bic.w	r5, r5, r7
 800b866:	e7b1      	b.n	800b7cc <ceil+0x3c>
 800b868:	2500      	movs	r5, #0
 800b86a:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800b86e:	e7ad      	b.n	800b7cc <ceil+0x3c>
 800b870:	2500      	movs	r5, #0
 800b872:	4c04      	ldr	r4, [pc, #16]	@ (800b884 <ceil+0xf4>)
 800b874:	e7aa      	b.n	800b7cc <ceil+0x3c>
 800b876:	bf00      	nop
 800b878:	8800759c 	.word	0x8800759c
 800b87c:	7e37e43c 	.word	0x7e37e43c
 800b880:	000fffff 	.word	0x000fffff
 800b884:	3ff00000 	.word	0x3ff00000

0800b888 <floor>:
 800b888:	ec51 0b10 	vmov	r0, r1, d0
 800b88c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b894:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b898:	460c      	mov	r4, r1
 800b89a:	4605      	mov	r5, r0
 800b89c:	4680      	mov	r8, r0
 800b89e:	2e13      	cmp	r6, #19
 800b8a0:	dc35      	bgt.n	800b90e <floor+0x86>
 800b8a2:	2e00      	cmp	r6, #0
 800b8a4:	da17      	bge.n	800b8d6 <floor+0x4e>
 800b8a6:	a334      	add	r3, pc, #208	@ (adr r3, 800b978 <floor+0xf0>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	f7f4 fcf2 	bl	8000294 <__adddf3>
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	f7f5 f934 	bl	8000b20 <__aeabi_dcmpgt>
 800b8b8:	b150      	cbz	r0, 800b8d0 <floor+0x48>
 800b8ba:	2c00      	cmp	r4, #0
 800b8bc:	da56      	bge.n	800b96c <floor+0xe4>
 800b8be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b8c2:	432c      	orrs	r4, r5
 800b8c4:	2500      	movs	r5, #0
 800b8c6:	42ac      	cmp	r4, r5
 800b8c8:	4c2d      	ldr	r4, [pc, #180]	@ (800b980 <floor+0xf8>)
 800b8ca:	bf08      	it	eq
 800b8cc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	e024      	b.n	800b920 <floor+0x98>
 800b8d6:	4f2b      	ldr	r7, [pc, #172]	@ (800b984 <floor+0xfc>)
 800b8d8:	4137      	asrs	r7, r6
 800b8da:	ea01 0307 	and.w	r3, r1, r7
 800b8de:	4303      	orrs	r3, r0
 800b8e0:	d01e      	beq.n	800b920 <floor+0x98>
 800b8e2:	a325      	add	r3, pc, #148	@ (adr r3, 800b978 <floor+0xf0>)
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	f7f4 fcd4 	bl	8000294 <__adddf3>
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f7f5 f916 	bl	8000b20 <__aeabi_dcmpgt>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d0eb      	beq.n	800b8d0 <floor+0x48>
 800b8f8:	2c00      	cmp	r4, #0
 800b8fa:	f04f 0500 	mov.w	r5, #0
 800b8fe:	bfbe      	ittt	lt
 800b900:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b904:	4133      	asrlt	r3, r6
 800b906:	18e4      	addlt	r4, r4, r3
 800b908:	ea24 0407 	bic.w	r4, r4, r7
 800b90c:	e7e0      	b.n	800b8d0 <floor+0x48>
 800b90e:	2e33      	cmp	r6, #51	@ 0x33
 800b910:	dd0a      	ble.n	800b928 <floor+0xa0>
 800b912:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b916:	d103      	bne.n	800b920 <floor+0x98>
 800b918:	4602      	mov	r2, r0
 800b91a:	460b      	mov	r3, r1
 800b91c:	f7f4 fcba 	bl	8000294 <__adddf3>
 800b920:	ec41 0b10 	vmov	d0, r0, r1
 800b924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b928:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b92c:	f04f 37ff 	mov.w	r7, #4294967295
 800b930:	40df      	lsrs	r7, r3
 800b932:	4207      	tst	r7, r0
 800b934:	d0f4      	beq.n	800b920 <floor+0x98>
 800b936:	a310      	add	r3, pc, #64	@ (adr r3, 800b978 <floor+0xf0>)
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	f7f4 fcaa 	bl	8000294 <__adddf3>
 800b940:	2200      	movs	r2, #0
 800b942:	2300      	movs	r3, #0
 800b944:	f7f5 f8ec 	bl	8000b20 <__aeabi_dcmpgt>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d0c1      	beq.n	800b8d0 <floor+0x48>
 800b94c:	2c00      	cmp	r4, #0
 800b94e:	da0a      	bge.n	800b966 <floor+0xde>
 800b950:	2e14      	cmp	r6, #20
 800b952:	d101      	bne.n	800b958 <floor+0xd0>
 800b954:	3401      	adds	r4, #1
 800b956:	e006      	b.n	800b966 <floor+0xde>
 800b958:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b95c:	2301      	movs	r3, #1
 800b95e:	40b3      	lsls	r3, r6
 800b960:	441d      	add	r5, r3
 800b962:	4545      	cmp	r5, r8
 800b964:	d3f6      	bcc.n	800b954 <floor+0xcc>
 800b966:	ea25 0507 	bic.w	r5, r5, r7
 800b96a:	e7b1      	b.n	800b8d0 <floor+0x48>
 800b96c:	2500      	movs	r5, #0
 800b96e:	462c      	mov	r4, r5
 800b970:	e7ae      	b.n	800b8d0 <floor+0x48>
 800b972:	bf00      	nop
 800b974:	f3af 8000 	nop.w
 800b978:	8800759c 	.word	0x8800759c
 800b97c:	7e37e43c 	.word	0x7e37e43c
 800b980:	bff00000 	.word	0xbff00000
 800b984:	000fffff 	.word	0x000fffff

0800b988 <round>:
 800b988:	ec51 0b10 	vmov	r0, r1, d0
 800b98c:	b570      	push	{r4, r5, r6, lr}
 800b98e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800b992:	460b      	mov	r3, r1
 800b994:	4605      	mov	r5, r0
 800b996:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800b99a:	2a13      	cmp	r2, #19
 800b99c:	dc1b      	bgt.n	800b9d6 <round+0x4e>
 800b99e:	2a00      	cmp	r2, #0
 800b9a0:	da0b      	bge.n	800b9ba <round+0x32>
 800b9a2:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800b9a6:	3201      	adds	r2, #1
 800b9a8:	bf04      	itt	eq
 800b9aa:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800b9ae:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	e015      	b.n	800b9e6 <round+0x5e>
 800b9ba:	4c15      	ldr	r4, [pc, #84]	@ (800ba10 <round+0x88>)
 800b9bc:	4114      	asrs	r4, r2
 800b9be:	ea04 0601 	and.w	r6, r4, r1
 800b9c2:	4306      	orrs	r6, r0
 800b9c4:	d00f      	beq.n	800b9e6 <round+0x5e>
 800b9c6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800b9ca:	fa41 f202 	asr.w	r2, r1, r2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	ea23 0304 	bic.w	r3, r3, r4
 800b9d4:	e7ed      	b.n	800b9b2 <round+0x2a>
 800b9d6:	2a33      	cmp	r2, #51	@ 0x33
 800b9d8:	dd08      	ble.n	800b9ec <round+0x64>
 800b9da:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800b9de:	d102      	bne.n	800b9e6 <round+0x5e>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	f7f4 fc57 	bl	8000294 <__adddf3>
 800b9e6:	ec41 0b10 	vmov	d0, r0, r1
 800b9ea:	bd70      	pop	{r4, r5, r6, pc}
 800b9ec:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800b9f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b9f4:	40f4      	lsrs	r4, r6
 800b9f6:	4204      	tst	r4, r0
 800b9f8:	d0f5      	beq.n	800b9e6 <round+0x5e>
 800b9fa:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800b9fe:	2201      	movs	r2, #1
 800ba00:	408a      	lsls	r2, r1
 800ba02:	1952      	adds	r2, r2, r5
 800ba04:	bf28      	it	cs
 800ba06:	3301      	addcs	r3, #1
 800ba08:	ea22 0204 	bic.w	r2, r2, r4
 800ba0c:	e7d2      	b.n	800b9b4 <round+0x2c>
 800ba0e:	bf00      	nop
 800ba10:	000fffff 	.word	0x000fffff

0800ba14 <_init>:
 800ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba16:	bf00      	nop
 800ba18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba1a:	bc08      	pop	{r3}
 800ba1c:	469e      	mov	lr, r3
 800ba1e:	4770      	bx	lr

0800ba20 <_fini>:
 800ba20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba22:	bf00      	nop
 800ba24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba26:	bc08      	pop	{r3}
 800ba28:	469e      	mov	lr, r3
 800ba2a:	4770      	bx	lr
